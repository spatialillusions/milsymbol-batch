var milsymbolBatch = (function () {
	'use strict';

	/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/* vim: set ts=2: */
	/*exported XLSX */
	/*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */
	var current_ansi = 1252;

	var VALID_ANSI = [ 874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 10000 ];
	/* ECMA-376 Part I 18.4.1 charset to codepage mapping */
	var CS2CP = ({
		/*::[*/0/*::]*/:    1252, /* ANSI */
		/*::[*/1/*::]*/:   65001, /* DEFAULT */
		/*::[*/2/*::]*/:   65001, /* SYMBOL */
		/*::[*/77/*::]*/:  10000, /* MAC */
		/*::[*/128/*::]*/:   932, /* SHIFTJIS */
		/*::[*/129/*::]*/:   949, /* HANGUL */
		/*::[*/130/*::]*/:  1361, /* JOHAB */
		/*::[*/134/*::]*/:   936, /* GB2312 */
		/*::[*/136/*::]*/:   950, /* CHINESEBIG5 */
		/*::[*/161/*::]*/:  1253, /* GREEK */
		/*::[*/162/*::]*/:  1254, /* TURKISH */
		/*::[*/163/*::]*/:  1258, /* VIETNAMESE */
		/*::[*/177/*::]*/:  1255, /* HEBREW */
		/*::[*/178/*::]*/:  1256, /* ARABIC */
		/*::[*/186/*::]*/:  1257, /* BALTIC */
		/*::[*/204/*::]*/:  1251, /* RUSSIAN */
		/*::[*/222/*::]*/:   874, /* THAI */
		/*::[*/238/*::]*/:  1250, /* EASTEUROPE */
		/*::[*/255/*::]*/:  1252, /* OEM */
		/*::[*/69/*::]*/:   6969  /* MISC */
	}/*:any*/);

	var set_ansi = function(cp/*:number*/) { if(VALID_ANSI.indexOf(cp) == -1) return; current_ansi = CS2CP[0] = cp; };
	function reset_ansi() { set_ansi(1252); }

	var set_cp = function(cp/*:number*/) { set_ansi(cp); };
	function reset_cp() { set_cp(1200); reset_ansi(); }

	function char_codes(data/*:string*/)/*:Array<number>*/ { var o/*:Array<number>*/ = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }

	function utf16leread(data/*:string*/)/*:string*/ {
		var o/*:Array<string>*/ = [];
		for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i) + (data.charCodeAt(2*i+1)<<8));
		return o.join("");
	}
	function utf16beread(data/*:string*/)/*:string*/ {
		var o/*:Array<string>*/ = [];
		for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i+1) + (data.charCodeAt(2*i)<<8));
		return o.join("");
	}

	var debom = function(data/*:string*/)/*:string*/ {
		var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
		if(c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
		if(c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
		if(c1 == 0xFEFF) return data.slice(1);
		return data;
	};

	var _getchar = function _gc1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };
	var _getansi = function _ga1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };

	var $cptable;
	var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	function Base64_encode(input) {
	  var o = "";
	  var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	  for (var i = 0; i < input.length; ) {
	    c1 = input.charCodeAt(i++);
	    e1 = c1 >> 2;
	    c2 = input.charCodeAt(i++);
	    e2 = (c1 & 3) << 4 | c2 >> 4;
	    c3 = input.charCodeAt(i++);
	    e3 = (c2 & 15) << 2 | c3 >> 6;
	    e4 = c3 & 63;
	    if (isNaN(c2)) {
	      e3 = e4 = 64;
	    } else if (isNaN(c3)) {
	      e4 = 64;
	    }
	    o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
	  }
	  return o;
	}
	function Base64_decode(input) {
	  var o = "";
	  var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	  input = input.replace(/[^\w\+\/\=]/g, "");
	  for (var i = 0; i < input.length; ) {
	    e1 = Base64_map.indexOf(input.charAt(i++));
	    e2 = Base64_map.indexOf(input.charAt(i++));
	    c1 = e1 << 2 | e2 >> 4;
	    o += String.fromCharCode(c1);
	    e3 = Base64_map.indexOf(input.charAt(i++));
	    c2 = (e2 & 15) << 4 | e3 >> 2;
	    if (e3 !== 64) {
	      o += String.fromCharCode(c2);
	    }
	    e4 = Base64_map.indexOf(input.charAt(i++));
	    c3 = (e3 & 3) << 6 | e4;
	    if (e4 !== 64) {
	      o += String.fromCharCode(c3);
	    }
	  }
	  return o;
	}
	var has_buf = /*#__PURE__*/(function() { return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node; })();

	var Buffer_from = /*#__PURE__*/(function() {
		if(typeof Buffer !== 'undefined') {
			var nbfs = !Buffer.from;
			if(!nbfs) try { Buffer.from("foo", "utf8"); } catch(e) { nbfs = true; }
			return nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);
		}
		return function() {};
	})();


	function new_raw_buf(len/*:number*/) {
		/* jshint -W056 */
		if(has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
		return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
		/* jshint +W056 */
	}

	function new_unsafe_buf(len/*:number*/) {
		/* jshint -W056 */
		if(has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
		return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
		/* jshint +W056 */
	}

	var s2a = function s2a(s/*:string*/)/*:any*/ {
		if(has_buf) return Buffer_from(s, "binary");
		return s.split("").map(function(x/*:string*/)/*:number*/{ return x.charCodeAt(0) & 0xff; });
	};

	function a2s(data/*:any*/)/*:string*/ {
		if(Array.isArray(data)) return data.map(function(c) { return String.fromCharCode(c); }).join("");
		var o/*:Array<string>*/ = []; for(var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]); return o.join("");
	}

	function ab2a(data/*:ArrayBuffer|Uint8Array*/)/*:Array<number>*/ {
		if(typeof ArrayBuffer == 'undefined') throw new Error("Unsupported");
		if(data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
		/*:: if(data instanceof ArrayBuffer) throw new Error("unreachable"); */
		var o = new Array(data.length);
		for(var i = 0; i < data.length; ++i) o[i] = data[i];
		return o;
	}

	var bconcat = has_buf ? function(bufs) { return Buffer.concat(bufs.map(function(buf) { return Buffer.isBuffer(buf) ? buf : Buffer_from(buf); })); } : function(bufs) {
		if(typeof Uint8Array !== "undefined") {
			var i = 0, maxlen = 0;
			for(i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;
			var o = new Uint8Array(maxlen);
			var len = 0;
			for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {
				len = bufs[i].length;
				if(bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
				else if(typeof bufs[i] == "string") { throw "wtf"; }
				else o.set(new Uint8Array(bufs[i]), maxlen);
			}
			return o;
		}
		return [].concat.apply([], bufs.map(function(buf) { return Array.isArray(buf) ? buf : [].slice.call(buf); }));
	};

	function utf8decode(content/*:string*/) {
		var out = [], widx = 0, L = content.length + 250;
		var o = new_raw_buf(content.length + 255);
		for(var ridx = 0; ridx < content.length; ++ridx) {
			var c = content.charCodeAt(ridx);
			if(c < 0x80) o[widx++] = c;
			else if(c < 0x800) {
				o[widx++] = (192|((c>>6)&31));
				o[widx++] = (128|(c&63));
			} else if(c >= 0xD800 && c < 0xE000) {
				c = (c&1023)+64;
				var d = content.charCodeAt(++ridx)&1023;
				o[widx++] = (240|((c>>8)&7));
				o[widx++] = (128|((c>>2)&63));
				o[widx++] = (128|((d>>6)&15)|((c&3)<<4));
				o[widx++] = (128|(d&63));
			} else {
				o[widx++] = (224|((c>>12)&15));
				o[widx++] = (128|((c>>6)&63));
				o[widx++] = (128|(c&63));
			}
			if(widx > L) {
				out.push(o.slice(0, widx));
				widx = 0;
				o = new_raw_buf(65535);
				L = 65530;
			}
		}
		out.push(o.slice(0, widx));
		return bconcat(out);
	}

	var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
	/*::
	declare type Block = any;
	declare type BufArray = {
		newblk(sz:number):Block;
		next(sz:number):Block;
		end():any;
		push(buf:Block):void;
	};

	type RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};

	type EvertType = {[string]:string};
	type EvertNumType = {[string]:number};
	type EvertArrType = {[string]:Array<string>};

	type StringConv = {(string):string};

	*/
	/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/*jshint -W041 */
	function _strrev(x/*:string*/)/*:string*/ { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
	function pad0(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
	function rpad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
	function pad0r1(v/*:any*/,d/*:number*/)/*:string*/{var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad0r2(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	var p2_32 = /*#__PURE__*/Math.pow(2,32);
	function pad0r(v/*:any*/,d/*:number*/)/*:string*/{if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
	/* yes, in 2022 this is still faster than string compare */
	function SSF_isgeneral(s/*:string*/, i/*:?number*/)/*:boolean*/ { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
	var days/*:Array<Array<string> >*/ = [
		['Sun', 'Sunday'],
		['Mon', 'Monday'],
		['Tue', 'Tuesday'],
		['Wed', 'Wednesday'],
		['Thu', 'Thursday'],
		['Fri', 'Friday'],
		['Sat', 'Saturday']
	];
	var months/*:Array<Array<string> >*/ = [
		['J', 'Jan', 'January'],
		['F', 'Feb', 'February'],
		['M', 'Mar', 'March'],
		['A', 'Apr', 'April'],
		['M', 'May', 'May'],
		['J', 'Jun', 'June'],
		['J', 'Jul', 'July'],
		['A', 'Aug', 'August'],
		['S', 'Sep', 'September'],
		['O', 'Oct', 'October'],
		['N', 'Nov', 'November'],
		['D', 'Dec', 'December']
	];
	function SSF_init_table(t/*:any*/) {
		if(!t) t = {};
		t[0]=  'General';
		t[1]=  '0';
		t[2]=  '0.00';
		t[3]=  '#,##0';
		t[4]=  '#,##0.00';
		t[9]=  '0%';
		t[10]= '0.00%';
		t[11]= '0.00E+00';
		t[12]= '# ?/?';
		t[13]= '# ??/??';
		t[14]= 'm/d/yy';
		t[15]= 'd-mmm-yy';
		t[16]= 'd-mmm';
		t[17]= 'mmm-yy';
		t[18]= 'h:mm AM/PM';
		t[19]= 'h:mm:ss AM/PM';
		t[20]= 'h:mm';
		t[21]= 'h:mm:ss';
		t[22]= 'm/d/yy h:mm';
		t[37]= '#,##0 ;(#,##0)';
		t[38]= '#,##0 ;[Red](#,##0)';
		t[39]= '#,##0.00;(#,##0.00)';
		t[40]= '#,##0.00;[Red](#,##0.00)';
		t[45]= 'mm:ss';
		t[46]= '[h]:mm:ss';
		t[47]= 'mmss.0';
		t[48]= '##0.0E+0';
		t[49]= '@';
		t[56]= '"上午/下午 "hh"時"mm"分"ss"秒 "';
		return t;
	}
	/* repeated to satiate webpack */
	var table_fmt = {
		0:  'General',
		1:  '0',
		2:  '0.00',
		3:  '#,##0',
		4:  '#,##0.00',
		9:  '0%',
		10: '0.00%',
		11: '0.00E+00',
		12: '# ?/?',
		13: '# ??/??',
		14: 'm/d/yy',
		15: 'd-mmm-yy',
		16: 'd-mmm',
		17: 'mmm-yy',
		18: 'h:mm AM/PM',
		19: 'h:mm:ss AM/PM',
		20: 'h:mm',
		21: 'h:mm:ss',
		22: 'm/d/yy h:mm',
		37: '#,##0 ;(#,##0)',
		38: '#,##0 ;[Red](#,##0)',
		39: '#,##0.00;(#,##0.00)',
		40: '#,##0.00;[Red](#,##0.00)',
		45: 'mm:ss',
		46: '[h]:mm:ss',
		47: 'mmss.0',
		48: '##0.0E+0',
		49: '@',
		56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
	};

	/* Defaults determined by systematically testing in Excel 2019 */

	/* These formats appear to default to other formats in the table */
	var SSF_default_map = {
		5:  37, 6:  38, 7:  39, 8:  40,         //  5 -> 37 ...  8 -> 40

		23:  0, 24:  0, 25:  0, 26:  0,         // 23 ->  0 ... 26 ->  0

		27: 14, 28: 14, 29: 14, 30: 14, 31: 14, // 27 -> 14 ... 31 -> 14

		50: 14, 51: 14, 52: 14, 53: 14, 54: 14, // 50 -> 14 ... 58 -> 14
		55: 14, 56: 14, 57: 14, 58: 14,
		59:  1, 60:  2, 61:  3, 62:  4,         // 59 ->  1 ... 62 ->  4

		67:  9, 68: 10,                         // 67 ->  9 ... 68 -> 10
		69: 12, 70: 13, 71: 14,                 // 69 -> 12 ... 71 -> 14
		72: 14, 73: 15, 74: 16, 75: 17,         // 72 -> 14 ... 75 -> 17
		76: 20, 77: 21, 78: 22,                 // 76 -> 20 ... 78 -> 22
		79: 45, 80: 46, 81: 47,                 // 79 -> 45 ... 81 -> 47
		82: 0                                   // 82 ->  0 ... 65536 -> 0 (omitted)
	};


	/* These formats technically refer to Accounting formats with no equivalent */
	var SSF_default_str = {
		//  5 -- Currency,   0 decimal, black negative
		5:  '"$"#,##0_);\\("$"#,##0\\)',
		63: '"$"#,##0_);\\("$"#,##0\\)',

		//  6 -- Currency,   0 decimal, red   negative
		6:  '"$"#,##0_);[Red]\\("$"#,##0\\)',
		64: '"$"#,##0_);[Red]\\("$"#,##0\\)',

		//  7 -- Currency,   2 decimal, black negative
		7:  '"$"#,##0.00_);\\("$"#,##0.00\\)',
		65: '"$"#,##0.00_);\\("$"#,##0.00\\)',

		//  8 -- Currency,   2 decimal, red   negative
		8:  '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
		66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',

		// 41 -- Accounting, 0 decimal, No Symbol
		41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',

		// 42 -- Accounting, 0 decimal, $  Symbol
		42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',

		// 43 -- Accounting, 2 decimal, No Symbol
		43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',

		// 44 -- Accounting, 2 decimal, $  Symbol
		44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
	};

	function SSF_frac(x/*:number*/, D/*:number*/, mixed/*:?boolean*/)/*:Array<number>*/ {
		var sgn = x < 0 ? -1 : 1;
		var B = x * sgn;
		var P_2 = 0, P_1 = 1, P = 0;
		var Q_2 = 1, Q_1 = 0, Q = 0;
		var A = Math.floor(B);
		while(Q_1 < D) {
			A = Math.floor(B);
			P = A * P_1 + P_2;
			Q = A * Q_1 + Q_2;
			if((B - A) < 0.00000005) break;
			B = 1 / (B - A);
			P_2 = P_1; P_1 = P;
			Q_2 = Q_1; Q_1 = Q;
		}
		if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
		if(!mixed) return [0, sgn * P, Q];
		var q = Math.floor(sgn * P/Q);
		return [q, sgn*P - q*Q, Q];
	}
	function SSF_parse_date_code(v/*:number*/,opts/*:?any*/,b2/*:?boolean*/) {
		if(v > 2958465 || v < 0) return null;
		var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
		var dout=[];
		var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
		if(Math.abs(out.u) < 1e-6) out.u = 0;
		if(opts && opts.date1904) date += 1462;
		if(out.u > 0.9999) {
			out.u = 0;
			if(++time == 86400) { out.T = time = 0; ++date; ++out.D; }
		}
		if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
		else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
		else {
			if(date > 60) --date;
			/* 1 = Jan 1 1900 in Gregorian */
			var d = new Date(1900, 0, 1);
			d.setDate(d.getDate() + date - 1);
			dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
			dow = d.getDay();
			if(date < 60) dow = (dow + 6) % 7;
			if(b2) dow = SSF_fix_hijri(d, dout);
		}
		out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
		out.S = time % 60; time = Math.floor(time / 60);
		out.M = time % 60; time = Math.floor(time / 60);
		out.H = time;
		out.q = dow;
		return out;
	}
	var SSFbasedate = /*#__PURE__*/new Date(1899, 11, 31, 0, 0, 0);
	var SSFdnthresh = /*#__PURE__*/SSFbasedate.getTime();
	var SSFbase1904 = /*#__PURE__*/new Date(1900, 2, 1, 0, 0, 0);
	function datenum_local(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
		var epoch = /*#__PURE__*/v.getTime();
		if(date1904) epoch -= 1461*24*60*60*1000;
		else if(v >= SSFbase1904) epoch += 24*60*60*1000;
		return (epoch - (SSFdnthresh + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/SSFbasedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
	}
	/* ECMA-376 18.8.30 numFmt*/
	/* Note: `toPrecision` uses standard form when prec > E and E >= -6 */
	/* exponent >= -9 and <= 9 */
	function SSF_strip_decimal(o/*:string*/)/*:string*/ {
		return (o.indexOf(".") == -1) ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
	}

	/* General Exponential always shows 2 digits exp and trims the mantissa */
	function SSF_normalize_exp(o/*:string*/)/*:string*/ {
		if(o.indexOf("E") == -1) return o;
		return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/,"$1E").replace(/(E[+-])(\d)$/,"$10$2");
	}

	/* exponent >= -9 and <= 9 */
	function SSF_small_exp(v/*:number*/)/*:string*/ {
		var w = (v<0?12:11);
		var o = SSF_strip_decimal(v.toFixed(12)); if(o.length <= w) return o;
		o = v.toPrecision(10); if(o.length <= w) return o;
		return v.toExponential(5);
	}

	/* exponent >= 11 or <= -10 likely exponential */
	function SSF_large_exp(v/*:number*/)/*:string*/ {
		var o = SSF_strip_decimal(v.toFixed(11));
		return (o.length > (v<0?12:11) || o === "0" || o === "-0") ? v.toPrecision(6) : o;
	}

	function SSF_general_num(v/*:number*/)/*:string*/ {
		var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;

		if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
		else if(Math.abs(V) <= 9) o = SSF_small_exp(v);
		else if(V === 10) o = v.toFixed(10).substr(0,12);
		else o = SSF_large_exp(v);

		return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
	}


	/*
		"General" rules:
		- text is passed through ("@")
		- booleans are rendered as TRUE/FALSE
		- "up to 11 characters" displayed for numbers
		- Default date format (code 14) used for Dates

		The longest 32-bit integer text is "-2147483648", exactly 11 chars
		TODO: technically the display depends on the width of the cell
	*/
	function SSF_general(v/*:any*/, opts/*:any*/) {
		switch(typeof v) {
			case 'string': return v;
			case 'boolean': return v ? "TRUE" : "FALSE";
			case 'number': return (v|0) === v ? v.toString(10) : SSF_general_num(v);
			case 'undefined': return "";
			case 'object':
				if(v == null) return "";
				if(v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
		}
		throw new Error("unsupported value in General format: " + v);
	}

	function SSF_fix_hijri(date/*:Date*/, o/*:[number, number, number]*/) {
	  /* TODO: properly adjust y/m/d and  */
	  o[0] -= 581;
	  var dow = date.getDay();
	  if(date < 60) dow = (dow + 6) % 7;
	  return dow;
	}
	//var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");
	function SSF_write_date(type/*:number*/, fmt/*:string*/, val, ss0/*:?number*/)/*:string*/ {
		var o="", ss=0, tt=0, y = val.y, out, outl = 0;
		switch(type) {
			case 98: /* 'b' buddhist year */
				y = val.y + 543;
				/* falls through */
			case 121: /* 'y' year */
			switch(fmt.length) {
				case 1: case 2: out = y % 100; outl = 2; break;
				default: out = y % 10000; outl = 4; break;
			} break;
			case 109: /* 'm' month */
			switch(fmt.length) {
				case 1: case 2: out = val.m; outl = fmt.length; break;
				case 3: return months[val.m-1][1];
				case 5: return months[val.m-1][0];
				default: return months[val.m-1][2];
			} break;
			case 100: /* 'd' day */
			switch(fmt.length) {
				case 1: case 2: out = val.d; outl = fmt.length; break;
				case 3: return days[val.q][0];
				default: return days[val.q][1];
			} break;
			case 104: /* 'h' 12-hour */
			switch(fmt.length) {
				case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 72: /* 'H' 24-hour */
			switch(fmt.length) {
				case 1: case 2: out = val.H; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 77: /* 'M' minutes */
			switch(fmt.length) {
				case 1: case 2: out = val.M; outl = fmt.length; break;
				default: throw 'bad minute format: ' + fmt;
			} break;
			case 115: /* 's' seconds */
				if(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
				if(val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
				/*::if(!ss0) ss0 = 0; */
				if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
				else tt = ss0 === 1 ? 10 : 1;
				ss = Math.round((tt)*(val.S + val.u));
				if(ss >= 60*tt) ss = 0;
				if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
				o = pad0(ss,2 + ss0);
				if(fmt === 'ss') return o.substr(0,2);
				return "." + o.substr(2,fmt.length-1);
			case 90: /* 'Z' absolute time */
			switch(fmt) {
				case '[h]': case '[hh]': out = val.D*24+val.H; break;
				case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
				case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
				default: throw 'bad abstime format: ' + fmt;
			} outl = fmt.length === 3 ? 1 : 2; break;
			case 101: /* 'e' era */
				out = y; outl = 1; break;
		}
		var outstr = outl > 0 ? pad0(out, outl) : "";
		return outstr;
	}


	/*jshint -W086 */
	/*jshint +W086 */
	function commaify(s/*:string*/)/*:string*/ {
		var w = 3;
		if(s.length <= w) return s;
		var j = (s.length % w), o = s.substr(0,j);
		for(; j!=s.length; j+=w) o+=(o.length > 0 ? "," : "") + s.substr(j,w);
		return o;
	}
	var pct1 = /%/g;
	function write_num_pct(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}

	function write_num_cm(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}

	function write_num_exp(fmt/*:string*/, val/*:number*/)/*:string*/{
		var o/*:string*/;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(o.indexOf("e") === -1) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				while(o.substr(0,2) === "0.") {
					o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
					o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
				}
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
	function write_num_f1(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
		var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
		var myn = (rr - base*den), myd = den;
		return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
	}
	function write_num_f2(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
		return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
	}
	var dec1 = /^#*0*\.([0#]+)/;
	var closeparen = /\).*[0#]/;
	var phone = /\(###\) ###\\?-####/;
	function hashq(str/*:string*/)/*:string*/ {
		var o = "", cc;
		for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
			case 35: break;
			case 63: o+= " "; break;
			case 48: o+= "0"; break;
			default: o+= String.fromCharCode(cc);
		}
		return o;
	}
	function rnd(val/*:number*/, d/*:number*/)/*:string*/ { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
	function dec(val/*:number*/, d/*:number*/)/*:number*/ {
		var _frac = val - Math.floor(val), dd = Math.pow(10,d);
		if (d < ('' + Math.round(_frac * dd)).length) return 0;
		return Math.round(_frac * dd);
	}
	function carry(val/*:number*/, d/*:number*/)/*:number*/ {
		if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
			return 1;
		}
		return 0;
	}
	function flr(val/*:number*/)/*:string*/ {
		if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0));
		return ""+Math.floor(val);
	}
	function write_num_flt(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_flt('n', ffmt, val);
			return '(' + write_num_flt('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = pad0r(val,0); if(o === "0") o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
			o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1])).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", hashq(/*::(*/r/*::||[""])*/[1]).length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_flt(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
			ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = pad0r(val, 0);
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			ri = dec(val, r[1].length);
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
		}
		switch(fmt) {
			case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
			case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
			case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	function write_num_cm2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}
	function write_num_pct2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}
	function write_num_exp2(fmt/*:string*/, val/*:number*/)/*:string*/{
		var o/*:string*/;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp2(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(!o.match(/[Ee]/)) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	function write_num_int(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_int('n', ffmt, val);
			return '(' + write_num_int('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = (""+val); if(val === 0) o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
			/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
			o = (""+val).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1]));
			o = o.replace(/\.(\d*)$/,function($$, $1) {
			/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
				return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_int(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
			ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = "" + val;
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
		}
		switch(fmt) {
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
			default:
				if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	function write_num(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
		return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
	}
	function SSF_split_fmt(fmt/*:string*/)/*:Array<string>*/ {
		var out/*:Array<string>*/ = [];
		var in_str = false/*, cc*/;
		for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
			case 34: /* '"' */
				in_str = !in_str; break;
			case 95: case 42: case 92: /* '_' '*' '\\' */
				++i; break;
			case 59: /* ';' */
				out[out.length] = fmt.substr(j,i-j);
				j = i+1;
		}
		out[out.length] = fmt.substr(j);
		if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
		return out;
	}

	var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
	function fmt_is_date(fmt/*:string*/)/*:boolean*/ {
		var i = 0, /*cc = 0,*/ c = "", o = "";
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': if(SSF_isgeneral(fmt, i)) i+= 6; i++; break;
				case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;
				case '\\': i+=2; break;
				case '_': i+=2; break;
				case '@': ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
				case 'A': case 'a': case '上':
					if(fmt.substr(i, 3).toUpperCase() === "A/P") return true;
					if(fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
					if(fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
					++i; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.match(SSF_abstime)) return true;
					break;
				case '.':
					/* falls through */
				case '0': case '#':
					while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
					break;
				case '?': while(fmt.charAt(++i) === c){/* empty */} break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
				case '(': case ')': ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
				case ' ': ++i; break;
				default: ++i; break;
			}
		}
		return false;
	}

	function eval_fmt(fmt/*:string*/, v/*:any*/, opts/*:any*/, flen/*:number*/) {
		var out = [], o = "", i = 0, c = "", lst='t', dt, j, cc;
		var hr='H';
		/* Tokenize */
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': /* General */
					if(!SSF_isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
					out[out.length] = {t:'G', v:'General'}; i+=7; break;
				case '"': /* Literal text */
					for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
					out[out.length] = {t:'t', v:o}; ++i; break;
				case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
					out[out.length] = {t:t, v:w}; ++i; break;
				case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
				case '@': /* Text Placeholder */
					out[out.length] = {t:'T', v:v}; ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
						if(dt==null) { dt=SSF_parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
						out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
					}
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					c = c.toLowerCase();
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
					if(v < 0) return "";
					if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
					o = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
					if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
					if(c === 'h') c = hr;
					out[out.length] = {t:c, v:o}; lst = c; break;
				case 'A': case 'a': case '上':
					var q={t:c, v:c};
					if(dt==null) dt=SSF_parse_date_code(v, opts);
					if(fmt.substr(i, 3).toUpperCase() === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
					else if(fmt.substr(i,5).toUpperCase() === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
					else if(fmt.substr(i,5).toUpperCase() === "上午/下午") { if(dt!=null) q.v = dt.H >= 12 ? "下午" : "上午"; q.t = 'T'; i+=5; hr='h'; }
					else { q.t = "t"; ++i; }
					if(dt==null && q.t === 'T') return "";
					out[out.length] = q; lst = c; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
					if(o.match(SSF_abstime)) {
						if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
						out[out.length] = {t:'Z', v:o.toLowerCase()};
						lst = o.charAt(1);
					} else if(o.indexOf("$") > -1) {
						o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
						if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
					}
					break;
				/* Numbers */
				case '.':
					if(dt != null) {
						o = c; while(++i < fmt.length && (c=fmt.charAt(i)) === "0") o += c;
						out[out.length] = {t:'s', v:o}; break;
					}
					/* falls through */
				case '0': case '#':
					o = c; while(++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) o += c;
					out[out.length] = {t:'n', v:o}; break;
				case '?':
					o = c; while(fmt.charAt(++i) === c) o+=c;
					out[out.length] = {t:c, v:o}; lst = c; break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
				case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
					out[out.length] = {t:'D', v:o}; break;
				case ' ': out[out.length] = {t:c, v:c}; ++i; break;
				case '$': out[out.length] = {t:'t', v:'$'}; ++i; break;
				default:
					if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
					out[out.length] = {t:'t', v:c}; ++i; break;
			}
		}

		/* Scan for date/time parts */
		var bt = 0, ss0 = 0, ssm;
		for(i=out.length-1, lst='t'; i >= 0; --i) {
			switch(out[i].t) {
				case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
				case 's':
					if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
					if(bt < 3) bt = 3;
				/* falls through */
				case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
				case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
				case 'X': /*if(out[i].v === "B2");*/
					break;
				case 'Z':
					if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
					if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
					if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
			}
		}
		/* time rounding depends on presence of minute / second / usec fields */
		switch(bt) {
			case 0: break;
			case 1:
				/*::if(!dt) break;*/
				if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				if(dt.M >=  60) { dt.M = 0; ++dt.H; }
				break;
			case 2:
				/*::if(!dt) break;*/
				if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				break;
		}

		/* replace fields */
		var nstr = "", jj;
		for(i=0; i < out.length; ++i) {
			switch(out[i].t) {
				case 't': case 'T': case ' ': case 'D': break;
				case 'X': out[i].v = ""; out[i].t = ";"; break;
				case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
					/*::if(!dt) throw "unreachable"; */
					out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
					out[i].t = 't'; break;
				case 'n': case '?':
					jj = i+1;
					while(out[jj] != null && (
						(c=out[jj].t) === "?" || c === "D" ||
						((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
						(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
						(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
					)) {
						out[i].v += out[jj].v;
						out[jj] = {v:"", t:";"}; ++jj;
					}
					nstr += out[i].v;
					i = jj-1; break;
				case 'G': out[i].t = 't'; out[i].v = SSF_general(v,opts); break;
			}
		}
		var vv = "", myv, ostr;
		if(nstr.length > 0) {
			if(nstr.charCodeAt(0) == 40) /* '(' */ {
				myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
				ostr = write_num('n', nstr, myv);
			} else {
				myv = (v<0 && flen > 1 ? -v : v);
				ostr = write_num('n', nstr, myv);
				if(myv < 0 && out[0] && out[0].t == 't') {
					ostr = ostr.substr(1);
					out[0].v = "-" + out[0].v;
				}
			}
			jj=ostr.length-1;
			var decpt = out.length;
			for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
			var lasti=out.length;
			if(decpt === out.length && ostr.indexOf("E") === -1) {
				for(i=out.length-1; i>= 0;--i) {
					if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
					if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
					else if(jj < 0) out[i].v = "";
					else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
			}
			else if(decpt !== out.length && ostr.indexOf("E") === -1) {
				jj = ostr.indexOf(".")-1;
				for(i=decpt; i>= 0; --i) {
					if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
					vv = out[i].v.substr(j+1);
					for(; j>=0; --j) {
						if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
				jj = ostr.indexOf(".")+1;
				for(i=decpt; i<out.length; ++i) {
					if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
					vv = out[i].v.substr(0,j);
					for(; j<out[i].v.length; ++j) {
						if(jj<ostr.length) vv += ostr.charAt(jj++);
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
			}
		}
		for(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {
			myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
			out[i].v = write_num(out[i].t, out[i].v, myv);
			out[i].t = 't';
		}
		var retval = "";
		for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
		return retval;
	}

	var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
	function chkcond(v, rr) {
		if(rr == null) return false;
		var thresh = parseFloat(rr[2]);
		switch(rr[1]) {
			case "=":  if(v == thresh) return true; break;
			case ">":  if(v >  thresh) return true; break;
			case "<":  if(v <  thresh) return true; break;
			case "<>": if(v != thresh) return true; break;
			case ">=": if(v >= thresh) return true; break;
			case "<=": if(v <= thresh) return true; break;
		}
		return false;
	}
	function choose_fmt(f/*:string*/, v/*:any*/) {
		var fmt = SSF_split_fmt(f);
		var l = fmt.length, lat = fmt[l-1].indexOf("@");
		if(l<4 && lat>-1) --l;
		if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
		if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
		switch(fmt.length) {
			case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
			case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
			case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
		}
		var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
		if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
		if(fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
			var m1 = fmt[0].match(cfregex2);
			var m2 = fmt[1].match(cfregex2);
			return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
		}
		return [l, ff];
	}
	function SSF_format(fmt/*:string|number*/,v/*:any*/,o/*:?any*/) {
		if(o == null) o = {};
		var sfmt = "";
		switch(typeof fmt) {
			case "string":
				if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
				else sfmt = fmt;
				break;
			case "number":
				if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
				else sfmt = (o.table != null ? (o.table/*:any*/) : table_fmt)[fmt];
				if(sfmt == null) sfmt = (o.table && o.table[SSF_default_map[fmt]]) || table_fmt[SSF_default_map[fmt]];
				if(sfmt == null) sfmt = SSF_default_str[fmt] || "General";
				break;
		}
		if(SSF_isgeneral(sfmt,0)) return SSF_general(v, o);
		if(v instanceof Date) v = datenum_local(v, o.date1904);
		var f = choose_fmt(sfmt, v);
		if(SSF_isgeneral(f[1])) return SSF_general(v, o);
		if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
		else if(v === "" || v == null) return "";
		return eval_fmt(f[1], v, o, f[0]);
	}
	function SSF_load(fmt/*:string*/, idx/*:?number*/)/*:number*/ {
		if(typeof idx != 'number') {
			idx = +idx || -1;
	/*::if(typeof idx != 'number') return 0x188; */
			for(var i = 0; i < 0x0188; ++i) {
	/*::if(typeof idx != 'number') return 0x188; */
				if(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }
				if(table_fmt[i] == fmt) { idx = i; break; }
			}
	/*::if(typeof idx != 'number') return 0x188; */
			if(idx < 0) idx = 0x187;
		}
	/*::if(typeof idx != 'number') return 0x188; */
		table_fmt[idx] = fmt;
		return idx;
	}

	function make_ssf() {
		table_fmt = SSF_init_table();
	}

	var SSFImplicit/*{[number]:string}*/ = ({
		"5": '"$"#,##0_);\\("$"#,##0\\)',
		"6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
		"7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
		"8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
		"23": 'General', "24": 'General', "25": 'General', "26": 'General',
		"27": 'm/d/yy', "28": 'm/d/yy', "29": 'm/d/yy', "30": 'm/d/yy', "31": 'm/d/yy',
		"32": 'h:mm:ss', "33": 'h:mm:ss', "34": 'h:mm:ss', "35": 'h:mm:ss',
		"36": 'm/d/yy',
		"41": '_(* #,##0_);_(* \(#,##0\);_(* "-"_);_(@_)',
		"42": '_("$"* #,##0_);_("$"* \(#,##0\);_("$"* "-"_);_(@_)',
		"43": '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
		"44": '_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)',
		"50": 'm/d/yy', "51": 'm/d/yy', "52": 'm/d/yy', "53": 'm/d/yy', "54": 'm/d/yy',
		"55": 'm/d/yy', "56": 'm/d/yy', "57": 'm/d/yy', "58": 'm/d/yy',
		"59": '0',
		"60": '0.00',
		"61": '#,##0',
		"62": '#,##0.00',
		"63": '"$"#,##0_);\\("$"#,##0\\)',
		"64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
		"65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
		"66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
		"67": '0%',
		"68": '0.00%',
		"69": '# ?/?',
		"70": '# ??/??',
		"71": 'm/d/yy',
		"72": 'm/d/yy',
		"73": 'd-mmm-yy',
		"74": 'd-mmm',
		"75": 'mmm-yy',
		"76": 'h:mm',
		"77": 'h:mm:ss',
		"78": 'm/d/yy h:mm',
		"79": 'mm:ss',
		"80": '[h]:mm:ss',
		"81": 'mmss.0'
	}/*:any*/);

	/* dateNF parse TODO: move to SSF */
	var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
	function dateNF_regex(dateNF/*:string|number*/)/*:RegExp*/ {
		var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
		fmt = fmt.replace(dateNFregex, "(\\d+)");
		return new RegExp("^" + fmt + "$");
	}
	function dateNF_fix(str/*:string*/, dateNF/*:string*/, match/*:Array<string>*/)/*:string*/ {
		var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
		(dateNF.match(dateNFregex)||[]).forEach(function(n, i) {
			var v = parseInt(match[i+1], 10);
			switch(n.toLowerCase().charAt(0)) {
				case 'y': Y = v; break; case 'd': d = v; break;
				case 'h': H = v; break; case 's': S = v; break;
				case 'm': if(H >= 0) M = v; else m = v; break;
			}
		});
		if(S >= 0 && M == -1 && m >= 0) { M = m; m = -1; }
		var datestr = (("" + (Y>=0?Y: new Date().getFullYear())).slice(-4) + "-" + ("00" + (m>=1?m:1)).slice(-2) + "-" + ("00" + (d>=1?d:1)).slice(-2));
		if(datestr.length == 7) datestr = "0" + datestr;
		if(datestr.length == 8) datestr = "20" + datestr;
		var timestr = (("00" + (H>=0?H:0)).slice(-2) + ":" + ("00" + (M>=0?M:0)).slice(-2) + ":" + ("00" + (S>=0?S:0)).slice(-2));
		if(H == -1 && M == -1 && S == -1) return datestr;
		if(Y == -1 && m == -1 && d == -1) return timestr;
		return datestr + "T" + timestr;
	}

	/*::
	declare var ReadShift:any;
	declare var CheckField:any;
	declare var prep_blob:any;
	declare var __readUInt32LE:any;
	declare var __readInt32LE:any;
	declare var __toBuffer:any;
	declare var __utf16le:any;
	declare var bconcat:any;
	declare var s2a:any;
	declare var chr0:any;
	declare var chr1:any;
	declare var has_buf:boolean;
	declare var new_buf:any;
	declare var new_raw_buf:any;
	declare var new_unsafe_buf:any;
	declare var Buffer_from:any;
	*/
	/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/* vim: set ts=2: */
	/*jshint eqnull:true */
	/*exported CFB */
	/*global Uint8Array:false, Uint16Array:false */

	/*::
	type SectorEntry = {
		name?:string;
		nodes?:Array<number>;
		data:RawBytes;
	};
	type SectorList = {
		[k:string|number]:SectorEntry;
		name:?string;
		fat_addrs:Array<number>;
		ssz:number;
	}
	type CFBFiles = {[n:string]:CFBEntry};
	*/
	/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
	/* vim: set ts=2: */
	/*exported CRC32 */
	var CRC32 = /*#__PURE__*/(function() {
	var CRC32 = {};
	CRC32.version = '1.2.0';
	/* see perf/crc32table.js */
	/*global Int32Array */
	function signed_crc_table()/*:any*/ {
		var c = 0, table/*:Array<number>*/ = new Array(256);

		for(var n =0; n != 256; ++n){
			c = n;
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
			table[n] = c;
		}

		return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
	}

	var T0 = signed_crc_table();
	function slice_by_16_tables(T) {
		var c = 0, v = 0, n = 0, table/*:Array<number>*/ = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;

		for(n = 0; n != 256; ++n) table[n] = T[n];
		for(n = 0; n != 256; ++n) {
			v = T[n];
			for(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];
		}
		var out = [];
		for(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
		return out;
	}
	var TT = slice_by_16_tables(T0);
	var T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];
	var T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];
	var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
	function crc32_bstr(bstr/*:string*/, seed/*:number*/)/*:number*/ {
		var C = seed/*:: ? 0 : 0 */ ^ -1;
		for(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];
		return ~C;
	}

	function crc32_buf(B/*:Uint8Array|Array<number>*/, seed/*:number*/)/*:number*/ {
		var C = seed/*:: ? 0 : 0 */ ^ -1, L = B.length - 15, i = 0;
		for(; i < L;) C =
			Tf[B[i++] ^ (C & 255)] ^
			Te[B[i++] ^ ((C >> 8) & 255)] ^
			Td[B[i++] ^ ((C >> 16) & 255)] ^
			Tc[B[i++] ^ (C >>> 24)] ^
			Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^
			T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^
			T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
		L += 15;
		while(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];
		return ~C;
	}

	function crc32_str(str/*:string*/, seed/*:number*/)/*:number*/ {
		var C = seed ^ -1;
		for(var i = 0, L = str.length, c = 0, d = 0; i < L;) {
			c = str.charCodeAt(i++);
			if(c < 0x80) {
				C = (C>>>8) ^ T0[(C^c)&0xFF];
			} else if(c < 0x800) {
				C = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
			} else if(c >= 0xD800 && c < 0xE000) {
				c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
				C = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];
			} else {
				C = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];
				C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
			}
		}
		return ~C;
	}
	CRC32.table = T0;
	CRC32.bstr = crc32_bstr;
	CRC32.buf = crc32_buf;
	CRC32.str = crc32_str;
	return CRC32;
	})();
	/* [MS-CFB] v20171201 */
	var CFB = /*#__PURE__*/(function _CFB(){
	var exports = {};
	exports.version = '1.2.1';
	/* [MS-CFB] 2.6.4 */
	function namecmp(l/*:string*/, r/*:string*/)/*:number*/ {
		var L = l.split("/"), R = r.split("/");
		for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
			if((c = L[i].length - R[i].length)) return c;
			if(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
		}
		return L.length - R.length;
	}
	function dirname(p/*:string*/)/*:string*/ {
		if(p.charAt(p.length - 1) == "/") return (p.slice(0,-1).indexOf("/") === -1) ? p : dirname(p.slice(0, -1));
		var c = p.lastIndexOf("/");
		return (c === -1) ? p : p.slice(0, c+1);
	}

	function filename(p/*:string*/)/*:string*/ {
		if(p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
		var c = p.lastIndexOf("/");
		return (c === -1) ? p : p.slice(c+1);
	}
	/* -------------------------------------------------------------------------- */
	/* DOS Date format:
	   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
	   add 1980 to stored year
	   stored second should be doubled
	*/

	/* write JS date to buf as a DOS date */
	function write_dos_date(buf/*:CFBlob*/, date/*:Date|string*/) {
		if(typeof date === "string") date = new Date(date);
		var hms/*:number*/ = date.getHours();
		hms = hms << 6 | date.getMinutes();
		hms = hms << 5 | (date.getSeconds()>>>1);
		buf.write_shift(2, hms);
		var ymd/*:number*/ = (date.getFullYear() - 1980);
		ymd = ymd << 4 | (date.getMonth()+1);
		ymd = ymd << 5 | date.getDate();
		buf.write_shift(2, ymd);
	}

	/* read four bytes from buf and interpret as a DOS date */
	function parse_dos_date(buf/*:CFBlob*/)/*:Date*/ {
		var hms = buf.read_shift(2) & 0xFFFF;
		var ymd = buf.read_shift(2) & 0xFFFF;
		var val = new Date();
		var d = ymd & 0x1F; ymd >>>= 5;
		var m = ymd & 0x0F; ymd >>>= 4;
		val.setMilliseconds(0);
		val.setFullYear(ymd + 1980);
		val.setMonth(m-1);
		val.setDate(d);
		var S = hms & 0x1F; hms >>>= 5;
		var M = hms & 0x3F; hms >>>= 6;
		val.setHours(hms);
		val.setMinutes(M);
		val.setSeconds(S<<1);
		return val;
	}
	function parse_extra_field(blob/*:CFBlob*/)/*:any*/ {
		prep_blob(blob, 0);
		var o = /*::(*/{}/*:: :any)*/;
		var flags = 0;
		while(blob.l <= blob.length - 4) {
			var type = blob.read_shift(2);
			var sz = blob.read_shift(2), tgt = blob.l + sz;
			var p = {};
			switch(type) {
				/* UNIX-style Timestamps */
				case 0x5455: {
					flags = blob.read_shift(1);
					if(flags & 1) p.mtime = blob.read_shift(4);
					/* for some reason, CD flag corresponds to LFH */
					if(sz > 5) {
						if(flags & 2) p.atime = blob.read_shift(4);
						if(flags & 4) p.ctime = blob.read_shift(4);
					}
					if(p.mtime) p.mt = new Date(p.mtime*1000);
				}
				break;
			}
			blob.l = tgt;
			o[type] = p;
		}
		return o;
	}
	var fs/*:: = require('fs'); */;
	function get_fs() { return fs || (fs = {}); }
	function parse(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
	if(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
	if((file[0] | 0x20) == 0x6d && (file[1]|0x20) == 0x69) return parse_mad(file, options);
	if(file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
	var mver = 3;
	var ssz = 512;
	var nmfs = 0; // number of mini FAT sectors
	var difat_sec_cnt = 0;
	var dir_start = 0;
	var minifat_start = 0;
	var difat_start = 0;

	var fat_addrs/*:Array<number>*/ = []; // locations of FAT sectors

	/* [MS-CFB] 2.2 Compound File Header */
	var blob/*:CFBlob*/ = /*::(*/file.slice(0,512)/*:: :any)*/;
	prep_blob(blob, 0);

	/* major version */
	var mv = check_get_mver(blob);
	mver = mv[0];
	switch(mver) {
		case 3: ssz = 512; break; case 4: ssz = 4096; break;
		case 0: if(mv[1] == 0) return parse_zip(file, options);
		/* falls through */
		default: throw new Error("Major Version: Expected 3 or 4 saw " + mver);
	}

	/* reprocess header */
	if(ssz !== 512) { blob = /*::(*/file.slice(0,ssz)/*:: :any)*/; prep_blob(blob, 28 /* blob.l */); }
	/* Save header for final object */
	var header/*:RawBytes*/ = file.slice(0,ssz);

	check_shifts(blob, mver);

	// Number of Directory Sectors
	var dir_cnt/*:number*/ = blob.read_shift(4, 'i');
	if(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);

	// Number of FAT Sectors
	blob.l += 4;

	// First Directory Sector Location
	dir_start = blob.read_shift(4, 'i');

	// Transaction Signature
	blob.l += 4;

	// Mini Stream Cutoff Size
	blob.chk('00100000', 'Mini Stream Cutoff Size: ');

	// First Mini FAT Sector Location
	minifat_start = blob.read_shift(4, 'i');

	// Number of Mini FAT Sectors
	nmfs = blob.read_shift(4, 'i');

	// First DIFAT sector location
	difat_start = blob.read_shift(4, 'i');

	// Number of DIFAT Sectors
	difat_sec_cnt = blob.read_shift(4, 'i');

	// Grab FAT Sector Locations
	for(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */
		q = blob.read_shift(4, 'i');
		if(q<0) break;
		fat_addrs[j] = q;
	}

	/** Break the file up into sectors */
	var sectors/*:Array<RawBytes>*/ = sectorify(file, ssz);

	sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);

	/** Chains */
	var sector_list/*:SectorList*/ = make_sector_list(sectors, dir_start, fat_addrs, ssz);

	sector_list[dir_start].name = "!Directory";
	if(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
	sector_list[fat_addrs[0]].name = "!FAT";
	sector_list.fat_addrs = fat_addrs;
	sector_list.ssz = ssz;

	/* [MS-CFB] 2.6.1 Compound File Directory Entry */
	var files/*:CFBFiles*/ = {}, Paths/*:Array<string>*/ = [], FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
	read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);

	build_full_paths(FileIndex, FullPaths, Paths);
	Paths.shift();

	var o = {
		FileIndex: FileIndex,
		FullPaths: FullPaths
	};

	// $FlowIgnore
	if(options && options.raw) o.raw = {header: header, sectors: sectors};
	return o;
	} // parse

	/* [MS-CFB] 2.2 Compound File Header -- read up to major version */
	function check_get_mver(blob/*:CFBlob*/)/*:[number, number]*/ {
		if(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];
		// header signature 8
		blob.chk(HEADER_SIGNATURE, 'Header Signature: ');

		// clsid 16
		//blob.chk(HEADER_CLSID, 'CLSID: ');
		blob.l += 16;

		// minor version 2
		var mver/*:number*/ = blob.read_shift(2, 'u');

		return [blob.read_shift(2,'u'), mver];
	}
	function check_shifts(blob/*:CFBlob*/, mver/*:number*/)/*:void*/ {
		var shift = 0x09;

		// Byte Order
		//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
		blob.l += 2;

		// Sector Shift
		switch((shift = blob.read_shift(2))) {
			case 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;
			case 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;
			default: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
		}

		// Mini Sector Shift
		blob.chk('0600', 'Mini Sector Shift: ');

		// Reserved
		blob.chk('000000000000', 'Reserved: ');
	}

	/** Break the file up into sectors */
	function sectorify(file/*:RawBytes*/, ssz/*:number*/)/*:Array<RawBytes>*/ {
		var nsectors = Math.ceil(file.length/ssz)-1;
		var sectors/*:Array<RawBytes>*/ = [];
		for(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);
		sectors[nsectors-1] = file.slice(nsectors*ssz);
		return sectors;
	}

	/* [MS-CFB] 2.6.4 Red-Black Tree */
	function build_full_paths(FI/*:CFBFileIndex*/, FP/*:Array<string>*/, Paths/*:Array<string>*/)/*:void*/ {
		var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
		var dad/*:Array<number>*/ = [], q/*:Array<number>*/ = [];

		for(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }

		for(; j < q.length; ++j) {
			i = q[j];
			L = FI[i].L; R = FI[i].R; C = FI[i].C;
			if(dad[i] === i) {
				if(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];
				if(R !== -1 && dad[R] !== R) dad[i] = dad[R];
			}
			if(C !== -1 /*NOSTREAM*/) dad[C] = i;
			if(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }
			if(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }
		}
		for(i=1; i < pl; ++i) if(dad[i] === i) {
			if(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];
			else if(L !== -1 && dad[L] !== L) dad[i] = dad[L];
		}

		for(i=1; i < pl; ++i) {
			if(FI[i].type === 0 /* unknown */) continue;
			j = i;
			if(j != dad[j]) do {
				j = dad[j];
				FP[i] = FP[j] + "/" + FP[i];
			} while (j !== 0 && -1 !== dad[j] && j != dad[j]);
			dad[i] = -1;
		}

		FP[0] += "/";
		for(i=1; i < pl; ++i) {
			if(FI[i].type !== 2 /* stream */) FP[i] += "/";
		}
	}

	function get_mfat_entry(entry/*:CFBEntry*/, payload/*:RawBytes*/, mini/*:?RawBytes*/)/*:CFBlob*/ {
		var start = entry.start, size = entry.size;
		//return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);
		var o = [];
		var idx = start;
		while(mini && size > 0 && idx >= 0) {
			o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
			size -= MSSZ;
			idx = __readInt32LE(mini, idx * 4);
		}
		if(o.length === 0) return (new_buf(0)/*:any*/);
		return (bconcat(o).slice(0, entry.size)/*:any*/);
	}

	/** Chase down the rest of the DIFAT chain to build a comprehensive list
	    DIFAT chains by storing the next sector number as the last 32 bits */
	function sleuth_fat(idx/*:number*/, cnt/*:number*/, sectors/*:Array<RawBytes>*/, ssz/*:number*/, fat_addrs)/*:void*/ {
		var q/*:number*/ = ENDOFCHAIN;
		if(idx === ENDOFCHAIN) {
			if(cnt !== 0) throw new Error("DIFAT chain shorter than expected");
		} else if(idx !== -1 /*FREESECT*/) {
			var sector = sectors[idx], m = (ssz>>>2)-1;
			if(!sector) return;
			for(var i = 0; i < m; ++i) {
				if((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;
				fat_addrs.push(q);
			}
			sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);
		}
	}

	/** Follow the linked list of sectors for a given starting point */
	function get_sector_list(sectors/*:Array<RawBytes>*/, start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/, chkd/*:?Array<boolean>*/)/*:SectorEntry*/ {
		var buf/*:Array<number>*/ = [], buf_chain/*:Array<any>*/ = [];
		if(!chkd) chkd = [];
		var modulus = ssz - 1, j = 0, jj = 0;
		for(j=start; j>=0;) {
			chkd[j] = true;
			buf[buf.length] = j;
			buf_chain.push(sectors[j]);
			var addr = fat_addrs[Math.floor(j*4/ssz)];
			jj = ((j*4) & modulus);
			if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
			if(!sectors[addr]) break;
			j = __readInt32LE(sectors[addr], jj);
		}
		return {nodes: buf, data:__toBuffer([buf_chain])};
	}

	/** Chase down the sector linked lists */
	function make_sector_list(sectors/*:Array<RawBytes>*/, dir_start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/)/*:SectorList*/ {
		var sl = sectors.length, sector_list/*:SectorList*/ = ([]/*:any*/);
		var chkd/*:Array<boolean>*/ = [], buf/*:Array<number>*/ = [], buf_chain/*:Array<RawBytes>*/ = [];
		var modulus = ssz - 1, i=0, j=0, k=0, jj=0;
		for(i=0; i < sl; ++i) {
			buf = ([]/*:Array<number>*/);
			k = (i + dir_start); if(k >= sl) k-=sl;
			if(chkd[k]) continue;
			buf_chain = [];
			var seen = [];
			for(j=k; j>=0;) {
				seen[j] = true;
				chkd[j] = true;
				buf[buf.length] = j;
				buf_chain.push(sectors[j]);
				var addr/*:number*/ = fat_addrs[Math.floor(j*4/ssz)];
				jj = ((j*4) & modulus);
				if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
				if(!sectors[addr]) break;
				j = __readInt32LE(sectors[addr], jj);
				if(seen[j]) break;
			}
			sector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])}/*:SectorEntry*/);
		}
		return sector_list;
	}

	/* [MS-CFB] 2.6.1 Compound File Directory Entry */
	function read_directory(dir_start/*:number*/, sector_list/*:SectorList*/, sectors/*:Array<RawBytes>*/, Paths/*:Array<string>*/, nmfs, files, FileIndex, mini) {
		var minifat_store = 0, pl = (Paths.length?2:0);
		var sector = sector_list[dir_start].data;
		var i = 0, namelen = 0, name;
		for(; i < sector.length; i+= 128) {
			var blob/*:CFBlob*/ = /*::(*/sector.slice(i, i+128)/*:: :any)*/;
			prep_blob(blob, 64);
			namelen = blob.read_shift(2);
			name = __utf16le(blob,0,namelen-pl);
			Paths.push(name);
			var o/*:CFBEntry*/ = ({
				name:  name,
				type:  blob.read_shift(1),
				color: blob.read_shift(1),
				L:     blob.read_shift(4, 'i'),
				R:     blob.read_shift(4, 'i'),
				C:     blob.read_shift(4, 'i'),
				clsid: blob.read_shift(16),
				state: blob.read_shift(4, 'i'),
				start: 0,
				size: 0
			});
			var ctime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
			if(ctime !== 0) o.ct = read_date(blob, blob.l-8);
			var mtime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
			if(mtime !== 0) o.mt = read_date(blob, blob.l-8);
			o.start = blob.read_shift(4, 'i');
			o.size = blob.read_shift(4, 'i');
			if(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = ""; }
			if(o.type === 5) { /* root */
				minifat_store = o.start;
				if(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
				/*minifat_size = o.size;*/
			} else if(o.size >= 4096 /* MSCSZ */) {
				o.storage = 'fat';
				if(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
				sector_list[o.start].name = o.name;
				o.content = (sector_list[o.start].data.slice(0,o.size)/*:any*/);
			} else {
				o.storage = 'minifat';
				if(o.size < 0) o.size = 0;
				else if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
					o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);
				}
			}
			if(o.content) prep_blob(o.content, 0);
			files[name] = o;
			FileIndex.push(o);
		}
	}

	function read_date(blob/*:RawBytes|CFBlob*/, offset/*:number*/)/*:Date*/ {
		return new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);
	}

	function read_file(filename/*:string*/, options/*:CFBReadOpts*/) {
		get_fs();
		return parse(fs.readFileSync(filename), options);
	}

	function read(blob/*:RawBytes|string*/, options/*:CFBReadOpts*/) {
		var type = options && options.type;
		if(!type) {
			if(has_buf && Buffer.isBuffer(blob)) type = "buffer";
		}
		switch(type || "base64") {
			case "file": /*:: if(typeof blob !== 'string') throw "Must pass a filename when type='file'"; */return read_file(blob, options);
			case "base64": /*:: if(typeof blob !== 'string') throw "Must pass a base64-encoded binary string when type='file'"; */return parse(s2a(Base64_decode(blob)), options);
			case "binary": /*:: if(typeof blob !== 'string') throw "Must pass a binary string when type='file'"; */return parse(s2a(blob), options);
		}
		return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */blob, options);
	}

	function init_cfb(cfb/*:CFBContainer*/, opts/*:?any*/)/*:void*/ {
		var o = opts || {}, root = o.root || "Root Entry";
		if(!cfb.FullPaths) cfb.FullPaths = [];
		if(!cfb.FileIndex) cfb.FileIndex = [];
		if(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
		if(cfb.FullPaths.length === 0) {
			cfb.FullPaths[0] = root + "/";
			cfb.FileIndex[0] = ({ name: root, type: 5 }/*:any*/);
		}
		if(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
		seed_cfb(cfb);
	}
	function seed_cfb(cfb/*:CFBContainer*/)/*:void*/ {
		var nm = "\u0001Sh33tJ5";
		if(CFB.find(cfb, "/" + nm)) return;
		var p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;
		cfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }/*:any*/));
		cfb.FullPaths.push(cfb.FullPaths[0] + nm);
		rebuild_cfb(cfb);
	}
	function rebuild_cfb(cfb/*:CFBContainer*/, f/*:?boolean*/)/*:void*/ {
		init_cfb(cfb);
		var gc = false, s = false;
		for(var i = cfb.FullPaths.length - 1; i >= 0; --i) {
			var _file = cfb.FileIndex[i];
			switch(_file.type) {
				case 0:
					if(s) gc = true;
					else { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }
					break;
				case 1: case 2: case 5:
					s = true;
					if(isNaN(_file.R * _file.L * _file.C)) gc = true;
					if(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
					break;
				default: gc = true; break;
			}
		}
		if(!gc && !f) return;

		var now = new Date(1987, 1, 19), j = 0;
		// Track which names exist
		var fullPaths = Object.create ? Object.create(null) : {};
		var data/*:Array<[string, CFBEntry]>*/ = [];
		for(i = 0; i < cfb.FullPaths.length; ++i) {
			fullPaths[cfb.FullPaths[i]] = true;
			if(cfb.FileIndex[i].type === 0) continue;
			data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
		}
		for(i = 0; i < data.length; ++i) {
			var dad = dirname(data[i][0]);
			s = fullPaths[dad];
			if(!s) {
				data.push([dad, ({
					name: filename(dad).replace("/",""),
					type: 1,
					clsid: HEADER_CLSID,
					ct: now, mt: now,
					content: null
				}/*:any*/)]);
				// Add name to set
				fullPaths[dad] = true;
			}
		}

		data.sort(function(x,y) { return namecmp(x[0], y[0]); });
		cfb.FullPaths = []; cfb.FileIndex = [];
		for(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }
		for(i = 0; i < data.length; ++i) {
			var elt = cfb.FileIndex[i];
			var nm = cfb.FullPaths[i];

			elt.name =  filename(nm).replace("/","");
			elt.L = elt.R = elt.C = -(elt.color = 1);
			elt.size = elt.content ? elt.content.length : 0;
			elt.start = 0;
			elt.clsid = (elt.clsid || HEADER_CLSID);
			if(i === 0) {
				elt.C = data.length > 1 ? 1 : -1;
				elt.size = 0;
				elt.type = 5;
			} else if(nm.slice(-1) == "/") {
				for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;
				elt.C = j >= data.length ? -1 : j;
				for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;
				elt.R = j >= data.length ? -1 : j;
				elt.type = 1;
			} else {
				if(dirname(cfb.FullPaths[i+1]||"") == dirname(nm)) elt.R = i + 1;
				elt.type = 2;
			}
		}

	}

	function _write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
		var _opts = options || {};
		/* MAD is order-sensitive, skip rebuild and sort */
		if(_opts.fileType == 'mad') return write_mad(cfb, _opts);
		rebuild_cfb(cfb);
		switch(_opts.fileType) {
			case 'zip': return write_zip(cfb, _opts);
			//case 'mad': return write_mad(cfb, _opts);
		}
		var L = (function(cfb/*:CFBContainer*/)/*:Array<number>*/{
			var mini_size = 0, fat_size = 0;
			for(var i = 0; i < cfb.FileIndex.length; ++i) {
				var file = cfb.FileIndex[i];
				if(!file.content) continue;
				/*:: if(file.content == null) throw new Error("unreachable"); */
				var flen = file.content.length;
				if(flen > 0){
					if(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;
					else fat_size += (flen + 0x01FF) >> 9;
				}
			}
			var dir_cnt = (cfb.FullPaths.length +3) >> 2;
			var mini_cnt = (mini_size + 7) >> 3;
			var mfat_cnt = (mini_size + 0x7F) >> 7;
			var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
			var fat_cnt = (fat_base + 0x7F) >> 7;
			var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
			while(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
			var L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
			cfb.FileIndex[0].size = mini_size << 6;
			L[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);
			return L;
		})(cfb);
		var o = new_buf(L[7] << 9);
		var i = 0, T = 0;
		{
			for(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);
			for(i = 0; i < 8; ++i) o.write_shift(2, 0);
			o.write_shift(2, 0x003E);
			o.write_shift(2, 0x0003);
			o.write_shift(2, 0xFFFE);
			o.write_shift(2, 0x0009);
			o.write_shift(2, 0x0006);
			for(i = 0; i < 3; ++i) o.write_shift(2, 0);
			o.write_shift(4, 0);
			o.write_shift(4, L[2]);
			o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
			o.write_shift(4, 0);
			o.write_shift(4, 1<<12);
			o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);
			o.write_shift(4, L[3]);
			o.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);
			o.write_shift(4, L[1]);
			for(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
		}
		if(L[1]) {
			for(T = 0; T < L[1]; ++T) {
				for(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
				o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
			}
		}
		var chainit = function(w/*:number*/)/*:void*/ {
			for(T += w; i<T-1; ++i) o.write_shift(-4, i+1);
			if(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }
		};
		T = i = 0;
		for(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);
		for(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);
		chainit(L[3]);
		chainit(L[4]);
		var j/*:number*/ = 0, flen/*:number*/ = 0;
		var file/*:CFBEntry*/ = cfb.FileIndex[0];
		for(; j < cfb.FileIndex.length; ++j) {
			file = cfb.FileIndex[j];
			if(!file.content) continue;
			/*:: if(file.content == null) throw new Error("unreachable"); */
			flen = file.content.length;
			if(flen < 0x1000) continue;
			file.start = T;
			chainit((flen + 0x01FF) >> 9);
		}
		chainit((L[6] + 7) >> 3);
		while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
		T = i = 0;
		for(j = 0; j < cfb.FileIndex.length; ++j) {
			file = cfb.FileIndex[j];
			if(!file.content) continue;
			/*:: if(file.content == null) throw new Error("unreachable"); */
			flen = file.content.length;
			if(!flen || flen >= 0x1000) continue;
			file.start = T;
			chainit((flen + 0x3F) >> 6);
		}
		while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
		for(i = 0; i < L[4]<<2; ++i) {
			var nm = cfb.FullPaths[i];
			if(!nm || nm.length === 0) {
				for(j = 0; j < 17; ++j) o.write_shift(4, 0);
				for(j = 0; j < 3; ++j) o.write_shift(4, -1);
				for(j = 0; j < 12; ++j) o.write_shift(4, 0);
				continue;
			}
			file = cfb.FileIndex[i];
			if(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
			var _nm/*:string*/ = (i === 0 && _opts.root) || file.name;
			flen = 2*(_nm.length+1);
			o.write_shift(64, _nm, "utf16le");
			o.write_shift(2, flen);
			o.write_shift(1, file.type);
			o.write_shift(1, file.color);
			o.write_shift(-4, file.L);
			o.write_shift(-4, file.R);
			o.write_shift(-4, file.C);
			if(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);
			else o.write_shift(16, file.clsid, "hex");
			o.write_shift(4, file.state || 0);
			o.write_shift(4, 0); o.write_shift(4, 0);
			o.write_shift(4, 0); o.write_shift(4, 0);
			o.write_shift(4, file.start);
			o.write_shift(4, file.size); o.write_shift(4, 0);
		}
		for(i = 1; i < cfb.FileIndex.length; ++i) {
			file = cfb.FileIndex[i];
			/*:: if(!file.content) throw new Error("unreachable"); */
			if(file.size >= 0x1000) {
				o.l = (file.start+1) << 9;
				if (has_buf && Buffer.isBuffer(file.content)) {
					file.content.copy(o, o.l, 0, file.size);
					// o is a 0-filled Buffer so just set next offset
					o.l += (file.size + 511) & -512;
				} else {
					for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
					for(; j & 0x1FF; ++j) o.write_shift(1, 0);
				}
			}
		}
		for(i = 1; i < cfb.FileIndex.length; ++i) {
			file = cfb.FileIndex[i];
			/*:: if(!file.content) throw new Error("unreachable"); */
			if(file.size > 0 && file.size < 0x1000) {
				if (has_buf && Buffer.isBuffer(file.content)) {
					file.content.copy(o, o.l, 0, file.size);
					// o is a 0-filled Buffer so just set next offset
					o.l += (file.size + 63) & -64;
				} else {
					for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
					for(; j & 0x3F; ++j) o.write_shift(1, 0);
				}
			}
		}
		if (has_buf) {
			o.l = o.length;
		} else {
			// When using Buffer, already 0-filled
			while(o.l < o.length) o.write_shift(1, 0);
		}
		return o;
	}
	/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
	function find(cfb/*:CFBContainer*/, path/*:string*/)/*:?CFBEntry*/ {
		var UCFullPaths/*:Array<string>*/ = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });
		var UCPaths/*:Array<string>*/ = UCFullPaths.map(function(x) { var y = x.split("/"); return y[y.length - (x.slice(-1) == "/" ? 2 : 1)]; });
		var k/*:boolean*/ = false;
		if(path.charCodeAt(0) === 47 /* "/" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }
		else k = path.indexOf("/") !== -1;
		var UCPath/*:string*/ = path.toUpperCase();
		var w/*:number*/ = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
		if(w !== -1) return cfb.FileIndex[w];

		var m = !UCPath.match(chr1);
		UCPath = UCPath.replace(chr0,'');
		if(m) UCPath = UCPath.replace(chr1,'!');
		for(w = 0; w < UCFullPaths.length; ++w) {
			if((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
			if((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
		}
		return null;
	}
	/** CFB Constants */
	var MSSZ = 64; /* Mini Sector Size = 1<<6 */
	//var MSCSZ = 4096; /* Mini Stream Cutoff Size */
	/* 2.1 Compound File Sector Numbers and Types */
	var ENDOFCHAIN = -2;
	/* 2.2 Compound File Header */
	var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
	var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];
	var HEADER_CLSID = '00000000000000000000000000000000';
	var consts = {
		/* 2.1 Compund File Sector Numbers and Types */
		MAXREGSECT: -6,
		DIFSECT: -4,
		FATSECT: -3,
		ENDOFCHAIN: ENDOFCHAIN,
		FREESECT: -1,
		/* 2.2 Compound File Header */
		HEADER_SIGNATURE: HEADER_SIGNATURE,
		HEADER_MINOR_VERSION: '3e00',
		MAXREGSID: -6,
		NOSTREAM: -1,
		HEADER_CLSID: HEADER_CLSID,
		/* 2.6.1 Compound File Directory Entry */
		EntryTypes: ['unknown','storage','stream','lockbytes','property','root']
	};

	function write_file(cfb/*:CFBContainer*/, filename/*:string*/, options/*:CFBWriteOpts*/)/*:void*/ {
		get_fs();
		var o = _write(cfb, options);
		/*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error("unreachable"); */
		fs.writeFileSync(filename, o);
	}

	function a2s(o/*:RawBytes*/)/*:string*/ {
		var out = new Array(o.length);
		for(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);
		return out.join("");
	}

	function write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
		var o = _write(cfb, options);
		switch(options && options.type || "buffer") {
			case "file": get_fs(); fs.writeFileSync(options.filename, (o/*:any*/)); return o;
			case "binary": return typeof o == "string" ? o : a2s(o);
			case "base64": return Base64_encode(typeof o == "string" ? o : a2s(o));
			case "buffer": if(has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
				/* falls through */
			case "array": return typeof o == "string" ? s2a(o) : o;
		}
		return o;
	}
	/* node < 8.1 zlib does not expose bytesRead, so default to pure JS */
	var _zlib;
	function use_zlib(zlib) { try {
		var InflateRaw = zlib.InflateRaw;
		var InflRaw = new InflateRaw();
		InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
		if(InflRaw.bytesRead) _zlib = zlib;
		else throw new Error("zlib does not expose bytesRead");
	} catch(e) {console.error("cannot use native zlib: " + (e.message || e)); } }

	function _inflateRawSync(payload, usz) {
		if(!_zlib) return _inflate(payload, usz);
		var InflateRaw = _zlib.InflateRaw;
		var InflRaw = new InflateRaw();
		var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
		payload.l += InflRaw.bytesRead;
		return out;
	}

	function _deflateRawSync(payload) {
		return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
	}
	var CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];

	/*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */
	var LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];

	/*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */
	var DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];

	function bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }

	var use_typed_arrays = typeof Uint8Array !== 'undefined';

	var bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];
	for(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);

	function bit_swap_n(n, b) {
		var rev = bitswap8[n & 0xFF];
		if(b <= 8) return rev >>> (8-b);
		rev = (rev << 8) | bitswap8[(n>>8)&0xFF];
		if(b <= 16) return rev >>> (16-b);
		rev = (rev << 8) | bitswap8[(n>>16)&0xFF];
		return rev >>> (24-b);
	}

	/* helpers for unaligned bit reads */
	function read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }
	function read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }
	function read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }
	function read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }
	function read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }

	/* works up to n = 3 * 8 + 1 = 25 */
	function read_bits_n(buf, bl, n) {
		var w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);
		var v = buf[h] >>> w;
		if(n < 8 - w) return v & f;
		v |= buf[h+1]<<(8-w);
		if(n < 16 - w) return v & f;
		v |= buf[h+2]<<(16-w);
		if(n < 24 - w) return v & f;
		v |= buf[h+3]<<(24-w);
		return v & f;
	}

	/* helpers for unaligned bit writes */
	function write_bits_3(buf, bl, v) { var w = bl & 7, h = bl >>> 3;
		if(w <= 5) buf[h] |= (v & 7) << w;
		else {
			buf[h] |= (v << w) & 0xFF;
			buf[h+1] = (v&7) >> (8-w);
		}
		return bl + 3;
	}

	function write_bits_1(buf, bl, v) {
		var w = bl & 7, h = bl >>> 3;
		v = (v&1) << w;
		buf[h] |= v;
		return bl + 1;
	}
	function write_bits_8(buf, bl, v) {
		var w = bl & 7, h = bl >>> 3;
		v <<= w;
		buf[h] |=  v & 0xFF; v >>>= 8;
		buf[h+1] = v;
		return bl + 8;
	}
	function write_bits_16(buf, bl, v) {
		var w = bl & 7, h = bl >>> 3;
		v <<= w;
		buf[h] |=  v & 0xFF; v >>>= 8;
		buf[h+1] = v & 0xFF;
		buf[h+2] = v >>> 8;
		return bl + 16;
	}

	/* until ArrayBuffer#realloc is a thing, fake a realloc */
	function realloc(b, sz/*:number*/) {
		var L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;
		if(L >= sz) return b;
		if(has_buf) {
			var o = new_unsafe_buf(M);
			// $FlowIgnore
			if(b.copy) b.copy(o);
			else for(; i < b.length; ++i) o[i] = b[i];
			return o;
		} else if(use_typed_arrays) {
			var a = new Uint8Array(M);
			if(a.set) a.set(b);
			else for(; i < L; ++i) a[i] = b[i];
			return a;
		}
		b.length = M;
		return b;
	}

	/* zero-filled arrays for older browsers */
	function zero_fill_array(n) {
		var o = new Array(n);
		for(var i = 0; i < n; ++i) o[i] = 0;
		return o;
	}

	/* build tree (used for literals and lengths) */
	function build_tree(clens, cmap, MAX/*:number*/)/*:number*/ {
		var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;

		var bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
		for(i = 0; i < 32; ++i) bl_count[i] = 0;

		for(i = L; i < MAX; ++i) clens[i] = 0;
		L = clens.length;

		var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []

		/* build code tree */
		for(i = 0; i < L; ++i) {
			bl_count[(w = clens[i])]++;
			if(maxlen < w) maxlen = w;
			ctree[i] = 0;
		}
		bl_count[0] = 0;
		for(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);
		for(i = 0; i < L; ++i) {
			ccode = clens[i];
			if(ccode != 0) ctree[i] = bl_count[ccode+16]++;
		}

		/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */
		var cleni = 0;
		for(i = 0; i < L; ++i) {
			cleni = clens[i];
			if(cleni != 0) {
				ccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);
				for(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)
					cmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);
			}
		}
		return maxlen;
	}

	/* Fixed Huffman */
	var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
	var fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);
	if(!use_typed_arrays) {
		for(var i = 0; i < 512; ++i) fix_lmap[i] = 0;
		for(i = 0; i < 32; ++i) fix_dmap[i] = 0;
	}
	(function() {
		var dlens/*:Array<number>*/ = [];
		var i = 0;
		for(;i<32; i++) dlens.push(5);
		build_tree(dlens, fix_dmap, 32);

		var clens/*:Array<number>*/ = [];
		i = 0;
		for(; i<=143; i++) clens.push(8);
		for(; i<=255; i++) clens.push(9);
		for(; i<=279; i++) clens.push(7);
		for(; i<=287; i++) clens.push(8);
		build_tree(clens, fix_lmap, 288);
	})();var _deflateRaw = /*#__PURE__*/(function _deflateRawIIFE() {
		var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];
		var j = 0, k = 0;
		for(; j < DST_LN.length - 1; ++j) {
			for(; k < DST_LN[j+1]; ++k) DST_LN_RE[k] = j;
		}
		for(;k < 32768; ++k) DST_LN_RE[k] = 29;

		var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];
		for(j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
			for(; k < LEN_LN[j+1]; ++k) LEN_LN_RE[k] = j;
		}

		function write_stored(data, out) {
			var boff = 0;
			while(boff < data.length) {
				var L = Math.min(0xFFFF, data.length - boff);
				var h = boff + L == data.length;
				out.write_shift(1, +h);
				out.write_shift(2, L);
				out.write_shift(2, (~L) & 0xFFFF);
				while(L-- > 0) out[out.l++] = data[boff++];
			}
			return out.l;
		}

		/* Fixed Huffman */
		function write_huff_fixed(data, out) {
			var bl = 0;
			var boff = 0;
			var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];
			while(boff < data.length) {
				var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);

				/* write a stored block for short data */
				if(L < 10) {
					bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line
					if(bl & 7) bl += 8 - (bl & 7);
					out.l = (bl / 8) | 0;
					out.write_shift(2, L);
					out.write_shift(2, (~L) & 0xFFFF);
					while(L-- > 0) out[out.l++] = data[boff++];
					bl = out.l * 8;
					continue;
				}

				bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line
				var hash = 0;
				while(L-- > 0) {
					var d = data[boff];
					hash = ((hash << 5) ^ d) & 0x7FFF;

					var match = -1, mlen = 0;

					if((match = addrs[hash])) {
						match |= boff & -32768;
						if(match > boff) match -= 0x8000;
						if(match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
					}

					if(mlen > 2) {
						/* Copy Token  */
						d = LEN_LN_RE[mlen];
						if(d <= 22) bl = write_bits_8(out, bl, bitswap8[d+1]>>1) - 1;
						else {
							write_bits_8(out, bl, 3);
							bl += 5;
							write_bits_8(out, bl, bitswap8[d-23]>>5);
							bl += 3;
						}
						var len_eb = (d < 8) ? 0 : ((d - 4)>>2);
						if(len_eb > 0) {
							write_bits_16(out, bl, mlen - LEN_LN[d]);
							bl += len_eb;
						}

						d = DST_LN_RE[boff - match];
						bl = write_bits_8(out, bl, bitswap8[d]>>3);
						bl -= 3;

						var dst_eb = d < 4 ? 0 : (d-2)>>1;
						if(dst_eb > 0) {
							write_bits_16(out, bl, boff - match - DST_LN[d]);
							bl += dst_eb;
						}
						for(var q = 0; q < mlen; ++q) {
							addrs[hash] = boff & 0x7FFF;
							hash = ((hash << 5) ^ data[boff]) & 0x7FFF;
							++boff;
						}
						L-= mlen - 1;
					} else {
						/* Literal Token */
						if(d <= 143) d = d + 48;
						else bl = write_bits_1(out, bl, 1);
						bl = write_bits_8(out, bl, bitswap8[d]);
						addrs[hash] = boff & 0x7FFF;
						++boff;
					}
				}

				bl = write_bits_8(out, bl, 0) - 1;
			}
			out.l = ((bl + 7)/8)|0;
			return out.l;
		}
		return function _deflateRaw(data, out) {
			if(data.length < 8) return write_stored(data, out);
			return write_huff_fixed(data, out);
		};
	})();

	function _deflate(data) {
		var buf = new_buf(50+Math.floor(data.length*1.1));
		var off = _deflateRaw(data, buf);
		return buf.slice(0, off);
	}
	/* modified inflate function also moves original read head */

	var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
	var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
	var dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);
	var dyn_len_1 = 1, dyn_len_2 = 1;

	/* 5.5.3 Expanding Huffman Codes */
	function dyn(data, boff/*:number*/) {
		/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */
		var _HLIT = read_bits_5(data, boff) + 257; boff += 5;
		var _HDIST = read_bits_5(data, boff) + 1; boff += 5;
		var _HCLEN = read_bits_4(data, boff) + 4; boff += 4;
		var w = 0;

		/* grab and store code lengths */
		var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
		var ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
		var maxlen = 1;
		var bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
		var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
		var L = clens.length; /* 19 */
		for(var i = 0; i < _HCLEN; ++i) {
			clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
			if(maxlen < w) maxlen = w;
			bl_count[w]++;
			boff += 3;
		}

		/* build code tree */
		var ccode = 0;
		bl_count[0] = 0;
		for(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;
		for(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
		/* cmap[7 bits from stream] = (off&7) + (lit<<3) */
		var cleni = 0;
		for(i = 0; i < L; ++i) {
			cleni = clens[i];
			if(cleni != 0) {
				ccode = bitswap8[ctree[i]]>>(8-cleni);
				for(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);
			}
		}

		/* read literal and dist codes at once */
		var hcodes/*:Array<number>*/ = [];
		maxlen = 1;
		for(; hcodes.length < _HLIT + _HDIST;) {
			ccode = dyn_cmap[read_bits_7(data, boff)];
			boff += ccode & 7;
			switch((ccode >>>= 3)) {
				case 16:
					w = 3 + read_bits_2(data, boff); boff += 2;
					ccode = hcodes[hcodes.length - 1];
					while(w-- > 0) hcodes.push(ccode);
					break;
				case 17:
					w = 3 + read_bits_3(data, boff); boff += 3;
					while(w-- > 0) hcodes.push(0);
					break;
				case 18:
					w = 11 + read_bits_7(data, boff); boff += 7;
					while(w -- > 0) hcodes.push(0);
					break;
				default:
					hcodes.push(ccode);
					if(maxlen < ccode) maxlen = ccode;
					break;
			}
		}

		/* build literal / length trees */
		var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
		for(i = _HLIT; i < 286; ++i) h1[i] = 0;
		for(i = _HDIST; i < 30; ++i) h2[i] = 0;
		dyn_len_1 = build_tree(h1, dyn_lmap, 286);
		dyn_len_2 = build_tree(h2, dyn_dmap, 30);
		return boff;
	}

	/* return [ data, bytesRead ] */
	function inflate(data, usz/*:number*/) {
		/* shortcircuit for empty buffer [0x03, 0x00] */
		if(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }

		/* bit offset */
		var boff = 0;

		/* header includes final bit and type bits */
		var header = 0;

		var outbuf = new_unsafe_buf(usz ? usz : (1<<18));
		var woff = 0;
		var OL = outbuf.length>>>0;
		var max_len_1 = 0, max_len_2 = 0;

		while((header&1) == 0) {
			header = read_bits_3(data, boff); boff += 3;
			if((header >>> 1) == 0) {
				/* Stored block */
				if(boff & 7) boff += 8 - (boff&7);
				/* 2 bytes sz, 2 bytes bit inverse */
				var sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;
				boff += 32;
				/* push sz bytes */
				if(sz > 0) {
					if(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }
					while(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }
				}
				continue;
			} else if((header >> 1) == 1) {
				/* Fixed Huffman */
				max_len_1 = 9; max_len_2 = 5;
			} else {
				/* Dynamic Huffman */
				boff = dyn(data, boff);
				max_len_1 = dyn_len_1; max_len_2 = dyn_len_2;
			}
			for(;;) { // while(true) is apparently out of vogue in modern JS circles
				if(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }
				/* ingest code and move read head */
				var bits = read_bits_n(data, boff, max_len_1);
				var code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];
				boff += code & 15; code >>>= 4;
				/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */
				if(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;
				else if(code == 256) break;
				else {
					code -= 257;
					var len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;
					var tgt = woff + LEN_LN[code];
					/* length extra bits */
					if(len_eb > 0) {
						tgt += read_bits_n(data, boff, len_eb);
						boff += len_eb;
					}

					/* dist code */
					bits = read_bits_n(data, boff, max_len_2);
					code = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];
					boff += code & 15; code >>>= 4;
					var dst_eb = (code < 4 ? 0 : (code-2)>>1);
					var dst = DST_LN[code];
					/* dist extra bits */
					if(dst_eb > 0) {
						dst += read_bits_n(data, boff, dst_eb);
						boff += dst_eb;
					}

					/* in the common case, manual byte copy is faster than TA set / Buffer copy */
					if(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt + 100); OL = outbuf.length; }
					while(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }
				}
			}
		}
		if(usz) return [outbuf, (boff+7)>>>3];
		return [outbuf.slice(0, woff), (boff+7)>>>3];
	}

	function _inflate(payload, usz) {
		var data = payload.slice(payload.l||0);
		var out = inflate(data, usz);
		payload.l += out[1];
		return out[0];
	}

	function warn_or_throw(wrn, msg) {
		if(wrn) { if(typeof console !== 'undefined') console.error(msg); }
		else throw new Error(msg);
	}

	function parse_zip(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
		var blob/*:CFBlob*/ = /*::(*/file/*:: :any)*/;
		prep_blob(blob, 0);

		var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
		var o = {
			FileIndex: FileIndex,
			FullPaths: FullPaths
		};
		init_cfb(o, { root: options.root });

		/* find end of central directory, start just after signature */
		var i = blob.length - 4;
		while((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;
		blob.l = i + 4;

		/* parse end of central directory */
		blob.l += 4;
		var fcnt = blob.read_shift(2);
		blob.l += 6;
		var start_cd = blob.read_shift(4);

		/* parse central directory */
		blob.l = start_cd;

		for(i = 0; i < fcnt; ++i) {
			/* trust local file header instead of CD entry */
			blob.l += 20;
			var csz = blob.read_shift(4);
			var usz = blob.read_shift(4);
			var namelen = blob.read_shift(2);
			var efsz = blob.read_shift(2);
			var fcsz = blob.read_shift(2);
			blob.l += 8;
			var offset = blob.read_shift(4);
			var EF = parse_extra_field(/*::(*/blob.slice(blob.l+namelen, blob.l+namelen+efsz)/*:: :any)*/);
			blob.l += namelen + efsz + fcsz;

			var L = blob.l;
			blob.l = offset + 4;
			parse_local_file(blob, csz, usz, o, EF);
			blob.l = L;
		}
		return o;
	}


	/* head starts just after local file header signature */
	function parse_local_file(blob/*:CFBlob*/, csz/*:number*/, usz/*:number*/, o/*:CFBContainer*/, EF) {
		/* [local file header] */
		blob.l += 2;
		var flags = blob.read_shift(2);
		var meth = blob.read_shift(2);
		var date = parse_dos_date(blob);

		if(flags & 0x2041) throw new Error("Unsupported ZIP encryption");
		var crc32 = blob.read_shift(4);
		var _csz = blob.read_shift(4);
		var _usz = blob.read_shift(4);

		var namelen = blob.read_shift(2);
		var efsz = blob.read_shift(2);

		// TODO: flags & (1<<11) // UTF8
		var name = ""; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);
		if(efsz) {
			var ef = parse_extra_field(/*::(*/blob.slice(blob.l, blob.l + efsz)/*:: :any)*/);
			if((ef[0x5455]||{}).mt) date = ef[0x5455].mt;
			if(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;
		}
		blob.l += efsz;

		/* [encryption header] */

		/* [file data] */
		var data = blob.slice(blob.l, blob.l + _csz);
		switch(meth) {
			case 8: data = _inflateRawSync(blob, _usz); break;
			case 0: break; // TODO: scan for magic number
			default: throw new Error("Unsupported ZIP Compression method " + meth);
		}

		/* [data descriptor] */
		var wrn = false;
		if(flags & 8) {
			crc32 = blob.read_shift(4);
			if(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }
			_csz = blob.read_shift(4);
			_usz = blob.read_shift(4);
		}

		if(_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
		if(_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
		//var _crc32 = CRC32.buf(data, 0);
		//if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
		cfb_add(o, name, data, {unsafe: true, mt: date});
	}
	function write_zip(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes*/ {
		var _opts = options || {};
		var out = [], cdirs = [];
		var o/*:CFBlob*/ = new_buf(1);
		var method = (_opts.compression ? 8 : 0), flags = 0;
		var i = 0, j = 0;

		var start_cd = 0, fcnt = 0;
		var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
		var crcs = [];
		var sz_cd = 0;

		for(i = 1; i < cfb.FullPaths.length; ++i) {
			fp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];
			if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
			var start = start_cd;

			/* TODO: CP437 filename */
			var namebuf = new_buf(fp.length);
			for(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);
			namebuf = namebuf.slice(0, namebuf.l);
			crcs[fcnt] = CRC32.buf(/*::((*/fi.content/*::||[]):any)*/, 0);

			var outbuf = fi.content/*::||[]*/;
			if(method == 8) outbuf = _deflateRawSync(outbuf);

			/* local file header */
			o = new_buf(30);
			o.write_shift(4, 0x04034b50);
			o.write_shift(2, 20);
			o.write_shift(2, flags);
			o.write_shift(2, method);
			/* TODO: last mod file time/date */
			if(fi.mt) write_dos_date(o, fi.mt);
			else o.write_shift(4, 0);
			o.write_shift(-4, crcs[fcnt]);
			o.write_shift(4,  outbuf.length);
			o.write_shift(4,  /*::(*/fi.content/*::||[])*/.length);
			o.write_shift(2, namebuf.length);
			o.write_shift(2, 0);

			start_cd += o.length;
			out.push(o);
			start_cd += namebuf.length;
			out.push(namebuf);

			/* TODO: extra fields? */

			/* TODO: encryption header ? */

			start_cd += outbuf.length;
			out.push(outbuf);

			/* central directory */
			o = new_buf(46);
			o.write_shift(4, 0x02014b50);
			o.write_shift(2, 0);
			o.write_shift(2, 20);
			o.write_shift(2, flags);
			o.write_shift(2, method);
			o.write_shift(4, 0); /* TODO: last mod file time/date */
			o.write_shift(-4, crcs[fcnt]);

			o.write_shift(4, outbuf.length);
			o.write_shift(4, /*::(*/fi.content/*::||[])*/.length);
			o.write_shift(2, namebuf.length);
			o.write_shift(2, 0);
			o.write_shift(2, 0);
			o.write_shift(2, 0);
			o.write_shift(2, 0);
			o.write_shift(4, 0);
			o.write_shift(4, start);

			sz_cd += o.l;
			cdirs.push(o);
			sz_cd += namebuf.length;
			cdirs.push(namebuf);
			++fcnt;
		}

		/* end of central directory */
		o = new_buf(22);
		o.write_shift(4, 0x06054b50);
		o.write_shift(2, 0);
		o.write_shift(2, 0);
		o.write_shift(2, fcnt);
		o.write_shift(2, fcnt);
		o.write_shift(4, sz_cd);
		o.write_shift(4, start_cd);
		o.write_shift(2, 0);

		return bconcat(([bconcat((out/*:any*/)), bconcat(cdirs), o]/*:any*/));
	}
	var ContentTypeMap = ({
		"htm": "text/html",
		"xml": "text/xml",

		"gif": "image/gif",
		"jpg": "image/jpeg",
		"png": "image/png",

		"mso": "application/x-mso",
		"thmx": "application/vnd.ms-officetheme",
		"sh33tj5": "application/octet-stream"
	}/*:any*/);

	function get_content_type(fi/*:CFBEntry*/, fp/*:string*/)/*:string*/ {
		if(fi.ctype) return fi.ctype;

		var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
		if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];

		if(fp) {
			m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
			if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
		}

		return "application/octet-stream";
	}

	/* 76 character chunks TODO: intertwine encoding */
	function write_base64_76(bstr/*:string*/)/*:string*/ {
		var data = Base64_encode(bstr);
		var o = [];
		for(var i = 0; i < data.length; i+= 76) o.push(data.slice(i, i+76));
		return o.join("\r\n") + "\r\n";
	}

	/*
	Rules for QP:
		- escape =## applies for all non-display characters and literal "="
		- space or tab at end of line must be encoded
		- \r\n newlines can be preserved, but bare \r and \n must be escaped
		- lines must not exceed 76 characters, use soft breaks =\r\n

	TODO: Some files from word appear to write line extensions with bare equals:

	```
	<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=
	="70%"
	```
	*/
	function write_quoted_printable(text/*:string*/)/*:string*/ {
		var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
			var w = c.charCodeAt(0).toString(16).toUpperCase();
			return "=" + (w.length == 1 ? "0" + w : w);
		});

		encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");

		if(encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
		encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");

		var o/*:Array<string>*/ = [], split = encoded.split("\r\n");
		for(var si = 0; si < split.length; ++si) {
			var str = split[si];
			if(str.length == 0) { o.push(""); continue; }
			for(var i = 0; i < str.length;) {
				var end = 76;
				var tmp = str.slice(i, i + end);
				if(tmp.charAt(end - 1) == "=") end --;
				else if(tmp.charAt(end - 2) == "=") end -= 2;
				else if(tmp.charAt(end - 3) == "=") end -= 3;
				tmp = str.slice(i, i + end);
				i += end;
				if(i < str.length) tmp += "=";
				o.push(tmp);
			}
		}

		return o.join("\r\n");
	}
	function parse_quoted_printable(data/*:Array<string>*/)/*:RawBytes*/ {
		var o = [];

		/* unify long lines */
		for(var di = 0; di < data.length; ++di) {
			var line = data[di];
			while(di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
			o.push(line);
		}

		/* decode */
		for(var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) { return String.fromCharCode(parseInt($$.slice(1), 16)); });
		return s2a(o.join("\r\n"));
	}


	function parse_mime(cfb/*:CFBContainer*/, data/*:Array<string>*/, root/*:string*/)/*:void*/ {
		var fname = "", cte = "", ctype = "", fdata;
		var di = 0;
		for(;di < 10; ++di) {
			var line = data[di];
			if(!line || line.match(/^\s*$/)) break;
			var m = line.match(/^(.*?):\s*([^\s].*)$/);
			if(m) switch(m[1].toLowerCase()) {
				case "content-location": fname = m[2].trim(); break;
				case "content-type": ctype = m[2].trim(); break;
				case "content-transfer-encoding": cte = m[2].trim(); break;
			}
		}
		++di;
		switch(cte.toLowerCase()) {
			case 'base64': fdata = s2a(Base64_decode(data.slice(di).join(""))); break;
			case 'quoted-printable': fdata = parse_quoted_printable(data.slice(di)); break;
			default: throw new Error("Unsupported Content-Transfer-Encoding " + cte);
		}
		var file = cfb_add(cfb, fname.slice(root.length), fdata, {unsafe: true});
		if(ctype) file.ctype = ctype;
	}

	function parse_mad(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
		if(a2s(file.slice(0,13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
		var root = (options && options.root || "");
		// $FlowIgnore
		var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
		var di = 0, row = "";

		/* if root is not specified, scan for the common prefix */
		for(di = 0; di < data.length; ++di) {
			row = data[di];
			if(!/^Content-Location:/i.test(row)) continue;
			row = row.slice(row.indexOf("file"));
			if(!root) root = row.slice(0, row.lastIndexOf("/") + 1);
			if(row.slice(0, root.length) == root) continue;
			while(root.length > 0) {
				root = root.slice(0, root.length - 1);
				root = root.slice(0, root.lastIndexOf("/") + 1);
				if(row.slice(0,root.length) == root) break;
			}
		}

		var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
		if(!mboundary) throw new Error("MAD cannot find boundary");
		var boundary = "--" + (mboundary[1] || "");

		var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
		var o = {
			FileIndex: FileIndex,
			FullPaths: FullPaths
		};
		init_cfb(o);
		var start_di, fcnt = 0;
		for(di = 0; di < data.length; ++di) {
			var line = data[di];
			if(line !== boundary && line !== boundary + "--") continue;
			if(fcnt++) parse_mime(o, data.slice(start_di, di), root);
			start_di = di;
		}
		return o;
	}

	function write_mad(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:string*/ {
		var opts = options || {};
		var boundary = opts.boundary || "SheetJS";
		boundary = '------=' + boundary;

		var out = [
			'MIME-Version: 1.0',
			'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
			'',
			'',
			''
		];

		var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
		for(var i = 1; i < cfb.FullPaths.length; ++i) {
			fp = cfb.FullPaths[i].slice(root.length);
			fi = cfb.FileIndex[i];
			if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;

			/* Normalize filename */
			fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
				return "_x" + c.charCodeAt(0).toString(16) + "_";
			}).replace(/[\u0080-\uFFFF]/g, function(u) {
				return "_u" + u.charCodeAt(0).toString(16) + "_";
			});

			/* Extract content as binary string */
			var ca = fi.content;
			// $FlowIgnore
			var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);

			/* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */
			var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
			for(var csl = 0; csl <= L; ++csl) if((cc=cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;
			var qp = dispcnt >= L * 4 / 5;

			out.push(boundary);
			out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);
			out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));
			out.push('Content-Type: ' + get_content_type(fi, fp));
			out.push('');

			out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
		}
		out.push(boundary + '--\r\n');
		return out.join("\r\n");
	}
	function cfb_new(opts/*:?any*/)/*:CFBContainer*/ {
		var o/*:CFBContainer*/ = ({}/*:any*/);
		init_cfb(o, opts);
		return o;
	}

	function cfb_add(cfb/*:CFBContainer*/, name/*:string*/, content/*:?RawBytes*/, opts/*:?any*/)/*:CFBEntry*/ {
		var unsafe = opts && opts.unsafe;
		if(!unsafe) init_cfb(cfb);
		var file = !unsafe && CFB.find(cfb, name);
		if(!file) {
			var fpath/*:string*/ = cfb.FullPaths[0];
			if(name.slice(0, fpath.length) == fpath) fpath = name;
			else {
				if(fpath.slice(-1) != "/") fpath += "/";
				fpath = (fpath + name).replace("//","/");
			}
			file = ({name: filename(name), type: 2}/*:any*/);
			cfb.FileIndex.push(file);
			cfb.FullPaths.push(fpath);
			if(!unsafe) CFB.utils.cfb_gc(cfb);
		}
		/*:: if(!file) throw new Error("unreachable"); */
		file.content = (content/*:any*/);
		file.size = content ? content.length : 0;
		if(opts) {
			if(opts.CLSID) file.clsid = opts.CLSID;
			if(opts.mt) file.mt = opts.mt;
			if(opts.ct) file.ct = opts.ct;
		}
		return file;
	}

	function cfb_del(cfb/*:CFBContainer*/, name/*:string*/)/*:boolean*/ {
		init_cfb(cfb);
		var file = CFB.find(cfb, name);
		if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
			cfb.FileIndex.splice(j, 1);
			cfb.FullPaths.splice(j, 1);
			return true;
		}
		return false;
	}

	function cfb_mov(cfb/*:CFBContainer*/, old_name/*:string*/, new_name/*:string*/)/*:boolean*/ {
		init_cfb(cfb);
		var file = CFB.find(cfb, old_name);
		if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
			cfb.FileIndex[j].name = filename(new_name);
			cfb.FullPaths[j] = new_name;
			return true;
		}
		return false;
	}

	function cfb_gc(cfb/*:CFBContainer*/)/*:void*/ { rebuild_cfb(cfb, true); }

	exports.find = find;
	exports.read = read;
	exports.parse = parse;
	exports.write = write;
	exports.writeFile = write_file;
	exports.utils = {
		cfb_new: cfb_new,
		cfb_add: cfb_add,
		cfb_del: cfb_del,
		cfb_mov: cfb_mov,
		cfb_gc: cfb_gc,
		ReadShift: ReadShift,
		CheckField: CheckField,
		prep_blob: prep_blob,
		bconcat: bconcat,
		use_zlib: use_zlib,
		_deflateRaw: _deflate,
		_inflateRaw: _inflate,
		consts: consts
	};

	return exports;
	})();

	/* read binary data from file */
	function read_binary(path/*:string*/) {
		if(typeof Deno !== 'undefined') return Deno.readFileSync(path);
		// $FlowIgnore
		if(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript
			// $FlowIgnore
			var infile = File(path); infile.open("r"); infile.encoding = "binary";
			var data = infile.read(); infile.close();
			return data;
		} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }
		throw new Error("Cannot access file " + path);
	}
	function keys(o/*:any*/)/*:Array<any>*/ {
		var ks = Object.keys(o), o2 = [];
		for(var i = 0; i < ks.length; ++i) if(Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
		return o2;
	}

	function evert(obj/*:any*/)/*:EvertType*/ {
		var o = ([]/*:any*/), K = keys(obj);
		for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
		return o;
	}

	var basedate = /*#__PURE__*/new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
	function datenum(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
		var epoch = /*#__PURE__*/v.getTime();
		var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
		return (epoch - dnthresh) / (24 * 60 * 60 * 1000);
	}
	var refdate = /*#__PURE__*/new Date();
	var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/refdate.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
	var refoffset = /*#__PURE__*/refdate.getTimezoneOffset();
	function numdate(v/*:number*/)/*:Date*/ {
		var out = new Date();
		out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);
		if (out.getTimezoneOffset() !== refoffset) {
			out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
		}
		return out;
	}

	/* ISO 8601 Duration */
	function parse_isodur(s) {
		var sec = 0, mt = 0, time = false;
		var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
		if(!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
		for(var i = 1; i != m.length; ++i) {
			if(!m[i]) continue;
			mt = 1;
			if(i > 3) time = true;
			switch(m[i].slice(m[i].length-1)) {
				case 'Y':
					throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length-1));
				case 'D': mt *= 24;
					/* falls through */
				case 'H': mt *= 60;
					/* falls through */
				case 'M':
					if(!time) throw new Error("Unsupported ISO Duration Field: M");
					else mt *= 60;
			}
			sec += mt * parseInt(m[i], 10);
		}
		return sec;
	}

	var good_pd_date_1 = /*#__PURE__*/new Date('2017-02-19T19:06:09.000Z');
	var good_pd_date = /*#__PURE__*/isNaN(/*#__PURE__*/good_pd_date_1.getFullYear()) ? /*#__PURE__*/new Date('2/19/17') : good_pd_date_1;
	var good_pd = /*#__PURE__*/good_pd_date.getFullYear() == 2017;
	/* parses a date as a local date */
	function parseDate(str/*:string|Date*/, fixdate/*:?number*/)/*:Date*/ {
		var d = new Date(str);
		if(good_pd) {
			/*:: if(fixdate == null) fixdate = 0; */
			if(fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);
			else if(fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);
			return d;
		}
		if(str instanceof Date) return str;
		if(good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
			var s = d.getFullYear();
			if(str.indexOf("" + s) > -1) return d;
			d.setFullYear(d.getFullYear() + 100); return d;
		}
		var n = str.match(/\d+/g)||["2017","2","19","0","0","0"];
		var out = new Date(+n[0], +n[1] - 1, +n[2], (+n[3]||0), (+n[4]||0), (+n[5]||0));
		if(str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);
		return out;
	}

	function cc2str(arr/*:Array<number>*/, debomit)/*:string*/ {
		if(has_buf && Buffer.isBuffer(arr)) {
			if(debomit) {
				if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString("utf16le"));
				if(arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString("binary")));
			}
			return arr.toString("binary");
		}

		if(typeof TextDecoder !== "undefined") try {
			if(debomit) {
				if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
				if(arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
			}
			var rev = {
				"\u20ac": "\x80", "\u201a": "\x82", "\u0192": "\x83", "\u201e": "\x84",
				"\u2026": "\x85", "\u2020": "\x86", "\u2021": "\x87", "\u02c6": "\x88",
				"\u2030": "\x89", "\u0160": "\x8a", "\u2039": "\x8b", "\u0152": "\x8c",
				"\u017d": "\x8e", "\u2018": "\x91", "\u2019": "\x92", "\u201c": "\x93",
				"\u201d": "\x94", "\u2022": "\x95", "\u2013": "\x96", "\u2014": "\x97",
				"\u02dc": "\x98", "\u2122": "\x99", "\u0161": "\x9a", "\u203a": "\x9b",
				"\u0153": "\x9c", "\u017e": "\x9e", "\u0178": "\x9f"
			};
			if(Array.isArray(arr)) arr = new Uint8Array(arr);
			return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) { return rev[c] || c; });
		} catch(e) {}

		var o = [];
		for(var i = 0; i != arr.length; ++i) o.push(String.fromCharCode(arr[i]));
		return o.join("");
	}

	function dup(o/*:any*/)/*:any*/ {
		if(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
		if(typeof o != 'object' || o == null) return o;
		if(o instanceof Date) return new Date(o.getTime());
		var out = {};
		for(var k in o) if(Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
		return out;
	}

	function fill(c/*:string*/,l/*:number*/)/*:string*/ { var o = ""; while(o.length < l) o+=c; return o; }

	/* TODO: stress test */
	function fuzzynum(s/*:string*/)/*:number*/ {
		var v/*:number*/ = Number(s);
		if(!isNaN(v)) return isFinite(v) ? v : NaN;
		if(!/\d/.test(s)) return v;
		var wt = 1;
		var ss = s.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g, function() { wt *= 100; return "";});
		if(!isNaN(v = Number(ss))) return v / wt;
		ss = ss.replace(/[(](.*)[)]/,function($$, $1) { wt = -wt; return $1;});
		if(!isNaN(v = Number(ss))) return v / wt;
		return v;
	}
	var lower_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
	function fuzzydate(s/*:string*/)/*:Date*/ {
		var o = new Date(s), n = new Date(NaN);
		var y = o.getYear(), m = o.getMonth(), d = o.getDate();
		if(isNaN(d)) return n;
		var lower = s.toLowerCase();
		if(lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
			lower = lower.replace(/[^a-z]/g,"").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/,"");
			if(lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
		} else if(lower.match(/[a-z]/)) return n;
		if(y < 0 || y > 8099) return n;
		if((m > 0 || d > 1) && y != 101) return o;
		if(s.match(/[^-0-9:,\/\\]/)) return n;
		return o;
	}

	var split_regex = /*#__PURE__*/(function() {
		var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
		return function split_regex(str/*:string*/, re, def/*:string*/)/*:Array<string>*/ {
			if(safe_split_regex || typeof re == "string") return str.split(re);
			var p = str.split(re), o = [p[0]];
			for(var i = 1; i < p.length; ++i) { o.push(def); o.push(p[i]); }
			return o;
		};
	})();
	function getdatastr(data)/*:?string*/ {
		if(!data) return null;
		if(data.content && data.type) return cc2str(data.content, true);
		if(data.data) return debom(data.data);
		if(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
		if(data.asBinary) return debom(data.asBinary());
		if(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));
		return null;
	}

	function getdatabin(data) {
		if(!data) return null;
		if(data.data) return char_codes(data.data);
		if(data.asNodeBuffer && has_buf) return data.asNodeBuffer();
		if(data._data && data._data.getContent) {
			var o = data._data.getContent();
			if(typeof o == "string") return char_codes(o);
			return Array.prototype.slice.call(o);
		}
		if(data.content && data.type) return data.content;
		return null;
	}

	function getdata(data) { return (data && data.name.slice(-4) === ".bin") ? getdatabin(data) : getdatastr(data); }

	/* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */
	/* OASIS does not comment on filename case sensitivity */
	function safegetzipfile(zip, file/*:string*/) {
		var k = zip.FullPaths || keys(zip.files);
		var f = file.toLowerCase().replace(/[\/]/g, '\\'), g = f.replace(/\\/g,'\/');
		for(var i=0; i<k.length; ++i) {
			var n = k[i].replace(/^Root Entry[\/]/,"").toLowerCase();
			if(f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
		}
		return null;
	}

	function getzipfile(zip, file/*:string*/) {
		var o = safegetzipfile(zip, file);
		if(o == null) throw new Error("Cannot find file " + file + " in zip");
		return o;
	}

	function getzipdata(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
		if(!safe) return getdata(getzipfile(zip, file));
		if(!file) return null;
		try { return getzipdata(zip, file); } catch(e) { return null; }
	}

	function getzipstr(zip, file/*:string*/, safe/*:?boolean*/)/*:?string*/ {
		if(!safe) return getdatastr(getzipfile(zip, file));
		if(!file) return null;
		try { return getzipstr(zip, file); } catch(e) { return null; }
	}

	function getzipbin(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
		return getdatabin(getzipfile(zip, file));
	}

	function zipentries(zip) {
		var k = zip.FullPaths || keys(zip.files), o = [];
		for(var i = 0; i < k.length; ++i) if(k[i].slice(-1) != '/') o.push(k[i].replace(/^Root Entry[\/]/, ""));
		return o.sort();
	}

	function zip_add_file(zip, path, content) {
		if(zip.FullPaths) {
			if(typeof content == "string") {
				var res;
				if(has_buf) res = Buffer_from(content);
				/* TODO: investigate performance in Edge 13 */
				//else if(typeof TextEncoder !== "undefined") res = new TextEncoder().encode(content);
				else res = utf8decode(content);
				return CFB.utils.cfb_add(zip, path, res);
			}
			CFB.utils.cfb_add(zip, path, content);
		}
		else zip.file(path, content);
	}

	function zip_read(d, o) {
		switch(o.type) {
			case "base64": return CFB.read(d, { type: "base64" });
			case "binary": return CFB.read(d, { type: "binary" });
			case "buffer": case "array": return CFB.read(d, { type: "buffer" });
		}
		throw new Error("Unrecognized type " + o.type);
	}

	function resolve_path(path/*:string*/, base/*:string*/)/*:string*/ {
		if(path.charAt(0) == "/") return path.slice(1);
		var result = base.split('/');
		if(base.slice(-1) != "/") result.pop(); // folder path
		var target = path.split('/');
		while (target.length !== 0) {
			var step = target.shift();
			if (step === '..') result.pop();
			else if (step !== '.') result.push(step);
		}
		return result.join('/');
	}
	var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
	var attregexg=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
	var tagregex1=/<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
	var tagregex = /*#__PURE__*/XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
	var nsregex=/<\w*:/, nsregex2 = /<(\/?)\w+:/;
	function parsexmltag(tag/*:string*/, skip_root/*:?boolean*/, skip_LC/*:?boolean*/)/*:any*/ {
		var z = ({}/*:any*/);
		var eq = 0, c = 0;
		for(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
		if(!skip_root) z[0] = tag.slice(0, eq);
		if(eq === tag.length) return z;
		var m = tag.match(attregexg), j=0, v="", i=0, q="", cc="", quot = 1;
		if(m) for(i = 0; i != m.length; ++i) {
			cc = m[i];
			for(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;
			q = cc.slice(0,c).trim();
			while(cc.charCodeAt(c+1) == 32) ++c;
			quot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;
			v = cc.slice(c+1+quot, cc.length-quot);
			for(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;
			if(j===q.length) {
				if(q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods
				z[q] = v;
				z[q.toLowerCase()] = v;
			}
			else {
				var k = (j===5 && q.slice(0,5)==="xmlns"?"xmlns":"")+q.slice(j+1);
				if(z[k] && q.slice(j-3,j) == "ext") continue; // from ods
				z[k] = v;
				z[k.toLowerCase()] = v;
			}
		}
		return z;
	}
	function strip_ns(x/*:string*/)/*:string*/ { return x.replace(nsregex2, "<$1"); }

	var encodings = {
		'&quot;': '"',
		'&apos;': "'",
		'&gt;': '>',
		'&lt;': '<',
		'&amp;': '&'
	};
	var rencoding = /*#__PURE__*/evert(encodings);
	//var rencstr = "&<>'\"".split("");

	// TODO: CP remap (need to read file version to determine OS)
	var unescapexml/*:StringConv*/ = /*#__PURE__*/(function() {
		/* 22.4.2.4 bstr (Basic String) */
		var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
		return function unescapexml(text/*:string*/)/*:string*/ {
			var s = text + '', i = s.indexOf("<![CDATA[");
			if(i == -1) return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf("x")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});
			var j = s.indexOf("]]>");
			return unescapexml(s.slice(0, i)) + s.slice(i+9,j) + unescapexml(s.slice(j+3));
		};
	})();

	var decregex=/[&<>'"]/g;

	var htmlcharegex = /[\u0000-\u001f]/g;
	function escapehtml(text/*:string*/)/*:string*/{
		var s = text + '';
		return s.replace(decregex, function(y) { return rencoding[y]; }).replace(/\n/g, "<br/>").replace(htmlcharegex,function(s) { return "&#x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + ";"; });
	}

	/* TODO: handle codepages */
	var xlml_fixstr/*:StringConv*/ = /*#__PURE__*/(function() {
		var entregex = /&#(\d+);/g;
		function entrepl($$/*:string*/,$1/*:string*/)/*:string*/ { return String.fromCharCode(parseInt($1,10)); }
		return function xlml_fixstr(str/*:string*/)/*:string*/ { return str.replace(entregex,entrepl); };
	})();

	function parsexmlbool(value/*:any*/)/*:boolean*/ {
		switch(value) {
			case 1: case true: case '1': case 'true': case 'TRUE': return true;
			/* case '0': case 'false': case 'FALSE':*/
			default: return false;
		}
	}

	function utf8reada(orig/*:string*/)/*:string*/ {
		var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
		while (i < orig.length) {
			c = orig.charCodeAt(i++);
			if (c < 128) { out += String.fromCharCode(c); continue; }
			d = orig.charCodeAt(i++);
			if (c>191 && c<224) { f = ((c & 31) << 6); f |= (d & 63); out += String.fromCharCode(f); continue; }
			e = orig.charCodeAt(i++);
			if (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }
			f = orig.charCodeAt(i++);
			w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;
			out += String.fromCharCode(0xD800 + ((w>>>10)&1023));
			out += String.fromCharCode(0xDC00 + (w&1023));
		}
		return out;
	}

	function utf8readb(data) {
		var out = new_raw_buf(2*data.length), w, i, j = 1, k = 0, ww=0, c;
		for(i = 0; i < data.length; i+=j) {
			j = 1;
			if((c=data.charCodeAt(i)) < 128) w = c;
			else if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }
			else if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }
			else { j = 4;
				w = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);
				w -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);
			}
			if(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }
			out[k++] = w%256; out[k++] = w>>>8;
		}
		return out.slice(0,k).toString('ucs2');
	}

	function utf8readc(data) { return Buffer_from(data, 'binary').toString('utf8'); }

	var utf8corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
	var utf8read = has_buf && (/*#__PURE__*/utf8readc(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/utf8readb(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readb) || utf8reada;

	var utf8write/*:StringConv*/ = has_buf ? function(data) { return Buffer_from(data, 'utf8').toString("binary"); } : function(orig/*:string*/)/*:string*/ {
		var out/*:Array<string>*/ = [], i = 0, c = 0, d = 0;
		while(i < orig.length) {
			c = orig.charCodeAt(i++);
			switch(true) {
				case c < 128: out.push(String.fromCharCode(c)); break;
				case c < 2048:
					out.push(String.fromCharCode(192 + (c >> 6)));
					out.push(String.fromCharCode(128 + (c & 63)));
					break;
				case c >= 55296 && c < 57344:
					c -= 55296; d = orig.charCodeAt(i++) - 56320 + (c<<10);
					out.push(String.fromCharCode(240 + ((d >>18) & 7)));
					out.push(String.fromCharCode(144 + ((d >>12) & 63)));
					out.push(String.fromCharCode(128 + ((d >> 6) & 63)));
					out.push(String.fromCharCode(128 + (d & 63)));
					break;
				default:
					out.push(String.fromCharCode(224 + (c >> 12)));
					out.push(String.fromCharCode(128 + ((c >> 6) & 63)));
					out.push(String.fromCharCode(128 + (c & 63)));
			}
		}
		return out.join("");
	};

	// matches <foo>...</foo> extracts content
	var matchtag = /*#__PURE__*/(function() {
		var mtcache/*:{[k:string]:RegExp}*/ = ({}/*:any*/);
		return function matchtag(f/*:string*/,g/*:?string*/)/*:RegExp*/ {
			var t = f+"|"+(g||"");
			if(mtcache[t]) return mtcache[t];
			return (mtcache[t] = new RegExp('<(?:\\w+:)?'+f+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+f+'>',((g||"")/*:any*/)));
		};
	})();

	var htmldecode/*:{(s:string):string}*/ = /*#__PURE__*/(function() {
		var entities/*:Array<[RegExp, string]>*/ = [
			['nbsp', ' '], ['middot', '·'],
			['quot', '"'], ['apos', "'"], ['gt',   '>'], ['lt',   '<'], ['amp',  '&']
		].map(function(x/*:[string, string]*/) { return [new RegExp('&' + x[0] + ';', "ig"), x[1]]; });
		return function htmldecode(str/*:string*/)/*:string*/ {
			var o = str
					// Remove new lines and spaces from start of content
					.replace(/^[\t\n\r ]+/, "")
					// Remove new lines and spaces from end of content
					.replace(/[\t\n\r ]+$/,"")
					// Added line which removes any white space characters after and before html tags
					.replace(/>\s+/g,">").replace(/\s+</g,"<")
					// Replace remaining new lines and spaces with space
					.replace(/[\t\n\r ]+/g, " ")
					// Replace <br> tags with new lines
					.replace(/<\s*[bB][rR]\s*\/?>/g,"\n")
					// Strip HTML elements
					.replace(/<[^>]*>/g,"");
			for(var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
			return o;
		};
	})();

	var vtregex = /*#__PURE__*/(function(){ var vt_cache = {};
		return function vt_regex(bt) {
			if(vt_cache[bt] !== undefined) return vt_cache[bt];
			return (vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", 'g') );
	};})();
	var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
	function parseVector(data/*:string*/, opts)/*:Array<{v:string,t:string}>*/ {
		var h = parsexmltag(data);

		var matches/*:Array<string>*/ = data.match(vtregex(h.baseType))||[];
		var res/*:Array<any>*/ = [];
		if(matches.length != h.size) {
			if(opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
			return res;
		}
		matches.forEach(function(x/*:string*/) {
			var v = x.replace(vtvregex,"").match(vtmregex);
			if(v) res.push({v:utf8read(v[2]), t:v[1]});
		});
		return res;
	}

	var wtregex = /(^\s|\s$|\n)/;

	function wxt_helper(h)/*:string*/ { return keys(h).map(function(k) { return " " + k + '="' + h[k] + '"';}).join(""); }
	function writextag(f/*:string*/,g/*:?string*/,h) { return '<' + f + ((h != null) ? wxt_helper(h) : "") + ((g != null) ? (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';}

	function xlml_normalize(d)/*:string*/ {
		if(has_buf &&/*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString('utf8');
		if(typeof d === 'string') return d;
		/* duktape */
		if(typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
		throw new Error("Bad input format: expected Buffer or string");
	}
	/* UOS uses CJK in tags */
	var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
	//var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;

	var XMLNS = ({
		CT: 'http://schemas.openxmlformats.org/package/2006/content-types'}/*:any*/);

	var XMLNS_main = [
		'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
		'http://purl.oclc.org/ooxml/spreadsheetml/main',
		'http://schemas.microsoft.com/office/excel/2006/main',
		'http://schemas.microsoft.com/office/excel/2006/2'
	];
	function read_double_le(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ {
		var s = 1 - 2 * (b[idx + 7] >>> 7);
		var e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);
		var m = (b[idx+6]&0x0f);
		for(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
		if(e == 0x7ff) return m == 0 ? (s * Infinity) : NaN;
		if(e == 0) e = -1022;
		else { e -= 1023; m += Math.pow(2,52); }
		return s * Math.pow(2, e - 52) * m;
	}

	function write_double_le(b/*:RawBytes|CFBlob*/, v/*:number*/, idx/*:number*/) {
		var bs = ((((v < 0) || (1/v == -Infinity)) ? 1 : 0) << 7), e = 0, m = 0;
		var av = bs ? (-v) : v;
		if(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }
		else if(av == 0) e = m = 0;
		else {
			e = Math.floor(Math.log(av) / Math.LN2);
			m = av * Math.pow(2, 52 - e);
			if((e <= -1023) && (!isFinite(m) || (m < Math.pow(2,52)))) { e = -1022; }
			else { m -= Math.pow(2,52); e+=1023; }
		}
		for(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;
		b[idx + 6] = ((e & 0x0f) << 4) | (m & 0xf);
		b[idx + 7] = (e >> 4) | bs;
	}

	var ___toBuffer = function(bufs/*:Array<Array<RawBytes> >*/)/*:RawBytes*/ { var x=[],w=10240; for(var i=0;i<bufs[0].length;++i) if(bufs[0][i]) for(var j=0,L=bufs[0][i].length;j<L;j+=w) x.push.apply(x, bufs[0][i].slice(j,j+w)); return x; };
	var __toBuffer = has_buf ? function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0].map(function(x) { return Buffer.isBuffer(x) ? x : Buffer_from(x); })) : ___toBuffer(bufs);} : ___toBuffer;

	var ___utf16le = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join("").replace(chr0,''); };
	var __utf16le = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___utf16le(b,s,e); return b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/; } : ___utf16le;

	var ___hexlify = function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<s+l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2)); return ss.join(""); };
	var __hexlify = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { return Buffer.isBuffer(b)/*:: && b instanceof Buffer*/ ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); } : ___hexlify;

	var ___utf8 = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(""); };
	var __utf8 = has_buf ? function utf8_b(b/*:RawBytes|CFBlob*/, s/*:number*/, e/*:number*/) { return (Buffer.isBuffer(b)/*:: && (b instanceof Buffer)*/) ? b.toString('utf8',s,e) : ___utf8(b,s,e); } : ___utf8;

	var ___lpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
	var __lpstr = ___lpstr;

	var ___cpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
	var __cpstr = ___cpstr;

	var ___lpwstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
	var __lpwstr = ___lpwstr;

	var ___lpp4 = function lpp4_(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : "";};
	var __lpp4 = ___lpp4;

	var ___8lpp4 = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : "";};
	var __8lpp4 = ___8lpp4;

	var ___double = function(b/*:RawBytes|CFBlob*/, idx/*:number*/) { return read_double_le(b, idx);};
	var __double = ___double;

	var is_buf = function is_buf_a(a) { return Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };

	if(has_buf/*:: && typeof Buffer !== 'undefined'*/) {
		__lpstr = function lpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
		__cpstr = function cpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___cpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
		__lpwstr = function lpwstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};
		__lpp4 = function lpp4_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};
		__8lpp4 = function lpp4_8b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};
		__double = function double_(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(Buffer.isBuffer(b)/*::&& b instanceof Buffer*/) return b.readDoubleLE(i); return ___double(b,i); };
		is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };
	}

	var __readUInt8 = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx]; };
	var __readUInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+1]*(1<<8))+b[idx]; };
	var __readInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { var u = (b[idx+1]*(1<<8))+b[idx]; return (u < 0x8000) ? u : ((0xffff - u + 1) * -1); };
	var __readUInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };
	var __readInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };
	var __readInt32BE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx]<<24)|(b[idx+1]<<16)|(b[idx+2]<<8)|b[idx+3]; };

	function ReadShift(size/*:number*/, t/*:?string*/)/*:number|string*/ {
		var o="", oI/*:: :number = 0*/, oR, oo=[], w, vv, i, loc;
		switch(t) {
			case 'dbcs':
				loc = this.l;
				if(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString("utf16le");
				else for(i = 0; i < size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }
				size *= 2;
				break;

			case 'utf8': o = __utf8(this, this.l, this.l + size); break;
			case 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;

			case 'wstr':
				return ReadShift.call(this, size, 'dbcs');

			/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
			case 'lpstr-ansi': o = __lpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
			case 'lpstr-cp': o = __cpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
			/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
			case 'lpwstr': o = __lpwstr(this, this.l); size = 4 + 2 * __readUInt32LE(this, this.l); break;
			/* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
			case 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;
			/* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
			case '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;

			case 'cstr': size = 0; o = "";
				while((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));
				o = oo.join(""); break;
			case '_wstr': size = 0; o = "";
				while((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}
				size+=2; o = oo.join(""); break;

			/* sbcs and dbcs support continue records in the SST way TODO codepages */
			case 'dbcs-cont': o = ""; loc = this.l;
				for(i = 0; i < size; ++i) {
					if(this.lens && this.lens.indexOf(loc) !== -1) {
						w = __readUInt8(this, loc);
						this.l = loc + 1;
						vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
						return oo.join("") + vv;
					}
					oo.push(_getchar(__readUInt16LE(this, loc)));
					loc+=2;
				} o = oo.join(""); size *= 2; break;

			case 'cpstr':
			/* falls through */
			case 'sbcs-cont': o = ""; loc = this.l;
				for(i = 0; i != size; ++i) {
					if(this.lens && this.lens.indexOf(loc) !== -1) {
						w = __readUInt8(this, loc);
						this.l = loc + 1;
						vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
						return oo.join("") + vv;
					}
					oo.push(_getchar(__readUInt8(this, loc)));
					loc+=1;
				} o = oo.join(""); break;

			default:
		switch(size) {
			case 1: oI = __readUInt8(this, this.l); this.l++; return oI;
			case 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;
			case 4: case -4:
				if(t === 'i' || ((this[this.l+3] & 0x80)===0)) { oI = ((size > 0) ? __readInt32LE : __readInt32BE)(this, this.l); this.l += 4; return oI; }
				else { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;
			case 8: case -8:
				if(t === 'f') {
					if(size == 8) oR = __double(this, this.l);
					else oR = __double([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]], 0);
					this.l += 8; return oR;
				} else size = 8;
			/* falls through */
			case 16: o = __hexlify(this, this.l, size); break;
		}}
		this.l+=size; return o;
	}

	var __writeUInt32LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };
	var __writeInt32LE  = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };
	var __writeUInt16LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };

	function WriteShift(t/*:number*/, val/*:string|number*/, f/*:?string*/)/*:any*/ {
		var size = 0, i = 0;
		if(f === 'dbcs') {
			/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
			for(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
			size = 2 * val.length;
		} else if(f === 'sbcs') {
			{
				/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
				val = val.replace(/[^\x00-\x7F]/g, "_");
				/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
				for(i = 0; i != val.length; ++i) this[this.l + i] = (val.charCodeAt(i) & 0xFF);
			}
			size = val.length;
		} else if(f === 'hex') {
			for(; i < t; ++i) {
				/*:: if(typeof val !== "string") throw new Error("unreachable"); */
				this[this.l++] = (parseInt(val.slice(2*i, 2*i+2), 16)||0);
			} return this;
		} else if(f === 'utf16le') {
				/*:: if(typeof val !== "string") throw new Error("unreachable"); */
				var end/*:number*/ = Math.min(this.l + t, this.length);
				for(i = 0; i < Math.min(val.length, t); ++i) {
					var cc = val.charCodeAt(i);
					this[this.l++] = (cc & 0xff);
					this[this.l++] = (cc >> 8);
				}
				while(this.l < end) this[this.l++] = 0;
				return this;
		} else /*:: if(typeof val === 'number') */ switch(t) {
			case  1: size = 1; this[this.l] = val&0xFF; break;
			case  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;
			case  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;
			case  4: size = 4; __writeUInt32LE(this, val, this.l); break;
			case  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }
			/* falls through */
			case 16: break;
			case -4: size = 4; __writeInt32LE(this, val, this.l); break;
		}
		this.l += size; return this;
	}

	function CheckField(hexstr/*:string*/, fld/*:string*/)/*:void*/ {
		var m = __hexlify(this,this.l,hexstr.length>>1);
		if(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);
		this.l += hexstr.length>>1;
	}

	function prep_blob(blob, pos/*:number*/)/*:void*/ {
		blob.l = pos;
		blob.read_shift = /*::(*/ReadShift/*:: :any)*/;
		blob.chk = CheckField;
		blob.write_shift = WriteShift;
	}

	function parsenoop(blob, length/*:: :number, opts?:any */) { blob.l += length; }

	function new_buf(sz/*:number*/)/*:Block*/ {
		var o = new_raw_buf(sz);
		prep_blob(o, 0);
		return o;
	}

	/* [MS-XLSB] 2.1.4 Record */
	function recordhopper(data, cb/*:RecordHopperCB*/, opts/*:?any*/) {
		if(!data) return;
		var tmpbyte, cntbyte, length;
		prep_blob(data, data.l || 0);
		var L = data.length, RT = 0, tgt = 0;
		while(data.l < L) {
			RT = data.read_shift(1);
			if(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);
			var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
			tmpbyte = data.read_shift(1);
			length = tmpbyte & 0x7F;
			for(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);
			tgt = data.l + length;
			var d = R.f && R.f(data, length, opts);
			data.l = tgt;
			if(cb(d, R, RT)) return;
		}
	}

	/* control buffer usage for fixed-length buffers */
	function buf_array()/*:BufArray*/ {
		var bufs/*:Array<Block>*/ = [], blksz = has_buf ? 256 : 2048;
		var newblk = function ba_newblk(sz/*:number*/)/*:Block*/ {
			var o/*:Block*/ = (new_buf(sz)/*:any*/);
			prep_blob(o, 0);
			return o;
		};

		var curbuf/*:Block*/ = newblk(blksz);

		var endbuf = function ba_endbuf() {
			if(!curbuf) return;
			if(curbuf.length > curbuf.l) { curbuf = curbuf.slice(0, curbuf.l); curbuf.l = curbuf.length; }
			if(curbuf.length > 0) bufs.push(curbuf);
			curbuf = null;
		};

		var next = function ba_next(sz/*:number*/)/*:Block*/ {
			if(curbuf && (sz < (curbuf.length - curbuf.l))) return curbuf;
			endbuf();
			return (curbuf = newblk(Math.max(sz+1, blksz)));
		};

		var end = function ba_end() {
			endbuf();
			return bconcat(bufs);
		};

		var push = function ba_push(buf) { endbuf(); curbuf = buf; if(curbuf.l == null) curbuf.l = curbuf.length; next(blksz); };

		return ({ next:next, push:push, end:end, _bufs:bufs }/*:any*/);
	}
	/* XLS ranges enforced */
	function shift_cell_xls(cell/*:CellAddress*/, tgt/*:any*/, opts/*:?any*/)/*:CellAddress*/ {
		var out = dup(cell);
		if(tgt.s) {
			if(out.cRel) out.c += tgt.s.c;
			if(out.rRel) out.r += tgt.s.r;
		} else {
			if(out.cRel) out.c += tgt.c;
			if(out.rRel) out.r += tgt.r;
		}
		if(!opts || opts.biff < 12) {
			while(out.c >= 0x100) out.c -= 0x100;
			while(out.r >= 0x10000) out.r -= 0x10000;
		}
		return out;
	}

	function shift_range_xls(cell, range, opts) {
		var out = dup(cell);
		out.s = shift_cell_xls(out.s, range.s, opts);
		out.e = shift_cell_xls(out.e, range.s, opts);
		return out;
	}

	function encode_cell_xls(c/*:CellAddress*/, biff/*:number*/)/*:string*/ {
		if(c.cRel && c.c < 0) { c = dup(c); while(c.c < 0) c.c += (biff > 8) ? 0x4000 : 0x100; }
		if(c.rRel && c.r < 0) { c = dup(c); while(c.r < 0) c.r += (biff > 8) ? 0x100000 : ((biff > 5) ? 0x10000 : 0x4000); }
		var s = encode_cell(c);
		if(!c.cRel && c.cRel != null) s = fix_col(s);
		if(!c.rRel && c.rRel != null) s = fix_row(s);
		return s;
	}

	function encode_range_xls(r, opts)/*:string*/ {
		if(r.s.r == 0 && !r.s.rRel) {
			if(r.e.r == (opts.biff >= 12 ? 0xFFFFF : (opts.biff >= 8 ? 0x10000 : 0x4000)) && !r.e.rRel) {
				return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
			}
		}
		if(r.s.c == 0 && !r.s.cRel) {
			if(r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {
				return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
			}
		}
		return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
	}
	function decode_row(rowstr/*:string*/)/*:number*/ { return parseInt(unfix_row(rowstr),10) - 1; }
	function encode_row(row/*:number*/)/*:string*/ { return "" + (row + 1); }
	function fix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/([A-Z]|^)(\d+)$/,"$1$$$2"); }
	function unfix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/\$(\d+)$/,"$1"); }

	function decode_col(colstr/*:string*/)/*:number*/ { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }
	function encode_col(col/*:number*/)/*:string*/ { if(col < 0) throw new Error("invalid column " + col); var s=""; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }
	function fix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^([A-Z])/,"$$$1"); }
	function unfix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^\$([A-Z])/,"$1"); }

	function split_cell(cstr/*:string*/)/*:Array<string>*/ { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(","); }
	//function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
	function decode_cell(cstr/*:string*/)/*:CellAddress*/ {
		var R = 0, C = 0;
		for(var i = 0; i < cstr.length; ++i) {
			var cc = cstr.charCodeAt(i);
			if(cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
			else if(cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
		}
		return { c: C - 1, r:R - 1 };
	}
	//function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }
	function encode_cell(cell/*:CellAddress*/)/*:string*/ {
		var col = cell.c + 1;
		var s="";
		for(; col; col=((col-1)/26)|0) s = String.fromCharCode(((col-1)%26) + 65) + s;
		return s + (cell.r + 1);
	}
	function decode_range(range/*:string*/)/*:Range*/ {
		var idx = range.indexOf(":");
		if(idx == -1) return { s: decode_cell(range), e: decode_cell(range) };
		return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
	}
	/*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */
	function encode_range(cs/*:CellAddrSpec|Range*/,ce/*:?CellAddrSpec*/)/*:string*/ {
		if(typeof ce === 'undefined' || typeof ce === 'number') {
	/*:: if(!(cs instanceof Range)) throw "unreachable"; */
			return encode_range(cs.s, cs.e);
		}
	/*:: if((cs instanceof Range)) throw "unreachable"; */
		if(typeof cs !== 'string') cs = encode_cell((cs/*:any*/));
		if(typeof ce !== 'string') ce = encode_cell((ce/*:any*/));
	/*:: if(typeof cs !== 'string') throw "unreachable"; */
	/*:: if(typeof ce !== 'string') throw "unreachable"; */
		return cs == ce ? cs : cs + ":" + ce;
	}

	function safe_decode_range(range/*:string*/)/*:Range*/ {
		var o = {s:{c:0,r:0},e:{c:0,r:0}};
		var idx = 0, i = 0, cc = 0;
		var len = range.length;
		for(idx = 0; i < len; ++i) {
			if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
			idx = 26*idx + cc;
		}
		o.s.c = --idx;

		for(idx = 0; i < len; ++i) {
			if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
			idx = 10*idx + cc;
		}
		o.s.r = --idx;

		if(i === len || cc != 10) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }
		++i;

		for(idx = 0; i != len; ++i) {
			if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
			idx = 26*idx + cc;
		}
		o.e.c = --idx;

		for(idx = 0; i != len; ++i) {
			if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
			idx = 10*idx + cc;
		}
		o.e.r = --idx;
		return o;
	}

	function safe_format_cell(cell/*:Cell*/, v/*:any*/) {
		var q = (cell.t == 'd' && v instanceof Date);
		if(cell.z != null) try { return (cell.w = SSF_format(cell.z, q ? datenum(v) : v)); } catch(e) { }
		try { return (cell.w = SSF_format((cell.XF||{}).numFmtId||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }
	}

	function format_cell(cell/*:Cell*/, v/*:any*/, o/*:any*/) {
		if(cell == null || cell.t == null || cell.t == 'z') return "";
		if(cell.w !== undefined) return cell.w;
		if(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
		if(cell.t == "e") return BErr[cell.v] || cell.v;
		if(v == undefined) return safe_format_cell(cell, cell.v);
		return safe_format_cell(cell, v);
	}

	function sheet_to_workbook(sheet/*:Worksheet*/, opts)/*:Workbook*/ {
		var n = opts && opts.sheet ? opts.sheet : "Sheet1";
		var sheets = {}; sheets[n] = sheet;
		return { SheetNames: [n], Sheets: sheets };
	}

	function sheet_add_aoa(_ws/*:?Worksheet*/, data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ {
		var o = opts || {};
		var dense = _ws ? Array.isArray(_ws) : o.dense;
		var ws/*:Worksheet*/ = _ws || (dense ? ([]/*:any*/) : ({}/*:any*/));
		var _R = 0, _C = 0;
		if(ws && o.origin != null) {
			if(typeof o.origin == 'number') _R = o.origin;
			else {
				var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
				_R = _origin.r; _C = _origin.c;
			}
			if(!ws["!ref"]) ws["!ref"] = "A1:A1";
		}
		var range/*:Range*/ = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}}/*:any*/);
		if(ws['!ref']) {
			var _range = safe_decode_range(ws['!ref']);
			range.s.c = _range.s.c;
			range.s.r = _range.s.r;
			range.e.c = Math.max(range.e.c, _range.e.c);
			range.e.r = Math.max(range.e.r, _range.e.r);
			if(_R == -1) range.e.r = _R = _range.e.r + 1;
		}
		for(var R = 0; R != data.length; ++R) {
			if(!data[R]) continue;
			if(!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
			for(var C = 0; C != data[R].length; ++C) {
				if(typeof data[R][C] === 'undefined') continue;
				var cell/*:Cell*/ = ({v: data[R][C] }/*:any*/);
				var __R = _R + R, __C = _C + C;
				if(range.s.r > __R) range.s.r = __R;
				if(range.s.c > __C) range.s.c = __C;
				if(range.e.r < __R) range.e.r = __R;
				if(range.e.c < __C) range.e.c = __C;
				if(data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
				else {
					if(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }
					if(cell.v === null) {
						if(cell.f) cell.t = 'n';
						else if(o.nullError) { cell.t = 'e'; cell.v = 0; }
						else if(!o.sheetStubs) continue;
						else cell.t = 'z';
					}
					else if(typeof cell.v === 'number') cell.t = 'n';
					else if(typeof cell.v === 'boolean') cell.t = 'b';
					else if(cell.v instanceof Date) {
						cell.z = o.dateNF || table_fmt[14];
						if(o.cellDates) { cell.t = 'd'; cell.w = SSF_format(cell.z, datenum(cell.v)); }
						else { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF_format(cell.z, cell.v); }
					}
					else cell.t = 's';
				}
				if(dense) {
					if(!ws[__R]) ws[__R] = [];
					if(ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
					ws[__R][__C] = cell;
				} else {
					var cell_ref = encode_cell(({c:__C,r:__R}/*:any*/));
					if(ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
					ws[cell_ref] = cell;
				}
			}
		}
		if(range.s.c < 10000000) ws['!ref'] = encode_range(range);
		return ws;
	}
	function aoa_to_sheet(data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ { return sheet_add_aoa(null, data, opts); }

	function parse_Int32LE(data) {
		return data.read_shift(4, 'i');
	}

	/* [MS-XLSB] 2.5.168 */
	function parse_XLWideString(data/*::, length*/)/*:string*/ {
		var cchCharacters = data.read_shift(4);
		return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
	}

	/* [MS-XLSB] 2.5.91 */
	//function parse_LPWideString(data/*::, length*/)/*:string*/ {
	//	var cchCharacters = data.read_shift(2);
	//	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
	//}

	/* [MS-XLSB] 2.5.143 */
	function parse_StrRun(data) {
		return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
	}

	/* [MS-XLSB] 2.5.121 */
	function parse_RichStr(data, length/*:number*/)/*:XLString*/ {
		var start = data.l;
		var flags = data.read_shift(1);
		var str = parse_XLWideString(data);
		var rgsStrRun = [];
		var z = ({ t: str, h: str }/*:any*/);
		if ((flags & 1) !== 0) { /* fRichStr */
			/* TODO: formatted string */
			var dwSizeStrRun = data.read_shift(4);
			for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
			z.r = rgsStrRun;
		}
		else z.r = [{ ich: 0, ifnt: 0 }];
		//if((flags & 2) !== 0) { /* fExtStr */
		//	/* TODO: phonetic string */
		//}
		data.l = start + length;
		return z;
	}
	/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */
	var parse_BrtCommentText = parse_RichStr;

	/* [MS-XLSB] 2.5.9 */
	function parse_XLSBCell(data)/*:any*/ {
		var col = data.read_shift(4);
		var iStyleRef = data.read_shift(2);
		iStyleRef += data.read_shift(1) << 16;
		data.l++; //var fPhShow = data.read_shift(1);
		return { c: col, iStyleRef: iStyleRef };
	}

	/* Short XLSB Cell does not include column */
	function parse_XLSBShortCell(data)/*:any*/ {
		var iStyleRef = data.read_shift(2);
		iStyleRef += data.read_shift(1) <<16;
		data.l++; //var fPhShow = data.read_shift(1);
		return { c:-1, iStyleRef: iStyleRef };
	}

	/* [MS-XLSB] 2.5.21 */
	var parse_XLSBCodeName = parse_XLWideString;

	/* [MS-XLSB] 2.5.166 */
	function parse_XLNullableWideString(data/*::, length*/)/*:string*/ {
		var cchCharacters = data.read_shift(4);
		return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
	}

	/* [MS-XLSB] 2.5.165 */
	var parse_XLNameWideString = parse_XLWideString;
	//var write_XLNameWideString = write_XLWideString;

	/* [MS-XLSB] 2.5.114 */
	var parse_RelID = parse_XLNullableWideString;


	/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */
	function parse_RkNumber(data)/*:number*/ {
		var b = data.slice(data.l, data.l + 4);
		var fX100 = (b[0] & 1), fInt = (b[0] & 2);
		data.l += 4;
		var RK = fInt === 0 ? __double([0, 0, 0, 0, (b[0] & 0xFC), b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
		return fX100 ? (RK / 100) : RK;
	}


	/* [MS-XLSB] 2.5.117 RfX */
	function parse_RfX(data /*::, length*/)/*:Range*/ {
		var cell/*:Range*/ = ({ s: {}, e: {} }/*:any*/);
		cell.s.r = data.read_shift(4);
		cell.e.r = data.read_shift(4);
		cell.s.c = data.read_shift(4);
		cell.e.c = data.read_shift(4);
		return cell;
	}

	/* [MS-XLSB] 2.5.153 UncheckedRfX */
	var parse_UncheckedRfX = parse_RfX;

	/* [MS-XLSB] 2.5.155 UncheckedSqRfX */
	//function parse_UncheckedSqRfX(data) {
	//	var cnt = data.read_shift(4);
	//	var out = [];
	//	for(var i = 0; i < cnt; ++i) {
	//		var rng = parse_UncheckedRfX(data);
	//		out.push(encode_range(rng));
	//	}
	//	return out.join(",");
	//}
	//function write_UncheckedSqRfX(sqrfx/*:string*/) {
	//	var parts = sqrfx.split(/\s*,\s*/);
	//	var o = new_buf(4); o.write_shift(4, parts.length);
	//	var out = [o];
	//	parts.forEach(function(rng) {
	//		out.push(write_UncheckedRfX(safe_decode_range(rng)));
	//	});
	//	return bconcat(out);
	//}

	/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */
	/* TODO: error checking, NaN and Infinity values are not valid Xnum */
	function parse_Xnum(data/*::, length*/) {
		if(data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
		return data.read_shift(8, 'f');
	}

	/* [MS-XLSB] 2.4.324 BrtColor */
	function parse_BrtColor(data/*::, length*/) {
		var out = {};
		var d = data.read_shift(1);

		//var fValidRGB = d & 1;
		var xColorType = d >>> 1;

		var index = data.read_shift(1);
		var nTS = data.read_shift(2, 'i');
		var bR = data.read_shift(1);
		var bG = data.read_shift(1);
		var bB = data.read_shift(1);
		data.l++; //var bAlpha = data.read_shift(1);

		switch (xColorType) {
			case 0: out.auto = 1; break;
			case 1:
				out.index = index;
				var icv = XLSIcv[index];
				/* automatic pseudo index 81 */
				if (icv) out.rgb = rgb2Hex(icv);
				break;
			case 2:
				/* if(!fValidRGB) throw new Error("invalid"); */
				out.rgb = rgb2Hex([bR, bG, bB]);
				break;
			case 3: out.theme = index; break;
		}
		if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;

		return out;
	}

	/* [MS-XLSB] 2.5.52 */
	function parse_FontFlags(data/*::, length, opts*/) {
		var d = data.read_shift(1);
		data.l++;
		var out = {
			fBold: d & 0x01,
			fItalic: d & 0x02,
			fUnderline: d & 0x04,
			fStrikeout: d & 0x08,
			fOutline: d & 0x10,
			fShadow: d & 0x20,
			fCondense: d & 0x40,
			fExtend: d & 0x80
		};
		return out;
	}

	/* [MS-OLEDS] 2.3.1 and 2.3.2 */
	function parse_ClipboardFormatOrString(o, w/*:number*/)/*:string*/ {
		// $FlowIgnore
		var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
		var m/*:number*/ = o.read_shift(4);
		switch (m) {
			case 0x00000000: return "";
			case 0xffffffff: case 0xfffffffe: return ClipFmt[o.read_shift(4)] || "";
		}
		if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
		o.l -= 4;
		return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
	}
	function parse_ClipboardFormatOrAnsiString(o) { return parse_ClipboardFormatOrString(o, 1); }
	function parse_ClipboardFormatOrUnicodeString(o) { return parse_ClipboardFormatOrString(o, 2); }

	/* [MS-OLEPS] 2.2 PropertyType */
	// Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars
	//var VT_EMPTY    = 0x0000;
	//var VT_NULL     = 0x0001;
	var VT_I2       = 0x0002;
	var VT_I4       = 0x0003;
	//var VT_R4       = 0x0004;
	//var VT_R8       = 0x0005;
	//var VT_CY       = 0x0006;
	//var VT_DATE     = 0x0007;
	//var VT_BSTR     = 0x0008;
	//var VT_ERROR    = 0x000A;
	var VT_BOOL     = 0x000B;
	var VT_VARIANT  = 0x000C;
	//var VT_DECIMAL  = 0x000E;
	//var VT_I1       = 0x0010;
	//var VT_UI1      = 0x0011;
	//var VT_UI2      = 0x0012;
	var VT_UI4      = 0x0013;
	//var VT_LPWSTR   = 0x001F;
	var VT_FILETIME = 0x0040;
	var VT_BLOB     = 0x0041;
	//var VT_STREAM   = 0x0042;
	//var VT_STORAGE  = 0x0043;
	//var VT_STREAMED_Object  = 0x0044;
	//var VT_STORED_Object    = 0x0045;
	//var VT_BLOB_Object      = 0x0046;
	var VT_CF       = 0x0047;
	var VT_VECTOR_VARIANT = 0x100C;
	var VT_VECTOR_LPSTR   = 0x101E;
	//var VT_ARRAY    = 0x2000;

	var VT_STRING   = 0x0050; // 2.3.3.1.11 VtString
	var VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString
	var VT_CUSTOM   = [VT_STRING, VT_USTR];

	/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
	var DocSummaryPIDDSI = {
		/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
		/*::[*/0x02/*::]*/: { n: 'Category', t: VT_STRING },
		/*::[*/0x03/*::]*/: { n: 'PresentationFormat', t: VT_STRING },
		/*::[*/0x04/*::]*/: { n: 'ByteCount', t: VT_I4 },
		/*::[*/0x05/*::]*/: { n: 'LineCount', t: VT_I4 },
		/*::[*/0x06/*::]*/: { n: 'ParagraphCount', t: VT_I4 },
		/*::[*/0x07/*::]*/: { n: 'SlideCount', t: VT_I4 },
		/*::[*/0x08/*::]*/: { n: 'NoteCount', t: VT_I4 },
		/*::[*/0x09/*::]*/: { n: 'HiddenCount', t: VT_I4 },
		/*::[*/0x0a/*::]*/: { n: 'MultimediaClipCount', t: VT_I4 },
		/*::[*/0x0b/*::]*/: { n: 'ScaleCrop', t: VT_BOOL },
		/*::[*/0x0c/*::]*/: { n: 'HeadingPairs', t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ },
		/*::[*/0x0d/*::]*/: { n: 'TitlesOfParts', t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ },
		/*::[*/0x0e/*::]*/: { n: 'Manager', t: VT_STRING },
		/*::[*/0x0f/*::]*/: { n: 'Company', t: VT_STRING },
		/*::[*/0x10/*::]*/: { n: 'LinksUpToDate', t: VT_BOOL },
		/*::[*/0x11/*::]*/: { n: 'CharacterCount', t: VT_I4 },
		/*::[*/0x13/*::]*/: { n: 'SharedDoc', t: VT_BOOL },
		/*::[*/0x16/*::]*/: { n: 'HyperlinksChanged', t: VT_BOOL },
		/*::[*/0x17/*::]*/: { n: 'AppVersion', t: VT_I4, p: 'version' },
		/*::[*/0x18/*::]*/: { n: 'DigSig', t: VT_BLOB },
		/*::[*/0x1A/*::]*/: { n: 'ContentType', t: VT_STRING },
		/*::[*/0x1B/*::]*/: { n: 'ContentStatus', t: VT_STRING },
		/*::[*/0x1C/*::]*/: { n: 'Language', t: VT_STRING },
		/*::[*/0x1D/*::]*/: { n: 'Version', t: VT_STRING },
		/*::[*/0xFF/*::]*/: {},
		/* [MS-OLEPS] 2.18 */
		/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
		/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
		/*::[*/0x72627262/*::]*/: {}
	};

	/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
	var SummaryPIDSI = {
		/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
		/*::[*/0x02/*::]*/: { n: 'Title', t: VT_STRING },
		/*::[*/0x03/*::]*/: { n: 'Subject', t: VT_STRING },
		/*::[*/0x04/*::]*/: { n: 'Author', t: VT_STRING },
		/*::[*/0x05/*::]*/: { n: 'Keywords', t: VT_STRING },
		/*::[*/0x06/*::]*/: { n: 'Comments', t: VT_STRING },
		/*::[*/0x07/*::]*/: { n: 'Template', t: VT_STRING },
		/*::[*/0x08/*::]*/: { n: 'LastAuthor', t: VT_STRING },
		/*::[*/0x09/*::]*/: { n: 'RevNumber', t: VT_STRING },
		/*::[*/0x0A/*::]*/: { n: 'EditTime', t: VT_FILETIME },
		/*::[*/0x0B/*::]*/: { n: 'LastPrinted', t: VT_FILETIME },
		/*::[*/0x0C/*::]*/: { n: 'CreatedDate', t: VT_FILETIME },
		/*::[*/0x0D/*::]*/: { n: 'ModifiedDate', t: VT_FILETIME },
		/*::[*/0x0E/*::]*/: { n: 'PageCount', t: VT_I4 },
		/*::[*/0x0F/*::]*/: { n: 'WordCount', t: VT_I4 },
		/*::[*/0x10/*::]*/: { n: 'CharCount', t: VT_I4 },
		/*::[*/0x11/*::]*/: { n: 'Thumbnail', t: VT_CF },
		/*::[*/0x12/*::]*/: { n: 'Application', t: VT_STRING },
		/*::[*/0x13/*::]*/: { n: 'DocSecurity', t: VT_I4 },
		/*::[*/0xFF/*::]*/: {},
		/* [MS-OLEPS] 2.18 */
		/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
		/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
		/*::[*/0x72627262/*::]*/: {}
	};

	/* [MS-XLS] 2.4.63 Country/Region codes */
	var CountryEnum = {
		/*::[*/0x0001/*::]*/: "US", // United States
		/*::[*/0x0002/*::]*/: "CA", // Canada
		/*::[*/0x0003/*::]*/: "", // Latin America (except Brazil)
		/*::[*/0x0007/*::]*/: "RU", // Russia
		/*::[*/0x0014/*::]*/: "EG", // Egypt
		/*::[*/0x001E/*::]*/: "GR", // Greece
		/*::[*/0x001F/*::]*/: "NL", // Netherlands
		/*::[*/0x0020/*::]*/: "BE", // Belgium
		/*::[*/0x0021/*::]*/: "FR", // France
		/*::[*/0x0022/*::]*/: "ES", // Spain
		/*::[*/0x0024/*::]*/: "HU", // Hungary
		/*::[*/0x0027/*::]*/: "IT", // Italy
		/*::[*/0x0029/*::]*/: "CH", // Switzerland
		/*::[*/0x002B/*::]*/: "AT", // Austria
		/*::[*/0x002C/*::]*/: "GB", // United Kingdom
		/*::[*/0x002D/*::]*/: "DK", // Denmark
		/*::[*/0x002E/*::]*/: "SE", // Sweden
		/*::[*/0x002F/*::]*/: "NO", // Norway
		/*::[*/0x0030/*::]*/: "PL", // Poland
		/*::[*/0x0031/*::]*/: "DE", // Germany
		/*::[*/0x0034/*::]*/: "MX", // Mexico
		/*::[*/0x0037/*::]*/: "BR", // Brazil
		/*::[*/0x003d/*::]*/: "AU", // Australia
		/*::[*/0x0040/*::]*/: "NZ", // New Zealand
		/*::[*/0x0042/*::]*/: "TH", // Thailand
		/*::[*/0x0051/*::]*/: "JP", // Japan
		/*::[*/0x0052/*::]*/: "KR", // Korea
		/*::[*/0x0054/*::]*/: "VN", // Viet Nam
		/*::[*/0x0056/*::]*/: "CN", // China
		/*::[*/0x005A/*::]*/: "TR", // Turkey
		/*::[*/0x0069/*::]*/: "JS", // Ramastan
		/*::[*/0x00D5/*::]*/: "DZ", // Algeria
		/*::[*/0x00D8/*::]*/: "MA", // Morocco
		/*::[*/0x00DA/*::]*/: "LY", // Libya
		/*::[*/0x015F/*::]*/: "PT", // Portugal
		/*::[*/0x0162/*::]*/: "IS", // Iceland
		/*::[*/0x0166/*::]*/: "FI", // Finland
		/*::[*/0x01A4/*::]*/: "CZ", // Czech Republic
		/*::[*/0x0376/*::]*/: "TW", // Taiwan
		/*::[*/0x03C1/*::]*/: "LB", // Lebanon
		/*::[*/0x03C2/*::]*/: "JO", // Jordan
		/*::[*/0x03C3/*::]*/: "SY", // Syria
		/*::[*/0x03C4/*::]*/: "IQ", // Iraq
		/*::[*/0x03C5/*::]*/: "KW", // Kuwait
		/*::[*/0x03C6/*::]*/: "SA", // Saudi Arabia
		/*::[*/0x03CB/*::]*/: "AE", // United Arab Emirates
		/*::[*/0x03CC/*::]*/: "IL", // Israel
		/*::[*/0x03CE/*::]*/: "QA", // Qatar
		/*::[*/0x03D5/*::]*/: "IR", // Iran
		/*::[*/0xFFFF/*::]*/: "US"  // United States
	};

	/* [MS-XLS] 2.5.127 */
	var XLSFillPattern = [
		null,
		'solid',
		'mediumGray',
		'darkGray',
		'lightGray',
		'darkHorizontal',
		'darkVertical',
		'darkDown',
		'darkUp',
		'darkGrid',
		'darkTrellis',
		'lightHorizontal',
		'lightVertical',
		'lightDown',
		'lightUp',
		'lightGrid',
		'lightTrellis',
		'gray125',
		'gray0625'
	];

	function rgbify(arr/*:Array<number>*/)/*:Array<[number, number, number]>*/ { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }

	/* [MS-XLS] 2.5.161 */
	/* [MS-XLSB] 2.5.75 Icv */
	var _XLSIcv = /*#__PURE__*/ rgbify([
		/* Color Constants */
		0x000000,
		0xFFFFFF,
		0xFF0000,
		0x00FF00,
		0x0000FF,
		0xFFFF00,
		0xFF00FF,
		0x00FFFF,

		/* Overridable Defaults */
		0x000000,
		0xFFFFFF,
		0xFF0000,
		0x00FF00,
		0x0000FF,
		0xFFFF00,
		0xFF00FF,
		0x00FFFF,

		0x800000,
		0x008000,
		0x000080,
		0x808000,
		0x800080,
		0x008080,
		0xC0C0C0,
		0x808080,
		0x9999FF,
		0x993366,
		0xFFFFCC,
		0xCCFFFF,
		0x660066,
		0xFF8080,
		0x0066CC,
		0xCCCCFF,

		0x000080,
		0xFF00FF,
		0xFFFF00,
		0x00FFFF,
		0x800080,
		0x800000,
		0x008080,
		0x0000FF,
		0x00CCFF,
		0xCCFFFF,
		0xCCFFCC,
		0xFFFF99,
		0x99CCFF,
		0xFF99CC,
		0xCC99FF,
		0xFFCC99,

		0x3366FF,
		0x33CCCC,
		0x99CC00,
		0xFFCC00,
		0xFF9900,
		0xFF6600,
		0x666699,
		0x969696,
		0x003366,
		0x339966,
		0x003300,
		0x333300,
		0x993300,
		0x993366,
		0x333399,
		0x333333,

		/* Other entries to appease BIFF8/12 */
		0xFFFFFF, /* 0x40 icvForeground ?? */
		0x000000, /* 0x41 icvBackground ?? */
		0x000000, /* 0x42 icvFrame ?? */
		0x000000, /* 0x43 icv3D ?? */
		0x000000, /* 0x44 icv3DText ?? */
		0x000000, /* 0x45 icv3DHilite ?? */
		0x000000, /* 0x46 icv3DShadow ?? */
		0x000000, /* 0x47 icvHilite ?? */
		0x000000, /* 0x48 icvCtlText ?? */
		0x000000, /* 0x49 icvCtlScrl ?? */
		0x000000, /* 0x4A icvCtlInv ?? */
		0x000000, /* 0x4B icvCtlBody ?? */
		0x000000, /* 0x4C icvCtlFrame ?? */
		0x000000, /* 0x4D icvCtlFore ?? */
		0x000000, /* 0x4E icvCtlBack ?? */
		0x000000, /* 0x4F icvCtlNeutral */
		0x000000, /* 0x50 icvInfoBk ?? */
		0x000000 /* 0x51 icvInfoText ?? */
	]);
	var XLSIcv = /*#__PURE__*/dup(_XLSIcv);

	/* [MS-XLSB] 2.5.97.2 */
	var BErr = {
		/*::[*/0x00/*::]*/: "#NULL!",
		/*::[*/0x07/*::]*/: "#DIV/0!",
		/*::[*/0x0F/*::]*/: "#VALUE!",
		/*::[*/0x17/*::]*/: "#REF!",
		/*::[*/0x1D/*::]*/: "#NAME?",
		/*::[*/0x24/*::]*/: "#NUM!",
		/*::[*/0x2A/*::]*/: "#N/A",
		/*::[*/0x2B/*::]*/: "#GETTING_DATA",
		/*::[*/0xFF/*::]*/: "#WTF?"
	};
	//var RBErr = evert_num(BErr);
	var RBErr = {
		"#NULL!":        0x00,
		"#DIV/0!":       0x07,
		"#VALUE!":       0x0F,
		"#REF!":         0x17,
		"#NAME?":        0x1D,
		"#NUM!":         0x24,
		"#N/A":          0x2A,
		"#GETTING_DATA": 0x2B,
		"#WTF?":         0xFF
	};

	/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
	/* 12.3 Part Summary <SpreadsheetML> */
	/* 14.2 Part Summary <DrawingML> */
	/* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */
	var ct2type/*{[string]:string}*/ = ({
		/* Workbook */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
		"application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
		"application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
		"application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",

		/* Worksheet */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
		"application/vnd.ms-excel.worksheet": "sheets",
		"application/vnd.ms-excel.binIndexWs": "TODO", /* Binary Index */

		/* Chartsheet */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
		"application/vnd.ms-excel.chartsheet": "charts",

		/* Macrosheet */
		"application/vnd.ms-excel.macrosheet+xml": "macros",
		"application/vnd.ms-excel.macrosheet": "macros",
		"application/vnd.ms-excel.intlmacrosheet": "TODO",
		"application/vnd.ms-excel.binIndexMs": "TODO", /* Binary Index */

		/* Dialogsheet */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
		"application/vnd.ms-excel.dialogsheet": "dialogs",

		/* Shared Strings */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
		"application/vnd.ms-excel.sharedStrings": "strs",

		/* Styles */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
		"application/vnd.ms-excel.styles": "styles",

		/* File Properties */
		"application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",

		/* Custom Data Properties */
		"application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",

		/* Comments */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
		"application/vnd.ms-excel.comments": "comments",
		"application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
		"application/vnd.ms-excel.person+xml": "people",

		/* Metadata (Stock/Geography and Dynamic Array) */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
		"application/vnd.ms-excel.sheetMetadata": "metadata",

		/* PivotTable */
		"application/vnd.ms-excel.pivotTable": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",

		/* Chart Objects */
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",

		/* Chart Colors */
		"application/vnd.ms-office.chartcolorstyle+xml": "TODO",

		/* Chart Style */
		"application/vnd.ms-office.chartstyle+xml": "TODO",

		/* Chart Advanced */
		"application/vnd.ms-office.chartex+xml": "TODO",

		/* Calculation Chain */
		"application/vnd.ms-excel.calcChain": "calcchains",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",

		/* Printer Settings */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",

		/* ActiveX */
		"application/vnd.ms-office.activeX": "TODO",
		"application/vnd.ms-office.activeX+xml": "TODO",

		/* Custom Toolbars */
		"application/vnd.ms-excel.attachedToolbars": "TODO",

		/* External Data Connections */
		"application/vnd.ms-excel.connections": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",

		/* External Links */
		"application/vnd.ms-excel.externalLink": "links",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",

		/* PivotCache */
		"application/vnd.ms-excel.pivotCacheDefinition": "TODO",
		"application/vnd.ms-excel.pivotCacheRecords": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",

		/* Query Table */
		"application/vnd.ms-excel.queryTable": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",

		/* Shared Workbook */
		"application/vnd.ms-excel.userNames": "TODO",
		"application/vnd.ms-excel.revisionHeaders": "TODO",
		"application/vnd.ms-excel.revisionLog": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",

		/* Single Cell Table */
		"application/vnd.ms-excel.tableSingleCells": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",

		/* Slicer */
		"application/vnd.ms-excel.slicer": "TODO",
		"application/vnd.ms-excel.slicerCache": "TODO",
		"application/vnd.ms-excel.slicer+xml": "TODO",
		"application/vnd.ms-excel.slicerCache+xml": "TODO",

		/* Sort Map */
		"application/vnd.ms-excel.wsSortMap": "TODO",

		/* Table */
		"application/vnd.ms-excel.table": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",

		/* Themes */
		"application/vnd.openxmlformats-officedocument.theme+xml": "themes",

		/* Theme Override */
		"application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",

		/* Timeline */
		"application/vnd.ms-excel.Timeline+xml": "TODO", /* verify */
		"application/vnd.ms-excel.TimelineCache+xml": "TODO", /* verify */

		/* VBA */
		"application/vnd.ms-office.vbaProject": "vba",
		"application/vnd.ms-office.vbaProjectSignature": "TODO",

		/* Volatile Dependencies */
		"application/vnd.ms-office.volatileDependencies": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",

		/* Control Properties */
		"application/vnd.ms-excel.controlproperties+xml": "TODO",

		/* Data Model */
		"application/vnd.openxmlformats-officedocument.model+data": "TODO",

		/* Survey */
		"application/vnd.ms-excel.Survey+xml": "TODO",

		/* Drawing */
		"application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",

		/* VML */
		"application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",

		"application/vnd.openxmlformats-package.relationships+xml": "rels",
		"application/vnd.openxmlformats-officedocument.oleObject": "TODO",

		/* Image */
		"image/png": "TODO",

		"sheet": "js"
	}/*:any*/);

	function new_ct()/*:any*/ {
		return ({
			workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
			rels:[], strs:[], comments:[], threadedcomments:[], links:[],
			coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
			calcchains:[], vba: [], drawings: [], metadata: [], people:[],
			TODO:[], xmlns: "" }/*:any*/);
	}

	function parse_ct(data/*:?string*/) {
		var ct = new_ct();
		if(!data || !data.match) return ct;
		var ctext = {};
		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0].replace(nsregex,"<")) {
				case '<?xml': break;
				case '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/)||["",""])[1] ]; break;
				case '<Default': ctext[y.Extension] = y.ContentType; break;
				case '<Override':
					if(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
					break;
			}
		});
		if(ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
		ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
		ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
		ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
		ct.defaults = ctext;
		delete ct.calcchains;
		return ct;
	}
	/* 9.3 Relationships */
	var RELS = ({
		CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
		CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
		WS: [
			"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
			"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
		],
		DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
		MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
		TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment"}/*:any*/);


	/* 9.3.3 Representing Relationships */
	function get_rels_path(file/*:string*/)/*:string*/ {
		var n = file.lastIndexOf("/");
		return file.slice(0,n+1) + '_rels/' + file.slice(n+1) + ".rels";
	}

	function parse_rels(data/*:?string*/, currentFilePath/*:string*/) {
		var rels = {"!id":{}};
		if (!data) return rels;
		if (currentFilePath.charAt(0) !== '/') {
			currentFilePath = '/'+currentFilePath;
		}
		var hash = {};

		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			/* 9.3.2.2 OPC_Relationships */
			if (y[0] === '<Relationship') {
				var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; if(y.TargetMode) rel.TargetMode = y.TargetMode;
				var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
				rels[canonictarget] = rel;
				hash[y.Id] = rel;
			}
		});
		rels["!id"] = hash;
		return rels;
	}
	/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */
	/* Part 3 Section 4 Manifest File */
	var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
	function parse_manifest(d, opts) {
		var str = xlml_normalize(d);
		var Rn;
		var FEtag;
		while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
			case 'manifest': break; // 4.2 <manifest:manifest>
			case 'file-entry': // 4.3 <manifest:file-entry>
				FEtag = parsexmltag(Rn[0], false);
				if(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
				break;
			case 'encryption-data': // 4.4 <manifest:encryption-data>
			case 'algorithm': // 4.5 <manifest:algorithm>
			case 'start-key-generation': // 4.6 <manifest:start-key-generation>
			case 'key-derivation': // 4.7 <manifest:key-derivation>
				throw new Error("Unsupported ODS Encryption");
			default: if(opts && opts.WTF) throw Rn;
		}
	}

	/* ECMA-376 Part II 11.1 Core Properties Part */
	/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
	var CORE_PROPS/*:Array<Array<string> >*/ = [
		["cp:category", "Category"],
		["cp:contentStatus", "ContentStatus"],
		["cp:keywords", "Keywords"],
		["cp:lastModifiedBy", "LastAuthor"],
		["cp:lastPrinted", "LastPrinted"],
		["cp:revision", "RevNumber"],
		["cp:version", "Version"],
		["dc:creator", "Author"],
		["dc:description", "Comments"],
		["dc:identifier", "Identifier"],
		["dc:language", "Language"],
		["dc:subject", "Subject"],
		["dc:title", "Title"],
		["dcterms:created", "CreatedDate", 'date'],
		["dcterms:modified", "ModifiedDate", 'date']
	];

	var CORE_PROPS_REGEX/*:Array<RegExp>*/ = /*#__PURE__*/(function() {
		var r = new Array(CORE_PROPS.length);
		for(var i = 0; i < CORE_PROPS.length; ++i) {
			var f = CORE_PROPS[i];
			var g = "(?:"+ f[0].slice(0,f[0].indexOf(":")) +":)"+ f[0].slice(f[0].indexOf(":")+1);
			r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)<\/" + g + ">");
		}
		return r;
	})();

	function parse_core_props(data) {
		var p = {};
		data = utf8read(data);

		for(var i = 0; i < CORE_PROPS.length; ++i) {
			var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
			if(cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
			if(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
		}

		return p;
	}
	/* 15.2.12.3 Extended File Properties Part */
	/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
	var EXT_PROPS/*:Array<Array<string> >*/ = [
		["Application", "Application", "string"],
		["AppVersion", "AppVersion", "string"],
		["Company", "Company", "string"],
		["DocSecurity", "DocSecurity", "string"],
		["Manager", "Manager", "string"],
		["HyperlinksChanged", "HyperlinksChanged", "bool"],
		["SharedDoc", "SharedDoc", "bool"],
		["LinksUpToDate", "LinksUpToDate", "bool"],
		["ScaleCrop", "ScaleCrop", "bool"],
		["HeadingPairs", "HeadingPairs", "raw"],
		["TitlesOfParts", "TitlesOfParts", "raw"]
	];
	function load_props_pairs(HP/*:string|Array<Array<any>>*/, TOP, props, opts) {
		var v = [];
		if(typeof HP == "string") v = parseVector(HP, opts);
		else for(var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function(hp) { return {v:hp}; }));
		var parts = (typeof TOP == "string") ? parseVector(TOP, opts).map(function (x) { return x.v; }) : TOP;
		var idx = 0, len = 0;
		if(parts.length > 0) for(var i = 0; i !== v.length; i += 2) {
			len = +(v[i+1].v);
			switch(v[i].v) {
				case "Worksheets":
				case "工作表":
				case "Листы":
				case "أوراق العمل":
				case "ワークシート":
				case "גליונות עבודה":
				case "Arbeitsblätter":
				case "Çalışma Sayfaları":
				case "Feuilles de calcul":
				case "Fogli di lavoro":
				case "Folhas de cálculo":
				case "Planilhas":
				case "Regneark":
				case "Hojas de cálculo":
				case "Werkbladen":
					props.Worksheets = len;
					props.SheetNames = parts.slice(idx, idx + len);
					break;

				case "Named Ranges":
				case "Rangos con nombre":
				case "名前付き一覧":
				case "Benannte Bereiche":
				case "Navngivne områder":
					props.NamedRanges = len;
					props.DefinedNames = parts.slice(idx, idx + len);
					break;

				case "Charts":
				case "Diagramme":
					props.Chartsheets = len;
					props.ChartNames = parts.slice(idx, idx + len);
					break;
			}
			idx += len;
		}
	}

	function parse_ext_props(data, p, opts) {
		var q = {}; if(!p) p = {};
		data = utf8read(data);

		EXT_PROPS.forEach(function(f) {
			var xml = (data.match(matchtag(f[0]))||[])[1];
			switch(f[2]) {
				case "string": if(xml) p[f[1]] = unescapexml(xml); break;
				case "bool": p[f[1]] = xml === "true"; break;
				case "raw":
					var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)<\/" + f[0] + ">"));
					if(cur && cur.length > 0) q[f[1]] = cur[1];
					break;
			}
		});

		if(q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);

		return p;
	}
	/* 15.2.12.2 Custom File Properties Part */
	var custregex = /<[^>]+>[^<]*/g;
	function parse_cust_props(data/*:string*/, opts) {
		var p = {}, name = "";
		var m = data.match(custregex);
		if(m) for(var i = 0; i != m.length; ++i) {
			var x = m[i], y = parsexmltag(x);
			switch(y[0]) {
				case '<?xml': break;
				case '<Properties': break;
				case '<property': name = unescapexml(y.name); break;
				case '</property>': name = null; break;
				default: if (x.indexOf('<vt:') === 0) {
					var toks = x.split('>');
					var type = toks[0].slice(4), text = toks[1];
					/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
					switch(type) {
						case 'lpstr': case 'bstr': case 'lpwstr':
							p[name] = unescapexml(text);
							break;
						case 'bool':
							p[name] = parsexmlbool(text);
							break;
						case 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':
							p[name] = parseInt(text, 10);
							break;
						case 'r4': case 'r8': case 'decimal':
							p[name] = parseFloat(text);
							break;
						case 'filetime': case 'date':
							p[name] = parseDate(text);
							break;
						case 'cy': case 'error':
							p[name] = unescapexml(text);
							break;
						default:
							if(type.slice(-1) == '/') break;
							if(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
					}
				} else if(x.slice(0,2) === "</") ; else if(opts.WTF) throw new Error(x);
			}
		}
		return p;
	}
	/* Common Name -> XLML Name */
	var XLMLDocPropsMap = {
		Title: 'Title',
		Subject: 'Subject',
		Author: 'Author',
		Keywords: 'Keywords',
		Comments: 'Description',
		LastAuthor: 'LastAuthor',
		RevNumber: 'Revision',
		Application: 'AppName',
		/* TotalTime: 'TotalTime', */
		LastPrinted: 'LastPrinted',
		CreatedDate: 'Created',
		ModifiedDate: 'LastSaved',
		/* Pages */
		/* Words */
		/* Characters */
		Category: 'Category',
		/* PresentationFormat */
		Manager: 'Manager',
		Company: 'Company',
		/* Guid */
		/* HyperlinkBase */
		/* Bytes */
		/* Lines */
		/* Paragraphs */
		/* CharactersWithSpaces */
		AppVersion: 'Version',

		ContentStatus: 'ContentStatus', /* NOTE: missing from schema */
		Identifier: 'Identifier', /* NOTE: missing from schema */
		Language: 'Language' /* NOTE: missing from schema */
	};
	var evert_XLMLDPM;

	function xlml_set_prop(Props, tag/*:string*/, val) {
		if(!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
		tag = evert_XLMLDPM[tag] || tag;
		Props[tag] = val;
	}
	/* [MS-DTYP] 2.3.3 FILETIME */
	/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
	/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
	function parse_FILETIME(blob) {
		var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
		return new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\.000/,"");
	}

	/* [MS-OSHARED] 2.3.3.1.4 Lpstr */
	function parse_lpstr(blob, type, pad/*:?number*/) {
		var start = blob.l;
		var str = blob.read_shift(0, 'lpstr-cp');
		if(pad) while((blob.l - start) & 3) ++blob.l;
		return str;
	}

	/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
	function parse_lpwstr(blob, type, pad) {
		var str = blob.read_shift(0, 'lpwstr');
		return str;
	}


	/* [MS-OSHARED] 2.3.3.1.11 VtString */
	/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
	function parse_VtStringBase(blob, stringType, pad) {
		if(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);
		return parse_lpstr(blob, stringType, pad);
	}

	function parse_VtString(blob, t/*:number*/, pad/*:?boolean*/) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }
	function parse_VtUnalignedString(blob, t/*:number*/) { if(!t) throw new Error("VtUnalignedString must have positive length"); return parse_VtStringBase(blob, t, 0); }

	/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */
	function parse_VtVecLpwstrValue(blob)/*:Array<string>*/ {
		var length = blob.read_shift(4);
		var ret/*:Array<string>*/ = [];
		for(var i = 0; i != length; ++i) {
			var start = blob.l;
			ret[i] = blob.read_shift(0, 'lpwstr').replace(chr0,'');
			if((blob.l - start) & 0x02) blob.l += 2;
		}
		return ret;
	}

	/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
	function parse_VtVecUnalignedLpstrValue(blob)/*:Array<string>*/ {
		var length = blob.read_shift(4);
		var ret/*:Array<string>*/ = [];
		for(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0,'');
		return ret;
	}


	/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
	function parse_VtHeadingPair(blob) {
		var start = blob.l;
		var headingString = parse_TypedPropertyValue(blob, VT_USTR);
		if(blob[blob.l] == 0x00 && blob[blob.l+1] == 0x00 && ((blob.l - start) & 0x02)) blob.l += 2;
		var headerParts = parse_TypedPropertyValue(blob, VT_I4);
		return [headingString, headerParts];
	}

	/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
	function parse_VtVecHeadingPairValue(blob) {
		var cElements = blob.read_shift(4);
		var out = [];
		for(var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
		return out;
	}

	/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
	function parse_dictionary(blob,CodePage) {
		var cnt = blob.read_shift(4);
		var dict/*:{[number]:string}*/ = ({}/*:any*/);
		for(var j = 0; j != cnt; ++j) {
			var pid = blob.read_shift(4);
			var len = blob.read_shift(4);
			dict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');
			if(CodePage === 0x4B0 && (len % 2)) blob.l += 2;
		}
		if(blob.l & 3) blob.l = (blob.l>>2+1)<<2;
		return dict;
	}

	/* [MS-OLEPS] 2.9 BLOB */
	function parse_BLOB(blob) {
		var size = blob.read_shift(4);
		var bytes = blob.slice(blob.l,blob.l+size);
		blob.l += size;
		if((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
		return bytes;
	}

	/* [MS-OLEPS] 2.11 ClipboardData */
	function parse_ClipboardData(blob) {
		// TODO
		var o = {};
		o.Size = blob.read_shift(4);
		//o.Format = blob.read_shift(4);
		blob.l += o.Size + 3 - (o.Size - 1) % 4;
		return o;
	}

	/* [MS-OLEPS] 2.15 TypedPropertyValue */
	function parse_TypedPropertyValue(blob, type/*:number*/, _opts)/*:any*/ {
		var t = blob.read_shift(2), ret, opts = _opts||{};
		blob.l += 2;
		if(type !== VT_VARIANT)
		if(t !== type && VT_CUSTOM.indexOf(type)===-1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error('Expected type ' + type + ' saw ' + t);
		switch(type === VT_VARIANT ? t : type) {
			case 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;
			case 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;
			case 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;
			case 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;
			case 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');
			case 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);
			case 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);
			case 0x41 /*VT_BLOB*/: return parse_BLOB(blob);
			case 0x47 /*VT_CF*/: return parse_ClipboardData(blob);
			case 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw).replace(chr0,'');
			case 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t/*, 4*/).replace(chr0,'');
			case 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPairValue(blob);
			case 0x101E /*VT_VECTOR|VT_LPSTR*/:
			case 0x101F /*VT_VECTOR|VT_LPWSTR*/:
				return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
			default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
		}
	}

	/* [MS-OLEPS] 2.20 PropertySet */
	function parse_PropertySet(blob, PIDSI) {
		var start_addr = blob.l;
		var size = blob.read_shift(4);
		var NumProps = blob.read_shift(4);
		var Props = [], i = 0;
		var CodePage = 0;
		var Dictionary = -1, DictObj/*:{[number]:string}*/ = ({}/*:any*/);
		for(i = 0; i != NumProps; ++i) {
			var PropID = blob.read_shift(4);
			var Offset = blob.read_shift(4);
			Props[i] = [PropID, Offset + start_addr];
		}
		Props.sort(function(x,y) { return x[1] - y[1]; });
		var PropH = {};
		for(i = 0; i != NumProps; ++i) {
			if(blob.l !== Props[i][1]) {
				var fail = true;
				if(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {
					case 0x02 /*VT_I2*/: if(blob.l+2 === Props[i][1]) { blob.l+=2; fail = false; } break;
					case 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
					case 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
				}
				if((!PIDSI||i==0) && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }
				if(fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
			}
			if(PIDSI) {
				var piddsi = PIDSI[Props[i][0]];
				PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});
				if(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
				if(piddsi.n == "CodePage") switch(PropH[piddsi.n]) {
					case 0: PropH[piddsi.n] = 1252;
						/* falls through */
					case 874:
					case 932:
					case 936:
					case 949:
					case 950:
					case 1250:
					case 1251:
					case 1253:
					case 1254:
					case 1255:
					case 1256:
					case 1257:
					case 1258:
					case 10000:
					case 1200:
					case 1201:
					case 1252:
					case 65000: case -536:
					case 65001: case -535:
						set_cp(CodePage = (PropH[piddsi.n]>>>0) & 0xFFFF); break;
					default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
				}
			} else {
				if(Props[i][0] === 0x1) {
					CodePage = PropH.CodePage = (parse_TypedPropertyValue(blob, VT_I2)/*:number*/);
					set_cp(CodePage);
					if(Dictionary !== -1) {
						var oldpos = blob.l;
						blob.l = Props[Dictionary][1];
						DictObj = parse_dictionary(blob,CodePage);
						blob.l = oldpos;
					}
				} else if(Props[i][0] === 0) {
					if(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }
					DictObj = parse_dictionary(blob,CodePage);
				} else {
					var name = DictObj[Props[i][0]];
					var val;
					/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
					switch(blob[blob.l]) {
						case 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;
						case 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
						case 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
						case 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;
						case 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;
						case 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;
						case 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;
						case 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;
						default: throw new Error("unparsed value: " + blob[blob.l]);
					}
					PropH[name] = val;
				}
			}
		}
		blob.l = start_addr + size; /* step ahead to skip padding */
		return PropH;
	}

	/* [MS-OLEPS] 2.21 PropertySetStream */
	function parse_PropertySetStream(file, PIDSI, clsid) {
		var blob = file.content;
		if(!blob) return ({}/*:any*/);
		prep_blob(blob, 0);

		var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
		blob.chk('feff', 'Byte Order: ');

		/*var vers = */blob.read_shift(2); // TODO: check version
		var SystemIdentifier = blob.read_shift(4);
		var CLSID = blob.read_shift(16);
		if(CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
		NumSets = blob.read_shift(4);
		if(NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
		FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);

		if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
		else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
		var PSet0 = parse_PropertySet(blob, PIDSI);

		var rval = ({ SystemIdentifier: SystemIdentifier }/*:any*/);
		for(var y in PSet0) rval[y] = PSet0[y];
		//rval.blob = blob;
		rval.FMTID = FMTID0;
		//rval.PSet0 = PSet0;
		if(NumSets === 1) return rval;
		if(Offset1 - blob.l == 2) blob.l += 2;
		if(blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
		var PSet1;
		try { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}
		for(y in PSet1) rval[y] = PSet1[y];
		rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1
		return rval;
	}

	function parsenoop2(blob, length) { blob.read_shift(length); return null; }

	function parslurp(blob, length, cb) {
		var arr = [], target = blob.l + length;
		while(blob.l < target) arr.push(cb(blob, target - blob.l));
		if(target !== blob.l) throw new Error("Slurp error");
		return arr;
	}

	function parsebool(blob, length/*:number*/) { return blob.read_shift(length) === 0x1; }

	function parseuint16(blob/*::, length:?number, opts:?any*/) { return blob.read_shift(2, 'u'); }
	function parseuint16a(blob, length/*:: :?number, opts:?any*/) { return parslurp(blob,length,parseuint16);}

	/* --- 2.5 Structures --- */

	/* [MS-XLS] 2.5.10 Bes (boolean or error) */
	function parse_Bes(blob/*::, length*/) {
		var v = blob.read_shift(1), t = blob.read_shift(1);
		return t === 0x01 ? v : v === 0x01;
	}

	/* [MS-XLS] 2.5.240 ShortXLUnicodeString */
	function parse_ShortXLUnicodeString(blob, length, opts) {
		var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
		var encoding = 'sbcs-cont';
		if(opts && opts.biff >= 8) ;
		if(!opts || opts.biff == 8 ) {
			var fHighByte = blob.read_shift(1);
			if(fHighByte) { encoding = 'dbcs-cont'; }
		} else if(opts.biff == 12) {
			encoding = 'wstr';
		}
		if(opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';
		var o = cch ? blob.read_shift(cch, encoding) : "";
		return o;
	}

	/* 2.5.293 XLUnicodeRichExtendedString */
	function parse_XLUnicodeRichExtendedString(blob) {
		var cch = blob.read_shift(2), flags = blob.read_shift(1);
		var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;
		var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
		var cRun = 0, cbExtRst;
		var z = {};
		if(fRichSt) cRun = blob.read_shift(2);
		if(fExtSt) cbExtRst = blob.read_shift(4);
		var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
		var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
		if(fRichSt) blob.l += 4 * cRun; //TODO: parse this
		if(fExtSt) blob.l += cbExtRst; //TODO: parse this
		z.t = msg;
		if(!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t; }
		return z;
	}

	/* 2.5.296 XLUnicodeStringNoCch */
	function parse_XLUnicodeStringNoCch(blob, cch, opts) {
		var retval;
		if(opts) {
			if(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');
			if(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
		}
		var fHighByte = blob.read_shift(1);
		if(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }
		else { retval = blob.read_shift(cch, 'dbcs-cont'); }
		return retval;
	}

	/* 2.5.294 XLUnicodeString */
	function parse_XLUnicodeString(blob, length, opts) {
		var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		if(cch === 0) { blob.l++; return ""; }
		return parse_XLUnicodeStringNoCch(blob, cch, opts);
	}
	/* BIFF5 override */
	function parse_XLUnicodeString2(blob, length, opts) {
		if(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
		var cch = blob.read_shift(1);
		if(cch === 0) { blob.l++; return ""; }
		return blob.read_shift(cch, (opts.biff <= 4 || !blob.lens ) ? 'cpstr' : 'sbcs-cont');
	}

	/* [MS-XLS] 2.5.61 ControlInfo */
	function parse_ControlInfo(blob/*::, length, opts*/) {
		var flags = blob.read_shift(1);
		blob.l++;
		var accel = blob.read_shift(2);
		blob.l += 2;
		return [flags, accel];
	}

	/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
	function parse_URLMoniker(blob/*::, length, opts*/) {
		var len = blob.read_shift(4), start = blob.l;
		var extra = false;
		if(len > 24) {
			/* look ahead */
			blob.l += len - 24;
			if(blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
			blob.l = start;
		}
		var url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,"");
		if(extra) blob.l += 24;
		return url;
	}

	/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
	function parse_FileMoniker(blob/*::, length*/) {
		var cAnti = blob.read_shift(2);
		var preamble = ""; while(cAnti-- > 0) preamble += "../";
		var ansiPath = blob.read_shift(0, 'lpstr-ansi');
		blob.l += 2; //var endServer = blob.read_shift(2);
		if(blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
		var sz = blob.read_shift(4);
		if(sz === 0) return preamble + ansiPath.replace(/\\/g,"/");
		var bytes = blob.read_shift(4);
		if(blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
		var unicodePath = blob.read_shift(bytes>>1, 'utf16le').replace(chr0,"");
		return preamble + unicodePath;
	}

	/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
	function parse_HyperlinkMoniker(blob, length) {
		var clsid = blob.read_shift(16);	switch(clsid) {
			case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob);
			case "0303000000000000c000000000000046": return parse_FileMoniker(blob);
			default: throw new Error("Unsupported Moniker " + clsid);
		}
	}

	/* [MS-OSHARED] 2.3.7.9 HyperlinkString */
	function parse_HyperlinkString(blob/*::, length*/) {
		var len = blob.read_shift(4);
		var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, "") : "";
		return o;
	}

	/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */
	function parse_Hyperlink(blob, length)/*:Hyperlink*/ {
		var end = blob.l + length;
		var sVer = blob.read_shift(4);
		if(sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
		var flags = blob.read_shift(2);
		blob.l += 2;
		var displayName, targetFrameName, moniker, oleMoniker, Loc="", guid, fileTime;
		if(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
		if(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
		if((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
		if((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
		if(flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
		if(flags & 0x0020) guid = blob.read_shift(16);
		if(flags & 0x0040) fileTime = parse_FILETIME(blob/*, 8*/);
		blob.l = end;
		var target = targetFrameName||moniker||oleMoniker||"";
		if(target && Loc) target+="#"+Loc;
		if(!target) target = "#" + Loc;
		if((flags & 0x0002) && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
		var out = ({Target:target}/*:any*/);
		if(guid) out.guid = guid;
		if(fileTime) out.time = fileTime;
		if(displayName) out.Tooltip = displayName;
		return out;
	}

	/* 2.5.178 LongRGBA */
	function parse_LongRGBA(blob/*::, length*/) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }

	/* 2.5.177 LongRGB */
	function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob); x[3] = 0; return x; }


	/* [MS-XLS] 2.5.19 */
	function parse_XLSCell(blob/*::, length*/)/*:Cell*/ {
		var rw = blob.read_shift(2); // 0-indexed
		var col = blob.read_shift(2);
		var ixfe = blob.read_shift(2);
		return ({r:rw, c:col, ixfe:ixfe}/*:any*/);
	}

	/* [MS-XLS] 2.5.134 */
	function parse_frtHeader(blob) {
		var rt = blob.read_shift(2);
		var flags = blob.read_shift(2); // TODO: parse these flags
		blob.l += 8;
		return {type: rt, flags: flags};
	}



	function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts); }

	/* [MS-XLS] 2.5.344 */
	function parse_XTI(blob, length, opts) {
		var w = opts.biff > 8 ? 4 : 2;
		var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w,'i'), itabLast = blob.read_shift(w,'i');
		return [iSupBook, itabFirst, itabLast];
	}

	/* [MS-XLS] 2.5.218 */
	function parse_RkRec(blob) {
		var ixfe = blob.read_shift(2);
		var RK = parse_RkNumber(blob);
		return [ixfe, RK];
	}

	/* [MS-XLS] 2.5.1 */
	function parse_AddinUdf(blob, length, opts) {
		blob.l += 4; length -= 4;
		var l = blob.l + length;
		var udfName = parse_ShortXLUnicodeString(blob, length, opts);
		var cb = blob.read_shift(2);
		l -= blob.l;
		if(cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
		blob.l += cb;
		return udfName;
	}

	/* [MS-XLS] 2.5.209 TODO: Check sizes */
	function parse_Ref8U(blob/*::, length*/) {
		var rwFirst = blob.read_shift(2);
		var rwLast = blob.read_shift(2);
		var colFirst = blob.read_shift(2);
		var colLast = blob.read_shift(2);
		return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
	}

	/* [MS-XLS] 2.5.211 */
	function parse_RefU(blob/*::, length*/) {
		var rwFirst = blob.read_shift(2);
		var rwLast = blob.read_shift(2);
		var colFirst = blob.read_shift(1);
		var colLast = blob.read_shift(1);
		return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
	}

	/* [MS-XLS] 2.5.207 */
	var parse_Ref = parse_RefU;

	/* [MS-XLS] 2.5.143 */
	function parse_FtCmo(blob/*::, length*/) {
		blob.l += 4;
		var ot = blob.read_shift(2);
		var id = blob.read_shift(2);
		var flags = blob.read_shift(2);
		blob.l+=12;
		return [id, ot, flags];
	}

	/* [MS-XLS] 2.5.149 */
	function parse_FtNts(blob) {
		var out = {};
		blob.l += 4;
		blob.l += 16; // GUID TODO
		out.fSharedNote = blob.read_shift(2);
		blob.l += 4;
		return out;
	}

	/* [MS-XLS] 2.5.142 */
	function parse_FtCf(blob) {
		var out = {};
		blob.l += 4;
		blob.cf = blob.read_shift(2);
		return out;
	}

	/* [MS-XLS] 2.5.140 - 2.5.154 and friends */
	function parse_FtSkip(blob) { blob.l += 2; blob.l += blob.read_shift(2); }
	var FtTab = {
		/*::[*/0x00/*::]*/: parse_FtSkip,      /* FtEnd */
		/*::[*/0x04/*::]*/: parse_FtSkip,      /* FtMacro */
		/*::[*/0x05/*::]*/: parse_FtSkip,      /* FtButton */
		/*::[*/0x06/*::]*/: parse_FtSkip,      /* FtGmo */
		/*::[*/0x07/*::]*/: parse_FtCf,        /* FtCf */
		/*::[*/0x08/*::]*/: parse_FtSkip,      /* FtPioGrbit */
		/*::[*/0x09/*::]*/: parse_FtSkip,      /* FtPictFmla */
		/*::[*/0x0A/*::]*/: parse_FtSkip,      /* FtCbls */
		/*::[*/0x0B/*::]*/: parse_FtSkip,      /* FtRbo */
		/*::[*/0x0C/*::]*/: parse_FtSkip,      /* FtSbs */
		/*::[*/0x0D/*::]*/: parse_FtNts,       /* FtNts */
		/*::[*/0x0E/*::]*/: parse_FtSkip,      /* FtSbsFmla */
		/*::[*/0x0F/*::]*/: parse_FtSkip,      /* FtGboData */
		/*::[*/0x10/*::]*/: parse_FtSkip,      /* FtEdoData */
		/*::[*/0x11/*::]*/: parse_FtSkip,      /* FtRboData */
		/*::[*/0x12/*::]*/: parse_FtSkip,      /* FtCblsData */
		/*::[*/0x13/*::]*/: parse_FtSkip,      /* FtLbsData */
		/*::[*/0x14/*::]*/: parse_FtSkip,      /* FtCblsFmla */
		/*::[*/0x15/*::]*/: parse_FtCmo
	};
	function parse_FtArray(blob, length/*::, ot*/) {
		var tgt = blob.l + length;
		var fts = [];
		while(blob.l < tgt) {
			var ft = blob.read_shift(2);
			blob.l-=2;
			try {
				fts.push(FtTab[ft](blob, tgt - blob.l));
			} catch(e) { blob.l = tgt; return fts; }
		}
		if(blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
		return fts;
	}

	/* --- 2.4 Records --- */

	/* [MS-XLS] 2.4.21 */
	function parse_BOF(blob, length) {
		var o = {BIFFVer:0, dt:0};
		o.BIFFVer = blob.read_shift(2); length -= 2;
		if(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }
		switch(o.BIFFVer) {
			case 0x0600: /* BIFF8 */
			case 0x0500: /* BIFF5 */
			case 0x0400: /* BIFF4 */
			case 0x0300: /* BIFF3 */
			case 0x0200: /* BIFF2 */
			case 0x0002: case 0x0007: /* BIFF2 */
				break;
			default: if(length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
		}

		blob.read_shift(length);
		return o;
	}


	/* [MS-XLS] 2.4.146 */
	function parse_InterfaceHdr(blob, length) {
		if(length === 0) return 0x04b0;
		if((blob.read_shift(2))!==0x04b0);
		return 0x04b0;
	}


	/* [MS-XLS] 2.4.349 */
	function parse_WriteAccess(blob, length, opts) {
		if(opts.enc) { blob.l += length; return ""; }
		var l = blob.l;
		// TODO: make sure XLUnicodeString doesnt overrun
		var UserName = parse_XLUnicodeString2(blob, 0, opts);
		blob.read_shift(length + l - blob.l);
		return UserName;
	}

	/* [MS-XLS] 2.4.351 */
	function parse_WsBool(blob, length, opts) {
		var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
		return { fDialog: flags & 0x10, fBelow: flags & 0x40, fRight: flags & 0x80 };
	}

	/* [MS-XLS] 2.4.28 */
	function parse_BoundSheet8(blob, length, opts) {
		var pos = blob.read_shift(4);
		var hidden = blob.read_shift(1) & 0x03;
		var dt = blob.read_shift(1);
		switch(dt) {
			case 0: dt = 'Worksheet'; break;
			case 1: dt = 'Macrosheet'; break;
			case 2: dt = 'Chartsheet'; break;
			case 6: dt = 'VBAModule'; break;
		}
		var name = parse_ShortXLUnicodeString(blob, 0, opts);
		if(name.length === 0) name = "Sheet1";
		return { pos:pos, hs:hidden, dt:dt, name:name };
	}

	/* [MS-XLS] 2.4.265 TODO */
	function parse_SST(blob, length)/*:SST*/ {
		var end = blob.l + length;
		var cnt = blob.read_shift(4);
		var ucnt = blob.read_shift(4);
		var strs/*:SST*/ = ([]/*:any*/);
		for(var i = 0; i != ucnt && blob.l < end; ++i) {
			strs.push(parse_XLUnicodeRichExtendedString(blob));
		}
		strs.Count = cnt; strs.Unique = ucnt;
		return strs;
	}

	/* [MS-XLS] 2.4.107 */
	function parse_ExtSST(blob, length) {
		var extsst = {};
		extsst.dsst = blob.read_shift(2);
		blob.l += length-2;
		return extsst;
	}


	/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */
	function parse_Row(blob) {
		var z = ({}/*:any*/);
		z.r = blob.read_shift(2);
		z.c = blob.read_shift(2);
		z.cnt = blob.read_shift(2) - z.c;
		var miyRw = blob.read_shift(2);
		blob.l += 4; // reserved(2), unused(2)
		var flags = blob.read_shift(1); // various flags
		blob.l += 3; // reserved(8), ixfe(12), flags(4)
		if(flags & 0x07) z.level = flags & 0x07;
		// collapsed: flags & 0x10
		if(flags & 0x20) z.hidden = true;
		if(flags & 0x40) z.hpt = miyRw / 20;
		return z;
	}


	/* [MS-XLS] 2.4.125 */
	function parse_ForceFullCalculation(blob) {
		var header = parse_frtHeader(blob);
		if(header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
		var fullcalc = blob.read_shift(4);
		return fullcalc !== 0x0;
	}





	/* [MS-XLS] 2.4.215 rt */
	function parse_RecalcId(blob) {
		blob.read_shift(2);
		return blob.read_shift(4);
	}

	/* [MS-XLS] 2.4.87 */
	function parse_DefaultRowHeight(blob, length, opts) {
		var f = 0;
		if(!(opts && opts.biff == 2)) {
			f = blob.read_shift(2);
		}
		var miyRw = blob.read_shift(2);
		if((opts && opts.biff == 2)) {
			f = 1 - (miyRw >> 15); miyRw &= 0x7fff;
		}
		var fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};
		return [fl, miyRw];
	}

	/* [MS-XLS] 2.4.345 TODO */
	function parse_Window1(blob) {
		var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
		var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
		var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
		return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,
			FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };
	}
	/* [MS-XLS] 2.4.346 TODO */
	function parse_Window2(blob, length, opts) {
		if(opts && opts.biff >= 2 && opts.biff < 5) return {};
		var f = blob.read_shift(2);
		return { RTL: f & 0x40 };
	}

	/* [MS-XLS] 2.4.189 TODO */
	function parse_Pane(/*blob, length, opts*/) {
	}

	/* [MS-XLS] 2.4.122 TODO */
	function parse_Font(blob, length, opts) {
		var o/*:any*/ = {
			dyHeight: blob.read_shift(2),
			fl: blob.read_shift(2)
		};
		switch((opts && opts.biff) || 8) {
			case 2: break;
			case 3: case 4: blob.l += 2; break;
			default: blob.l += 10; break;
		}
		o.name = parse_ShortXLUnicodeString(blob, 0, opts);
		return o;
	}

	/* [MS-XLS] 2.4.149 */
	function parse_LabelSst(blob) {
		var cell = parse_XLSCell(blob);
		cell.isst = blob.read_shift(4);
		return cell;
	}

	/* [MS-XLS] 2.4.148 */
	function parse_Label(blob, length, opts) {
		if(opts.biffguess && opts.biff == 2) opts.biff = 5;
		var target = blob.l + length;
		var cell = parse_XLSCell(blob);
		if(opts.biff == 2) blob.l++;
		var str = parse_XLUnicodeString(blob, target - blob.l, opts);
		cell.val = str;
		return cell;
	}


	/* [MS-XLS] 2.4.126 Number Formats */
	function parse_Format(blob, length, opts) {
		var numFmtId = blob.read_shift(2);
		var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
		return [numFmtId, fmtstr];
	}
	var parse_BIFF2Format = parse_XLUnicodeString2;

	/* [MS-XLS] 2.4.90 */
	function parse_Dimensions(blob, length, opts) {
		var end = blob.l + length;
		var w = opts.biff == 8 || !opts.biff ? 4 : 2;
		var r = blob.read_shift(w), R = blob.read_shift(w);
		var c = blob.read_shift(2), C = blob.read_shift(2);
		blob.l = end;
		return {s: {r:r, c:c}, e: {r:R, c:C}};
	}

	/* [MS-XLS] 2.4.220 */
	function parse_RK(blob) {
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var rkrec = parse_RkRec(blob);
		return {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};
	}

	/* [MS-XLS] 2.4.175 */
	function parse_MulRk(blob, length) {
		var target = blob.l + length - 2;
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var rkrecs = [];
		while(blob.l < target) rkrecs.push(parse_RkRec(blob));
		if(blob.l !== target) throw new Error("MulRK read error");
		var lastcol = blob.read_shift(2);
		if(rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
		return {r:rw, c:col, C:lastcol, rkrec:rkrecs};
	}
	/* [MS-XLS] 2.4.174 */
	function parse_MulBlank(blob, length) {
		var target = blob.l + length - 2;
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var ixfes = [];
		while(blob.l < target) ixfes.push(blob.read_shift(2));
		if(blob.l !== target) throw new Error("MulBlank read error");
		var lastcol = blob.read_shift(2);
		if(ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
		return {r:rw, c:col, C:lastcol, ixfe:ixfes};
	}

	/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */
	function parse_CellStyleXF(blob, length, style, opts) {
		var o = {};
		var a = blob.read_shift(4), b = blob.read_shift(4);
		var c = blob.read_shift(4), d = blob.read_shift(2);
		o.patternType = XLSFillPattern[c >> 26];

		if(!opts.cellStyles) return o;
		o.alc = a & 0x07;
		o.fWrap = (a >> 3) & 0x01;
		o.alcV = (a >> 4) & 0x07;
		o.fJustLast = (a >> 7) & 0x01;
		o.trot = (a >> 8) & 0xFF;
		o.cIndent = (a >> 16) & 0x0F;
		o.fShrinkToFit = (a >> 20) & 0x01;
		o.iReadOrder = (a >> 22) & 0x02;
		o.fAtrNum = (a >> 26) & 0x01;
		o.fAtrFnt = (a >> 27) & 0x01;
		o.fAtrAlc = (a >> 28) & 0x01;
		o.fAtrBdr = (a >> 29) & 0x01;
		o.fAtrPat = (a >> 30) & 0x01;
		o.fAtrProt = (a >> 31) & 0x01;

		o.dgLeft = b & 0x0F;
		o.dgRight = (b >> 4) & 0x0F;
		o.dgTop = (b >> 8) & 0x0F;
		o.dgBottom = (b >> 12) & 0x0F;
		o.icvLeft = (b >> 16) & 0x7F;
		o.icvRight = (b >> 23) & 0x7F;
		o.grbitDiag = (b >> 30) & 0x03;

		o.icvTop = c & 0x7F;
		o.icvBottom = (c >> 7) & 0x7F;
		o.icvDiag = (c >> 14) & 0x7F;
		o.dgDiag = (c >> 21) & 0x0F;

		o.icvFore = d & 0x7F;
		o.icvBack = (d >> 7) & 0x7F;
		o.fsxButton = (d >> 14) & 0x01;
		return o;
	}
	//function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
	//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}

	/* [MS-XLS] 2.4.353 TODO: actually do this right */
	function parse_XF(blob, length, opts) {
		var o = {};
		o.ifnt = blob.read_shift(2); o.numFmtId = blob.read_shift(2); o.flags = blob.read_shift(2);
		o.fStyle = (o.flags >> 2) & 0x01;
		length -= 6;
		o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
		return o;
	}

	/* [MS-XLS] 2.4.134 */
	function parse_Guts(blob) {
		blob.l += 4;
		var out = [blob.read_shift(2), blob.read_shift(2)];
		if(out[0] !== 0) out[0]--;
		if(out[1] !== 0) out[1]--;
		if(out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
		return out;
	}

	/* [MS-XLS] 2.4.24 */
	function parse_BoolErr(blob, length, opts) {
		var cell = parse_XLSCell(blob);
		if(opts.biff == 2 || length == 9) ++blob.l;
		var val = parse_Bes(blob);
		cell.val = val;
		cell.t = (val === true || val === false) ? 'b' : 'e';
		return cell;
	}

	/* [MS-XLS] 2.4.180 Number */
	function parse_Number(blob, length, opts) {
		if(opts.biffguess && opts.biff == 2) opts.biff = 5;
		var cell = parse_XLSCell(blob);
		var xnum = parse_Xnum(blob);
		cell.val = xnum;
		return cell;
	}

	var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136

	/* [MS-XLS] 2.4.271 */
	function parse_SupBook(blob, length, opts) {
		var end = blob.l + length;
		var ctab = blob.read_shift(2);
		var cch = blob.read_shift(2);
		opts.sbcch = cch;
		if(cch == 0x0401 || cch == 0x3A01) return [cch, ctab];
		if(cch < 0x01 || cch >0xff) throw new Error("Unexpected SupBook type: "+cch);
		var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
		/* TODO: 2.5.277 Virtual Path */
		var rgst = [];
		while(end > blob.l) rgst.push(parse_XLUnicodeString(blob));
		return [cch, ctab, virtPath, rgst];
	}

	/* [MS-XLS] 2.4.105 TODO */
	function parse_ExternName(blob, length, opts) {
		var flags = blob.read_shift(2);
		var body;
		var o = ({
			fBuiltIn: flags & 0x01,
			fWantAdvise: (flags >>> 1) & 0x01,
			fWantPict: (flags >>> 2) & 0x01,
			fOle: (flags >>> 3) & 0x01,
			fOleLink: (flags >>> 4) & 0x01,
			cf: (flags >>> 5) & 0x3FF,
			fIcon: flags >>> 15 & 0x01
		}/*:any*/);
		if(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);
		//else throw new Error("unsupported SupBook cch: " + opts.sbcch);
		o.body = body || blob.read_shift(length-2);
		if(typeof body === "string") o.Name = body;
		return o;
	}

	/* [MS-XLS] 2.4.150 TODO */
	var XLSLblBuiltIn = [
		"_xlnm.Consolidate_Area",
		"_xlnm.Auto_Open",
		"_xlnm.Auto_Close",
		"_xlnm.Extract",
		"_xlnm.Database",
		"_xlnm.Criteria",
		"_xlnm.Print_Area",
		"_xlnm.Print_Titles",
		"_xlnm.Recorder",
		"_xlnm.Data_Form",
		"_xlnm.Auto_Activate",
		"_xlnm.Auto_Deactivate",
		"_xlnm.Sheet_Title",
		"_xlnm._FilterDatabase"
	];
	function parse_Lbl(blob, length, opts) {
		var target = blob.l + length;
		var flags = blob.read_shift(2);
		var chKey = blob.read_shift(1);
		var cch = blob.read_shift(1);
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		var itab = 0;
		if(!opts || opts.biff >= 5) {
			if(opts.biff != 5) blob.l += 2;
			itab = blob.read_shift(2);
			if(opts.biff == 5) blob.l += 2;
			blob.l += 4;
		}
		var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
		if(flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
		var npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;
		/*jshint -W018 */
		var rgce = (target == blob.l || cce === 0 || !(npflen > 0)) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
		/*jshint +W018 */
		return {
			chKey: chKey,
			Name: name,
			itab: itab,
			rgce: rgce
		};
	}

	/* [MS-XLS] 2.4.106 TODO: verify filename encoding */
	function parse_ExternSheet(blob, length, opts) {
		if(opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
		var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
		while(len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
			// [iSupBook, itabFirst, itabLast];
		if(blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
		return o;
	}
	function parse_BIFF5ExternSheet(blob, length, opts) {
		if(blob[blob.l + 1] == 0x03) blob[blob.l]++;
		var o = parse_ShortXLUnicodeString(blob, length, opts);
		return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
	}

	/* [MS-XLS] 2.4.176 TODO: check older biff */
	function parse_NameCmt(blob, length, opts) {
		if(opts.biff < 8) { blob.l += length; return; }
		var cchName = blob.read_shift(2);
		var cchComment = blob.read_shift(2);
		var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
		var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
		return [name, comment];
	}

	/* [MS-XLS] 2.4.260 */
	function parse_ShrFmla(blob, length, opts) {
		var ref = parse_RefU(blob);
		blob.l++;
		var cUse = blob.read_shift(1);
		length -= 8;
		return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
	}

	/* [MS-XLS] 2.4.4 TODO */
	function parse_Array(blob, length, opts) {
		var ref = parse_Ref(blob);
		/* TODO: fAlwaysCalc */
		switch(opts.biff) {
			case 2: blob.l ++; length -= 7; break;
			case 3: case 4: blob.l += 2; length -= 8; break;
			default: blob.l += 6; length -= 12;
		}
		return [ref, parse_ArrayParsedFormula(blob, length, opts)];
	}

	/* [MS-XLS] 2.4.173 */
	function parse_MTRSettings(blob) {
		var fMTREnabled = blob.read_shift(4) !== 0x00;
		var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
		var cUserThreadCount = blob.read_shift(4);
		return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
	}

	/* [MS-XLS] 2.5.186 TODO: BIFF5 */
	function parse_NoteSh(blob, length, opts) {
		if(opts.biff < 8) return;
		var row = blob.read_shift(2), col = blob.read_shift(2);
		var flags = blob.read_shift(2), idObj = blob.read_shift(2);
		var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
		if(opts.biff < 8) blob.read_shift(1);
		return [{r:row,c:col}, stAuthor, idObj, flags];
	}

	/* [MS-XLS] 2.4.179 */
	function parse_Note(blob, length, opts) {
		/* TODO: Support revisions */
		return parse_NoteSh(blob, length, opts);
	}

	/* [MS-XLS] 2.4.168 */
	function parse_MergeCells(blob, length)/*:Array<Range>*/ {
		var merges/*:Array<Range>*/ = [];
		var cmcs = blob.read_shift(2);
		while (cmcs--) merges.push(parse_Ref8U(blob));
		return merges;
	}

	/* [MS-XLS] 2.4.181 TODO: parse all the things! */
	function parse_Obj(blob, length, opts) {
		if(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
		var cmo = parse_FtCmo(blob); // id, ot, flags
		var fts = parse_FtArray(blob, length-22, cmo[1]);
		return { cmo: cmo, ft:fts };
	}
	/* from older spec */
	var parse_BIFF5OT = {
	0x08: function(blob, length) {
		var tgt = blob.l + length;
		blob.l += 10; // todo
		var cf = blob.read_shift(2);
		blob.l += 4;
		blob.l += 2; //var cbPictFmla = blob.read_shift(2);
		blob.l += 2;
		blob.l += 2; //var grbit = blob.read_shift(2);
		blob.l += 4;
		var cchName = blob.read_shift(1);
		blob.l += cchName; // TODO: stName
		blob.l = tgt; // TODO: fmla
		return { fmt:cf };
	}
	};

	function parse_BIFF5Obj(blob, length, opts) {
		blob.l += 4; //var cnt = blob.read_shift(4);
		var ot = blob.read_shift(2);
		var id = blob.read_shift(2);
		var grbit = blob.read_shift(2);
		blob.l += 2; //var colL = blob.read_shift(2);
		blob.l += 2; //var dxL = blob.read_shift(2);
		blob.l += 2; //var rwT = blob.read_shift(2);
		blob.l += 2; //var dyT = blob.read_shift(2);
		blob.l += 2; //var colR = blob.read_shift(2);
		blob.l += 2; //var dxR = blob.read_shift(2);
		blob.l += 2; //var rwB = blob.read_shift(2);
		blob.l += 2; //var dyB = blob.read_shift(2);
		blob.l += 2; //var cbMacro = blob.read_shift(2);
		blob.l += 6;
		length -= 36;
		var fts = [];
		fts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));
		return { cmo: [id, ot, grbit], ft:fts };
	}

	/* [MS-XLS] 2.4.329 TODO: parse properly */
	function parse_TxO(blob, length, opts) {
		var s = blob.l;
		var texts = "";
	try {
		blob.l += 4;
		var ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];
		var controlInfo; // eslint-disable-line no-unused-vars
		if([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;
		else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars
		var cchText = blob.read_shift(2);
		/*var cbRuns = */blob.read_shift(2);
		/*var ifntEmpty = */parseuint16(blob, 2);
		var len = blob.read_shift(2);
		blob.l += len;
		//var fmla = parse_ObjFmla(blob, s + length - blob.l);

		for(var i = 1; i < blob.lens.length-1; ++i) {
			if(blob.l-s != blob.lens[i]) throw new Error("TxO: bad continue record");
			var hdr = blob[blob.l];
			var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);
			texts += t;
			if(texts.length >= (hdr ? cchText : 2*cchText)) break;
		}
		if(texts.length !== cchText && texts.length !== cchText*2) {
			throw new Error("cchText: " + cchText + " != " + texts.length);
		}

		blob.l = s + length;
		/* [MS-XLS] 2.5.272 TxORuns */
	//	var rgTxoRuns = [];
	//	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
	//	var cchText2 = blob.read_shift(2);
	//	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
	//	blob.l += 6;
	//	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
		return { t: texts };
	} catch(e) { blob.l = s + length; return { t: texts }; }
	}

	/* [MS-XLS] 2.4.140 */
	function parse_HLink(blob, length) {
		var ref = parse_Ref8U(blob);
		blob.l += 16; /* CLSID */
		var hlink = parse_Hyperlink(blob, length-24);
		return [ref, hlink];
	}


	/* [MS-XLS] 2.4.141 */
	function parse_HLinkTooltip(blob, length) {
		blob.read_shift(2);
		var ref = parse_Ref8U(blob);
		var wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');
		wzTooltip = wzTooltip.replace(chr0,"");
		return [ref, wzTooltip];
	}

	/* [MS-XLS] 2.4.63 */
	function parse_Country(blob)/*:[string|number, string|number]*/ {
		var o = [0,0], d;
		d = blob.read_shift(2); o[0] = CountryEnum[d] || d;
		d = blob.read_shift(2); o[1] = CountryEnum[d] || d;
		return o;
	}

	/* [MS-XLS] 2.4.50 ClrtClient */
	function parse_ClrtClient(blob) {
		var ccv = blob.read_shift(2);
		var o = [];
		while(ccv-->0) o.push(parse_LongRGB(blob));
		return o;
	}

	/* [MS-XLS] 2.4.188 */
	function parse_Palette(blob) {
		var ccv = blob.read_shift(2);
		var o = [];
		while(ccv-->0) o.push(parse_LongRGB(blob));
		return o;
	}

	/* [MS-XLS] 2.4.354 */
	function parse_XFCRC(blob) {
		blob.l += 2;
		var o = {cxfs:0, crc:0};
		o.cxfs = blob.read_shift(2);
		o.crc = blob.read_shift(4);
		return o;
	}

	/* [MS-XLS] 2.4.53 TODO: parse flags */
	/* [MS-XLSB] 2.4.323 TODO: parse flags */
	function parse_ColInfo(blob, length, opts) {
		if(!opts.cellStyles) return parsenoop(blob, length);
		var w = opts && opts.biff >= 12 ? 4 : 2;
		var colFirst = blob.read_shift(w);
		var colLast = blob.read_shift(w);
		var coldx = blob.read_shift(w);
		var ixfe = blob.read_shift(w);
		var flags = blob.read_shift(2);
		if(w == 2) blob.l += 2;
		var o = ({s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags}/*:any*/);
		if(opts.biff >= 5 || !opts.biff) o.level = (flags >> 8) & 0x7;
		return o;
	}

	/* [MS-XLS] 2.4.257 */
	function parse_Setup(blob, length) {
		var o = {};
		if(length < 32) return o;
		blob.l += 16;
		o.header = parse_Xnum(blob);
		o.footer = parse_Xnum(blob);
		blob.l += 2;
		return o;
	}

	/* [MS-XLS] 2.4.261 */
	function parse_ShtProps(blob, length, opts) {
		var def = {area:false};
		if(opts.biff != 5) { blob.l += length; return def; }
		var d = blob.read_shift(1); blob.l += 3;
		if((d & 0x10)) def.area = true;
		return def;
	}

	var parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */
	var parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */
	var parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */

	/* --- Specific to versions before BIFF8 --- */
	function parse_ImData(blob) {
		var cf = blob.read_shift(2);
		var env = blob.read_shift(2);
		var lcb = blob.read_shift(4);
		var o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};
		blob.l += lcb;
		return o;
	}

	/* BIFF2_??? where ??? is the name from [XLS] */
	function parse_BIFF2STR(blob, length, opts) {
		if(opts.biffguess && opts.biff == 5) opts.biff = 2;
		var cell = parse_XLSCell(blob);
		++blob.l;
		var str = parse_XLUnicodeString2(blob, length-7, opts);
		cell.t = 'str';
		cell.val = str;
		return cell;
	}

	function parse_BIFF2NUM(blob/*::, length*/) {
		var cell = parse_XLSCell(blob);
		++blob.l;
		var num = parse_Xnum(blob);
		cell.t = 'n';
		cell.val = num;
		return cell;
	}

	function parse_BIFF2INT(blob) {
		var cell = parse_XLSCell(blob);
		++blob.l;
		var num = blob.read_shift(2);
		cell.t = 'n';
		cell.val = num;
		return cell;
	}

	function parse_BIFF2STRING(blob) {
		var cch = blob.read_shift(1);
		if(cch === 0) { blob.l++; return ""; }
		return blob.read_shift(cch, 'sbcs-cont');
	}

	/* TODO: convert to BIFF8 font struct */
	function parse_BIFF2FONTXTRA(blob, length) {
		blob.l += 6; // unknown
		blob.l += 2; // font weight "bls"
		blob.l += 1; // charset
		blob.l += 3; // unknown
		blob.l += 1; // font family
		blob.l += length - 13;
	}

	/* TODO: parse rich text runs */
	function parse_RString(blob, length, opts) {
		var end = blob.l + length;
		var cell = parse_XLSCell(blob);
		var cch = blob.read_shift(2);
		var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
		blob.l = end;
		cell.t = 'str';
		cell.val = str;
		return cell;
	}
	/* from js-harb (C) 2014-present  SheetJS */
	var DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];
	var DBF = /*#__PURE__*/(function() {
	var dbf_codepage_map = {
		/* Code Pages Supported by Visual FoxPro */
		/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
		/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
		/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
		/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
		/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
		/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
		/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
		/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
		/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
		/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
		/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
		/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
		/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,

		/* shapefile DBF extension */
		/*::[*/0x00/*::]*/: 20127,           /*::[*/0x08/*::]*/:   865,
		/*::[*/0x09/*::]*/:   437,           /*::[*/0x0A/*::]*/:   850,
		/*::[*/0x0B/*::]*/:   437,           /*::[*/0x0D/*::]*/:   437,
		/*::[*/0x0E/*::]*/:   850,           /*::[*/0x0F/*::]*/:   437,
		/*::[*/0x10/*::]*/:   850,           /*::[*/0x11/*::]*/:   437,
		/*::[*/0x12/*::]*/:   850,           /*::[*/0x13/*::]*/:   932,
		/*::[*/0x14/*::]*/:   850,           /*::[*/0x15/*::]*/:   437,
		/*::[*/0x16/*::]*/:   850,           /*::[*/0x17/*::]*/:   865,
		/*::[*/0x18/*::]*/:   437,           /*::[*/0x19/*::]*/:   437,
		/*::[*/0x1A/*::]*/:   850,           /*::[*/0x1B/*::]*/:   437,
		/*::[*/0x1C/*::]*/:   863,           /*::[*/0x1D/*::]*/:   850,
		/*::[*/0x1F/*::]*/:   852,           /*::[*/0x22/*::]*/:   852,
		/*::[*/0x23/*::]*/:   852,           /*::[*/0x24/*::]*/:   860,
		/*::[*/0x25/*::]*/:   850,           /*::[*/0x26/*::]*/:   866,
		/*::[*/0x37/*::]*/:   850,           /*::[*/0x40/*::]*/:   852,
		/*::[*/0x4D/*::]*/:   936,           /*::[*/0x4E/*::]*/:   949,
		/*::[*/0x4F/*::]*/:   950,           /*::[*/0x50/*::]*/:   874,
		/*::[*/0x57/*::]*/:  1252,           /*::[*/0x58/*::]*/:  1252,
		/*::[*/0x59/*::]*/:  1252,           /*::[*/0x6C/*::]*/:   863,
		/*::[*/0x86/*::]*/:   737,           /*::[*/0x87/*::]*/:   852,
		/*::[*/0x88/*::]*/:   857,           /*::[*/0xCC/*::]*/:  1257,

		/*::[*/0xFF/*::]*/: 16969
	};
	var dbf_reverse_map = evert({
		/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
		/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
		/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
		/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
		/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
		/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
		/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
		/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
		/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
		/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
		/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
		/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
		/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,
		/*::[*/0x00/*::]*/: 20127
	});
	/* TODO: find an actual specification */
	function dbf_to_aoa(buf, opts)/*:AOA*/ {
		var out/*:AOA*/ = [];
		var d/*:Block*/ = (new_raw_buf(1)/*:any*/);
		switch(opts.type) {
			case 'base64': d = s2a(Base64_decode(buf)); break;
			case 'binary': d = s2a(buf); break;
			case 'buffer':
			case 'array': d = buf; break;
		}
		prep_blob(d, 0);

		/* header */
		var ft = d.read_shift(1);
		var memo = !!(ft & 0x88);
		var vfp = false, l7 = false;
		switch(ft) {
			case 0x02: break; // dBASE II
			case 0x03: break; // dBASE III
			case 0x30: vfp = true; memo = true; break; // VFP
			case 0x31: vfp = true; memo = true; break; // VFP with autoincrement
			// 0x43 dBASE IV SQL table files
			// 0x63 dBASE IV SQL system files
			case 0x83: break; // dBASE III with memo
			case 0x8B: break; // dBASE IV with memo
			case 0x8C: l7 = true; break; // dBASE Level 7 with memo
			// case 0xCB dBASE IV SQL table files with memo
			case 0xF5: break; // FoxPro 2.x with memo
			// case 0xFB FoxBASE
			default: throw new Error("DBF Unsupported Version: " + ft.toString(16));
		}

		var nrow = 0, fpos = 0x0209;
		if(ft == 0x02) nrow = d.read_shift(2);
		d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD
		if(ft != 0x02) nrow = d.read_shift(4);
		if(nrow > 1048576) nrow = 1e6;

		if(ft != 0x02) fpos = d.read_shift(2); // header length
		var rlen = d.read_shift(2); // record length

		var /*flags = 0,*/ current_cp = opts.codepage || 1252;
		if(ft != 0x02) { // 20 reserved bytes
			d.l+=16;
			/*flags = */d.read_shift(1);
			//if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));

			/* codepage present in FoxPro and dBASE Level 7 */
			if(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
			d.l+=1;

			d.l+=2;
		}
		if(l7) d.l += 36; // Level 7: 32 byte "Language driver name", 4 byte reserved

	/*:: type DBFField = { name:string; len:number; type:string; } */
		var fields/*:Array<DBFField>*/ = [], field/*:DBFField*/ = ({}/*:any*/);
		var hend = Math.min(d.length, (ft == 0x02 ? 0x209 : (fpos - 10 - (vfp ? 264 : 0))));
		var ww = l7 ? 32 : 11;
		while(d.l < hend && d[d.l] != 0x0d) {
			field = ({}/*:any*/);
			field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l+ww)).replace(/[\u0000\r\n].*$/g,"");
			d.l += ww;
			field.type = String.fromCharCode(d.read_shift(1));
			if(ft != 0x02 && !l7) field.offset = d.read_shift(4);
			field.len = d.read_shift(1);
			if(ft == 0x02) field.offset = d.read_shift(2);
			field.dec = d.read_shift(1);
			if(field.name.length) fields.push(field);
			if(ft != 0x02) d.l += l7 ? 13 : 14;
			switch(field.type) {
				case 'B': // Double (VFP) / Binary (dBASE L7)
					if((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
					break;
				case 'G': // General (FoxPro and dBASE L7)
				case 'P': // Picture (FoxPro and dBASE L7)
					if(opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
					break;
				case '+': // Autoincrement (dBASE L7 only)
				case '0': // _NullFlags (VFP only)
				case '@': // Timestamp (dBASE L7 only)
				case 'C': // Character (dBASE II)
				case 'D': // Date (dBASE III)
				case 'F': // Float (dBASE IV)
				case 'I': // Long (VFP and dBASE L7)
				case 'L': // Logical (dBASE II)
				case 'M': // Memo (dBASE III)
				case 'N': // Number (dBASE II)
				case 'O': // Double (dBASE L7 only)
				case 'T': // Datetime (VFP only)
				case 'Y': // Currency (VFP only)
					break;
				default: throw new Error('Unknown Field Type: ' + field.type);
			}
		}

		if(d[d.l] !== 0x0D) d.l = fpos-1;
		if(d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
		d.l = fpos;

		/* data */
		var R = 0, C = 0;
		out[0] = [];
		for(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
		while(nrow-- > 0) {
			if(d[d.l] === 0x2A) {
				// TODO: record marked as deleted -- create a hidden row?
				d.l+=rlen;
				continue;
			}
			++d.l;
			out[++R] = []; C = 0;
			for(C = 0; C != fields.length; ++C) {
				var dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;
				prep_blob(dd, 0);
				var s = $cptable.utils.decode(current_cp, dd);
				switch(fields[C].type) {
					case 'C':
						// NOTE: it is conventional to write '  /  /  ' for empty dates
						if(s.trim().length) out[R][C] = s.replace(/\s+$/,"");
						break;
					case 'D':
						if(s.length === 8) out[R][C] = new Date(+s.slice(0,4), +s.slice(4,6)-1, +s.slice(6,8));
						else out[R][C] = s;
						break;
					case 'F': out[R][C] = parseFloat(s.trim()); break;
					case '+': case 'I': out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i'); break;
					case 'L': switch(s.trim().toUpperCase()) {
						case 'Y': case 'T': out[R][C] = true; break;
						case 'N': case 'F': out[R][C] = false; break;
						case '': case '?': break;
						default: throw new Error("DBF Unrecognized L:|" + s + "|");
						} break;
					case 'M': /* TODO: handle memo files */
						if(!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
						out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10): dd.read_shift(4));
						break;
					case 'N':
						s = s.replace(/\u0000/g,"").trim();
						// NOTE: dBASE II interprets "  .  " as 0
						if(s && s != ".") out[R][C] = +s || 0; break;
					case '@':
						// NOTE: dBASE specs appear to be incorrect
						out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);
						break;
					case 'T': out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4)); break;
					case 'Y': out[R][C] = dd.read_shift(4,'i')/1e4 + (dd.read_shift(4, 'i')/1e4)*Math.pow(2,32); break;
					case 'O': out[R][C] = -dd.read_shift(-8, 'f'); break;
					case 'B': if(vfp && fields[C].len == 8) { out[R][C] = dd.read_shift(8,'f'); break; }
						/* falls through */
					case 'G': case 'P': dd.l += fields[C].len; break;
					case '0':
						if(fields[C].name === '_NullFlags') break;
						/* falls through */
					default: throw new Error("DBF Unsupported data type " + fields[C].type);
				}
			}
		}
		if(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l-1) + " of " + d.length + " " + d[d.l-1].toString(16));
		if(opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
		opts.DBF = fields;
		return out;
	}

	function dbf_to_sheet(buf, opts)/*:Worksheet*/ {
		var o = opts || {};
		if(!o.dateNF) o.dateNF = "yyyymmdd";
		var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
		ws["!cols"] = o.DBF.map(function(field) { return {
			wch: field.len,
			DBF: field
		};});
		delete o.DBF;
		return ws;
	}

	function dbf_to_workbook(buf, opts)/*:Workbook*/ {
		try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }
		catch(e) { if(opts && opts.WTF) throw e; }
		return ({SheetNames:[],Sheets:{}});
	}

	var _RLEN = { 'B': 8, 'C': 250, 'L': 1, 'D': 8, '?': 0, '': 0 };
	function sheet_to_dbf(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
		var o = opts || {};
		if(+o.codepage >= 0) set_cp(+o.codepage);
		if(o.type == "string") throw new Error("Cannot write DBF to JS string");
		var ba = buf_array();
		var aoa/*:AOA*/ = sheet_to_json(ws, {header:1, raw:true, cellDates:true});
		var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
		var i = 0, j = 0, hcnt = 0, rlen = 1;
		for(i = 0; i < headers.length; ++i) {
			if(((cols[i]||{}).DBF||{}).name) { headers[i] = cols[i].DBF.name; ++hcnt; continue; }
			if(headers[i] == null) continue;
			++hcnt;
			if(typeof headers[i] === 'number') headers[i] = headers[i].toString(10);
			if(typeof headers[i] !== 'string') throw new Error("DBF Invalid column name " + headers[i] + " |" + (typeof headers[i]) + "|");
			if(headers.indexOf(headers[i]) !== i) for(j=0; j<1024;++j)
				if(headers.indexOf(headers[i] + "_" + j) == -1) { headers[i] += "_" + j; break; }
		}
		var range = safe_decode_range(ws['!ref']);
		var coltypes/*:Array<string>*/ = [];
		var colwidths/*:Array<number>*/ = [];
		var coldecimals/*:Array<number>*/ = [];
		for(i = 0; i <= range.e.c - range.s.c; ++i) {
			var guess = '', _guess = '', maxlen = 0;
			var col/*:Array<any>*/ = [];
			for(j=0; j < data.length; ++j) {
				if(data[j][i] != null) col.push(data[j][i]);
			}
			if(col.length == 0 || headers[i] == null) { coltypes[i] = '?'; continue; }
			for(j = 0; j < col.length; ++j) {
				switch(typeof col[j]) {
					/* TODO: check if L2 compat is desired */
					case 'number': _guess = 'B'; break;
					case 'string': _guess = 'C'; break;
					case 'boolean': _guess = 'L'; break;
					case 'object': _guess = col[j] instanceof Date ? 'D' : 'C'; break;
					default: _guess = 'C';
				}
				maxlen = Math.max(maxlen, String(col[j]).length);
				guess = guess && guess != _guess ? 'C' : _guess;
				//if(guess == 'C') break;
			}
			if(maxlen > 250) maxlen = 250;
			_guess = ((cols[i]||{}).DBF||{}).type;
			/* TODO: more fine grained control over DBF type resolution */
			if(_guess == 'C') {
				if(cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
			}
			if(guess == 'B' && _guess == 'N') {
				guess = 'N';
				coldecimals[i] = cols[i].DBF.dec;
				maxlen = cols[i].DBF.len;
			}
			colwidths[i] = guess == 'C' || _guess == 'N' ? maxlen : (_RLEN[guess] || 0);
			rlen += colwidths[i];
			coltypes[i] = guess;
		}

		var h = ba.next(32);
		h.write_shift(4, 0x13021130);
		h.write_shift(4, data.length);
		h.write_shift(2, 296 + 32 * hcnt);
		h.write_shift(2, rlen);
		for(i=0; i < 4; ++i) h.write_shift(4, 0);
		h.write_shift(4, 0x00000000 | ((+dbf_reverse_map[/*::String(*/current_ansi/*::)*/] || 0x03)<<8));

		for(i = 0, j = 0; i < headers.length; ++i) {
			if(headers[i] == null) continue;
			var hf = ba.next(32);
			var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
			hf.write_shift(1, _f, "sbcs");
			hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], "sbcs");
			hf.write_shift(4, j);
			hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
			hf.write_shift(1, coldecimals[i] || 0);
			hf.write_shift(1, 0x02);
			hf.write_shift(4, 0);
			hf.write_shift(1, 0);
			hf.write_shift(4, 0);
			hf.write_shift(4, 0);
			j += (colwidths[i] || _RLEN[coltypes[i]] || 0);
		}

		var hb = ba.next(264);
		hb.write_shift(4, 0x0000000D);
		for(i=0; i < 65;++i) hb.write_shift(4, 0x00000000);
		for(i=0; i < data.length; ++i) {
			var rout = ba.next(rlen);
			rout.write_shift(1, 0);
			for(j=0; j<headers.length; ++j) {
				if(headers[j] == null) continue;
				switch(coltypes[j]) {
					case 'L': rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46); break;
					case 'B': rout.write_shift(8, data[i][j]||0, 'f'); break;
					case 'N':
						var _n = "0";
						if(typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j]||0);
						for(hcnt=0; hcnt < colwidths[j]-_n.length; ++hcnt) rout.write_shift(1, 0x20);
						rout.write_shift(1, _n, "sbcs");
						break;
					case 'D':
						if(!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
						else {
							rout.write_shift(4, ("0000"+data[i][j].getFullYear()).slice(-4), "sbcs");
							rout.write_shift(2, ("00"+(data[i][j].getMonth()+1)).slice(-2), "sbcs");
							rout.write_shift(2, ("00"+data[i][j].getDate()).slice(-2), "sbcs");
						} break;
					case 'C':
						var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
						rout.write_shift(1, _s, "sbcs");
						for(hcnt=0; hcnt < colwidths[j]-_s.length; ++hcnt) rout.write_shift(1, 0x20); break;
				}
			}
			// data
		}
		ba.next(1).write_shift(1, 0x1A);
		return ba.end();
	}
		return {
			to_workbook: dbf_to_workbook,
			to_sheet: dbf_to_sheet,
			from_sheet: sheet_to_dbf
		};
	})();

	var SYLK = /*#__PURE__*/(function() {
		/* TODO: stress test sequences */
		var sylk_escapes = ({
			AA:'À', BA:'Á', CA:'Â', DA:195, HA:'Ä', JA:197,
			AE:'È', BE:'É', CE:'Ê',         HE:'Ë',
			AI:'Ì', BI:'Í', CI:'Î',         HI:'Ï',
			AO:'Ò', BO:'Ó', CO:'Ô', DO:213, HO:'Ö',
			AU:'Ù', BU:'Ú', CU:'Û',         HU:'Ü',
			Aa:'à', Ba:'á', Ca:'â', Da:227, Ha:'ä', Ja:229,
			Ae:'è', Be:'é', Ce:'ê',         He:'ë',
			Ai:'ì', Bi:'í', Ci:'î',         Hi:'ï',
			Ao:'ò', Bo:'ó', Co:'ô', Do:245, Ho:'ö',
			Au:'ù', Bu:'ú', Cu:'û',         Hu:'ü',
			KC:'Ç', Kc:'ç', q:'æ',  z:'œ',  a:'Æ',  j:'Œ',
			DN:209, Dn:241, Hy:255,
			S:169,  c:170,  R:174,  "B ":180,
			/*::[*/0/*::]*/:176,    /*::[*/1/*::]*/:177,  /*::[*/2/*::]*/:178,
			/*::[*/3/*::]*/:179,    /*::[*/5/*::]*/:181,  /*::[*/6/*::]*/:182,
			/*::[*/7/*::]*/:183,    Q:185,  k:186,  b:208,  i:216,  l:222,  s:240,  y:248,
			"!":161, '"':162, "#":163, "(":164, "%":165, "'":167, "H ":168,
			"+":171, ";":187, "<":188, "=":189, ">":190, "?":191, "{":223
		}/*:any*/);
		var sylk_char_regex = new RegExp("\u001BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g,"\\$1") + "|\\|)", "gm");
		var sylk_char_fn = function(_, $1){ var o = sylk_escapes[$1]; return typeof o == "number" ? _getansi(o) : o; };
		var decode_sylk_char = function($$, $1, $2) { var newcc = (($1.charCodeAt(0) - 0x20)<<4) | ($2.charCodeAt(0) - 0x30); return newcc == 59 ? $$ : _getansi(newcc); };
		sylk_escapes["|"] = 254;
		/* TODO: find an actual specification */
		function sylk_to_aoa(d/*:RawData*/, opts)/*:[AOA, Worksheet]*/ {
			switch(opts.type) {
				case 'base64': return sylk_to_aoa_str(Base64_decode(d), opts);
				case 'binary': return sylk_to_aoa_str(d, opts);
				case 'buffer': return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
				case 'array': return sylk_to_aoa_str(cc2str(d), opts);
			}
			throw new Error("Unrecognized type " + opts.type);
		}
		function sylk_to_aoa_str(str/*:string*/, opts)/*:[AOA, Worksheet]*/ {
			var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr/*:AOA*/ = [];
			var formats/*:Array<string>*/ = [];
			var next_cell_format/*:string|null*/ = null;
			var sht = {}, rowinfo/*:Array<RowInfo>*/ = [], colinfo/*:Array<ColInfo>*/ = [], cw/*:Array<string>*/ = [];
			var Mval = 0, j;
			if(+opts.codepage >= 0) set_cp(+opts.codepage);
			for (; ri !== records.length; ++ri) {
				Mval = 0;
				var rstr=records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
				var record=rstr.replace(/;;/g, "\u0000").split(";").map(function(x) { return x.replace(/\u0000/g, ";"); });
				var RT=record[0], val;
				if(rstr.length > 0) switch(RT) {
				case 'ID': break; /* header */
				case 'E': break; /* EOF */
				case 'B': break; /* dimensions */
				case 'O': break; /* options? */
				case 'W': break; /* window? */
				case 'P':
					if(record[1].charAt(0) == 'P')
						formats.push(rstr.slice(3).replace(/;;/g, ";"));
					break;
				case 'C':
				var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
				for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
					case 'A': break; // TODO: comment
					case 'X': C = parseInt(record[rj].slice(1))-1; C_seen_X = true; break;
					case 'Y':
						R = parseInt(record[rj].slice(1))-1; if(!C_seen_X) C = 0;
						for(j = arr.length; j <= R; ++j) arr[j] = [];
						break;
					case 'K':
						val = record[rj].slice(1);
						if(val.charAt(0) === '"') val = val.slice(1,val.length - 1);
						else if(val === 'TRUE') val = true;
						else if(val === 'FALSE') val = false;
						else if(!isNaN(fuzzynum(val))) {
							val = fuzzynum(val);
							if(next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
						} else if(!isNaN(fuzzydate(val).getDate())) {
							val = parseDate(val);
						}
						C_seen_K = true;
						break;
					case 'E':
						C_seen_E = true;
						var formula = rc_to_a1(record[rj].slice(1), {r:R,c:C});
						arr[R][C] = [arr[R][C], formula];
						break;
					case 'S':
						C_seen_S = true;
						arr[R][C] = [arr[R][C], "S5S"];
						break;
					case 'G': break; // unknown
					case 'R': _R = parseInt(record[rj].slice(1))-1; break;
					case 'C': _C = parseInt(record[rj].slice(1))-1; break;
					default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				}
				if(C_seen_K) {
					if(arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
					else arr[R][C] = val;
					next_cell_format = null;
				}
				if(C_seen_S) {
					if(C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
					var shrbase = _R > -1 && arr[_R][_C];
					if(!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
					arr[R][C][1] = shift_formula_str(shrbase[1], {r: R - _R, c: C - _C});
				}
				break;
				case 'F':
				var F_seen = 0;
				for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
					case 'X': C = parseInt(record[rj].slice(1))-1; ++F_seen; break;
					case 'Y':
						R = parseInt(record[rj].slice(1))-1; /*C = 0;*/
						for(j = arr.length; j <= R; ++j) arr[j] = [];
						break;
					case 'M': Mval = parseInt(record[rj].slice(1)) / 20; break;
					case 'F': break; /* ??? */
					case 'G': break; /* hide grid */
					case 'P':
						next_cell_format = formats[parseInt(record[rj].slice(1))];
						break;
					case 'S': break; /* cell style */
					case 'D': break; /* column */
					case 'N': break; /* font */
					case 'W':
						cw = record[rj].slice(1).split(" ");
						for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
							Mval = parseInt(cw[2], 10);
							colinfo[j-1] = Mval === 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);
						} break;
					case 'C': /* default column format */
						C = parseInt(record[rj].slice(1))-1;
						if(!colinfo[C]) colinfo[C] = {};
						break;
					case 'R': /* row properties */
						R = parseInt(record[rj].slice(1))-1;
						if(!rowinfo[R]) rowinfo[R] = {};
						if(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }
						else if(Mval === 0) rowinfo[R].hidden = true;
						break;
					default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				}
				if(F_seen < 1) next_cell_format = null; break;
				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				}
			}
			if(rowinfo.length > 0) sht['!rows'] = rowinfo;
			if(colinfo.length > 0) sht['!cols'] = colinfo;
			if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
			return [arr, sht];
		}

		function sylk_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
			var aoasht = sylk_to_aoa(d, opts);
			var aoa = aoasht[0], ws = aoasht[1];
			var o = aoa_to_sheet(aoa, opts);
			keys(ws).forEach(function(k) { o[k] = ws[k]; });
			return o;
		}

		function sylk_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(sylk_to_sheet(d, opts), opts); }

		function write_ws_cell_sylk(cell/*:Cell*/, ws/*:Worksheet*/, R/*:number*/, C/*:number*//*::, opts*/)/*:string*/ {
			var o = "C;Y" + (R+1) + ";X" + (C+1) + ";K";
			switch(cell.t) {
				case 'n':
					o += (cell.v||0);
					if(cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {r:R, c:C}); break;
				case 'b': o += cell.v ? "TRUE" : "FALSE"; break;
				case 'e': o += cell.w || cell.v; break;
				case 'd': o += '"' + (cell.w || cell.v) + '"'; break;
				case 's': o += '"' + cell.v.replace(/"/g,"").replace(/;/g, ";;") + '"'; break;
			}
			return o;
		}

		function write_ws_cols_sylk(out, cols) {
			cols.forEach(function(col, i) {
				var rec = "F;W" + (i+1) + " " + (i+1) + " ";
				if(col.hidden) rec += "0";
				else {
					if(typeof col.width == 'number' && !col.wpx) col.wpx = width2px(col.width);
					if(typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);
					if(typeof col.wch == 'number') rec += Math.round(col.wch);
				}
				if(rec.charAt(rec.length - 1) != " ") out.push(rec);
			});
		}

		function write_ws_rows_sylk(out/*:Array<string>*/, rows/*:Array<RowInfo>*/) {
			rows.forEach(function(row, i) {
				var rec = "F;";
				if(row.hidden) rec += "M0;";
				else if(row.hpt) rec += "M" + 20 * row.hpt + ";";
				else if(row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
				if(rec.length > 2) out.push(rec + "R" + (i+1));
			});
		}

		function sheet_to_sylk(ws/*:Worksheet*/, opts/*:?any*/)/*:string*/ {
			var preamble/*:Array<string>*/ = ["ID;PWXL;N;E"], o/*:Array<string>*/ = [];
			var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
			var dense = Array.isArray(ws);
			var RS = "\r\n";

			preamble.push("P;PGeneral");
			preamble.push("F;P0;DG0G8;M255");
			if(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
			if(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);

			preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c,r.s.r,r.e.c,r.e.r].join(" "));
			for(var R = r.s.r; R <= r.e.r; ++R) {
				for(var C = r.s.c; C <= r.e.c; ++C) {
					var coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C]: ws[coord];
					if(!cell || (cell.v == null && (!cell.f || cell.F))) continue;
					o.push(write_ws_cell_sylk(cell, ws, R, C));
				}
			}
			return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
		}

		return {
			to_workbook: sylk_to_workbook,
			to_sheet: sylk_to_sheet,
			from_sheet: sheet_to_sylk
		};
	})();

	var DIF = /*#__PURE__*/(function() {
		function dif_to_aoa(d/*:RawData*/, opts)/*:AOA*/ {
			switch(opts.type) {
				case 'base64': return dif_to_aoa_str(Base64_decode(d), opts);
				case 'binary': return dif_to_aoa_str(d, opts);
				case 'buffer': return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
				case 'array': return dif_to_aoa_str(cc2str(d), opts);
			}
			throw new Error("Unrecognized type " + opts.type);
		}
		function dif_to_aoa_str(str/*:string*/, opts)/*:AOA*/ {
			var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
			for (; ri !== records.length; ++ri) {
				if (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }
				if (R < 0) continue;
				var metadata = records[ri].trim().split(",");
				var type = metadata[0], value = metadata[1];
				++ri;
				var data = records[ri] || "";
				while(((data.match(/["]/g)||[]).length & 1) && ri < records.length - 1) data += "\n" + records[++ri];
				data = data.trim();
				switch (+type) {
					case -1:
						if (data === 'BOT') { arr[++R] = []; C = 0; continue; }
						else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);
						break;
					case 0:
						if(data === 'TRUE') arr[R][C] = true;
						else if(data === 'FALSE') arr[R][C] = false;
						else if(!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
						else if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
						else arr[R][C] = value;
						++C; break;
					case 1:
						data = data.slice(1,data.length-1);
						data = data.replace(/""/g, '"');
						if(data && data.match(/^=".*"$/)) data = data.slice(2, -1);
						arr[R][C++] = data !== '' ? data : null;
						break;
				}
				if (data === 'EOD') break;
			}
			if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
			return arr;
		}

		function dif_to_sheet(str/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }
		function dif_to_workbook(str/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }

		var sheet_to_dif = /*#__PURE__*/(function() {
			var push_field = function pf(o/*:Array<string>*/, topic/*:string*/, v/*:number*/, n/*:number*/, s/*:string*/) {
				o.push(topic);
				o.push(v + "," + n);
				o.push('"' + s.replace(/"/g,'""') + '"');
			};
			var push_value = function po(o/*:Array<string>*/, type/*:number*/, v/*:any*/, s/*:string*/) {
				o.push(type + "," + v);
				o.push(type == 1 ? '"' + s.replace(/"/g,'""') + '"' : s);
			};
			return function sheet_to_dif(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
				var o/*:Array<string>*/ = [];
				var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
				var dense = Array.isArray(ws);
				push_field(o, "TABLE", 0, 1, "sheetjs");
				push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1,"");
				push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1,"");
				push_field(o, "DATA", 0, 0,"");
				for(var R = r.s.r; R <= r.e.r; ++R) {
					push_value(o, -1, 0, "BOT");
					for(var C = r.s.c; C <= r.e.c; ++C) {
						var coord = encode_cell({r:R,c:C});
						cell = dense ? (ws[R]||[])[C] : ws[coord];
						if(!cell) { push_value(o, 1, 0, ""); continue;}
						switch(cell.t) {
							case 'n':
								var val = cell.w ;
								if(!val && cell.v != null) val = cell.v;
								if(val == null) {
									if(cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
									else push_value(o, 1, 0, "");
								}
								else push_value(o, 0, val, "V");
								break;
							case 'b':
								push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
								break;
							case 's':
								push_value(o, 1, 0, (isNaN(cell.v)) ? cell.v : '="' + cell.v + '"');
								break;
							case 'd':
								if(!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
								push_value(o, 0, cell.w, "V");
								break;
							default: push_value(o, 1, 0, "");
						}
					}
				}
				push_value(o, -1, 0, "EOD");
				var RS = "\r\n";
				var oo = o.join(RS);
				//while((oo.length & 0x7F) != 0) oo += "\0";
				return oo;
			};
		})();
		return {
			to_workbook: dif_to_workbook,
			to_sheet: dif_to_sheet,
			from_sheet: sheet_to_dif
		};
	})();

	var ETH = /*#__PURE__*/(function() {
		function decode(s/*:string*/)/*:string*/ { return s.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,"\n"); }
		function encode(s/*:string*/)/*:string*/ { return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g,"\\n"); }

		function eth_to_aoa(str/*:string*/, opts)/*:AOA*/ {
			var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
			for (; ri !== records.length; ++ri) {
				var record = records[ri].trim().split(":");
				if(record[0] !== 'cell') continue;
				var addr = decode_cell(record[1]);
				if(arr.length <= addr.r) for(R = arr.length; R <= addr.r; ++R) if(!arr[R]) arr[R] = [];
				R = addr.r; C = addr.c;
				switch(record[2]) {
					case 't': arr[R][C] = decode(record[3]); break;
					case 'v': arr[R][C] = +record[3]; break;
					case 'vtf': var _f = record[record.length - 1];
						/* falls through */
					case 'vtc':
						switch(record[3]) {
							case 'nl': arr[R][C] = +record[4] ? true : false; break;
							default: arr[R][C] = +record[4]; break;
						}
						if(record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
				}
			}
			if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
			return arr;
		}

		function eth_to_sheet(d/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(eth_to_aoa(d, opts), opts); }
		function eth_to_workbook(d/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(eth_to_sheet(d, opts), opts); }

		var header = [
			"socialcalc:version:1.5",
			"MIME-Version: 1.0",
			"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
		].join("\n");

		var sep = [
			"--SocialCalcSpreadsheetControlSave",
			"Content-type: text/plain; charset=UTF-8"
		].join("\n") + "\n";

		/* TODO: the other parts */
		var meta = [
			"# SocialCalc Spreadsheet Control Save",
			"part:sheet"
		].join("\n");

		var end = "--SocialCalcSpreadsheetControlSave--";

		function sheet_to_eth_data(ws/*:Worksheet*/)/*:string*/ {
			if(!ws || !ws['!ref']) return "";
			var o/*:Array<string>*/ = [], oo/*:Array<string>*/ = [], cell, coord = "";
			var r = decode_range(ws['!ref']);
			var dense = Array.isArray(ws);
			for(var R = r.s.r; R <= r.e.r; ++R) {
				for(var C = r.s.c; C <= r.e.c; ++C) {
					coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C] : ws[coord];
					if(!cell || cell.v == null || cell.t === 'z') continue;
					oo = ["cell", coord, 't'];
					switch(cell.t) {
						case 's': case 'str': oo.push(encode(cell.v)); break;
						case 'n':
							if(!cell.f) { oo[2]='v'; oo[3]=cell.v; }
							else { oo[2]='vtf'; oo[3]='n'; oo[4]=cell.v; oo[5]=encode(cell.f); }
							break;
						case 'b':
							oo[2] = 'vt'+(cell.f?'f':'c'); oo[3]='nl'; oo[4]=cell.v?"1":"0";
							oo[5] = encode(cell.f||(cell.v?'TRUE':'FALSE'));
							break;
						case 'd':
							var t = datenum(parseDate(cell.v));
							oo[2] = 'vtc'; oo[3] = 'nd'; oo[4] = ""+t;
							oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
							break;
						case 'e': continue;
					}
					o.push(oo.join(":"));
				}
			}
			o.push("sheet:c:" + (r.e.c-r.s.c+1) + ":r:" + (r.e.r-r.s.r+1) + ":tvf:1");
			o.push("valueformat:1:text-wiki");
			//o.push("copiedfrom:" + ws['!ref']); // clipboard only
			return o.join("\n");
		}

		function sheet_to_eth(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
			return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
			// return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
		}

		return {
			to_workbook: eth_to_workbook,
			to_sheet: eth_to_sheet,
			from_sheet: sheet_to_eth
		};
	})();

	var PRN = /*#__PURE__*/(function() {
		function set_text_arr(data/*:string*/, arr/*:AOA*/, R/*:number*/, C/*:number*/, o/*:any*/) {
			if(o.raw) arr[R][C] = data;
			else if(data === "");
			else if(data === 'TRUE') arr[R][C] = true;
			else if(data === 'FALSE') arr[R][C] = false;
			else if(!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
			else if(!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
			else arr[R][C] = data;
		}

		function prn_to_aoa_str(f/*:string*/, opts)/*:AOA*/ {
			var o = opts || {};
			var arr/*:AOA*/ = ([]/*:any*/);
			if(!f || f.length === 0) return arr;
			var lines = f.split(/[\r\n]/);
			var L = lines.length - 1;
			while(L >= 0 && lines[L].length === 0) --L;
			var start = 10, idx = 0;
			var R = 0;
			for(; R <= L; ++R) {
				idx = lines[R].indexOf(" ");
				if(idx == -1) idx = lines[R].length; else idx++;
				start = Math.max(start, idx);
			}
			for(R = 0; R <= L; ++R) {
				arr[R] = [];
				/* TODO: confirm that widths are always 10 */
				var C = 0;
				set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
				for(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)
					set_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C,o);
			}
			if(o.sheetRows) arr = arr.slice(0, o.sheetRows);
			return arr;
		}

		// List of accepted CSV separators
		var guess_seps = {
			/*::[*/0x2C/*::]*/: ',',
			/*::[*/0x09/*::]*/: "\t",
			/*::[*/0x3B/*::]*/: ';',
			/*::[*/0x7C/*::]*/: '|'
		};

		// CSV separator weights to be used in case of equal numbers
		var guess_sep_weights = {
			/*::[*/0x2C/*::]*/: 3,
			/*::[*/0x09/*::]*/: 2,
			/*::[*/0x3B/*::]*/: 1,
			/*::[*/0x7C/*::]*/: 0
		};

		function guess_sep(str) {
			var cnt = {}, instr = false, end = 0, cc = 0;
			for(;end < str.length;++end) {
				if((cc=str.charCodeAt(end)) == 0x22) instr = !instr;
				else if(!instr && cc in guess_seps) cnt[cc] = (cnt[cc]||0)+1;
			}

			cc = [];
			for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
				cc.push([ cnt[end], end ]);
			}

			if ( !cc.length ) {
				cnt = guess_sep_weights;
				for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
					cc.push([ cnt[end], end ]);
				}
			}

			cc.sort(function(a, b) { return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]]; });

			return guess_seps[cc.pop()[1]] || 0x2C;
		}

		function dsv_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
			var o = opts || {};
			var sep = "";
			var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);
			var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:0}}/*:any*/);

			if(str.slice(0,4) == "sep=") {
				// If the line ends in \r\n
				if(str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10 ) {
					sep = str.charAt(4); str = str.slice(7);
				}
				// If line ends in \r OR \n
				else if(str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10 ) {
					sep = str.charAt(4); str = str.slice(6);
				}
				else sep = guess_sep(str.slice(0,1024));
			}
			else if(o && o.FS) sep = o.FS;
			else sep = guess_sep(str.slice(0,1024));
			var R = 0, C = 0, v = 0;
			var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0, startcc=str.charCodeAt(0);
			str = str.replace(/\r\n/mg, "\n");
			var _re/*:?RegExp*/ = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
			function finish_cell() {
				var s = str.slice(start, end);
				var cell = ({}/*:any*/);
				if(s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1,-1).replace(/""/g,'"');
				if(s.length === 0) cell.t = 'z';
				else if(o.raw) { cell.t = 's'; cell.v = s; }
				else if(s.trim().length === 0) { cell.t = 's'; cell.v = s; }
				else if(s.charCodeAt(0) == 0x3D) {
					if(s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) { cell.t = 's'; cell.v = s.slice(2,-1).replace(/""/g,'"'); }
					else if(fuzzyfmla(s)) { cell.t = 'n'; cell.f = s.slice(1); }
					else { cell.t = 's'; cell.v = s; } }
				else if(s == "TRUE") { cell.t = 'b'; cell.v = true; }
				else if(s == "FALSE") { cell.t = 'b'; cell.v = false; }
				else if(!isNaN(v = fuzzynum(s))) { cell.t = 'n'; if(o.cellText !== false) cell.w = s; cell.v = v; }
				else if(!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
					cell.z = o.dateNF || table_fmt[14];
					var k = 0;
					if(_re && s.match(_re)){ s=dateNF_fix(s, o.dateNF, (s.match(_re)||[])); k=1; }
					if(o.cellDates) { cell.t = 'd'; cell.v = parseDate(s, k); }
					else { cell.t = 'n'; cell.v = datenum(parseDate(s, k)); }
					if(o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v):cell.v);
					if(!o.cellNF) delete cell.z;
				} else {
					cell.t = 's';
					cell.v = s;
				}
				if(cell.t == 'z');
				else if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }
				else ws[encode_cell({c:C,r:R})] = cell;
				start = end+1; startcc = str.charCodeAt(start);
				if(range.e.c < C) range.e.c = C;
				if(range.e.r < R) range.e.r = R;
				if(cc == sepcc) ++C; else { C = 0; ++R; if(o.sheetRows && o.sheetRows <= R) return true; }
			}
			outer: for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {
				case 0x22: if(startcc === 0x22) instr = !instr; break;
				case sepcc: case 0x0a: case 0x0d: if(!instr && finish_cell()) break outer; break;
			}
			if(end - start > 0) finish_cell();

			ws['!ref'] = encode_range(range);
			return ws;
		}

		function prn_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
			if(!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
			if(opts.FS) return dsv_to_sheet_str(str, opts);
			if(str.slice(0,4) == "sep=") return dsv_to_sheet_str(str, opts);
			if(str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
			return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
		}

		function prn_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
			var str = "", bytes = opts.type == 'string' ? [0,0,0,0] : firstbyte(d, opts);
			switch(opts.type) {
				case 'base64': str = Base64_decode(d); break;
				case 'binary': str = d; break;
				case 'buffer':
					if(opts.codepage == 65001) str = d.toString('utf8'); // TODO: test if buf
					else if(opts.codepage && "undefined" !== 'undefined') ;
					else str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);
					break;
				case 'array': str = cc2str(d); break;
				case 'string': str = d; break;
				default: throw new Error("Unrecognized type " + opts.type);
			}
			if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
			else if(opts.type != 'string' && opts.type != 'buffer' && opts.codepage == 65001) str = utf8read(str);
			else if((opts.type == 'binary') && "undefined" !== 'undefined')  ;
			if(str.slice(0,19) == "socialcalc:version:") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
			return prn_to_sheet_str(str, opts);
		}

		function prn_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(prn_to_sheet(d, opts), opts); }

		function sheet_to_prn(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
			var o/*:Array<string>*/ = [];
			var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
			var dense = Array.isArray(ws);
			for(var R = r.s.r; R <= r.e.r; ++R) {
				var oo/*:Array<string>*/ = [];
				for(var C = r.s.c; C <= r.e.c; ++C) {
					var coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C] : ws[coord];
					if(!cell || cell.v == null) { oo.push("          "); continue; }
					var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0,10);
					while(w.length < 10) w += " ";
					oo.push(w + (C === 0 ? " " : ""));
				}
				o.push(oo.join(""));
			}
			return o.join("\n");
		}

		return {
			to_workbook: prn_to_workbook,
			to_sheet: prn_to_sheet,
			from_sheet: sheet_to_prn
		};
	})();

	/* Excel defaults to SYLK but warns if data is not valid */
	function read_wb_ID(d, opts) {
		var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;
		try {
			var out = SYLK.to_workbook(d, o);
			o.WTF = OLD_WTF;
			return out;
		} catch(e) {
			o.WTF = OLD_WTF;
			if(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
			return PRN.to_workbook(d, opts);
		}
	}

	var WK_ = /*#__PURE__*/(function() {
		function lotushopper(data, cb/*:RecordHopperCB*/, opts/*:any*/) {
			if(!data) return;
			prep_blob(data, data.l || 0);
			var Enum = opts.Enum || WK1Enum;
			while(data.l < data.length) {
				var RT = data.read_shift(2);
				var R = Enum[RT] || Enum[0xFFFF];
				var length = data.read_shift(2);
				var tgt = data.l + length;
				var d = R.f && R.f(data, length, opts);
				data.l = tgt;
				if(cb(d, R, RT)) return;
			}
		}

		function lotus_to_workbook(d/*:RawData*/, opts) {
			switch(opts.type) {
				case 'base64': return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
				case 'binary': return lotus_to_workbook_buf(s2a(d), opts);
				case 'buffer':
				case 'array': return lotus_to_workbook_buf(d, opts);
			}
			throw "Unsupported type " + opts.type;
		}

		function lotus_to_workbook_buf(d, opts)/*:Workbook*/ {
			if(!d) return d;
			var o = opts || {};
			var s/*:Worksheet*/ = ((o.dense ? [] : {})/*:any*/), n = "Sheet1", next_n = "", sidx = 0;
			var sheets = {}, snames = [], realnames = [];

			var refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
			var sheetRows = o.sheetRows || 0;

			if(d[2] == 0x00) {
				if(d[3] == 0x08 || d[3] == 0x09) {
					if(d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error("Unsupported Works 3 for Mac file");
				}
			}

			if(d[2] == 0x02) {
				o.Enum = WK1Enum;
				lotushopper(d, function(val, R, RT) { switch(RT) {
					case 0x00: /* BOF */
						o.vers = val;
						if(val >= 0x1000) o.qpro = true;
						break;
					case 0x06: refguess = val; break; /* RANGE */
					case 0xCC: if(val) next_n = val; break; /* SHEETNAMECS */
					case 0xDE: next_n = val; break; /* SHEETNAMELP */
					case 0x0F: /* LABEL */
					case 0x33: /* STRING */
						if(!o.qpro) val[1].v = val[1].v.slice(1);
						/* falls through */
					case 0x0D: /* INTEGER */
					case 0x0E: /* NUMBER */
					case 0x10: /* FORMULA */
						/* TODO: actual translation of the format code */
						if(RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
							val[1].z = o.dateNF || table_fmt[14];
							if(o.cellDates) { val[1].t = 'd'; val[1].v = numdate(val[1].v); }
						}

						if(o.qpro) {
							if(val[3] > sidx) {
								s["!ref"] = encode_range(refguess);
								sheets[n] = s;
								snames.push(n);
								s = (o.dense ? [] : {});
								refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
								sidx = val[3]; n = next_n || "Sheet" + (sidx + 1); next_n = "";
							}
						}

						var tmpcell = o.dense ? (s[val[0].r]||[])[val[0].c] : s[encode_cell(val[0])];
						if(tmpcell) {
							tmpcell.t = val[1].t; tmpcell.v = val[1].v;
							if(val[1].z != null) tmpcell.z = val[1].z;
							if(val[1].f != null) tmpcell.f = val[1].f;
							break;
						}
						if(o.dense) {
							if(!s[val[0].r]) s[val[0].r] = [];
							s[val[0].r][val[0].c] = val[1];
						} else s[encode_cell(val[0])] = val[1];
						break;
				}}, o);
			} else if(d[2] == 0x1A || d[2] == 0x0E) {
				o.Enum = WK3Enum;
				if(d[2] == 0x0E) { o.qpro = true; d.l = 0; }
				lotushopper(d, function(val, R, RT) { switch(RT) {
					case 0xCC: n = val; break; /* SHEETNAMECS */
					case 0x16: /* LABEL16 */
						val[1].v = val[1].v.slice(1);
						/* falls through */
					case 0x17: /* NUMBER17 */
					case 0x18: /* NUMBER18 */
					case 0x19: /* FORMULA19 */
					case 0x25: /* NUMBER25 */
					case 0x27: /* NUMBER27 */
					case 0x28: /* FORMULA28 */
						if(val[3] > sidx) {
							s["!ref"] = encode_range(refguess);
							sheets[n] = s;
							snames.push(n);
							s = (o.dense ? [] : {});
							refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
							sidx = val[3]; n = "Sheet" + (sidx + 1);
						}
						if(sheetRows > 0 && val[0].r >= sheetRows) break;
						if(o.dense) {
							if(!s[val[0].r]) s[val[0].r] = [];
							s[val[0].r][val[0].c] = val[1];
						} else s[encode_cell(val[0])] = val[1];
						if(refguess.e.c < val[0].c) refguess.e.c = val[0].c;
						if(refguess.e.r < val[0].r) refguess.e.r = val[0].r;
						break;
					case 0x1B: /* XFORMAT */
						if(val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];
						break;
					case 0x0601: /* SHEETINFOQP */
						realnames[val[0]] = val[1]; if(val[0] == sidx) n = val[1]; break;
				}}, o);
			} else throw new Error("Unrecognized LOTUS BOF " + d[2]);
			s["!ref"] = encode_range(refguess);
			sheets[next_n || n] = s;
			snames.push(next_n || n);
			if(!realnames.length) return { SheetNames: snames, Sheets: sheets };
			var osheets = {}, rnames = [];
			/* TODO: verify no collisions */
			for(var i = 0; i < realnames.length; ++i) if(sheets[snames[i]]) {
				rnames.push(realnames[i] || snames[i]);
				osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
			} else {
				rnames.push(realnames[i]);
				osheets[realnames[i]] = ({ "!ref": "A1" });
			}
			return { SheetNames: rnames, Sheets: osheets };
		}

		function sheet_to_wk1(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
			var o = opts || {};
			if(+o.codepage >= 0) set_cp(+o.codepage);
			if(o.type == "string") throw new Error("Cannot write WK1 to JS string");
			var ba = buf_array();
			var range = safe_decode_range(ws["!ref"]);
			var dense = Array.isArray(ws);
			var cols = [];

			write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));
			write_biff_rec(ba, 0x06, write_RANGE(range));
			var max_R = Math.min(range.e.r, 8191);
			for(var R = range.s.r; R <= max_R; ++R) {
				var rr = encode_row(R);
				for(var C = range.s.c; C <= range.e.c; ++C) {
					if(R === range.s.r) cols[C] = encode_col(C);
					var ref = cols[C] + rr;
					var cell = dense ? (ws[R]||[])[C] : ws[ref];
					if(!cell || cell.t == "z") continue;
					/* TODO: formula records */
					if(cell.t == "n") {
						if((cell.v|0)==cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));
						else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));
					} else {
						var str = format_cell(cell);
						write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));
					}
				}
			}

			write_biff_rec(ba, 0x01);
			return ba.end();
		}

		function book_to_wk3(wb/*:Workbook*/, opts/*:WriteOpts*/) {
			var o = opts || {};
			if(+o.codepage >= 0) set_cp(+o.codepage);
			if(o.type == "string") throw new Error("Cannot write WK3 to JS string");
			var ba = buf_array();

			write_biff_rec(ba, 0x00, write_BOF_WK3(wb));

			for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));

			var wsidx = 0;
			for(i = 0; i < wb.SheetNames.length; ++i) {
				var ws = wb.Sheets[wb.SheetNames[i]];
				if(!ws || !ws["!ref"]) continue;
				var range = safe_decode_range(ws["!ref"]);
				var dense = Array.isArray(ws);
				var cols = [];
				var max_R = Math.min(range.e.r, 8191);
				for(var R = range.s.r; R <= max_R; ++R) {
					var rr = encode_row(R);
					for(var C = range.s.c; C <= range.e.c; ++C) {
						if(R === range.s.r) cols[C] = encode_col(C);
						var ref = cols[C] + rr;
						var cell = dense ? (ws[R]||[])[C] : ws[ref];
						if(!cell || cell.t == "z") continue;
						/* TODO: FORMULA19 NUMBER18 records */
						if(cell.t == "n") {
							write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));
						} else {
							var str = format_cell(cell);
							/* TODO: max len? */
							write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
						}
					}
				}
				++wsidx;
			}

			write_biff_rec(ba, 0x01);
			return ba.end();
		}


		function write_BOF_WK1(v/*:number*/) {
			var out = new_buf(2);
			out.write_shift(2, v);
			return out;
		}

		function write_BOF_WK3(wb/*:Workbook*/) {
			var out = new_buf(26);
			out.write_shift(2, 0x1000);
			out.write_shift(2, 0x0004);
			out.write_shift(4, 0x0000);
			var rows = 0, cols = 0, wscnt = 0;
			for(var i = 0; i < wb.SheetNames.length; ++i) {
				var name = wb.SheetNames[i];
				var ws = wb.Sheets[name];
				if(!ws || !ws["!ref"]) continue;
				++wscnt;
				var range = decode_range(ws["!ref"]);
				if(rows < range.e.r) rows = range.e.r;
				if(cols < range.e.c) cols = range.e.c;
			}
			if(rows > 8191) rows = 8191;
			out.write_shift(2, rows);
			out.write_shift(1, wscnt);
			out.write_shift(1, cols);
			out.write_shift(2, 0x00);
			out.write_shift(2, 0x00);
			out.write_shift(1, 0x01);
			out.write_shift(1, 0x02);
			out.write_shift(4, 0);
			out.write_shift(4, 0);
			return out;
		}

		function parse_RANGE(blob, length, opts) {
			var o = {s:{c:0,r:0},e:{c:0,r:0}};
			if(length == 8 && opts.qpro) {
				o.s.c = blob.read_shift(1);
				blob.l++;
				o.s.r = blob.read_shift(2);
				o.e.c = blob.read_shift(1);
				blob.l++;
				o.e.r = blob.read_shift(2);
				return o;
			}
			o.s.c = blob.read_shift(2);
			o.s.r = blob.read_shift(2);
			if(length == 12 && opts.qpro) blob.l += 2;
			o.e.c = blob.read_shift(2);
			o.e.r = blob.read_shift(2);
			if(length == 12 && opts.qpro) blob.l += 2;
			if(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
			return o;
		}
		function write_RANGE(range) {
			var out = new_buf(8);
			out.write_shift(2, range.s.c);
			out.write_shift(2, range.s.r);
			out.write_shift(2, range.e.c);
			out.write_shift(2, range.e.r);
			return out;
		}

		function parse_cell(blob, length, opts) {
			var o = [{c:0,r:0}, {t:'n',v:0}, 0, 0];
			if(opts.qpro && opts.vers != 0x5120) {
				o[0].c = blob.read_shift(1);
				o[3] = blob.read_shift(1);
				o[0].r = blob.read_shift(2);
				blob.l+=2;
			} else {
				o[2] = blob.read_shift(1);
				o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);
			}
			return o;
		}

		function parse_LABEL(blob, length, opts) {
			var tgt = blob.l + length;
			var o = parse_cell(blob, length, opts);
			o[1].t = 's';
			if(opts.vers == 0x5120) {
				blob.l++;
				var len = blob.read_shift(1);
				o[1].v = blob.read_shift(len, 'utf8');
				return o;
			}
			if(opts.qpro) blob.l++;
			o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
			return o;
		}
		function write_LABEL(R, C, s) {
			/* TODO: encoding */
			var o = new_buf(7 + s.length);
			o.write_shift(1, 0xFF);
			o.write_shift(2, C);
			o.write_shift(2, R);
			o.write_shift(1, 0x27); // ??
			for(var i = 0; i < o.length; ++i) {
				var cc = s.charCodeAt(i);
				o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
			}
			o.write_shift(1, 0);
			return o;
		}

		function parse_INTEGER(blob, length, opts) {
			var o = parse_cell(blob, length, opts);
			o[1].v = blob.read_shift(2, 'i');
			return o;
		}
		function write_INTEGER(R, C, v) {
			var o = new_buf(7);
			o.write_shift(1, 0xFF);
			o.write_shift(2, C);
			o.write_shift(2, R);
			o.write_shift(2, v, 'i');
			return o;
		}

		function parse_NUMBER(blob, length, opts) {
			var o = parse_cell(blob, length, opts);
			o[1].v = blob.read_shift(8, 'f');
			return o;
		}
		function write_NUMBER(R, C, v) {
			var o = new_buf(13);
			o.write_shift(1, 0xFF);
			o.write_shift(2, C);
			o.write_shift(2, R);
			o.write_shift(8, v, 'f');
			return o;
		}

		function parse_FORMULA(blob, length, opts) {
			var tgt = blob.l + length;
			var o = parse_cell(blob, length, opts);
			/* TODO: formula */
			o[1].v = blob.read_shift(8, 'f');
			if(opts.qpro) blob.l = tgt;
			else {
				var flen = blob.read_shift(2);
				wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
				blob.l += flen;
			}
			return o;
		}

		function wk1_parse_rc(B, V, col) {
			var rel = V & 0x8000;
			V &= -32769;
			V = (rel ? B : 0) + ((V >= 0x2000) ? V - 0x4000 : V);
			return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
		}
		/* var oprec = [
			8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,
			3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8
		]; */
		/* TODO: flesh out */
		var FuncTab = {
			0x33: ["FALSE", 0],
			0x34: ["TRUE", 0],
			0x46: ["LEN", 1],
			0x50: ["SUM", 69],
			0x51: ["AVERAGEA", 69],
			0x52: ["COUNTA", 69],
			0x53: ["MINA", 69],
			0x54: ["MAXA", 69],
			0x6F: ["T", 1]
		};
		var BinOpTab = [
			  "",   "",   "",   "",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
			  "",  "+",  "-",  "*",  "/",  "^",  "=", "<>", // eslint-disable-line no-mixed-spaces-and-tabs
			"<=", ">=",  "<",  ">",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
			 "&",   "",   "",   "",   "",   "",   "",   ""  // eslint-disable-line no-mixed-spaces-and-tabs
		];

		function wk1_fmla_to_csf(blob, o) {
			prep_blob(blob, 0);
			var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
			while(blob.l < blob.length) {
				var cc = blob[blob.l++];
				switch(cc) {
					case 0x00: out.push(blob.read_shift(8, 'f')); break;
					case 0x01: {
						C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
						R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
						out.push(C + R);
					} break;
					case 0x02: {
						var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
						var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
						C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
						R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
						out.push(c + r + ":" + C + R);
					} break;
					case 0x03:
						if(blob.l < blob.length) { console.error("WK1 premature formula end"); return; }
						break;
					case 0x04: out.push("(" + out.pop() + ")"); break;
					case 0x05: out.push(blob.read_shift(2)); break;
					case 0x06: {
						/* TODO: text encoding */
						var Z = ""; while((cc = blob[blob.l++])) Z += String.fromCharCode(cc);
						out.push('"' + Z.replace(/"/g, '""') + '"');
					} break;

					case 0x08: out.push("-" + out.pop()); break;
					case 0x17: out.push("+" + out.pop()); break;
					case 0x16: out.push("NOT(" + out.pop() + ")"); break;

					case 0x14: case 0x15: {
						argR = out.pop(); argL = out.pop();
						out.push(["AND", "OR"][cc - 0x14] + "(" + argL + "," + argR + ")");
					} break;

					default:
						if(cc < 0x20 && BinOpTab[cc]) {
							argR = out.pop(); argL = out.pop();
							out.push(argL + BinOpTab[cc] + argR);
						} else if(FuncTab[cc]) {
							argc = FuncTab[cc][1];
							if(argc == 69) argc = blob[blob.l++];
							if(argc > out.length) { console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|"); return; }
							var args = out.slice(-argc);
							out.length -= argc;
							out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
						}
						else if(cc <= 0x07) return console.error("WK1 invalid opcode " + cc.toString(16));
						else if(cc <= 0x18) return console.error("WK1 unsupported op " + cc.toString(16));
						else if(cc <= 0x1E) return console.error("WK1 invalid opcode " + cc.toString(16));
						else if(cc <= 0x73) return console.error("WK1 unsupported function opcode " + cc.toString(16));
						// possible future functions ??
						else return console.error("WK1 unrecognized opcode " + cc.toString(16));
				}
			}
			if(out.length == 1) o[1].f = "" + out[0];
			else console.error("WK1 bad formula parse |" + out.join("|") + "|");
		}


		function parse_cell_3(blob/*::, length*/) {
			var o = [{c:0,r:0}, {t:'n',v:0}, 0];
			o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];
			return o;
		}

		function parse_LABEL_16(blob, length) {
			var o = parse_cell_3(blob);
			o[1].t = 's';
			o[1].v = blob.read_shift(length - 4, 'cstr');
			return o;
		}
		function write_LABEL_16(R, C, wsidx, s) {
			/* TODO: encoding */
			var o = new_buf(6 + s.length);
			o.write_shift(2, R);
			o.write_shift(1, wsidx);
			o.write_shift(1, C);
			o.write_shift(1, 0x27);
			for(var i = 0; i < s.length; ++i) {
				var cc = s.charCodeAt(i);
				o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
			}
			o.write_shift(1, 0);
			return o;
		}

		function parse_NUMBER_18(blob, length) {
			var o = parse_cell_3(blob);
			o[1].v = blob.read_shift(2);
			var v = o[1].v >> 1;
			if(o[1].v & 0x1) {
				switch(v & 0x07) {
					case 0: v = (v >> 3) * 5000; break;
					case 1: v = (v >> 3) * 500; break;
					case 2: v = (v >> 3) / 20; break;
					case 3: v = (v >> 3) / 200; break;
					case 4: v = (v >> 3) / 2000; break;
					case 5: v = (v >> 3) / 20000; break;
					case 6: v = (v >> 3) / 16; break;
					case 7: v = (v >> 3) / 64; break;
				}
			}
			o[1].v = v;
			return o;
		}

		function parse_NUMBER_17(blob, length) {
			var o = parse_cell_3(blob);
			var v1 = blob.read_shift(4);
			var v2 = blob.read_shift(4);
			var e = blob.read_shift(2);
			if(e == 0xFFFF) {
				if(v1 === 0 && v2 === 0xC0000000) { o[1].t = "e"; o[1].v = 0x0F; } // ERR -> #VALUE!
				else if(v1 === 0 && v2 === 0xD0000000) { o[1].t = "e"; o[1].v = 0x2A; } // NA -> #N/A
				else o[1].v = 0;
				return o;
			}
			var s = e & 0x8000; e = (e&0x7FFF) - 16446;
			o[1].v = (1 - s*2) * (v2 * Math.pow(2, e+32) + v1 * Math.pow(2, e));
			return o;
		}
		function write_NUMBER_17(R, C, wsidx, v) {
			var o = new_buf(14);
			o.write_shift(2, R);
			o.write_shift(1, wsidx);
			o.write_shift(1, C);
			if(v == 0) {
				o.write_shift(4, 0);
				o.write_shift(4, 0);
				o.write_shift(2, 0xFFFF);
				return o;
			}
			var s = 0, e = 0, v1 = 0, v2 = 0;
			if(v < 0) { s = 1; v = -v; }
			e = Math.log2(v) | 0;
			v /= Math.pow(2, e-31);
			v2 = (v)>>>0;
			if((v2&0x80000000) == 0) { v/=2; ++e; v2 = v >>> 0; }
			v -= v2;
			v2 |= 0x80000000;
			v2 >>>= 0;
			v *= Math.pow(2, 32);
			v1 = v>>>0;
			o.write_shift(4, v1);
			o.write_shift(4, v2);
			e += 0x3FFF + (s ? 0x8000 : 0);
			o.write_shift(2, e);
			return o;
		}

		function parse_FORMULA_19(blob, length) {
			var o = parse_NUMBER_17(blob);
			blob.l += length - 14; /* TODO: WK3 formula */
			return o;
		}

		function parse_NUMBER_25(blob, length) {
			var o = parse_cell_3(blob);
			var v1 = blob.read_shift(4);
			o[1].v = v1 >> 6;
			return o;
		}

		function parse_NUMBER_27(blob, length) {
			var o = parse_cell_3(blob);
			var v1 = blob.read_shift(8,'f');
			o[1].v = v1;
			return o;
		}

		function parse_FORMULA_28(blob, length) {
			var o = parse_NUMBER_27(blob);
			blob.l += length - 10; /* TODO: formula */
			return o;
		}

		function parse_SHEETNAMECS(blob, length) {
			return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, 'cstr') : "";
		}

		function parse_SHEETNAMELP(blob, length) {
			var len = blob[blob.l++];
			if(len > length - 1) len = length - 1;
			var o = ""; while(o.length < len) o += String.fromCharCode(blob[blob.l++]);
			return o;
		}

		function parse_SHEETINFOQP(blob, length, opts) {
			if(!opts.qpro || length < 21) return;
			var id = blob.read_shift(1);
			blob.l += 17;
			blob.l += 1; //var len = blob.read_shift(1);
			blob.l += 2;
			var nm = blob.read_shift(length - 21, 'cstr');
			return [id, nm];
		}

		function parse_XFORMAT(blob, length) {
			var o = {}, tgt = blob.l + length;
			while(blob.l < tgt) {
				var dt = blob.read_shift(2);
				if(dt == 0x36b0) {
					o[dt] = [0, ""];
					o[dt][0] = blob.read_shift(2);
					while(blob[blob.l]) { o[dt][1] += String.fromCharCode(blob[blob.l]); blob.l++; } blob.l++;
				}
				// TODO: 0x3a99 ??
			}
			return o;
		}
		function write_XFORMAT_SHEETNAME(name, wsidx) {
			var out = new_buf(5 + name.length);
			out.write_shift(2, 0x36b0);
			out.write_shift(2, wsidx);
			for(var i = 0; i < name.length; ++i) {
				var cc = name.charCodeAt(i);
				out[out.l++] = cc > 0x7F ? 0x5F : cc;
			}
			out[out.l++] = 0;
			return out;
		}

		var WK1Enum = {
			/*::[*/0x0000/*::]*/: { n:"BOF", f:parseuint16 },
			/*::[*/0x0001/*::]*/: { n:"EOF" },
			/*::[*/0x0002/*::]*/: { n:"CALCMODE" },
			/*::[*/0x0003/*::]*/: { n:"CALCORDER" },
			/*::[*/0x0004/*::]*/: { n:"SPLIT" },
			/*::[*/0x0005/*::]*/: { n:"SYNC" },
			/*::[*/0x0006/*::]*/: { n:"RANGE", f:parse_RANGE },
			/*::[*/0x0007/*::]*/: { n:"WINDOW1" },
			/*::[*/0x0008/*::]*/: { n:"COLW1" },
			/*::[*/0x0009/*::]*/: { n:"WINTWO" },
			/*::[*/0x000A/*::]*/: { n:"COLW2" },
			/*::[*/0x000B/*::]*/: { n:"NAME" },
			/*::[*/0x000C/*::]*/: { n:"BLANK" },
			/*::[*/0x000D/*::]*/: { n:"INTEGER", f:parse_INTEGER },
			/*::[*/0x000E/*::]*/: { n:"NUMBER", f:parse_NUMBER },
			/*::[*/0x000F/*::]*/: { n:"LABEL", f:parse_LABEL },
			/*::[*/0x0010/*::]*/: { n:"FORMULA", f:parse_FORMULA },
			/*::[*/0x0018/*::]*/: { n:"TABLE" },
			/*::[*/0x0019/*::]*/: { n:"ORANGE" },
			/*::[*/0x001A/*::]*/: { n:"PRANGE" },
			/*::[*/0x001B/*::]*/: { n:"SRANGE" },
			/*::[*/0x001C/*::]*/: { n:"FRANGE" },
			/*::[*/0x001D/*::]*/: { n:"KRANGE1" },
			/*::[*/0x0020/*::]*/: { n:"HRANGE" },
			/*::[*/0x0023/*::]*/: { n:"KRANGE2" },
			/*::[*/0x0024/*::]*/: { n:"PROTEC" },
			/*::[*/0x0025/*::]*/: { n:"FOOTER" },
			/*::[*/0x0026/*::]*/: { n:"HEADER" },
			/*::[*/0x0027/*::]*/: { n:"SETUP" },
			/*::[*/0x0028/*::]*/: { n:"MARGINS" },
			/*::[*/0x0029/*::]*/: { n:"LABELFMT" },
			/*::[*/0x002A/*::]*/: { n:"TITLES" },
			/*::[*/0x002B/*::]*/: { n:"SHEETJS" },
			/*::[*/0x002D/*::]*/: { n:"GRAPH" },
			/*::[*/0x002E/*::]*/: { n:"NGRAPH" },
			/*::[*/0x002F/*::]*/: { n:"CALCCOUNT" },
			/*::[*/0x0030/*::]*/: { n:"UNFORMATTED" },
			/*::[*/0x0031/*::]*/: { n:"CURSORW12" },
			/*::[*/0x0032/*::]*/: { n:"WINDOW" },
			/*::[*/0x0033/*::]*/: { n:"STRING", f:parse_LABEL },
			/*::[*/0x0037/*::]*/: { n:"PASSWORD" },
			/*::[*/0x0038/*::]*/: { n:"LOCKED" },
			/*::[*/0x003C/*::]*/: { n:"QUERY" },
			/*::[*/0x003D/*::]*/: { n:"QUERYNAME" },
			/*::[*/0x003E/*::]*/: { n:"PRINT" },
			/*::[*/0x003F/*::]*/: { n:"PRINTNAME" },
			/*::[*/0x0040/*::]*/: { n:"GRAPH2" },
			/*::[*/0x0041/*::]*/: { n:"GRAPHNAME" },
			/*::[*/0x0042/*::]*/: { n:"ZOOM" },
			/*::[*/0x0043/*::]*/: { n:"SYMSPLIT" },
			/*::[*/0x0044/*::]*/: { n:"NSROWS" },
			/*::[*/0x0045/*::]*/: { n:"NSCOLS" },
			/*::[*/0x0046/*::]*/: { n:"RULER" },
			/*::[*/0x0047/*::]*/: { n:"NNAME" },
			/*::[*/0x0048/*::]*/: { n:"ACOMM" },
			/*::[*/0x0049/*::]*/: { n:"AMACRO" },
			/*::[*/0x004A/*::]*/: { n:"PARSE" },
			/*::[*/0x0066/*::]*/: { n:"PRANGES??" },
			/*::[*/0x0067/*::]*/: { n:"RRANGES??" },
			/*::[*/0x0068/*::]*/: { n:"FNAME??" },
			/*::[*/0x0069/*::]*/: { n:"MRANGES??" },
			/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
			/*::[*/0x00DE/*::]*/: { n:"SHEETNAMELP", f:parse_SHEETNAMELP },
			/*::[*/0xFFFF/*::]*/: { n:"" }
		};

		var WK3Enum = {
			/*::[*/0x0000/*::]*/: { n:"BOF" },
			/*::[*/0x0001/*::]*/: { n:"EOF" },
			/*::[*/0x0002/*::]*/: { n:"PASSWORD" },
			/*::[*/0x0003/*::]*/: { n:"CALCSET" },
			/*::[*/0x0004/*::]*/: { n:"WINDOWSET" },
			/*::[*/0x0005/*::]*/: { n:"SHEETCELLPTR" },
			/*::[*/0x0006/*::]*/: { n:"SHEETLAYOUT" },
			/*::[*/0x0007/*::]*/: { n:"COLUMNWIDTH" },
			/*::[*/0x0008/*::]*/: { n:"HIDDENCOLUMN" },
			/*::[*/0x0009/*::]*/: { n:"USERRANGE" },
			/*::[*/0x000A/*::]*/: { n:"SYSTEMRANGE" },
			/*::[*/0x000B/*::]*/: { n:"ZEROFORCE" },
			/*::[*/0x000C/*::]*/: { n:"SORTKEYDIR" },
			/*::[*/0x000D/*::]*/: { n:"FILESEAL" },
			/*::[*/0x000E/*::]*/: { n:"DATAFILLNUMS" },
			/*::[*/0x000F/*::]*/: { n:"PRINTMAIN" },
			/*::[*/0x0010/*::]*/: { n:"PRINTSTRING" },
			/*::[*/0x0011/*::]*/: { n:"GRAPHMAIN" },
			/*::[*/0x0012/*::]*/: { n:"GRAPHSTRING" },
			/*::[*/0x0013/*::]*/: { n:"??" },
			/*::[*/0x0014/*::]*/: { n:"ERRCELL" },
			/*::[*/0x0015/*::]*/: { n:"NACELL" },
			/*::[*/0x0016/*::]*/: { n:"LABEL16", f:parse_LABEL_16},
			/*::[*/0x0017/*::]*/: { n:"NUMBER17", f:parse_NUMBER_17 },
			/*::[*/0x0018/*::]*/: { n:"NUMBER18", f:parse_NUMBER_18 },
			/*::[*/0x0019/*::]*/: { n:"FORMULA19", f:parse_FORMULA_19},
			/*::[*/0x001A/*::]*/: { n:"FORMULA1A" },
			/*::[*/0x001B/*::]*/: { n:"XFORMAT", f:parse_XFORMAT },
			/*::[*/0x001C/*::]*/: { n:"DTLABELMISC" },
			/*::[*/0x001D/*::]*/: { n:"DTLABELCELL" },
			/*::[*/0x001E/*::]*/: { n:"GRAPHWINDOW" },
			/*::[*/0x001F/*::]*/: { n:"CPA" },
			/*::[*/0x0020/*::]*/: { n:"LPLAUTO" },
			/*::[*/0x0021/*::]*/: { n:"QUERY" },
			/*::[*/0x0022/*::]*/: { n:"HIDDENSHEET" },
			/*::[*/0x0023/*::]*/: { n:"??" },
			/*::[*/0x0025/*::]*/: { n:"NUMBER25", f:parse_NUMBER_25 },
			/*::[*/0x0026/*::]*/: { n:"??" },
			/*::[*/0x0027/*::]*/: { n:"NUMBER27", f:parse_NUMBER_27 },
			/*::[*/0x0028/*::]*/: { n:"FORMULA28", f:parse_FORMULA_28 },
			/*::[*/0x008E/*::]*/: { n:"??" },
			/*::[*/0x0093/*::]*/: { n:"??" },
			/*::[*/0x0096/*::]*/: { n:"??" },
			/*::[*/0x0097/*::]*/: { n:"??" },
			/*::[*/0x0098/*::]*/: { n:"??" },
			/*::[*/0x0099/*::]*/: { n:"??" },
			/*::[*/0x009A/*::]*/: { n:"??" },
			/*::[*/0x009B/*::]*/: { n:"??" },
			/*::[*/0x009C/*::]*/: { n:"??" },
			/*::[*/0x00A3/*::]*/: { n:"??" },
			/*::[*/0x00AE/*::]*/: { n:"??" },
			/*::[*/0x00AF/*::]*/: { n:"??" },
			/*::[*/0x00B0/*::]*/: { n:"??" },
			/*::[*/0x00B1/*::]*/: { n:"??" },
			/*::[*/0x00B8/*::]*/: { n:"??" },
			/*::[*/0x00B9/*::]*/: { n:"??" },
			/*::[*/0x00BA/*::]*/: { n:"??" },
			/*::[*/0x00BB/*::]*/: { n:"??" },
			/*::[*/0x00BC/*::]*/: { n:"??" },
			/*::[*/0x00C3/*::]*/: { n:"??" },
			/*::[*/0x00C9/*::]*/: { n:"??" },
			/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
			/*::[*/0x00CD/*::]*/: { n:"??" },
			/*::[*/0x00CE/*::]*/: { n:"??" },
			/*::[*/0x00CF/*::]*/: { n:"??" },
			/*::[*/0x00D0/*::]*/: { n:"??" },
			/*::[*/0x0100/*::]*/: { n:"??" },
			/*::[*/0x0103/*::]*/: { n:"??" },
			/*::[*/0x0104/*::]*/: { n:"??" },
			/*::[*/0x0105/*::]*/: { n:"??" },
			/*::[*/0x0106/*::]*/: { n:"??" },
			/*::[*/0x0107/*::]*/: { n:"??" },
			/*::[*/0x0109/*::]*/: { n:"??" },
			/*::[*/0x010A/*::]*/: { n:"??" },
			/*::[*/0x010B/*::]*/: { n:"??" },
			/*::[*/0x010C/*::]*/: { n:"??" },
			/*::[*/0x010E/*::]*/: { n:"??" },
			/*::[*/0x010F/*::]*/: { n:"??" },
			/*::[*/0x0180/*::]*/: { n:"??" },
			/*::[*/0x0185/*::]*/: { n:"??" },
			/*::[*/0x0186/*::]*/: { n:"??" },
			/*::[*/0x0189/*::]*/: { n:"??" },
			/*::[*/0x018C/*::]*/: { n:"??" },
			/*::[*/0x0200/*::]*/: { n:"??" },
			/*::[*/0x0202/*::]*/: { n:"??" },
			/*::[*/0x0201/*::]*/: { n:"??" },
			/*::[*/0x0204/*::]*/: { n:"??" },
			/*::[*/0x0205/*::]*/: { n:"??" },
			/*::[*/0x0280/*::]*/: { n:"??" },
			/*::[*/0x0281/*::]*/: { n:"??" },
			/*::[*/0x0282/*::]*/: { n:"??" },
			/*::[*/0x0283/*::]*/: { n:"??" },
			/*::[*/0x0284/*::]*/: { n:"??" },
			/*::[*/0x0285/*::]*/: { n:"??" },
			/*::[*/0x0286/*::]*/: { n:"??" },
			/*::[*/0x0287/*::]*/: { n:"??" },
			/*::[*/0x0288/*::]*/: { n:"??" },
			/*::[*/0x0292/*::]*/: { n:"??" },
			/*::[*/0x0293/*::]*/: { n:"??" },
			/*::[*/0x0294/*::]*/: { n:"??" },
			/*::[*/0x0295/*::]*/: { n:"??" },
			/*::[*/0x0296/*::]*/: { n:"??" },
			/*::[*/0x0299/*::]*/: { n:"??" },
			/*::[*/0x029A/*::]*/: { n:"??" },
			/*::[*/0x0300/*::]*/: { n:"??" },
			/*::[*/0x0304/*::]*/: { n:"??" },
			/*::[*/0x0601/*::]*/: { n:"SHEETINFOQP", f:parse_SHEETINFOQP },
			/*::[*/0x0640/*::]*/: { n:"??" },
			/*::[*/0x0642/*::]*/: { n:"??" },
			/*::[*/0x0701/*::]*/: { n:"??" },
			/*::[*/0x0702/*::]*/: { n:"??" },
			/*::[*/0x0703/*::]*/: { n:"??" },
			/*::[*/0x0704/*::]*/: { n:"??" },
			/*::[*/0x0780/*::]*/: { n:"??" },
			/*::[*/0x0800/*::]*/: { n:"??" },
			/*::[*/0x0801/*::]*/: { n:"??" },
			/*::[*/0x0804/*::]*/: { n:"??" },
			/*::[*/0x0A80/*::]*/: { n:"??" },
			/*::[*/0x2AF6/*::]*/: { n:"??" },
			/*::[*/0x3231/*::]*/: { n:"??" },
			/*::[*/0x6E49/*::]*/: { n:"??" },
			/*::[*/0x6F44/*::]*/: { n:"??" },
			/*::[*/0xFFFF/*::]*/: { n:"" }
		};
		return {
			sheet_to_wk1: sheet_to_wk1,
			book_to_wk3: book_to_wk3,
			to_workbook: lotus_to_workbook
		};
	})();
	/* 18.4.7 rPr CT_RPrElt */
	function parse_rpr(rpr) {
		var font = {}, m = rpr.match(tagregex), i = 0;
		var pass = false;
		if(m) for(;i!=m.length; ++i) {
			var y = parsexmltag(m[i]);
			switch(y[0].replace(/\w*:/g,"")) {
				/* 18.8.12 condense CT_BooleanProperty */
				/* ** not required . */
				case '<condense': break;
				/* 18.8.17 extend CT_BooleanProperty */
				/* ** not required . */
				case '<extend': break;
				/* 18.8.36 shadow CT_BooleanProperty */
				/* ** not required . */
				case '<shadow':
					if(!y.val) break;
					/* falls through */
				case '<shadow>':
				case '<shadow/>': font.shadow = 1; break;
				case '</shadow>': break;

				/* 18.4.1 charset CT_IntProperty TODO */
				case '<charset':
					if(y.val == '1') break;
					font.cp = CS2CP[parseInt(y.val, 10)];
					break;

				/* 18.4.2 outline CT_BooleanProperty TODO */
				case '<outline':
					if(!y.val) break;
					/* falls through */
				case '<outline>':
				case '<outline/>': font.outline = 1; break;
				case '</outline>': break;

				/* 18.4.5 rFont CT_FontName */
				case '<rFont': font.name = y.val; break;

				/* 18.4.11 sz CT_FontSize */
				case '<sz': font.sz = y.val; break;

				/* 18.4.10 strike CT_BooleanProperty */
				case '<strike':
					if(!y.val) break;
					/* falls through */
				case '<strike>':
				case '<strike/>': font.strike = 1; break;
				case '</strike>': break;

				/* 18.4.13 u CT_UnderlineProperty */
				case '<u':
					if(!y.val) break;
					switch(y.val) {
						case 'double': font.uval = "double"; break;
						case 'singleAccounting': font.uval = "single-accounting"; break;
						case 'doubleAccounting': font.uval = "double-accounting"; break;
					}
					/* falls through */
				case '<u>':
				case '<u/>': font.u = 1; break;
				case '</u>': break;

				/* 18.8.2 b */
				case '<b':
					if(y.val == '0') break;
					/* falls through */
				case '<b>':
				case '<b/>': font.b = 1; break;
				case '</b>': break;

				/* 18.8.26 i */
				case '<i':
					if(y.val == '0') break;
					/* falls through */
				case '<i>':
				case '<i/>': font.i = 1; break;
				case '</i>': break;

				/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
				case '<color':
					if(y.rgb) font.color = y.rgb.slice(2,8);
					break;
				case '<color>': case '<color/>': case '</color>': break;

				/* 18.8.18 family ST_FontFamily */
				case '<family': font.family = y.val; break;
				case '<family>': case '<family/>': case '</family>': break;

				/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
				case '<vertAlign': font.valign = y.val; break;
				case '<vertAlign>': case '<vertAlign/>': case '</vertAlign>': break;

				/* 18.8.35 scheme CT_FontScheme TODO */
				case '<scheme': break;
				case '<scheme>': case '<scheme/>': case '</scheme>': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': break;
				case '<ext': pass = true; break;
				case '</ext>': pass = false; break;
				default:
					if(y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);
			}
		}
		return font;
	}

	var parse_rs = /*#__PURE__*/(function() {
		var tregex = matchtag("t"), rpregex = matchtag("rPr");
		/* 18.4.4 r CT_RElt */
		function parse_r(r) {
			/* 18.4.12 t ST_Xstring */
			var t = r.match(tregex)/*, cp = 65001*/;
			if(!t) return {t:"s", v:""};

			var o/*:Cell*/ = ({t:'s', v:unescapexml(t[1])}/*:any*/);
			var rpr = r.match(rpregex);
			if(rpr) o.s = parse_rpr(rpr[1]);
			return o;
		}
		var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
		return function parse_rs(rs) {
			return rs.replace(rregex,"").split(rend).map(parse_r).filter(function(r) { return r.v; });
		};
	})();


	/* Parse a list of <r> tags */
	var rs_to_html = /*#__PURE__*/(function parse_rs_factory() {
		var nlregex = /(\r\n|\n)/g;
		function parse_rpr2(font, intro, outro) {
			var style/*:Array<string>*/ = [];

			if(font.u) style.push("text-decoration: underline;");
			if(font.uval) style.push("text-underline-style:" + font.uval + ";");
			if(font.sz) style.push("font-size:" + font.sz + "pt;");
			if(font.outline) style.push("text-effect: outline;");
			if(font.shadow) style.push("text-shadow: auto;");
			intro.push('<span style="' + style.join("") + '">');

			if(font.b) { intro.push("<b>"); outro.push("</b>"); }
			if(font.i) { intro.push("<i>"); outro.push("</i>"); }
			if(font.strike) { intro.push("<s>"); outro.push("</s>"); }

			var align = font.valign || "";
			if(align == "superscript" || align == "super") align = "sup";
			else if(align == "subscript") align = "sub";
			if(align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">"); }

			outro.push("</span>");
			return font;
		}

		/* 18.4.4 r CT_RElt */
		function r_to_html(r) {
			var terms/*:[Array<string>, string, Array<string>]*/ = [[],r.v,[]];
			if(!r.v) return "";

			if(r.s) parse_rpr2(r.s, terms[0], terms[2]);

			return terms[0].join("") + terms[1].replace(nlregex,'<br/>') + terms[2].join("");
		}

		return function parse_rs(rs) {
			return rs.map(r_to_html).join("");
		};
	})();

	/* 18.4.8 si CT_Rst */
	var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
	var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
	function parse_si(x, opts) {
		var html = opts ? opts.cellHTML : true;
		var z = {};
		if(!x) return { t: "" };
		//var y;
		/* 18.4.12 t ST_Xstring (Plaintext String) */
		// TODO: is whitespace actually valid here?
		if(x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
			z.t = unescapexml(utf8read(x.slice(x.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||""));
			z.r = utf8read(x);
			if(html) z.h = escapehtml(z.t);
		}
		/* 18.4.4 r CT_RElt (Rich Text Run) */
		else if((/*y = */x.match(sirregex))) {
			z.r = utf8read(x);
			z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex)||[]).join("").replace(tagregex,"")));
			if(html) z.h = rs_to_html(parse_rs(z.r));
		}
		/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
		/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
		return z;
	}

	/* 18.4 Shared String Table */
	var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
	var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
	var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
	function parse_sst_xml(data/*:string*/, opts)/*:SST*/ {
		var s/*:SST*/ = ([]/*:any*/), ss = "";
		if(!data) return s;
		/* 18.4.9 sst CT_Sst */
		var sst = data.match(sstr0);
		if(sst) {
			ss = sst[2].replace(sstr1,"").split(sstr2);
			for(var i = 0; i != ss.length; ++i) {
				var o = parse_si(ss[i].trim(), opts);
				if(o != null) s[s.length] = o;
			}
			sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;
		}
		return s;
	}
	/* [MS-XLSB] 2.4.221 BrtBeginSst */
	function parse_BrtBeginSst(data) {
		return [data.read_shift(4), data.read_shift(4)];
	}

	/* [MS-XLSB] 2.1.7.45 Shared Strings */
	function parse_sst_bin(data, opts)/*:SST*/ {
		var s/*:SST*/ = ([]/*:any*/);
		var pass = false;
		recordhopper(data, function hopper_sst(val, R, RT) {
			switch(RT) {
				case 0x009F: /* BrtBeginSst */
					s.Count = val[0]; s.Unique = val[1]; break;
				case 0x0013: /* BrtSSTItem */
					s.push(val); break;
				case 0x00A0: /* BrtEndSst */
					return true;

				case 0x0023: /* BrtFRTBegin */
					pass = true; break;
				case 0x0024: /* BrtFRTEnd */
					pass = false; break;

				default:
					if(R.T);
					if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		});
		return s;
	}
	function _JS2ANSI(str/*:string*/)/*:Array<number>*/ {
		var o/*:Array<number>*/ = [], oo = str.split("");
		for(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.4 Version */
	function parse_CRYPTOVersion(blob, length/*:?number*/) {
		var o/*:any*/ = {};
		o.Major = blob.read_shift(2);
		o.Minor = blob.read_shift(2);
		/*:: if(length == null) return o; */
		if(length >= 4) blob.l += length - 4;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */
	function parse_DataSpaceVersionInfo(blob) {
		var o = {};
		o.id = blob.read_shift(0, 'lpp4');
		o.R = parse_CRYPTOVersion(blob, 4);
		o.U = parse_CRYPTOVersion(blob, 4);
		o.W = parse_CRYPTOVersion(blob, 4);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */
	function parse_DataSpaceMapEntry(blob) {
		var len = blob.read_shift(4);
		var end = blob.l + len - 4;
		var o = {};
		var cnt = blob.read_shift(4);
		var comps/*:Array<{t:number, v:string}>*/ = [];
		/* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */
		while(cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });
		o.name = blob.read_shift(0, 'lpp4');
		o.comps = comps;
		if(blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */
	function parse_DataSpaceMap(blob) {
		var o = [];
		blob.l += 4; // must be 0x8
		var cnt = blob.read_shift(4);
		while(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */
	function parse_DataSpaceDefinition(blob)/*:Array<string>*/ {
		var o/*:Array<string>*/ = [];
		blob.l += 4; // must be 0x8
		var cnt = blob.read_shift(4);
		while(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */
	function parse_TransformInfoHeader(blob) {
		var o = {};
		/*var len = */blob.read_shift(4);
		blob.l += 4; // must be 0x1
		o.id = blob.read_shift(0, 'lpp4');
		o.name = blob.read_shift(0, 'lpp4');
		o.R = parse_CRYPTOVersion(blob, 4);
		o.U = parse_CRYPTOVersion(blob, 4);
		o.W = parse_CRYPTOVersion(blob, 4);
		return o;
	}

	function parse_Primary(blob) {
		/* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
		var hdr = parse_TransformInfoHeader(blob);
		/* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */
		hdr.ename = blob.read_shift(0, '8lpp4');
		hdr.blksz = blob.read_shift(4);
		hdr.cmode = blob.read_shift(4);
		if(blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
		return hdr;
	}

	/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
	function parse_EncryptionHeader(blob, length/*:number*/) {
		var tgt = blob.l + length;
		var o = {};
		o.Flags = (blob.read_shift(4) & 0x3F);
		blob.l += 4;
		o.AlgID = blob.read_shift(4);
		var valid = false;
		switch(o.AlgID) {
			case 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;
			case 0x6801: valid = (o.Flags == 0x04); break;
			case 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;
			default: throw 'Unrecognized encryption algorithm: ' + o.AlgID;
		}
		if(!valid) throw new Error("Encryption Flags/AlgID mismatch");
		o.AlgIDHash = blob.read_shift(4);
		o.KeySize = blob.read_shift(4);
		o.ProviderType = blob.read_shift(4);
		blob.l += 8;
		o.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le');
		blob.l = tgt;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
	function parse_EncryptionVerifier(blob, length/*:number*/) {
		var o = {}, tgt = blob.l + length;
		blob.l += 4; // SaltSize must be 0x10
		o.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;
		o.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;
		/*var sz = */blob.read_shift(4);
		o.VerifierHash = blob.slice(blob.l, tgt); blob.l = tgt;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */
	function parse_EncryptionInfo(blob) {
		var vers = parse_CRYPTOVersion(blob);
		switch(vers.Minor) {
			case 0x02: return [vers.Minor, parse_EncInfoStd(blob)];
			case 0x03: return [vers.Minor, parse_EncInfoExt()];
			case 0x04: return [vers.Minor, parse_EncInfoAgl(blob)];
		}
		throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
	}

	/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */
	function parse_EncInfoStd(blob/*::, vers*/) {
		var flags = blob.read_shift(4);
		if((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
		var sz = blob.read_shift(4);
		//var tgt = blob.l + sz;
		var hdr = parse_EncryptionHeader(blob, sz);
		var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
		return { t:"Std", h:hdr, v:verifier };
	}
	/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */
	function parse_EncInfoExt(/*::blob, vers*/) { throw new Error("File is password-protected: ECMA-376 Extensible"); }
	/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */
	function parse_EncInfoAgl(blob/*::, vers*/) {
		var KeyData = ["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];
		blob.l+=4;
		var xml = blob.read_shift(blob.length - blob.l, 'utf8');
		var o = {};
		xml.replace(tagregex, function xml_agile(x) {
			var y/*:any*/ = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<?xml': break;
				case '<encryption': case '</encryption>': break;
				case '<keyData': KeyData.forEach(function(k) { o[k] = y[k]; }); break;
				case '<dataIntegrity': o.encryptedHmacKey = y.encryptedHmacKey; o.encryptedHmacValue = y.encryptedHmacValue; break;
				case '<keyEncryptors>': case '<keyEncryptors': o.encs = []; break;
				case '</keyEncryptors>': break;

				case '<keyEncryptor': o.uri = y.uri; break;
				case '</keyEncryptor>': break;
				case '<encryptedKey': o.encs.push(y); break;
				default: throw y[0];
			}
		});
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
	function parse_RC4CryptoHeader(blob, length/*:number*/) {
		var o = {};
		var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
		if(vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);
		if(vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);
		o.Flags = blob.read_shift(4); length -= 4;
		var sz = blob.read_shift(4); length -= 4;
		o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;
		o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
		return o;
	}
	/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
	function parse_RC4Header(blob/*::, length*/) {
		var o = {};
		var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
		if(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
		o.Salt = blob.read_shift(16);
		o.EncryptedVerifier = blob.read_shift(16);
		o.EncryptedVerifierHash = blob.read_shift(16);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
	function crypto_CreatePasswordVerifier_Method1(Password/*:string*/) {
		var Verifier = 0x0000, PasswordArray;
		var PasswordDecoded = _JS2ANSI(Password);
		var len = PasswordDecoded.length + 1, i, PasswordByte;
		var Intermediate1, Intermediate2, Intermediate3;
		PasswordArray = new_raw_buf(len);
		PasswordArray[0] = PasswordDecoded.length;
		for(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];
		for(i = len-1; i >= 0; --i) {
			PasswordByte = PasswordArray[i];
			Intermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;
			Intermediate2 = (Verifier << 1) & 0x7FFF;
			Intermediate3 = Intermediate1 | Intermediate2;
			Verifier = Intermediate3 ^ PasswordByte;
		}
		return Verifier ^ 0xCE4B;
	}

	/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
	var crypto_CreateXorArray_Method1 = /*#__PURE__*/(function() {
		var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
		var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
		var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];
		var Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };
		var XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };
		var CreateXorKey_Method1 = function(Password) {
			var XorKey = InitialCode[Password.length - 1];
			var CurrentElement = 0x68;
			for(var i = Password.length-1; i >= 0; --i) {
				var Char = Password[i];
				for(var j = 0; j != 7; ++j) {
					if(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
					Char *= 2; --CurrentElement;
				}
			}
			return XorKey;
		};
		return function(password/*:string*/) {
			var Password = _JS2ANSI(password);
			var XorKey = CreateXorKey_Method1(Password);
			var Index = Password.length;
			var ObfuscationArray = new_raw_buf(16);
			for(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;
			var Temp, PasswordLastChar, PadIndex;
			if((Index & 1) === 1) {
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
				--Index;
				Temp = XorKey & 0xFF;
				PasswordLastChar = Password[Password.length - 1];
				ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
			}
			while(Index > 0) {
				--Index;
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
				--Index;
				Temp = XorKey & 0xFF;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
			}
			Index = 15;
			PadIndex = 15 - Password.length;
			while(PadIndex > 0) {
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
				--Index;
				--PadIndex;
				Temp = XorKey & 0xFF;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
				--Index;
				--PadIndex;
			}
			return ObfuscationArray;
		};
	})();

	/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
	var crypto_DecryptData_Method1 = function(password/*:string*/, Data, XorArrayIndex, XorArray, O) {
		/* If XorArray is set, use it; if O is not set, make changes in-place */
		if(!O) O = Data;
		if(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
		var Index, Value;
		for(Index = 0; Index != Data.length; ++Index) {
			Value = Data[Index];
			Value ^= XorArray[XorArrayIndex];
			Value = ((Value>>5) | (Value<<3)) & 0xFF;
			O[Index] = Value;
			++XorArrayIndex;
		}
		return [O, XorArrayIndex, XorArray];
	};

	var crypto_MakeXorDecryptor = function(password/*:string*/) {
		var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
		return function(Data) {
			var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
			XorArrayIndex = O[1];
			return O[0];
		};
	};

	/* 2.5.343 */
	function parse_XORObfuscation(blob, length, opts, out) {
		var o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) }/*:any*/);
		if(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
		out.valid = o.verificationBytes === o.verifier;
		if(out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
		return o;
	}

	/* 2.4.117 */
	function parse_FilePassHeader(blob, length/*:number*/, oo) {
		var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;
		if(o.Info === 1) o.Data = parse_RC4Header(blob);
		else o.Data = parse_RC4CryptoHeader(blob, length);
		return o;
	}
	function parse_FilePass(blob, length/*:number*/, opts) {
		var o = ({ Type: opts.biff >= 8 ? blob.read_shift(2) : 0 }/*:any*/); /* wEncryptionType */
		if(o.Type) parse_FilePassHeader(blob, length-2, o);
		else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
		return o;
	}


	var RTF = /*#__PURE__*/(function() {
		function rtf_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
			switch(opts.type) {
				case 'base64': return rtf_to_sheet_str(Base64_decode(d), opts);
				case 'binary': return rtf_to_sheet_str(d, opts);
				case 'buffer': return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
				case 'array':  return rtf_to_sheet_str(cc2str(d), opts);
			}
			throw new Error("Unrecognized type " + opts.type);
		}

		/* TODO: this is a stub */
		function rtf_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
			var o = opts || {};
			var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);

			var rows = str.match(/\\trowd.*?\\row\b/g);
			if(!rows.length) throw new Error("RTF missing table");
			var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:rows.length - 1}}/*:any*/);
			rows.forEach(function(rowtf, R) {
				if(Array.isArray(ws)) ws[R] = [];
				var rtfre = /\\\w+\b/g;
				var last_index = 0;
				var res;
				var C = -1;
				while((res = rtfre.exec(rowtf))) {
					switch(res[0]) {
						case "\\cell":
							var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
							if(data[0] == " ") data = data.slice(1);
							++C;
							if(data.length) {
								// TODO: value parsing, including codepage adjustments
								var cell = {v: data, t:"s"};
								if(Array.isArray(ws)) ws[R][C] = cell;
								else ws[encode_cell({r:R, c:C})] = cell;
							}
							break;
					}
					last_index = rtfre.lastIndex;
				}
				if(C > range.e.c) range.e.c = C;
			});
			ws['!ref'] = encode_range(range);
			return ws;
		}

		function rtf_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(rtf_to_sheet(d, opts), opts); }

		/* TODO: this is a stub */
		function sheet_to_rtf(ws/*:Worksheet*//*::, opts*/)/*:string*/ {
			var o = ["{\\rtf1\\ansi"];
			var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
			var dense = Array.isArray(ws);
			for(var R = r.s.r; R <= r.e.r; ++R) {
				o.push("\\trowd\\trautofit1");
				for(var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C+1));
				o.push("\\pard\\intbl");
				for(C = r.s.c; C <= r.e.c; ++C) {
					var coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C]: ws[coord];
					if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
					o.push(" " + (cell.w || (format_cell(cell), cell.w)));
					o.push("\\cell");
				}
				o.push("\\pard\\intbl\\row");
			}
			return o.join("") + "}";
		}

		return {
			to_workbook: rtf_to_workbook,
			to_sheet: rtf_to_sheet,
			from_sheet: sheet_to_rtf
		};
	})();
	function hex2RGB(h) {
		var o = h.slice(h[0]==="#"?1:0).slice(0,6);
		return [parseInt(o.slice(0,2),16),parseInt(o.slice(2,4),16),parseInt(o.slice(4,6),16)];
	}
	function rgb2Hex(rgb) {
		for(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);
		return o.toString(16).toUpperCase().slice(1);
	}

	function rgb2HSL(rgb) {
		var R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;
		var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
		if(C === 0) return [0, 0, R];

		var H6 = 0, S = 0, L2 = (M + m);
		S = C / (L2 > 1 ? 2 - L2 : L2);
		switch(M){
			case R: H6 = ((G - B) / C + 6)%6; break;
			case G: H6 = ((B - R) / C + 2); break;
			case B: H6 = ((R - G) / C + 4); break;
		}
		return [H6 / 6, S, L2 / 2];
	}

	function hsl2RGB(hsl){
		var H = hsl[0], S = hsl[1], L = hsl[2];
		var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;
		var rgb = [m,m,m], h6 = 6*H;

		var X;
		if(S !== 0) switch(h6|0) {
			case 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;
			case 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;
			case 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;
			case 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;
			case 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;
			case 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;
		}
		for(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);
		return rgb;
	}

	/* 18.8.3 bgColor tint algorithm */
	function rgb_tint(hex, tint) {
		if(tint === 0) return hex;
		var hsl = rgb2HSL(hex2RGB(hex));
		if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
		else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
		return rgb2Hex(hsl2RGB(hsl));
	}

	/* 18.3.1.13 width calculations */
	/* [MS-OI29500] 2.1.595 Column Width & Formatting */
	var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
	function width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }
	function px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }
	function char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }
	//function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
	//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
	function cycle_width(collw) { return char2width(px2char(width2px(collw))); }
	/* XLSX/XLSB/XLS specify width in units of MDW */
	function find_mdw_colw(collw) {
		var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
		if(delta > 0.005) for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }
		MDW = _MDW;
	}
	/* XLML specifies width in terms of pixels */
	/*function find_mdw_wpx(wpx) {
		var delta = Infinity, guess = 0, _MDW = MIN_MDW;
		for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
			guess = char2width_(px2char_(wpx))*256;
			guess = (guess) % 1;
			if(guess > 0.5) guess--;
			if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
		}
		MDW = _MDW;
	}*/

	function process_col(coll/*:ColInfo*/) {
		if(coll.width) {
			coll.wpx = width2px(coll.width);
			coll.wch = px2char(coll.wpx);
			coll.MDW = MDW;
		} else if(coll.wpx) {
			coll.wch = px2char(coll.wpx);
			coll.width = char2width(coll.wch);
			coll.MDW = MDW;
		} else if(typeof coll.wch == 'number') {
			coll.width = char2width(coll.wch);
			coll.wpx = width2px(coll.width);
			coll.MDW = MDW;
		}
		if(coll.customWidth) delete coll.customWidth;
	}

	var DEF_PPI = 96, PPI = DEF_PPI;
	function px2pt(px) { return px * 96 / PPI; }
	function pt2px(pt) { return pt * PPI / 96; }

	/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
	var XLMLPatternTypeMap = {
		"None": "none",
		"Solid": "solid",
		"Gray50": "mediumGray",
		"Gray75": "darkGray",
		"Gray25": "lightGray",
		"HorzStripe": "darkHorizontal",
		"VertStripe": "darkVertical",
		"ReverseDiagStripe": "darkDown",
		"DiagStripe": "darkUp",
		"DiagCross": "darkGrid",
		"ThickDiagCross": "darkTrellis",
		"ThinHorzStripe": "lightHorizontal",
		"ThinVertStripe": "lightVertical",
		"ThinReverseDiagStripe": "lightDown",
		"ThinHorzCross": "lightGrid"
	};

	/* 18.8.5 borders CT_Borders */
	function parse_borders(t, styles, themes, opts) {
		styles.Borders = [];
		var border = {};
		var pass = false;
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<borders': case '<borders>': case '</borders>': break;

				/* 18.8.4 border CT_Border */
				case '<border': case '<border>': case '<border/>':
					border = /*::(*/{}/*:: :any)*/;
					if(y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
					if(y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
					styles.Borders.push(border);
					break;
				case '</border>': break;

				/* note: not in spec, appears to be CT_BorderPr */
				case '<left/>': break;
				case '<left': case '<left>': break;
				case '</left>': break;

				/* note: not in spec, appears to be CT_BorderPr */
				case '<right/>': break;
				case '<right': case '<right>': break;
				case '</right>': break;

				/* 18.8.43 top CT_BorderPr */
				case '<top/>': break;
				case '<top': case '<top>': break;
				case '</top>': break;

				/* 18.8.6 bottom CT_BorderPr */
				case '<bottom/>': break;
				case '<bottom': case '<bottom>': break;
				case '</bottom>': break;

				/* 18.8.13 diagonal CT_BorderPr */
				case '<diagonal': case '<diagonal>': case '<diagonal/>': break;
				case '</diagonal>': break;

				/* 18.8.25 horizontal CT_BorderPr */
				case '<horizontal': case '<horizontal>': case '<horizontal/>': break;
				case '</horizontal>': break;

				/* 18.8.44 vertical CT_BorderPr */
				case '<vertical': case '<vertical>': case '<vertical/>': break;
				case '</vertical>': break;

				/* 18.8.37 start CT_BorderPr */
				case '<start': case '<start>': case '<start/>': break;
				case '</start>': break;

				/* 18.8.16 end CT_BorderPr */
				case '<end': case '<end>': case '<end/>': break;
				case '</end>': break;

				/* 18.8.? color CT_Color */
				case '<color': case '<color>':
					break;
				case '<color/>': case '</color>': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': break;
				case '<ext': pass = true; break;
				case '</ext>': pass = false; break;
				default: if(opts && opts.WTF) {
					if(!pass) throw new Error('unrecognized ' + y[0] + ' in borders');
				}
			}
		});
	}

	/* 18.8.21 fills CT_Fills */
	function parse_fills(t, styles, themes, opts) {
		styles.Fills = [];
		var fill = {};
		var pass = false;
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<fills': case '<fills>': case '</fills>': break;

				/* 18.8.20 fill CT_Fill */
				case '<fill>': case '<fill': case '<fill/>':
					fill = {}; styles.Fills.push(fill); break;
				case '</fill>': break;

				/* 18.8.24 gradientFill CT_GradientFill */
				case '<gradientFill>': break;
				case '<gradientFill':
				case '</gradientFill>': styles.Fills.push(fill); fill = {}; break;

				/* 18.8.32 patternFill CT_PatternFill */
				case '<patternFill': case '<patternFill>':
					if(y.patternType) fill.patternType = y.patternType;
					break;
				case '<patternFill/>': case '</patternFill>': break;

				/* 18.8.3 bgColor CT_Color */
				case '<bgColor':
					if(!fill.bgColor) fill.bgColor = {};
					if(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
					if(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
					if(y.tint) fill.bgColor.tint = parseFloat(y.tint);
					/* Excel uses ARGB strings */
					if(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
					break;
				case '<bgColor/>': case '</bgColor>': break;

				/* 18.8.19 fgColor CT_Color */
				case '<fgColor':
					if(!fill.fgColor) fill.fgColor = {};
					if(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
					if(y.tint) fill.fgColor.tint = parseFloat(y.tint);
					/* Excel uses ARGB strings */
					if(y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
					break;
				case '<fgColor/>': case '</fgColor>': break;

				/* 18.8.38 stop CT_GradientStop */
				case '<stop': case '<stop/>': break;
				case '</stop>': break;

				/* 18.8.? color CT_Color */
				case '<color': case '<color/>': break;
				case '</color>': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': break;
				case '<ext': pass = true; break;
				case '</ext>': pass = false; break;
				default: if(opts && opts.WTF) {
					if(!pass) throw new Error('unrecognized ' + y[0] + ' in fills');
				}
			}
		});
	}

	/* 18.8.23 fonts CT_Fonts */
	function parse_fonts(t, styles, themes, opts) {
		styles.Fonts = [];
		var font = {};
		var pass = false;
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<fonts': case '<fonts>': case '</fonts>': break;

				/* 18.8.22 font CT_Font */
				case '<font': case '<font>': break;
				case '</font>': case '<font/>':
					styles.Fonts.push(font);
					font = {};
					break;

				/* 18.8.29 name CT_FontName */
				case '<name': if(y.val) font.name = utf8read(y.val); break;
				case '<name/>': case '</name>': break;

				/* 18.8.2  b CT_BooleanProperty */
				case '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;
				case '<b/>': font.bold = 1; break;

				/* 18.8.26 i CT_BooleanProperty */
				case '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;
				case '<i/>': font.italic = 1; break;

				/* 18.4.13 u CT_UnderlineProperty */
				case '<u':
					switch(y.val) {
						case "none": font.underline = 0x00; break;
						case "single": font.underline = 0x01; break;
						case "double": font.underline = 0x02; break;
						case "singleAccounting": font.underline = 0x21; break;
						case "doubleAccounting": font.underline = 0x22; break;
					} break;
				case '<u/>': font.underline = 1; break;

				/* 18.4.10 strike CT_BooleanProperty */
				case '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;
				case '<strike/>': font.strike = 1; break;

				/* 18.4.2  outline CT_BooleanProperty */
				case '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;
				case '<outline/>': font.outline = 1; break;

				/* 18.8.36 shadow CT_BooleanProperty */
				case '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;
				case '<shadow/>': font.shadow = 1; break;

				/* 18.8.12 condense CT_BooleanProperty */
				case '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;
				case '<condense/>': font.condense = 1; break;

				/* 18.8.17 extend CT_BooleanProperty */
				case '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;
				case '<extend/>': font.extend = 1; break;

				/* 18.4.11 sz CT_FontSize */
				case '<sz': if(y.val) font.sz = +y.val; break;
				case '<sz/>': case '</sz>': break;

				/* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
				case '<vertAlign': if(y.val) font.vertAlign = y.val; break;
				case '<vertAlign/>': case '</vertAlign>': break;

				/* 18.8.18 family CT_FontFamily */
				case '<family': if(y.val) font.family = parseInt(y.val,10); break;
				case '<family/>': case '</family>': break;

				/* 18.8.35 scheme CT_FontScheme */
				case '<scheme': if(y.val) font.scheme = y.val; break;
				case '<scheme/>': case '</scheme>': break;

				/* 18.4.1 charset CT_IntProperty */
				case '<charset':
					if(y.val == '1') break;
					y.codepage = CS2CP[parseInt(y.val, 10)];
					break;

				/* 18.?.? color CT_Color */
				case '<color':
					if(!font.color) font.color = {};
					if(y.auto) font.color.auto = parsexmlbool(y.auto);

					if(y.rgb) font.color.rgb = y.rgb.slice(-6);
					else if(y.indexed) {
						font.color.index = parseInt(y.indexed, 10);
						var icv = XLSIcv[font.color.index];
						if(font.color.index == 81) icv = XLSIcv[1];
						if(!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid
						font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
					} else if(y.theme) {
						font.color.theme = parseInt(y.theme, 10);
						if(y.tint) font.color.tint = parseFloat(y.tint);
						if(y.theme && themes.themeElements && themes.themeElements.clrScheme) {
							font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
						}
					}

					break;
				case '<color/>': case '</color>': break;

				/* note: sometimes mc:AlternateContent appears bare */
				case '<AlternateContent': pass = true; break;
				case '</AlternateContent>': pass = false; break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': break;
				case '<ext': pass = true; break;
				case '</ext>': pass = false; break;
				default: if(opts && opts.WTF) {
					if(!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');
				}
			}
		});
	}

	/* 18.8.31 numFmts CT_NumFmts */
	function parse_numFmts(t, styles, opts) {
		styles.NumberFmt = [];
		var k/*Array<number>*/ = (keys(table_fmt)/*:any*/);
		for(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = table_fmt[k[i]];
		var m = t[0].match(tagregex);
		if(!m) return;
		for(i=0; i < m.length; ++i) {
			var y = parsexmltag(m[i]);
			switch(strip_ns(y[0])) {
				case '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;
				case '<numFmt': {
					var f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);
					styles.NumberFmt[j] = f;
					if(j>0) {
						if(j > 0x188) {
							for(j = 0x188; j > 0x3c; --j) if(styles.NumberFmt[j] == null) break;
							styles.NumberFmt[j] = f;
						}
						SSF_load(f,j);
					}
				} break;
				case '</numFmt>': break;
				default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
			}
		}
	}

	/* 18.8.10 cellXfs CT_CellXfs */
	var cellXF_uint = [ "numFmtId", "fillId", "fontId", "borderId", "xfId" ];
	var cellXF_bool = [ "applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix" ];
	function parse_cellXfs(t, styles, opts) {
		styles.CellXf = [];
		var xf;
		var pass = false;
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x), i = 0;
			switch(strip_ns(y[0])) {
				case '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;

				/* 18.8.45 xf CT_Xf */
				case '<xf': case '<xf/>':
					xf = y;
					delete xf[0];
					for(i = 0; i < cellXF_uint.length; ++i) if(xf[cellXF_uint[i]])
						xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
					for(i = 0; i < cellXF_bool.length; ++i) if(xf[cellXF_bool[i]])
						xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
					if(styles.NumberFmt && xf.numFmtId > 0x188) {
						for(i = 0x188; i > 0x3c; --i) if(styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break; }
					}
					styles.CellXf.push(xf); break;
				case '</xf>': break;

				/* 18.8.1 alignment CT_CellAlignment */
				case '<alignment': case '<alignment/>':
					var alignment = {};
					if(y.vertical) alignment.vertical = y.vertical;
					if(y.horizontal) alignment.horizontal = y.horizontal;
					if(y.textRotation != null) alignment.textRotation = y.textRotation;
					if(y.indent) alignment.indent = y.indent;
					if(y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
					xf.alignment = alignment;
					break;
				case '</alignment>': break;

				/* 18.8.33 protection CT_CellProtection */
				case '<protection':
					break;
				case '</protection>': case '<protection/>': break;

				/* note: sometimes mc:AlternateContent appears bare */
				case '<AlternateContent': pass = true; break;
				case '</AlternateContent>': pass = false; break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': break;
				case '<ext': pass = true; break;
				case '</ext>': pass = false; break;
				default: if(opts && opts.WTF) {
					if(!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
				}
			}
		});
	}

	/* 18.8 Styles CT_Stylesheet*/
	var parse_sty_xml= /*#__PURE__*/(function make_pstyx() {
	var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
	var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
	var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
	var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
	var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;

	return function parse_sty_xml(data, themes, opts) {
		var styles = {};
		if(!data) return styles;
		data = data.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
		/* 18.8.39 styleSheet CT_Stylesheet */
		var t;

		/* 18.8.31 numFmts CT_NumFmts ? */
		if((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);

		/* 18.8.23 fonts CT_Fonts ? */
		if((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);

		/* 18.8.21 fills CT_Fills ? */
		if((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);

		/* 18.8.5  borders CT_Borders ? */
		if((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);

		/* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */
		/* 18.8.8  cellStyles CT_CellStyles ? */

		/* 18.8.10 cellXfs CT_CellXfs ? */
		if((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);

		/* 18.8.15 dxfs CT_Dxfs ? */
		/* 18.8.42 tableStyles CT_TableStyles ? */
		/* 18.8.11 colors CT_Colors ? */
		/* 18.2.10 extLst CT_ExtensionList ? */

		return styles;
	};
	})();
	/* [MS-XLSB] 2.4.657 BrtFmt */
	function parse_BrtFmt(data, length/*:number*/) {
		var numFmtId = data.read_shift(2);
		var stFmtCode = parse_XLWideString(data);
		return [numFmtId, stFmtCode];
	}

	/* [MS-XLSB] 2.4.659 BrtFont TODO */
	function parse_BrtFont(data, length/*:number*/, opts) {
		var out = ({}/*:any*/);

		out.sz = data.read_shift(2) / 20;

		var grbit = parse_FontFlags(data);
		if(grbit.fItalic) out.italic = 1;
		if(grbit.fCondense) out.condense = 1;
		if(grbit.fExtend) out.extend = 1;
		if(grbit.fShadow) out.shadow = 1;
		if(grbit.fOutline) out.outline = 1;
		if(grbit.fStrikeout) out.strike = 1;

		var bls = data.read_shift(2);
		if(bls === 0x02BC) out.bold = 1;

		switch(data.read_shift(2)) {
			/* case 0: out.vertAlign = "baseline"; break; */
			case 1: out.vertAlign = "superscript"; break;
			case 2: out.vertAlign = "subscript"; break;
		}

		var underline = data.read_shift(1);
		if(underline != 0) out.underline = underline;

		var family = data.read_shift(1);
		if(family > 0) out.family = family;

		var bCharSet = data.read_shift(1);
		if(bCharSet > 0) out.charset = bCharSet;

		data.l++;
		out.color = parse_BrtColor(data);

		switch(data.read_shift(1)) {
			/* case 0: out.scheme = "none": break; */
			case 1: out.scheme = "major"; break;
			case 2: out.scheme = "minor"; break;
		}

		out.name = parse_XLWideString(data);

		return out;
	}
	/* TODO: gradient fill representation */
	var parse_BrtFill = parsenoop;

	/* [MS-XLSB] 2.4.824 BrtXF */
	function parse_BrtXF(data, length/*:number*/) {
		var tgt = data.l + length;
		var ixfeParent = data.read_shift(2);
		var ifmt = data.read_shift(2);
		data.l = tgt;
		return {ixfe:ixfeParent, numFmtId:ifmt };
	}
	/* [MS-XLSB] 2.4.302 BrtBorder TODO */
	var parse_BrtBorder = parsenoop;

	/* [MS-XLSB] 2.1.7.50 Styles */
	function parse_sty_bin(data, themes, opts) {
		var styles = {};
		styles.NumberFmt = ([]/*:any*/);
		for(var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];

		styles.CellXf = [];
		styles.Fonts = [];
		var state/*:Array<string>*/ = [];
		var pass = false;
		recordhopper(data, function hopper_sty(val, R, RT) {
			switch(RT) {
				case 0x002C: /* BrtFmt */
					styles.NumberFmt[val[0]] = val[1]; SSF_load(val[1], val[0]);
					break;
				case 0x002B: /* BrtFont */
					styles.Fonts.push(val);
					if(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
						val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
					}
					break;
				case 0x0401: /* BrtKnownFonts */ break;
				case 0x002D: /* BrtFill */
					break;
				case 0x002E: /* BrtBorder */
					break;
				case 0x002F: /* BrtXF */
					if(state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */) {
						styles.CellXf.push(val);
					}
					break;
				case 0x0030: /* BrtStyle */
				case 0x01FB: /* BrtDXF */
				case 0x023C: /* BrtMRUColor */
				case 0x01DB: /* BrtIndexedColor */
					break;

				case 0x0493: /* BrtDXF14 */
				case 0x0836: /* BrtDXF15 */
				case 0x046A: /* BrtSlicerStyleElement */
				case 0x0200: /* BrtTableStyleElement */
				case 0x082F: /* BrtTimelineStyleElement */
				case 0x0C00: /* BrtUid */
					break;

				case 0x0023: /* BrtFRTBegin */
					pass = true; break;
				case 0x0024: /* BrtFRTEnd */
					pass = false; break;
				case 0x0025: /* BrtACBegin */
					state.push(RT); pass = true; break;
				case 0x0026: /* BrtACEnd */
					state.pop(); pass = false; break;

				default:
					if(R.T > 0) state.push(RT);
					else if(R.T < 0) state.pop();
					else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		});
		return styles;
	}
	/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */
	var XLSXThemeClrScheme = [
		'</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>',
		'</a:accent1>', '</a:accent2>', '</a:accent3>',
		'</a:accent4>', '</a:accent5>', '</a:accent6>',
		'</a:hlink>', '</a:folHlink>'
	];
	/* 20.1.6.2 clrScheme CT_ColorScheme */
	function parse_clrScheme(t, themes, opts) {
		themes.themeElements.clrScheme = [];
		var color = {};
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				/* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
				case '<a:clrScheme': case '</a:clrScheme>': break;

				/* 20.1.2.3.32 srgbClr CT_SRgbColor */
				case '<a:srgbClr':
					color.rgb = y.val; break;

				/* 20.1.2.3.33 sysClr CT_SystemColor */
				case '<a:sysClr':
					color.rgb = y.lastClr; break;

				/* 20.1.4.1.1 accent1 (Accent 1) */
				/* 20.1.4.1.2 accent2 (Accent 2) */
				/* 20.1.4.1.3 accent3 (Accent 3) */
				/* 20.1.4.1.4 accent4 (Accent 4) */
				/* 20.1.4.1.5 accent5 (Accent 5) */
				/* 20.1.4.1.6 accent6 (Accent 6) */
				/* 20.1.4.1.9 dk1 (Dark 1) */
				/* 20.1.4.1.10 dk2 (Dark 2) */
				/* 20.1.4.1.15 folHlink (Followed Hyperlink) */
				/* 20.1.4.1.19 hlink (Hyperlink) */
				/* 20.1.4.1.22 lt1 (Light 1) */
				/* 20.1.4.1.23 lt2 (Light 2) */
				case '<a:dk1>': case '</a:dk1>':
				case '<a:lt1>': case '</a:lt1>':
				case '<a:dk2>': case '</a:dk2>':
				case '<a:lt2>': case '</a:lt2>':
				case '<a:accent1>': case '</a:accent1>':
				case '<a:accent2>': case '</a:accent2>':
				case '<a:accent3>': case '</a:accent3>':
				case '<a:accent4>': case '</a:accent4>':
				case '<a:accent5>': case '</a:accent5>':
				case '<a:accent6>': case '</a:accent6>':
				case '<a:hlink>': case '</a:hlink>':
				case '<a:folHlink>': case '</a:folHlink>':
					if (y[0].charAt(1) === '/') {
						themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
						color = {};
					} else {
						color.name = y[0].slice(3, y[0].length - 1);
					}
					break;

				default: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
			}
		});
	}

	/* 20.1.4.1.18 fontScheme CT_FontScheme */
	function parse_fontScheme(/*::t, themes, opts*/) { }

	/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */
	function parse_fmtScheme(/*::t, themes, opts*/) { }

	var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
	var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
	var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;

	/* 20.1.6.10 themeElements CT_BaseStyles */
	function parse_themeElements(data, themes, opts) {
		themes.themeElements = {};

		var t;

		[
			/* clrScheme CT_ColorScheme */
			['clrScheme', clrsregex, parse_clrScheme],
			/* fontScheme CT_FontScheme */
			['fontScheme', fntsregex, parse_fontScheme],
			/* fmtScheme CT_StyleMatrix */
			['fmtScheme', fmtsregex, parse_fmtScheme]
		].forEach(function(m) {
			if(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
			m[2](t, themes, opts);
		});
	}

	var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;

	/* 14.2.7 Theme Part */
	function parse_theme_xml(data/*:string*/, opts) {
		/* 20.1.6.9 theme CT_OfficeStyleSheet */
		if(!data || data.length === 0) data = write_theme();

		var t;
		var themes = {};

		/* themeElements CT_BaseStyles */
		if(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');
		parse_themeElements(t[0], themes, opts);
		themes.raw = data;
		return themes;
	}

	function write_theme(Themes, opts)/*:string*/ {
		var o = [XML_HEADER];
		o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
		o[o.length] =  '<a:themeElements>';

		o[o.length] =   '<a:clrScheme name="Office">';
		o[o.length] =    '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
		o[o.length] =    '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
		o[o.length] =    '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
		o[o.length] =    '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
		o[o.length] =    '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
		o[o.length] =    '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
		o[o.length] =    '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
		o[o.length] =    '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
		o[o.length] =    '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
		o[o.length] =    '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
		o[o.length] =    '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
		o[o.length] =    '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
		o[o.length] =   '</a:clrScheme>';

		o[o.length] =   '<a:fontScheme name="Office">';
		o[o.length] =    '<a:majorFont>';
		o[o.length] =     '<a:latin typeface="Cambria"/>';
		o[o.length] =     '<a:ea typeface=""/>';
		o[o.length] =     '<a:cs typeface=""/>';
		o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
		o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
		o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
		o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
		o[o.length] =     '<a:font script="Arab" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Hebr" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
		o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
		o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
		o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
		o[o.length] =     '<a:font script="Khmr" typeface="MoolBoran"/>';
		o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
		o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
		o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
		o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
		o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
		o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
		o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
		o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
		o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
		o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
		o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
		o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
		o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
		o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
		o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
		o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
		o[o.length] =     '<a:font script="Viet" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
		o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
		o[o.length] =    '</a:majorFont>';
		o[o.length] =    '<a:minorFont>';
		o[o.length] =     '<a:latin typeface="Calibri"/>';
		o[o.length] =     '<a:ea typeface=""/>';
		o[o.length] =     '<a:cs typeface=""/>';
		o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
		o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
		o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
		o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
		o[o.length] =     '<a:font script="Arab" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Hebr" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
		o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
		o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
		o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
		o[o.length] =     '<a:font script="Khmr" typeface="DaunPenh"/>';
		o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
		o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
		o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
		o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
		o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
		o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
		o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
		o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
		o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
		o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
		o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
		o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
		o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
		o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
		o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
		o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
		o[o.length] =     '<a:font script="Viet" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
		o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
		o[o.length] =    '</a:minorFont>';
		o[o.length] =   '</a:fontScheme>';

		o[o.length] =   '<a:fmtScheme name="Office">';
		o[o.length] =    '<a:fillStyleLst>';
		o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:lin ang="16200000" scaled="1"/>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:lin ang="16200000" scaled="0"/>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =    '</a:fillStyleLst>';
		o[o.length] =    '<a:lnStyleLst>';
		o[o.length] =     '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =     '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =     '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =    '</a:lnStyleLst>';
		o[o.length] =    '<a:effectStyleLst>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =      '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
		o[o.length] =      '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =    '</a:effectStyleLst>';
		o[o.length] =    '<a:bgFillStyleLst>';
		o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =    '</a:bgFillStyleLst>';
		o[o.length] =   '</a:fmtScheme>';
		o[o.length] =  '</a:themeElements>';

		o[o.length] =  '<a:objectDefaults>';
		o[o.length] =   '<a:spDef>';
		o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
		o[o.length] =   '</a:spDef>';
		o[o.length] =   '<a:lnDef>';
		o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
		o[o.length] =   '</a:lnDef>';
		o[o.length] =  '</a:objectDefaults>';
		o[o.length] =  '<a:extraClrSchemeLst/>';
		o[o.length] = '</a:theme>';
		return o.join("");
	}
	/* [MS-XLS] 2.4.326 TODO: payload is a zip file */
	function parse_Theme(blob, length, opts) {
		var end = blob.l + length;
		var dwThemeVersion = blob.read_shift(4);
		if(dwThemeVersion === 124226) return;
		if(!opts.cellStyles) { blob.l = end; return; }
		var data = blob.slice(blob.l);
		blob.l = end;
		var zip; try { zip = zip_read(data, {type: "array"}); } catch(e) { return; }
		var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
		if(!themeXML) return;
		return parse_theme_xml(themeXML, opts);
	}

	/* 2.5.49 */
	function parse_ColorTheme(blob/*::, length*/) { return blob.read_shift(4); }

	/* 2.5.155 */
	function parse_FullColorExt(blob/*::, length*/) {
		var o = {};
		o.xclrType = blob.read_shift(2);
		o.nTintShade = blob.read_shift(2);
		switch(o.xclrType) {
			case 0: blob.l += 4; break;
			case 1: o.xclrValue = parse_IcvXF(blob, 4); break;
			case 2: o.xclrValue = parse_LongRGBA(blob); break;
			case 3: o.xclrValue = parse_ColorTheme(blob); break;
			case 4: blob.l += 4; break;
		}
		blob.l += 8;
		return o;
	}

	/* 2.5.164 TODO: read 7 bits*/
	function parse_IcvXF(blob, length) {
		return parsenoop(blob, length);
	}

	/* 2.5.280 */
	function parse_XFExtGradient(blob, length) {
		return parsenoop(blob, length);
	}

	/* [MS-XLS] 2.5.108 */
	function parse_ExtProp(blob/*::, length*/)/*:Array<any>*/ {
		var extType = blob.read_shift(2);
		var cb = blob.read_shift(2) - 4;
		var o = [extType];
		switch(extType) {
			case 0x04: case 0x05: case 0x07: case 0x08:
			case 0x09: case 0x0A: case 0x0B: case 0x0D:
				o[1] = parse_FullColorExt(blob); break;
			case 0x06: o[1] = parse_XFExtGradient(blob, cb); break;
			case 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 1 ? 1 : 2); break;
			default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
		}
		return o;
	}

	/* 2.4.355 */
	function parse_XFExt(blob, length) {
		var end = blob.l + length;
		blob.l += 2;
		var ixfe = blob.read_shift(2);
		blob.l += 2;
		var cexts = blob.read_shift(2);
		var ext/*:AOA*/ = [];
		while(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));
		return {ixfe:ixfe, ext:ext};
	}

	/* xf is an XF, see parse_XFExt for xfext */
	function update_xfext(xf, xfext) {
		xfext.forEach(function(xfe) {
			switch(xfe[0]) { /* 2.5.108 extPropData */
						}
		});
	}

	function parse_BrtMdtinfo(data, length) {
	  return {
	    flags: data.read_shift(4),
	    version: data.read_shift(4),
	    name: parse_XLWideString(data)
	  };
	}
	function parse_BrtMdb(data) {
	  var out = [];
	  var cnt = data.read_shift(4);
	  while (cnt-- > 0)
	    out.push([data.read_shift(4), data.read_shift(4)]);
	  return out;
	}
	function parse_BrtBeginEsmdb(data) {
	  data.l += 4;
	  return data.read_shift(4) != 0;
	}
	function parse_xlmeta_bin(data, name, _opts) {
	  var out = { Types: [], Cell: [], Value: [] };
	  var opts = _opts || {};
	  var state = [];
	  var pass = false;
	  var metatype = 2;
	  recordhopper(data, function(val, R, RT) {
	    switch (RT) {
	      case 335:
	        out.Types.push({ name: val.name });
	        break;
	      case 51:
	        val.forEach(function(r) {
	          if (metatype == 1)
	            out.Cell.push({ type: out.Types[r[0] - 1].name, index: r[1] });
	          else if (metatype == 0)
	            out.Value.push({ type: out.Types[r[0] - 1].name, index: r[1] });
	        });
	        break;
	      case 337:
	        metatype = val ? 1 : 0;
	        break;
	      case 338:
	        metatype = 2;
	        break;
	      case 35:
	        state.push(RT);
	        pass = true;
	        break;
	      case 36:
	        state.pop();
	        pass = false;
	        break;
	      default:
	        if (R.T) ; else if (!pass || opts.WTF && state[state.length - 1] != 35)
	          throw new Error("Unexpected record 0x" + RT.toString(16));
	    }
	  });
	  return out;
	}
	function parse_xlmeta_xml(data, name, opts) {
	  var out = { Types: [], Cell: [], Value: [] };
	  if (!data)
	    return out;
	  var pass = false;
	  var metatype = 2;
	  var lastmeta;
	  data.replace(tagregex, function(x) {
	    var y = parsexmltag(x);
	    switch (strip_ns(y[0])) {
	      case "<?xml":
	        break;
	      case "<metadata":
	      case "</metadata>":
	        break;
	      case "<metadataTypes":
	      case "</metadataTypes>":
	        break;
	      case "<metadataType":
	        out.Types.push({ name: y.name });
	        break;
	      case "</metadataType>":
	        break;
	      case "<futureMetadata":
	        for (var j = 0; j < out.Types.length; ++j)
	          if (out.Types[j].name == y.name)
	            lastmeta = out.Types[j];
	        break;
	      case "</futureMetadata>":
	        break;
	      case "<bk>":
	        break;
	      case "</bk>":
	        break;
	      case "<rc":
	        if (metatype == 1)
	          out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
	        else if (metatype == 0)
	          out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
	        break;
	      case "</rc>":
	        break;
	      case "<cellMetadata":
	        metatype = 1;
	        break;
	      case "</cellMetadata>":
	        metatype = 2;
	        break;
	      case "<valueMetadata":
	        metatype = 0;
	        break;
	      case "</valueMetadata>":
	        metatype = 2;
	        break;
	      case "<extLst":
	      case "<extLst>":
	      case "</extLst>":
	      case "<extLst/>":
	        break;
	      case "<ext":
	        pass = true;
	        break;
	      case "</ext>":
	        pass = false;
	        break;
	      case "<rvb":
	        if (!lastmeta)
	          break;
	        if (!lastmeta.offsets)
	          lastmeta.offsets = [];
	        lastmeta.offsets.push(+y.i);
	        break;
	      default:
	        if (!pass && opts.WTF)
	          throw new Error("unrecognized " + y[0] + " in metadata");
	    }
	    return x;
	  });
	  return out;
	}
	/* 18.6 Calculation Chain */
	function parse_cc_xml(data/*::, name, opts*/)/*:Array<any>*/ {
		var d = [];
		if(!data) return d;
		var i = 1;
		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				case '<?xml': break;
				/* 18.6.2  calcChain CT_CalcChain 1 */
				case '<calcChain': case '<calcChain>': case '</calcChain>': break;
				/* 18.6.1  c CT_CalcCell 1 */
				case '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;
			}
		});
		return d;
	}

	//function write_cc_xml(data, opts) { }

	/* [MS-XLSB] 2.6.4.1 */
	function parse_BrtCalcChainItem$(data) {
		var out = {};
		out.i = data.read_shift(4);
		var cell = {};
		cell.r = data.read_shift(4);
		cell.c = data.read_shift(4);
		out.r = encode_cell(cell);
		var flags = data.read_shift(1);
		if(flags & 0x2) out.l = '1';
		if(flags & 0x8) out.a = '1';
		return out;
	}

	/* 18.6 Calculation Chain */
	function parse_cc_bin(data, name, opts) {
		var out = [];
		recordhopper(data, function hopper_cc(val, R, RT) {
			switch(RT) {
				case 0x003F: /* 'BrtCalcChainItem$' */
					out.push(val); break;

				default:
					if(R.T);
					else throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		});
		return out;
	}

	//function write_cc_bin(data, opts) { }
	/* 18.14 Supplementary Workbook Data */
	function parse_xlink_xml(/*::data, rel, name:string, _opts*/) {
		//var opts = _opts || {};
		//if(opts.WTF) throw "XLSX External Link";
	}

	/* [MS-XLSB] 2.1.7.25 External Link */
	function parse_xlink_bin(data, rel, name/*:string*/, _opts) {
		if(!data) return data;
		var opts = _opts || {};

		var pass = false;

		recordhopper(data, function xlink_parse(val, R, RT) {
			switch(RT) {
				case 0x0167: /* 'BrtSupTabs' */
				case 0x016B: /* 'BrtExternTableStart' */
				case 0x016C: /* 'BrtExternTableEnd' */
				case 0x016E: /* 'BrtExternRowHdr' */
				case 0x016F: /* 'BrtExternCellBlank' */
				case 0x0170: /* 'BrtExternCellReal' */
				case 0x0171: /* 'BrtExternCellBool' */
				case 0x0172: /* 'BrtExternCellError' */
				case 0x0173: /* 'BrtExternCellString' */
				case 0x01D8: /* 'BrtExternValueMeta' */
				case 0x0241: /* 'BrtSupNameStart' */
				case 0x0242: /* 'BrtSupNameValueStart' */
				case 0x0243: /* 'BrtSupNameValueEnd' */
				case 0x0244: /* 'BrtSupNameNum' */
				case 0x0245: /* 'BrtSupNameErr' */
				case 0x0246: /* 'BrtSupNameSt' */
				case 0x0247: /* 'BrtSupNameNil' */
				case 0x0248: /* 'BrtSupNameBool' */
				case 0x0249: /* 'BrtSupNameFmla' */
				case 0x024A: /* 'BrtSupNameBits' */
				case 0x024B: /* 'BrtSupNameEnd' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;

				default:
					if(R.T);
					else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		}, opts);
	}
	/* 20.5 DrawingML - SpreadsheetML Drawing */
	/* 20.5.2.35 wsDr CT_Drawing */
	function parse_drawing(data, rels/*:any*/) {
		if(!data) return "??";
		/*
		  Chartsheet Drawing:
		   - 20.5.2.35 wsDr CT_Drawing
		    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
		     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
		      - 20.1.2.2.16 graphic CT_GraphicalObject
		       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
	          - chart reference
		   the actual type is based on the URI of the graphicData
			TODO: handle embedded charts and other types of graphics
		*/
		var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];

		return rels['!id'][id].Target;
	}
	function sheet_insert_comments(sheet, comments/*:Array<RawComment>*/, threaded/*:boolean*/, people/*:?Array<any>*/) {
		var dense = Array.isArray(sheet);
		var cell/*:Cell*/;
		comments.forEach(function(comment) {
			var r = decode_cell(comment.ref);
			if(dense) {
				if(!sheet[r.r]) sheet[r.r] = [];
				cell = sheet[r.r][r.c];
			} else cell = sheet[comment.ref];
			if (!cell) {
				cell = ({t:"z"}/*:any*/);
				if(dense) sheet[r.r][r.c] = cell;
				else sheet[comment.ref] = cell;
				var range = safe_decode_range(sheet["!ref"]||"BDWGO1000001:A1");
				if(range.s.r > r.r) range.s.r = r.r;
				if(range.e.r < r.r) range.e.r = r.r;
				if(range.s.c > r.c) range.s.c = r.c;
				if(range.e.c < r.c) range.e.c = r.c;
				var encoded = encode_range(range);
				if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
			}

			if (!cell.c) cell.c = [];
			var o/*:Comment*/ = ({a: comment.author, t: comment.t, r: comment.r, T: threaded});
			if(comment.h) o.h = comment.h;

			/* threaded comments always override */
			for(var i = cell.c.length - 1; i >= 0; --i) {
				if(!threaded && cell.c[i].T) return;
				if(threaded && !cell.c[i].T) cell.c.splice(i, 1);
			}
			if(threaded && people) for(i = 0; i < people.length; ++i) {
				if(o.a == people[i].id) { o.a = people[i].name || o.a; break; }
			}
			cell.c.push(o);
		});
	}

	/* 18.7 Comments */
	function parse_comments_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
		/* 18.7.6 CT_Comments */
		if(data.match(/<(?:\w+:)?comments *\/>/)) return [];
		var authors/*:Array<string>*/ = [];
		var commentList/*:Array<RawComment>*/ = [];
		var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
		if(authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
			if(x === "" || x.trim() === "") return;
			var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
			if(a) authors.push(a[1]);
		});
		var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
		if(cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
			if(x === "" || x.trim() === "") return;
			var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
			if(!cm) return;
			var y = parsexmltag(cm[0]);
			var comment/*:RawComment*/ = ({ author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid }/*:any*/);
			var cell = decode_cell(y.ref);
			if(opts.sheetRows && opts.sheetRows <= cell.r) return;
			var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
			var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:"",t:"",h:""};
			comment.r = rt.r;
			if(rt.r == "<t></t>") rt.t = rt.h = "";
			comment.t = (rt.t||"").replace(/\r\n/g,"\n").replace(/\r/g,"\n");
			if(opts.cellHTML) comment.h = rt.h;
			commentList.push(comment);
		});
		return commentList;
	}

	/* [MS-XLSX] 2.1.17 */
	function parse_tcmnt_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
		var out = [];
		var pass = false, comment = {}, tidx = 0;
		data.replace(tagregex, function xml_tcmnt(x, idx) {
			var y/*:any*/ = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<?xml': break;

				/* 2.6.207 ThreadedComments CT_ThreadedComments */
				case '<ThreadedComments': break;
				case '</ThreadedComments>': break;

				/* 2.6.205 threadedComment CT_ThreadedComment */
				case '<threadedComment': comment = {author: y.personId, guid: y.id, ref: y.ref, T: 1}; break;
				case '</threadedComment>': if(comment.t != null) out.push(comment); break;

				case '<text>': case '<text': tidx = idx + x.length; break;
				case '</text>': comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n"); break;

				/* 2.6.206 mentions CT_ThreadedCommentMentions TODO */
				case '<mentions': case '<mentions>': pass = true; break;
				case '</mentions>': pass = false; break;

				/* 2.6.202 mention CT_Mention TODO */

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
				/* 18.2.7  ext CT_Extension + */
				case '<ext': pass=true; break;
				case '</ext>': pass=false; break;

				default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
			}
			return x;
		});
		return out;
	}

	/* [MS-XLSX] 2.1.18 */
	function parse_people_xml(data/*:string*/, opts) {
		var out = [];
		var pass = false;
		data.replace(tagregex, function xml_tcmnt(x) {
			var y/*:any*/ = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<?xml': break;

				/* 2.4.85 personList CT_PersonList */
				case '<personList': break;
				case '</personList>': break;

				/* 2.6.203 person CT_Person TODO: providers */
				case '<person': out.push({name: y.displayname, id: y.id }); break;
				case '</person>': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
				/* 18.2.7  ext CT_Extension + */
				case '<ext': pass=true; break;
				case '</ext>': pass=false; break;

				default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
			}
			return x;
		});
		return out;
	}
	/* [MS-XLSB] 2.4.28 BrtBeginComment */
	function parse_BrtBeginComment(data) {
		var out = {};
		out.iauthor = data.read_shift(4);
		var rfx = parse_UncheckedRfX(data);
		out.rfx = rfx.s;
		out.ref = encode_cell(rfx.s);
		data.l += 16; /*var guid = parse_GUID(data); */
		return out;
	}

	/* [MS-XLSB] 2.4.327 BrtCommentAuthor */
	var parse_BrtCommentAuthor = parse_XLWideString;

	/* [MS-XLSB] 2.1.7.8 Comments */
	function parse_comments_bin(data, opts)/*:Array<RawComment>*/ {
		var out/*:Array<RawComment>*/ = [];
		var authors/*:Array<string>*/ = [];
		var c = {};
		var pass = false;
		recordhopper(data, function hopper_cmnt(val, R, RT) {
			switch(RT) {
				case 0x0278: /* 'BrtCommentAuthor' */
					authors.push(val); break;
				case 0x027B: /* 'BrtBeginComment' */
					c = val; break;
				case 0x027D: /* 'BrtCommentText' */
					c.t = val.t; c.h = val.h; c.r = val.r; break;
				case 0x027C: /* 'BrtEndComment' */
					c.author = authors[c.iauthor];
					delete (c/*:any*/).iauthor;
					if(opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
					if(!c.t) c.t = "";
					delete c.rfx; out.push(c); break;

				case 0x0C00: /* 'BrtUid' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */ break;
				case 0x0026: /* 'BrtACEnd' */ break;


				default:
					if(R.T);
					else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		});
		return out;
	}
	var CT_VBA = "application/vnd.ms-office.vbaProject";
	function make_vba_xls(cfb) {
	  var newcfb = CFB.utils.cfb_new({ root: "R" });
	  cfb.FullPaths.forEach(function(p, i) {
	    if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
	      return;
	    var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
	    CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
	  });
	  return CFB.write(newcfb);
	}
	/* macro and dialog sheet stubs */
	function parse_ds_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
	function parse_ds_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
	function parse_ms_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
	function parse_ms_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
	/* TODO: it will be useful to parse the function str */
	var rc_to_a1 = /*#__PURE__*/(function(){
		var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
		var rcbase/*:Cell*/ = ({r:0,c:0}/*:any*/);
		function rcfunc($$,$1,$2,$3) {
			var cRel = false, rRel = false;

			if($2.length == 0) rRel = true;
			else if($2.charAt(0) == "[") { rRel = true; $2 = $2.slice(1, -1); }

			if($3.length == 0) cRel = true;
			else if($3.charAt(0) == "[") { cRel = true; $3 = $3.slice(1, -1); }

			var R = $2.length>0?parseInt($2,10)|0:0, C = $3.length>0?parseInt($3,10)|0:0;

			if(cRel) C += rcbase.c; else --C;
			if(rRel) R += rcbase.r; else --R;
			return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
		}
		return function rc_to_a1(fstr/*:string*/, base/*:Cell*/)/*:string*/ {
			rcbase = base;
			return fstr.replace(rcregex, rcfunc);
		};
	})();

	var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
	var a1_to_rc = /*#__PURE__*/(function(){
		return function a1_to_rc(fstr/*:string*/, base/*:CellAddress*/) {
			return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
				var c = decode_col($3) - ($2 ? 0 : base.c);
				var r = decode_row($5) - ($4 ? 0 : base.r);
				var R = (r == 0 ? "" : !$4 ? "[" + r + "]" : (r+1));
				var C = (c == 0 ? "" : !$2 ? "[" + c + "]" : (c+1));
				return $1 + "R" + R + "C" + C;
			});
		};
	})();

	/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */
	function shift_formula_str(f/*:string*/, delta/*:Cell*/)/*:string*/ {
		return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
			return $1+($2=="$" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4=="$" ? $4+$5 : encode_row(decode_row($5) + delta.r));
		});
	}

	function shift_formula_xlsx(f/*:string*/, range/*:string*/, cell/*:string*/)/*:string*/ {
		var r = decode_range(range), s = r.s, c = decode_cell(cell);
		var delta = {r:c.r - s.r, c:c.c - s.c};
		return shift_formula_str(f, delta);
	}

	/* TODO: parse formula */
	function fuzzyfmla(f/*:string*/)/*:boolean*/ {
		if(f.length == 1) return false;
		return true;
	}

	function _xlfn(f/*:string*/)/*:string*/ {
		return f.replace(/_xlfn\./g,"");
	}
	function parseread1(blob) { blob.l+=1; return; }

	/* [MS-XLS] 2.5.51 */
	function parse_ColRelU(blob, length) {
		var c = blob.read_shift(2);
		return [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];
	}

	/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */
	function parse_RgceArea(blob, length, opts) {
		var w = 2;
		if(opts) {
			if(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob);
			else if(opts.biff == 12) w = 4;
		}
		var r=blob.read_shift(w), R=blob.read_shift(w);
		var c=parse_ColRelU(blob);
		var C=parse_ColRelU(blob);
		return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
	}
	/* BIFF 2-5 encodes flags in the row field */
	function parse_RgceArea_BIFF2(blob/*::, length, opts*/) {
		var r=parse_ColRelU(blob), R=parse_ColRelU(blob);
		var c=blob.read_shift(1);
		var C=blob.read_shift(1);
		return { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };
	}

	/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */
	function parse_RgceAreaRel(blob, length, opts) {
		if(opts.biff < 8) return parse_RgceArea_BIFF2(blob);
		var r=blob.read_shift(opts.biff == 12 ? 4 : 2), R=blob.read_shift(opts.biff == 12 ? 4 : 2);
		var c=parse_ColRelU(blob);
		var C=parse_ColRelU(blob);
		return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
	}

	/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */
	function parse_RgceLoc(blob, length, opts) {
		if(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob);
		var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
		var c = parse_ColRelU(blob);
		return {r:r, c:c[0], cRel:c[1], rRel:c[2]};
	}
	function parse_RgceLoc_BIFF2(blob/*::, length, opts*/) {
		var r = parse_ColRelU(blob);
		var c = blob.read_shift(1);
		return {r:r[0], c:c, cRel:r[1], rRel:r[2]};
	}

	/* [MS-XLS] 2.5.198.107, 2.5.47 */
	function parse_RgceElfLoc(blob/*::, length, opts*/) {
		var r = blob.read_shift(2);
		var c = blob.read_shift(2);
		return {r:r, c:c & 0xFF, fQuoted:!!(c & 0x4000), cRel:c>>15, rRel:c>>15 };
	}

	/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */
	function parse_RgceLocRel(blob, length, opts) {
		var biff = opts && opts.biff ? opts.biff : 8;
		if(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob);
		var r = blob.read_shift(biff >= 12 ? 4 : 2);
		var cl = blob.read_shift(2);
		var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
		cl &= 0x3FFF;
		if(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;
		if(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;
		return {r:r,c:cl,cRel:cRel,rRel:rRel};
	}
	function parse_RgceLocRel_BIFF2(blob/*::, length:number, opts*/) {
		var rl = blob.read_shift(2);
		var c = blob.read_shift(1);
		var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
		rl &= 0x3FFF;
		if(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
		if(cRel == 1 && c >= 0x80) c = c - 0x100;
		return {r:rl,c:c,cRel:cRel,rRel:rRel};
	}

	/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */
	function parse_PtgArea(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
		return [type, area];
	}

	/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */
	function parse_PtgArea3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2, 'i');
		var w = 8;
		if(opts) switch(opts.biff) {
			case 5: blob.l += 12; w = 6; break;
			case 12: w = 12; break;
		}
		var area = parse_RgceArea(blob, w, opts);
		return [type, ixti, area];
	}

	/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */
	function parse_PtgAreaErr(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		blob.l += opts && (opts.biff > 8) ? 12 : (opts.biff < 8 ? 6 : 8);
		return [type];
	}
	/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */
	function parse_PtgAreaErr3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2);
		var w = 8;
		if(opts) switch(opts.biff) {
			case 5: blob.l += 12; w = 6; break;
			case 12: w = 12; break;
		}
		blob.l += w;
		return [type, ixti];
	}

	/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */
	function parse_PtgAreaN(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var area = parse_RgceAreaRel(blob, length - 1, opts);
		return [type, area];
	}

	/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */
	function parse_PtgArray(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
		return [type];
	}

	/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */
	function parse_PtgAttrBaxcel(blob) {
		var bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */
		var bitBaxcel = 1;
		blob.l += 4;
		return [bitSemi, bitBaxcel];
	}

	/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */
	function parse_PtgAttrChoose(blob, length, opts)/*:Array<number>*/ {
		blob.l +=2;
		var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		var o/*:Array<number>*/ = [];
		/* offset is 1 less than the number of elements */
		for(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
		return o;
	}

	/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */
	function parse_PtgAttrGoto(blob, length, opts) {
		var bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	}

	/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */
	function parse_PtgAttrIf(blob, length, opts) {
		var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	}

	/* [MS-XLSB] 2.5.97.28 */
	function parse_PtgAttrIfError(blob) {
		var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitIf, blob.read_shift(2)];
	}

	/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */
	function parse_PtgAttrSemi(blob, length, opts) {
		var bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += opts && opts.biff == 2 ? 3 : 4;
		return [bitSemi];
	}

	/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */
	function parse_PtgAttrSpaceType(blob/*::, length*/) {
		var type = blob.read_shift(1), cch = blob.read_shift(1);
		return [type, cch];
	}

	/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */
	function parse_PtgAttrSpace(blob) {
		blob.read_shift(2);
		return parse_PtgAttrSpaceType(blob);
	}

	/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */
	function parse_PtgAttrSpaceSemi(blob) {
		blob.read_shift(2);
		return parse_PtgAttrSpaceType(blob);
	}

	/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */
	function parse_PtgRef(blob, length, opts) {
		//var ptg = blob[blob.l] & 0x1F;
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var loc = parse_RgceLoc(blob, 0, opts);
		return [type, loc];
	}

	/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */
	function parse_PtgRefN(blob, length, opts) {
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var loc = parse_RgceLocRel(blob, 0, opts);
		return [type, loc];
	}

	/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */
	function parse_PtgRef3d(blob, length, opts) {
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var ixti = blob.read_shift(2); // XtiIndex
		if(opts && opts.biff == 5) blob.l += 12;
		var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
		return [type, ixti, loc];
	}


	/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */
	function parse_PtgFunc(blob, length, opts) {
		//var ptg = blob[blob.l] & 0x1F;
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
		return [FtabArgc[iftab], Ftab[iftab], type];
	}
	/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */
	function parse_PtgFuncVar(blob, length, opts) {
		var type = blob[blob.l++];
		var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [(type == 0x58 ? -1 : 0), blob.read_shift(1)]: parsetab(blob);
		return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
	}

	function parsetab(blob) {
		return [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];
	}

	/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */
	function parse_PtgAttrSum(blob, length, opts) {
		blob.l += opts && opts.biff == 2 ? 3 : 4; return;
	}

	/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */
	function parse_PtgExp(blob, length, opts) {
		blob.l++;
		if(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
		var row = blob.read_shift(2);
		var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [row, col];
	}

	/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */
	function parse_PtgErr(blob) { blob.l++; return BErr[blob.read_shift(1)]; }

	/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */
	function parse_PtgInt(blob) { blob.l++; return blob.read_shift(2); }

	/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */
	function parse_PtgBool(blob) { blob.l++; return blob.read_shift(1)!==0;}

	/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */
	function parse_PtgNum(blob) { blob.l++; return parse_Xnum(blob); }

	/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */
	function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }

	/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
	/* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */
	function parse_SerAr(blob, biff/*:number*/) {
		var val = [blob.read_shift(1)];
		if(biff == 12) switch(val[0]) {
			case 0x02: val[0] = 0x04; break; /* SerBool */
			case 0x04: val[0] = 0x10; break; /* SerErr */
			case 0x00: val[0] = 0x01; break; /* SerNum */
			case 0x01: val[0] = 0x02; break; /* SerStr */
		}
		switch(val[0]) {
			case 0x04: /* SerBool -- boolean */
				val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
				if(biff != 12) blob.l += 7; break;
			case 0x25: /* appears to be an alias */
			case 0x10: /* SerErr -- error */
				val[1] = BErr[blob[blob.l]];
				blob.l += ((biff == 12) ? 4 : 8); break;
			case 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */
				blob.l += 8; break;
			case 0x01: /* SerNum -- Xnum */
				val[1] = parse_Xnum(blob); break;
			case 0x02: /* SerStr -- XLUnicodeString (<256 chars) */
				val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;
			default: throw new Error("Bad SerAr: " + val[0]); /* Unreachable */
		}
		return val;
	}

	/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */
	function parse_PtgExtraMem(blob, cce, opts) {
		var count = blob.read_shift((opts.biff == 12) ? 4 : 2);
		var out/*:Array<Range>*/ = [];
		for(var i = 0; i != count; ++i) out.push(((opts.biff == 12) ? parse_UncheckedRfX : parse_Ref8U)(blob));
		return out;
	}

	/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */
	function parse_PtgExtraArray(blob, length, opts) {
		var rows = 0, cols = 0;
		if(opts.biff == 12) {
			rows = blob.read_shift(4); // DRw
			cols = blob.read_shift(4); // DCol
		} else {
			cols = 1 + blob.read_shift(1); //DColByteU
			rows = 1 + blob.read_shift(2); //DRw
		}
		if(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }
		// $FlowIgnore
		for(var i = 0, o/*:Array<Array<any>>*/ = []; i != rows && (o[i] = []); ++i)
			for(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
		return o;
	}

	/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */
	function parse_PtgName(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var w = (!opts || (opts.biff >= 8)) ? 4 : 2;
		var nameindex = blob.read_shift(w);
		switch(opts.biff) {
			case 2: blob.l += 5; break;
			case 3: case 4: blob.l += 8; break;
			case 5: blob.l += 12; break;
		}
		return [type, 0, nameindex];
	}

	/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */
	function parse_PtgNameX(blob, length, opts) {
		if(opts.biff == 5) return parse_PtgNameX_BIFF5(blob);
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var ixti = blob.read_shift(2); // XtiIndex
		var nameindex = blob.read_shift(4);
		return [type, ixti, nameindex];
	}
	function parse_PtgNameX_BIFF5(blob/*::, length, opts*/) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var ixti = blob.read_shift(2, 'i'); // XtiIndex
		blob.l += 8;
		var nameindex = blob.read_shift(2);
		blob.l += 12;
		return [type, ixti, nameindex];
	}

	/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */
	function parse_PtgMemArea(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		blob.l += (opts && opts.biff == 2 ? 3 : 4);
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [type, cce];
	}

	/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */
	function parse_PtgMemFunc(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [type, cce];
	}


	/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */
	function parse_PtgRefErr(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		blob.l += 4;
		if(opts.biff < 8) blob.l--;
		if(opts.biff == 12) blob.l += 2;
		return [type];
	}

	/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */
	function parse_PtgRefErr3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2);
		var w = 4;
		if(opts) switch(opts.biff) {
			case 5: w = 15; break;
			case 12: w = 6; break;
		}
		blob.l += w;
		return [type, ixti];
	}

	/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */
	var parse_PtgMemErr = parsenoop;
	/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */
	var parse_PtgMemNoMem = parsenoop;
	/* [MS-XLS] 2.5.198.92 */
	var parse_PtgTbl = parsenoop;

	function parse_PtgElfLoc(blob, length, opts) {
		blob.l += 2;
		return [parse_RgceElfLoc(blob)];
	}
	function parse_PtgElfNoop(blob/*::, length, opts*/) {
		blob.l += 6;
		return [];
	}
	/* [MS-XLS] 2.5.198.46 */
	var parse_PtgElfCol = parse_PtgElfLoc;
	/* [MS-XLS] 2.5.198.47 */
	var parse_PtgElfColS = parse_PtgElfNoop;
	/* [MS-XLS] 2.5.198.48 */
	var parse_PtgElfColSV = parse_PtgElfNoop;
	/* [MS-XLS] 2.5.198.49 */
	var parse_PtgElfColV = parse_PtgElfLoc;
	/* [MS-XLS] 2.5.198.50 */
	function parse_PtgElfLel(blob/*::, length, opts*/) {
		blob.l += 2;
		return [parseuint16(blob), blob.read_shift(2) & 0x01];
	}
	/* [MS-XLS] 2.5.198.51 */
	var parse_PtgElfRadical = parse_PtgElfLoc;
	/* [MS-XLS] 2.5.198.52 */
	var parse_PtgElfRadicalLel = parse_PtgElfLel;
	/* [MS-XLS] 2.5.198.53 */
	var parse_PtgElfRadicalS = parse_PtgElfNoop;
	/* [MS-XLS] 2.5.198.54 */
	var parse_PtgElfRw = parse_PtgElfLoc;
	/* [MS-XLS] 2.5.198.55 */
	var parse_PtgElfRwV = parse_PtgElfLoc;

	/* [MS-XLSB] 2.5.97.52 TODO */
	var PtgListRT = [
		"Data",
		"All",
		"Headers",
		"??",
		"?Data2",
		"??",
		"?DataHeaders",
		"??",
		"Totals",
		"??",
		"??",
		"??",
		"?DataTotals",
		"??",
		"??",
		"??",
		"?Current"
	];
	function parse_PtgList(blob/*::, length, opts*/) {
		blob.l += 2;
		var ixti = blob.read_shift(2);
		var flags = blob.read_shift(2);
		var idx = blob.read_shift(4);
		var c = blob.read_shift(2);
		var C = blob.read_shift(2);
		var rt = PtgListRT[(flags >> 2) & 0x1F];
		return {ixti: ixti, coltype:(flags&0x3), rt:rt, idx:idx, c:c, C:C};
	}
	/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */
	function parse_PtgSxName(blob/*::, length, opts*/) {
		blob.l += 2;
		return [blob.read_shift(4)];
	}

	/* [XLS] old spec */
	function parse_PtgSheet(blob, length, opts) {
		blob.l += 5;
		blob.l += 2;
		blob.l += (opts.biff == 2 ? 1 : 4);
		return ["PTGSHEET"];
	}
	function parse_PtgEndSheet(blob, length, opts) {
		blob.l += (opts.biff == 2 ? 4 : 5);
		return ["PTGENDSHEET"];
	}
	function parse_PtgMemAreaN(blob/*::, length, opts*/) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var cce = blob.read_shift(2);
		return [type, cce];
	}
	function parse_PtgMemNoMemN(blob/*::, length, opts*/) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var cce = blob.read_shift(2);
		return [type, cce];
	}
	function parse_PtgAttrNoop(blob/*::, length, opts*/) {
		blob.l += 4;
		return [0, 0];
	}

	/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */
	var PtgTypes = {
		/*::[*/0x01/*::]*/: { n:'PtgExp', f:parse_PtgExp },
		/*::[*/0x02/*::]*/: { n:'PtgTbl', f:parse_PtgTbl },
		/*::[*/0x03/*::]*/: { n:'PtgAdd', f:parseread1 },
		/*::[*/0x04/*::]*/: { n:'PtgSub', f:parseread1 },
		/*::[*/0x05/*::]*/: { n:'PtgMul', f:parseread1 },
		/*::[*/0x06/*::]*/: { n:'PtgDiv', f:parseread1 },
		/*::[*/0x07/*::]*/: { n:'PtgPower', f:parseread1 },
		/*::[*/0x08/*::]*/: { n:'PtgConcat', f:parseread1 },
		/*::[*/0x09/*::]*/: { n:'PtgLt', f:parseread1 },
		/*::[*/0x0A/*::]*/: { n:'PtgLe', f:parseread1 },
		/*::[*/0x0B/*::]*/: { n:'PtgEq', f:parseread1 },
		/*::[*/0x0C/*::]*/: { n:'PtgGe', f:parseread1 },
		/*::[*/0x0D/*::]*/: { n:'PtgGt', f:parseread1 },
		/*::[*/0x0E/*::]*/: { n:'PtgNe', f:parseread1 },
		/*::[*/0x0F/*::]*/: { n:'PtgIsect', f:parseread1 },
		/*::[*/0x10/*::]*/: { n:'PtgUnion', f:parseread1 },
		/*::[*/0x11/*::]*/: { n:'PtgRange', f:parseread1 },
		/*::[*/0x12/*::]*/: { n:'PtgUplus', f:parseread1 },
		/*::[*/0x13/*::]*/: { n:'PtgUminus', f:parseread1 },
		/*::[*/0x14/*::]*/: { n:'PtgPercent', f:parseread1 },
		/*::[*/0x15/*::]*/: { n:'PtgParen', f:parseread1 },
		/*::[*/0x16/*::]*/: { n:'PtgMissArg', f:parseread1 },
		/*::[*/0x17/*::]*/: { n:'PtgStr', f:parse_PtgStr },
		/*::[*/0x1A/*::]*/: { n:'PtgSheet', f:parse_PtgSheet },
		/*::[*/0x1B/*::]*/: { n:'PtgEndSheet', f:parse_PtgEndSheet },
		/*::[*/0x1C/*::]*/: { n:'PtgErr', f:parse_PtgErr },
		/*::[*/0x1D/*::]*/: { n:'PtgBool', f:parse_PtgBool },
		/*::[*/0x1E/*::]*/: { n:'PtgInt', f:parse_PtgInt },
		/*::[*/0x1F/*::]*/: { n:'PtgNum', f:parse_PtgNum },
		/*::[*/0x20/*::]*/: { n:'PtgArray', f:parse_PtgArray },
		/*::[*/0x21/*::]*/: { n:'PtgFunc', f:parse_PtgFunc },
		/*::[*/0x22/*::]*/: { n:'PtgFuncVar', f:parse_PtgFuncVar },
		/*::[*/0x23/*::]*/: { n:'PtgName', f:parse_PtgName },
		/*::[*/0x24/*::]*/: { n:'PtgRef', f:parse_PtgRef },
		/*::[*/0x25/*::]*/: { n:'PtgArea', f:parse_PtgArea },
		/*::[*/0x26/*::]*/: { n:'PtgMemArea', f:parse_PtgMemArea },
		/*::[*/0x27/*::]*/: { n:'PtgMemErr', f:parse_PtgMemErr },
		/*::[*/0x28/*::]*/: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },
		/*::[*/0x29/*::]*/: { n:'PtgMemFunc', f:parse_PtgMemFunc },
		/*::[*/0x2A/*::]*/: { n:'PtgRefErr', f:parse_PtgRefErr },
		/*::[*/0x2B/*::]*/: { n:'PtgAreaErr', f:parse_PtgAreaErr },
		/*::[*/0x2C/*::]*/: { n:'PtgRefN', f:parse_PtgRefN },
		/*::[*/0x2D/*::]*/: { n:'PtgAreaN', f:parse_PtgAreaN },
		/*::[*/0x2E/*::]*/: { n:'PtgMemAreaN', f:parse_PtgMemAreaN },
		/*::[*/0x2F/*::]*/: { n:'PtgMemNoMemN', f:parse_PtgMemNoMemN },
		/*::[*/0x39/*::]*/: { n:'PtgNameX', f:parse_PtgNameX },
		/*::[*/0x3A/*::]*/: { n:'PtgRef3d', f:parse_PtgRef3d },
		/*::[*/0x3B/*::]*/: { n:'PtgArea3d', f:parse_PtgArea3d },
		/*::[*/0x3C/*::]*/: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },
		/*::[*/0x3D/*::]*/: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },
		/*::[*/0xFF/*::]*/: {}
	};
	/* These are duplicated in the PtgTypes table */
	var PtgDupes = {
		/*::[*/0x40/*::]*/: 0x20, /*::[*/0x60/*::]*/: 0x20,
		/*::[*/0x41/*::]*/: 0x21, /*::[*/0x61/*::]*/: 0x21,
		/*::[*/0x42/*::]*/: 0x22, /*::[*/0x62/*::]*/: 0x22,
		/*::[*/0x43/*::]*/: 0x23, /*::[*/0x63/*::]*/: 0x23,
		/*::[*/0x44/*::]*/: 0x24, /*::[*/0x64/*::]*/: 0x24,
		/*::[*/0x45/*::]*/: 0x25, /*::[*/0x65/*::]*/: 0x25,
		/*::[*/0x46/*::]*/: 0x26, /*::[*/0x66/*::]*/: 0x26,
		/*::[*/0x47/*::]*/: 0x27, /*::[*/0x67/*::]*/: 0x27,
		/*::[*/0x48/*::]*/: 0x28, /*::[*/0x68/*::]*/: 0x28,
		/*::[*/0x49/*::]*/: 0x29, /*::[*/0x69/*::]*/: 0x29,
		/*::[*/0x4A/*::]*/: 0x2A, /*::[*/0x6A/*::]*/: 0x2A,
		/*::[*/0x4B/*::]*/: 0x2B, /*::[*/0x6B/*::]*/: 0x2B,
		/*::[*/0x4C/*::]*/: 0x2C, /*::[*/0x6C/*::]*/: 0x2C,
		/*::[*/0x4D/*::]*/: 0x2D, /*::[*/0x6D/*::]*/: 0x2D,
		/*::[*/0x4E/*::]*/: 0x2E, /*::[*/0x6E/*::]*/: 0x2E,
		/*::[*/0x4F/*::]*/: 0x2F, /*::[*/0x6F/*::]*/: 0x2F,
		/*::[*/0x58/*::]*/: 0x22, /*::[*/0x78/*::]*/: 0x22,
		/*::[*/0x59/*::]*/: 0x39, /*::[*/0x79/*::]*/: 0x39,
		/*::[*/0x5A/*::]*/: 0x3A, /*::[*/0x7A/*::]*/: 0x3A,
		/*::[*/0x5B/*::]*/: 0x3B, /*::[*/0x7B/*::]*/: 0x3B,
		/*::[*/0x5C/*::]*/: 0x3C, /*::[*/0x7C/*::]*/: 0x3C,
		/*::[*/0x5D/*::]*/: 0x3D, /*::[*/0x7D/*::]*/: 0x3D
	};

	var Ptg18 = {
		/*::[*/0x01/*::]*/: { n:'PtgElfLel', f:parse_PtgElfLel },
		/*::[*/0x02/*::]*/: { n:'PtgElfRw', f:parse_PtgElfRw },
		/*::[*/0x03/*::]*/: { n:'PtgElfCol', f:parse_PtgElfCol },
		/*::[*/0x06/*::]*/: { n:'PtgElfRwV', f:parse_PtgElfRwV },
		/*::[*/0x07/*::]*/: { n:'PtgElfColV', f:parse_PtgElfColV },
		/*::[*/0x0A/*::]*/: { n:'PtgElfRadical', f:parse_PtgElfRadical },
		/*::[*/0x0B/*::]*/: { n:'PtgElfRadicalS', f:parse_PtgElfRadicalS },
		/*::[*/0x0D/*::]*/: { n:'PtgElfColS', f:parse_PtgElfColS },
		/*::[*/0x0F/*::]*/: { n:'PtgElfColSV', f:parse_PtgElfColSV },
		/*::[*/0x10/*::]*/: { n:'PtgElfRadicalLel', f:parse_PtgElfRadicalLel },
		/*::[*/0x19/*::]*/: { n:'PtgList', f:parse_PtgList },
		/*::[*/0x1D/*::]*/: { n:'PtgSxName', f:parse_PtgSxName },
		/*::[*/0xFF/*::]*/: {}
	};
	var Ptg19 = {
		/*::[*/0x00/*::]*/: { n:'PtgAttrNoop', f:parse_PtgAttrNoop },
		/*::[*/0x01/*::]*/: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },
		/*::[*/0x02/*::]*/: { n:'PtgAttrIf', f:parse_PtgAttrIf },
		/*::[*/0x04/*::]*/: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },
		/*::[*/0x08/*::]*/: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },
		/*::[*/0x10/*::]*/: { n:'PtgAttrSum', f:parse_PtgAttrSum },
		/*::[*/0x20/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
		/*::[*/0x21/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
		/*::[*/0x40/*::]*/: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },
		/*::[*/0x41/*::]*/: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },
		/*::[*/0x80/*::]*/: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },
		/*::[*/0xFF/*::]*/: {}
	};

	/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */
	function parse_RgbExtra(blob, length, rgce, opts) {
		if(opts.biff < 8) return parsenoop(blob, length);
		var target = blob.l + length;
		var o = [];
		for(var i = 0; i !== rgce.length; ++i) {
			switch(rgce[i][0]) {
				case 'PtgArray': /* PtgArray -> PtgExtraArray */
					rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
					o.push(rgce[i][1]);
					break;
				case 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */
					rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
					o.push(rgce[i][2]);
					break;
				case 'PtgExp': /* PtgExp -> PtgExtraCol */
					if(opts && opts.biff == 12) {
						rgce[i][1][1] = blob.read_shift(4);
						o.push(rgce[i][1]);
					} break;
				case 'PtgList': /* TODO: PtgList -> PtgExtraList */
				case 'PtgElfRadicalS': /* TODO: PtgElfRadicalS -> PtgExtraElf */
				case 'PtgElfColS': /* TODO: PtgElfColS -> PtgExtraElf */
				case 'PtgElfColSV': /* TODO: PtgElfColSV -> PtgExtraElf */
					throw "Unsupported " + rgce[i][0];
			}
		}
		length = target - blob.l;
		/* note: this is technically an error but Excel disregards */
		//if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
		if(length !== 0) o.push(parsenoop(blob, length));
		return o;
	}

	/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */
	function parse_Rgce(blob, length, opts) {
		var target = blob.l + length;
		var R, id, ptgs = [];
		while(target != blob.l) {
			length = target - blob.l;
			id = blob[blob.l];
			R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
			if(id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
			if(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }
			else { ptgs.push([R.n, R.f(blob, length, opts)]); }
		}
		return ptgs;
	}

	function stringify_array(f/*:Array<Array<string>>*/)/*:string*/ {
		var o/*:Array<string>*/ = [];
		for(var i = 0; i < f.length; ++i) {
			var x = f[i], r/*:Array<string>*/ = [];
			for(var j = 0; j < x.length; ++j) {
				var y = x[j];
				if(y) switch(y[0]) {
					// TODO: handle embedded quotes
					case 0x02:
						/*:: if(typeof y[1] != 'string') throw "unreachable"; */
						r.push('"' + y[1].replace(/"/g,'""') + '"'); break;
					default: r.push(y[1]);
				} else r.push("");
			}
			o.push(r.join(","));
		}
		return o.join(";");
	}

	/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */
	var PtgBinOp = {
		PtgAdd: "+",
		PtgConcat: "&",
		PtgDiv: "/",
		PtgEq: "=",
		PtgGe: ">=",
		PtgGt: ">",
		PtgLe: "<=",
		PtgLt: "<",
		PtgMul: "*",
		PtgNe: "<>",
		PtgPower: "^",
		PtgSub: "-"
	};

	// List of invalid characters needs to be tested further
	function formula_quote_sheet_name(sname/*:string*/, opts)/*:string*/ {
		if(!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
		if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
		return sname;
	}
	function get_ixti_raw(supbooks, ixti/*:number*/, opts)/*:string*/ {
		if(!supbooks) return "SH33TJSERR0";
		if(opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
		if(!supbooks.XTI) return "SH33TJSERR6";
		var XTI = supbooks.XTI[ixti];
		if(opts.biff < 8) {
			if(ixti > 10000) ixti-= 65536;
			if(ixti < 0) ixti = -ixti;
			return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
		}
		if(!XTI) return "SH33TJSERR1";
		var o = "";
		if(opts.biff > 8) switch(supbooks[XTI[0]][0]) {
			case 0x0165: /* 'BrtSupSelf' */
				o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
				return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
			case 0x0166: /* 'BrtSupSame' */
				if(opts.SID != null) return supbooks.SheetNames[opts.SID];
				return "SH33TJSSAME" + supbooks[XTI[0]][0];
			case 0x0163: /* 'BrtSupBookSrc' */
				/* falls through */
			default: return "SH33TJSSRC" + supbooks[XTI[0]][0];
		}
		switch(supbooks[XTI[0]][0][0]) {
			case 0x0401:
				o = XTI[1] == -1 ? "#REF" : (supbooks.SheetNames[XTI[1]] || "SH33TJSERR3");
				return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
			case 0x3A01: return supbooks[XTI[0]].slice(1).map(function(name) { return name.Name; }).join(";;"); //return "SH33TJSERR8";
			default:
				if(!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
				o = XTI[1] == -1 ? "#REF" : (supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4");
				return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
		}
	}
	function get_ixti(supbooks, ixti/*:number*/, opts)/*:string*/ {
		var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
		return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
	}
	function stringify_formula(formula/*Array<any>*/, range, cell/*:any*/, supbooks, opts)/*:string*/ {
		var biff = (opts && opts.biff) || 8;
		var _range = /*range != null ? range :*/ {s:{c:0, r:0}};
		var stack/*:Array<string>*/ = [], e1, e2, /*::type,*/ c/*:CellAddress*/, ixti=0, nameidx=0, r, sname="";
		if(!formula[0] || !formula[0][0]) return "";
		var last_sp = -1, sp = "";
		for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
			var f = formula[0][ff];
			switch(f[0]) {
				case 'PtgUminus': /* [MS-XLS] 2.5.198.93 */
					stack.push("-" + stack.pop()); break;
				case 'PtgUplus': /* [MS-XLS] 2.5.198.95 */
					stack.push("+" + stack.pop()); break;
				case 'PtgPercent': /* [MS-XLS] 2.5.198.81 */
					stack.push(stack.pop() + "%"); break;

				case 'PtgAdd':    /* [MS-XLS] 2.5.198.26 */
				case 'PtgConcat': /* [MS-XLS] 2.5.198.43 */
				case 'PtgDiv':    /* [MS-XLS] 2.5.198.45 */
				case 'PtgEq':     /* [MS-XLS] 2.5.198.56 */
				case 'PtgGe':     /* [MS-XLS] 2.5.198.64 */
				case 'PtgGt':     /* [MS-XLS] 2.5.198.65 */
				case 'PtgLe':     /* [MS-XLS] 2.5.198.68 */
				case 'PtgLt':     /* [MS-XLS] 2.5.198.69 */
				case 'PtgMul':    /* [MS-XLS] 2.5.198.75 */
				case 'PtgNe':     /* [MS-XLS] 2.5.198.78 */
				case 'PtgPower':  /* [MS-XLS] 2.5.198.82 */
				case 'PtgSub':    /* [MS-XLS] 2.5.198.90 */
					e1 = stack.pop(); e2 = stack.pop();
					if(last_sp >= 0) {
						switch(formula[0][last_sp][1][0]) {
							case 0:
								// $FlowIgnore
								sp = fill(" ", formula[0][last_sp][1][1]); break;
							case 1:
								// $FlowIgnore
								sp = fill("\r", formula[0][last_sp][1][1]); break;
							default:
								sp = "";
								// $FlowIgnore
								if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
						}
						e2 = e2 + sp;
						last_sp = -1;
					}
					stack.push(e2+PtgBinOp[f[0]]+e1);
					break;

				case 'PtgIsect': /* [MS-XLS] 2.5.198.67 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+" "+e1);
					break;
				case 'PtgUnion': /* [MS-XLS] 2.5.198.94 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+","+e1);
					break;
				case 'PtgRange': /* [MS-XLS] 2.5.198.83 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+":"+e1);
					break;

				case 'PtgAttrChoose': /* [MS-XLS] 2.5.198.34 */
					break;
				case 'PtgAttrGoto': /* [MS-XLS] 2.5.198.35 */
					break;
				case 'PtgAttrIf': /* [MS-XLS] 2.5.198.36 */
					break;
				case 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */
					break;


				case 'PtgRef': /* [MS-XLS] 2.5.198.84 */
					/*::type = f[1][0]; */c = shift_cell_xls((f[1][1]/*:any*/), _range, opts);
					stack.push(encode_cell_xls(c, biff));
					break;
				case 'PtgRefN': /* [MS-XLS] 2.5.198.88 */
					/*::type = f[1][0]; */c = cell ? shift_cell_xls((f[1][1]/*:any*/), cell, opts) : (f[1][1]/*:any*/);
					stack.push(encode_cell_xls(c, biff));
					break;
				case 'PtgRef3d': /* [MS-XLS] 2.5.198.85 */
					/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; c = shift_cell_xls((f[1][2]/*:any*/), _range, opts);
					sname = get_ixti(supbooks, ixti, opts);
					stack.push(sname + "!" + encode_cell_xls(c, biff));
					break;

				case 'PtgFunc': /* [MS-XLS] 2.5.198.62 */
				case 'PtgFuncVar': /* [MS-XLS] 2.5.198.63 */
					/* f[1] = [argc, func, type] */
					var argc/*:number*/ = (f[1][0]/*:any*/), func/*:string*/ = (f[1][1]/*:any*/);
					if(!argc) argc = 0;
					argc &= 0x7F;
					var args = argc == 0 ? [] : stack.slice(-argc);
					stack.length -= argc;
					if(func === 'User') func = args.shift();
					stack.push(func + "(" + args.join(",") + ")");
					break;

				case 'PtgBool': /* [MS-XLS] 2.5.198.42 */
					stack.push(f[1] ? "TRUE" : "FALSE"); break;
				case 'PtgInt': /* [MS-XLS] 2.5.198.66 */
					stack.push(/*::String(*/f[1]/*::)*/); break;
				case 'PtgNum': /* [MS-XLS] 2.5.198.79 TODO: precision? */
					stack.push(String(f[1])); break;
				case 'PtgStr': /* [MS-XLS] 2.5.198.89 */
					// $FlowIgnore
					stack.push('"' + f[1].replace(/"/g, '""') + '"'); break;
				case 'PtgErr': /* [MS-XLS] 2.5.198.57 */
					stack.push(/*::String(*/f[1]/*::)*/); break;
				case 'PtgAreaN': /* [MS-XLS] 2.5.198.31 TODO */
					/*::type = f[1][0]; */r = shift_range_xls(f[1][1], cell ? {s:cell} : _range, opts);
					stack.push(encode_range_xls((r/*:any*/), opts));
					break;
				case 'PtgArea': /* [MS-XLS] 2.5.198.27 TODO: fixed points */
					/*::type = f[1][0]; */r = shift_range_xls(f[1][1], _range, opts);
					stack.push(encode_range_xls((r/*:any*/), opts));
					break;
				case 'PtgArea3d': /* [MS-XLS] 2.5.198.28 TODO */
					/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; r = f[1][2];
					sname = get_ixti(supbooks, ixti, opts);
					stack.push(sname + "!" + encode_range_xls((r/*:any*/), opts));
					break;
				case 'PtgAttrSum': /* [MS-XLS] 2.5.198.41 */
					stack.push("SUM(" + stack.pop() + ")");
					break;

				case 'PtgAttrBaxcel': /* [MS-XLS] 2.5.198.33 */
				case 'PtgAttrSemi': /* [MS-XLS] 2.5.198.37 */
					break;

				case 'PtgName': /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */
					/* f[1] = type, 0, nameindex */
					nameidx = (f[1][2]/*:any*/);
					var lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];
					var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
					/* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */
					if(name && name.slice(0,6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
					stack.push(name);
					break;

				case 'PtgNameX': /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */
					/* f[1] = type, ixti, nameindex */
					var bookidx/*:number*/ = (f[1][1]/*:any*/); nameidx = (f[1][2]/*:any*/); var externbook;
					/* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */
					if(opts.biff <= 5) {
						if(bookidx < 0) bookidx = -bookidx;
						if(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
					} else {
						var o = "";
						if(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01);
						else if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){
							if(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
								o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + "!";
							}
						}
						else o = supbooks.SheetNames[nameidx-1]+ "!";
						if(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
						else if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
						else {
							var ixtidata = (get_ixti_raw(supbooks, bookidx, opts)||"").split(";;");
							if(ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
							else o += "SH33TJSERRX";
						}
						stack.push(o);
						break;
					}
					if(!externbook) externbook = {Name: "SH33TJSERRY"};
					stack.push(externbook.Name);
					break;

				case 'PtgParen': /* [MS-XLS] 2.5.198.80 */
					var lp = '(', rp = ')';
					if(last_sp >= 0) {
						sp = "";
						switch(formula[0][last_sp][1][0]) {
							// $FlowIgnore
							case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break;
							// $FlowIgnore
							case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break;
							// $FlowIgnore
							case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break;
							// $FlowIgnore
							case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break;
							default:
								// $FlowIgnore
								if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
						}
						last_sp = -1;
					}
					stack.push(lp + stack.pop() + rp); break;

				case 'PtgRefErr': /* [MS-XLS] 2.5.198.86 */
					stack.push('#REF!'); break;

				case 'PtgRefErr3d': /* [MS-XLS] 2.5.198.87 */
					stack.push('#REF!'); break;

				case 'PtgExp': /* [MS-XLS] 2.5.198.58 TODO */
					c = {c:(f[1][1]/*:any*/),r:(f[1][0]/*:any*/)};
					var q = ({c: cell.c, r:cell.r}/*:any*/);
					if(supbooks.sharedf[encode_cell(c)]) {
						var parsedf = (supbooks.sharedf[encode_cell(c)]);
						stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
					} else {
						var fnd = false;
						for(e1=0;e1!=supbooks.arrayf.length; ++e1) {
							/* TODO: should be something like range_has */
							e2 = supbooks.arrayf[e1];
							if(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
							if(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
							stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
							fnd = true;
							break;
						}
						if(!fnd) stack.push(/*::String(*/f[1]/*::)*/);
					}
					break;

				case 'PtgArray': /* [MS-XLS] 2.5.198.32 TODO */
					stack.push("{" + stringify_array(/*::(*/f[1]/*:: :any)*/) + "}");
					break;

				case 'PtgMemArea': /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */
					//stack.push("(" + f[2].map(encode_range).join(",") + ")");
					break;

				case 'PtgAttrSpace': /* [MS-XLS] 2.5.198.38 */
				case 'PtgAttrSpaceSemi': /* [MS-XLS] 2.5.198.39 */
					last_sp = ff;
					break;

				case 'PtgTbl': /* [MS-XLS] 2.5.198.92 TODO */
					break;

				case 'PtgMemErr': /* [MS-XLS] 2.5.198.71 */
					break;

				case 'PtgMissArg': /* [MS-XLS] 2.5.198.74 */
					stack.push("");
					break;

				case 'PtgAreaErr': /* [MS-XLS] 2.5.198.29 */
					stack.push("#REF!"); break;

				case 'PtgAreaErr3d': /* [MS-XLS] 2.5.198.30 */
					stack.push("#REF!"); break;

				case 'PtgList': /* [MS-XLSB] 2.5.97.52 */
					// $FlowIgnore
					stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
					break;

				case 'PtgMemAreaN':
				case 'PtgMemNoMemN':
				case 'PtgAttrNoop':
				case 'PtgSheet':
				case 'PtgEndSheet':
					break;

				case 'PtgMemFunc': /* [MS-XLS] 2.5.198.72 TODO */
					break;
				case 'PtgMemNoMem': /* [MS-XLS] 2.5.198.73 TODO */
					break;

				case 'PtgElfCol': /* [MS-XLS] 2.5.198.46 */
				case 'PtgElfColS': /* [MS-XLS] 2.5.198.47 */
				case 'PtgElfColSV': /* [MS-XLS] 2.5.198.48 */
				case 'PtgElfColV': /* [MS-XLS] 2.5.198.49 */
				case 'PtgElfLel': /* [MS-XLS] 2.5.198.50 */
				case 'PtgElfRadical': /* [MS-XLS] 2.5.198.51 */
				case 'PtgElfRadicalLel': /* [MS-XLS] 2.5.198.52 */
				case 'PtgElfRadicalS': /* [MS-XLS] 2.5.198.53 */
				case 'PtgElfRw': /* [MS-XLS] 2.5.198.54 */
				case 'PtgElfRwV': /* [MS-XLS] 2.5.198.55 */
					throw new Error("Unsupported ELFs");

				case 'PtgSxName': /* [MS-XLS] 2.5.198.91 TODO -- find a test case */
					throw new Error('Unrecognized Formula Token: ' + String(f));
				default: throw new Error('Unrecognized Formula Token: ' + String(f));
			}
			var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
			if(opts.biff != 3) if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
				f = formula[0][last_sp];
				var _left = true;
				switch(f[1][0]) {
					/* note: some bad XLSB files omit the PtgParen */
					case 4: _left = false;
					/* falls through */
					case 0:
						// $FlowIgnore
						sp = fill(" ", f[1][1]); break;
					case 5: _left = false;
					/* falls through */
					case 1:
						// $FlowIgnore
						sp = fill("\r", f[1][1]); break;
					default:
						sp = "";
						// $FlowIgnore
						if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
				}
				stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
				last_sp = -1;
			}
		}
		if(stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
		return stack[0];
	}

	/* [MS-XLS] 2.5.198.1 TODO */
	function parse_ArrayParsedFormula(blob, length, opts/*::, ref*/) {
		var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
		var rgcb, cce = blob.read_shift(len); // length of rgce
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		var rgce = parse_Rgce(blob, cce, opts);
		if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
		blob.l = target;
		return [rgce, rgcb];
	}

	/* [MS-XLS] 2.5.198.3 TODO */
	function parse_XLSCellParsedFormula(blob, length, opts) {
		var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
		var rgcb, cce = blob.read_shift(len); // length of rgce
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		var rgce = parse_Rgce(blob, cce, opts);
		if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
		blob.l = target;
		return [rgce, rgcb];
	}

	/* [MS-XLS] 2.5.198.21 */
	function parse_NameParsedFormula(blob, length, opts, cce) {
		var target = blob.l + length;
		var rgce = parse_Rgce(blob, cce, opts);
		var rgcb;
		if(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
		return [rgce, rgcb];
	}

	/* [MS-XLS] 2.5.198.118 TODO */
	function parse_SharedParsedFormula(blob, length, opts) {
		var target = blob.l + length;
		var rgcb, cce = blob.read_shift(2); // length of rgce
		var rgce = parse_Rgce(blob, cce, opts);
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		if(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
		return [rgce, rgcb];
	}

	/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */
	function parse_FormulaValue(blob/*::, length*/) {
		var b;
		if(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];
		switch(blob[blob.l]) {
			case 0x00: blob.l += 8; return ["String", 's'];
			case 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];
			case 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];
			case 0x03: blob.l += 8; return ["",'s'];
		}
		return [];
	}

	/* [MS-XLS] 2.4.127 TODO */
	function parse_Formula(blob, length, opts) {
		var end = blob.l + length;
		var cell = parse_XLSCell(blob);
		if(opts.biff == 2) ++blob.l;
		var val = parse_FormulaValue(blob);
		var flags = blob.read_shift(1);
		if(opts.biff != 2) {
			blob.read_shift(1);
			if(opts.biff >= 5) {
				/*var chn = */blob.read_shift(4);
			}
		}
		var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
		return {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};
	}


	/* XLSB Parsed Formula records have the same shape */
	function parse_XLSBParsedFormula(data, length, opts) {
		var cce = data.read_shift(4);
		var rgce = parse_Rgce(data, cce, opts);
		var cb = data.read_shift(4);
		var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
		return [rgce, rgcb];
	}

	/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */
	var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.4 CellParsedFormula */
	var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.8 DVParsedFormula */
	//var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */
	//var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;
	/* [MS-XLSB] 2.5.97.12 NameParsedFormula */
	var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */
	var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
	var Cetab = {
	  0: "BEEP",
	  1: "OPEN",
	  2: "OPEN.LINKS",
	  3: "CLOSE.ALL",
	  4: "SAVE",
	  5: "SAVE.AS",
	  6: "FILE.DELETE",
	  7: "PAGE.SETUP",
	  8: "PRINT",
	  9: "PRINTER.SETUP",
	  10: "QUIT",
	  11: "NEW.WINDOW",
	  12: "ARRANGE.ALL",
	  13: "WINDOW.SIZE",
	  14: "WINDOW.MOVE",
	  15: "FULL",
	  16: "CLOSE",
	  17: "RUN",
	  22: "SET.PRINT.AREA",
	  23: "SET.PRINT.TITLES",
	  24: "SET.PAGE.BREAK",
	  25: "REMOVE.PAGE.BREAK",
	  26: "FONT",
	  27: "DISPLAY",
	  28: "PROTECT.DOCUMENT",
	  29: "PRECISION",
	  30: "A1.R1C1",
	  31: "CALCULATE.NOW",
	  32: "CALCULATION",
	  34: "DATA.FIND",
	  35: "EXTRACT",
	  36: "DATA.DELETE",
	  37: "SET.DATABASE",
	  38: "SET.CRITERIA",
	  39: "SORT",
	  40: "DATA.SERIES",
	  41: "TABLE",
	  42: "FORMAT.NUMBER",
	  43: "ALIGNMENT",
	  44: "STYLE",
	  45: "BORDER",
	  46: "CELL.PROTECTION",
	  47: "COLUMN.WIDTH",
	  48: "UNDO",
	  49: "CUT",
	  50: "COPY",
	  51: "PASTE",
	  52: "CLEAR",
	  53: "PASTE.SPECIAL",
	  54: "EDIT.DELETE",
	  55: "INSERT",
	  56: "FILL.RIGHT",
	  57: "FILL.DOWN",
	  61: "DEFINE.NAME",
	  62: "CREATE.NAMES",
	  63: "FORMULA.GOTO",
	  64: "FORMULA.FIND",
	  65: "SELECT.LAST.CELL",
	  66: "SHOW.ACTIVE.CELL",
	  67: "GALLERY.AREA",
	  68: "GALLERY.BAR",
	  69: "GALLERY.COLUMN",
	  70: "GALLERY.LINE",
	  71: "GALLERY.PIE",
	  72: "GALLERY.SCATTER",
	  73: "COMBINATION",
	  74: "PREFERRED",
	  75: "ADD.OVERLAY",
	  76: "GRIDLINES",
	  77: "SET.PREFERRED",
	  78: "AXES",
	  79: "LEGEND",
	  80: "ATTACH.TEXT",
	  81: "ADD.ARROW",
	  82: "SELECT.CHART",
	  83: "SELECT.PLOT.AREA",
	  84: "PATTERNS",
	  85: "MAIN.CHART",
	  86: "OVERLAY",
	  87: "SCALE",
	  88: "FORMAT.LEGEND",
	  89: "FORMAT.TEXT",
	  90: "EDIT.REPEAT",
	  91: "PARSE",
	  92: "JUSTIFY",
	  93: "HIDE",
	  94: "UNHIDE",
	  95: "WORKSPACE",
	  96: "FORMULA",
	  97: "FORMULA.FILL",
	  98: "FORMULA.ARRAY",
	  99: "DATA.FIND.NEXT",
	  100: "DATA.FIND.PREV",
	  101: "FORMULA.FIND.NEXT",
	  102: "FORMULA.FIND.PREV",
	  103: "ACTIVATE",
	  104: "ACTIVATE.NEXT",
	  105: "ACTIVATE.PREV",
	  106: "UNLOCKED.NEXT",
	  107: "UNLOCKED.PREV",
	  108: "COPY.PICTURE",
	  109: "SELECT",
	  110: "DELETE.NAME",
	  111: "DELETE.FORMAT",
	  112: "VLINE",
	  113: "HLINE",
	  114: "VPAGE",
	  115: "HPAGE",
	  116: "VSCROLL",
	  117: "HSCROLL",
	  118: "ALERT",
	  119: "NEW",
	  120: "CANCEL.COPY",
	  121: "SHOW.CLIPBOARD",
	  122: "MESSAGE",
	  124: "PASTE.LINK",
	  125: "APP.ACTIVATE",
	  126: "DELETE.ARROW",
	  127: "ROW.HEIGHT",
	  128: "FORMAT.MOVE",
	  129: "FORMAT.SIZE",
	  130: "FORMULA.REPLACE",
	  131: "SEND.KEYS",
	  132: "SELECT.SPECIAL",
	  133: "APPLY.NAMES",
	  134: "REPLACE.FONT",
	  135: "FREEZE.PANES",
	  136: "SHOW.INFO",
	  137: "SPLIT",
	  138: "ON.WINDOW",
	  139: "ON.DATA",
	  140: "DISABLE.INPUT",
	  142: "OUTLINE",
	  143: "LIST.NAMES",
	  144: "FILE.CLOSE",
	  145: "SAVE.WORKBOOK",
	  146: "DATA.FORM",
	  147: "COPY.CHART",
	  148: "ON.TIME",
	  149: "WAIT",
	  150: "FORMAT.FONT",
	  151: "FILL.UP",
	  152: "FILL.LEFT",
	  153: "DELETE.OVERLAY",
	  155: "SHORT.MENUS",
	  159: "SET.UPDATE.STATUS",
	  161: "COLOR.PALETTE",
	  162: "DELETE.STYLE",
	  163: "WINDOW.RESTORE",
	  164: "WINDOW.MAXIMIZE",
	  166: "CHANGE.LINK",
	  167: "CALCULATE.DOCUMENT",
	  168: "ON.KEY",
	  169: "APP.RESTORE",
	  170: "APP.MOVE",
	  171: "APP.SIZE",
	  172: "APP.MINIMIZE",
	  173: "APP.MAXIMIZE",
	  174: "BRING.TO.FRONT",
	  175: "SEND.TO.BACK",
	  185: "MAIN.CHART.TYPE",
	  186: "OVERLAY.CHART.TYPE",
	  187: "SELECT.END",
	  188: "OPEN.MAIL",
	  189: "SEND.MAIL",
	  190: "STANDARD.FONT",
	  191: "CONSOLIDATE",
	  192: "SORT.SPECIAL",
	  193: "GALLERY.3D.AREA",
	  194: "GALLERY.3D.COLUMN",
	  195: "GALLERY.3D.LINE",
	  196: "GALLERY.3D.PIE",
	  197: "VIEW.3D",
	  198: "GOAL.SEEK",
	  199: "WORKGROUP",
	  200: "FILL.GROUP",
	  201: "UPDATE.LINK",
	  202: "PROMOTE",
	  203: "DEMOTE",
	  204: "SHOW.DETAIL",
	  206: "UNGROUP",
	  207: "OBJECT.PROPERTIES",
	  208: "SAVE.NEW.OBJECT",
	  209: "SHARE",
	  210: "SHARE.NAME",
	  211: "DUPLICATE",
	  212: "APPLY.STYLE",
	  213: "ASSIGN.TO.OBJECT",
	  214: "OBJECT.PROTECTION",
	  215: "HIDE.OBJECT",
	  216: "SET.EXTRACT",
	  217: "CREATE.PUBLISHER",
	  218: "SUBSCRIBE.TO",
	  219: "ATTRIBUTES",
	  220: "SHOW.TOOLBAR",
	  222: "PRINT.PREVIEW",
	  223: "EDIT.COLOR",
	  224: "SHOW.LEVELS",
	  225: "FORMAT.MAIN",
	  226: "FORMAT.OVERLAY",
	  227: "ON.RECALC",
	  228: "EDIT.SERIES",
	  229: "DEFINE.STYLE",
	  240: "LINE.PRINT",
	  243: "ENTER.DATA",
	  249: "GALLERY.RADAR",
	  250: "MERGE.STYLES",
	  251: "EDITION.OPTIONS",
	  252: "PASTE.PICTURE",
	  253: "PASTE.PICTURE.LINK",
	  254: "SPELLING",
	  256: "ZOOM",
	  259: "INSERT.OBJECT",
	  260: "WINDOW.MINIMIZE",
	  265: "SOUND.NOTE",
	  266: "SOUND.PLAY",
	  267: "FORMAT.SHAPE",
	  268: "EXTEND.POLYGON",
	  269: "FORMAT.AUTO",
	  272: "GALLERY.3D.BAR",
	  273: "GALLERY.3D.SURFACE",
	  274: "FILL.AUTO",
	  276: "CUSTOMIZE.TOOLBAR",
	  277: "ADD.TOOL",
	  278: "EDIT.OBJECT",
	  279: "ON.DOUBLECLICK",
	  280: "ON.ENTRY",
	  281: "WORKBOOK.ADD",
	  282: "WORKBOOK.MOVE",
	  283: "WORKBOOK.COPY",
	  284: "WORKBOOK.OPTIONS",
	  285: "SAVE.WORKSPACE",
	  288: "CHART.WIZARD",
	  289: "DELETE.TOOL",
	  290: "MOVE.TOOL",
	  291: "WORKBOOK.SELECT",
	  292: "WORKBOOK.ACTIVATE",
	  293: "ASSIGN.TO.TOOL",
	  295: "COPY.TOOL",
	  296: "RESET.TOOL",
	  297: "CONSTRAIN.NUMERIC",
	  298: "PASTE.TOOL",
	  302: "WORKBOOK.NEW",
	  305: "SCENARIO.CELLS",
	  306: "SCENARIO.DELETE",
	  307: "SCENARIO.ADD",
	  308: "SCENARIO.EDIT",
	  309: "SCENARIO.SHOW",
	  310: "SCENARIO.SHOW.NEXT",
	  311: "SCENARIO.SUMMARY",
	  312: "PIVOT.TABLE.WIZARD",
	  313: "PIVOT.FIELD.PROPERTIES",
	  314: "PIVOT.FIELD",
	  315: "PIVOT.ITEM",
	  316: "PIVOT.ADD.FIELDS",
	  318: "OPTIONS.CALCULATION",
	  319: "OPTIONS.EDIT",
	  320: "OPTIONS.VIEW",
	  321: "ADDIN.MANAGER",
	  322: "MENU.EDITOR",
	  323: "ATTACH.TOOLBARS",
	  324: "VBAActivate",
	  325: "OPTIONS.CHART",
	  328: "VBA.INSERT.FILE",
	  330: "VBA.PROCEDURE.DEFINITION",
	  336: "ROUTING.SLIP",
	  338: "ROUTE.DOCUMENT",
	  339: "MAIL.LOGON",
	  342: "INSERT.PICTURE",
	  343: "EDIT.TOOL",
	  344: "GALLERY.DOUGHNUT",
	  350: "CHART.TREND",
	  352: "PIVOT.ITEM.PROPERTIES",
	  354: "WORKBOOK.INSERT",
	  355: "OPTIONS.TRANSITION",
	  356: "OPTIONS.GENERAL",
	  370: "FILTER.ADVANCED",
	  373: "MAIL.ADD.MAILER",
	  374: "MAIL.DELETE.MAILER",
	  375: "MAIL.REPLY",
	  376: "MAIL.REPLY.ALL",
	  377: "MAIL.FORWARD",
	  378: "MAIL.NEXT.LETTER",
	  379: "DATA.LABEL",
	  380: "INSERT.TITLE",
	  381: "FONT.PROPERTIES",
	  382: "MACRO.OPTIONS",
	  383: "WORKBOOK.HIDE",
	  384: "WORKBOOK.UNHIDE",
	  385: "WORKBOOK.DELETE",
	  386: "WORKBOOK.NAME",
	  388: "GALLERY.CUSTOM",
	  390: "ADD.CHART.AUTOFORMAT",
	  391: "DELETE.CHART.AUTOFORMAT",
	  392: "CHART.ADD.DATA",
	  393: "AUTO.OUTLINE",
	  394: "TAB.ORDER",
	  395: "SHOW.DIALOG",
	  396: "SELECT.ALL",
	  397: "UNGROUP.SHEETS",
	  398: "SUBTOTAL.CREATE",
	  399: "SUBTOTAL.REMOVE",
	  400: "RENAME.OBJECT",
	  412: "WORKBOOK.SCROLL",
	  413: "WORKBOOK.NEXT",
	  414: "WORKBOOK.PREV",
	  415: "WORKBOOK.TAB.SPLIT",
	  416: "FULL.SCREEN",
	  417: "WORKBOOK.PROTECT",
	  420: "SCROLLBAR.PROPERTIES",
	  421: "PIVOT.SHOW.PAGES",
	  422: "TEXT.TO.COLUMNS",
	  423: "FORMAT.CHARTTYPE",
	  424: "LINK.FORMAT",
	  425: "TRACER.DISPLAY",
	  430: "TRACER.NAVIGATE",
	  431: "TRACER.CLEAR",
	  432: "TRACER.ERROR",
	  433: "PIVOT.FIELD.GROUP",
	  434: "PIVOT.FIELD.UNGROUP",
	  435: "CHECKBOX.PROPERTIES",
	  436: "LABEL.PROPERTIES",
	  437: "LISTBOX.PROPERTIES",
	  438: "EDITBOX.PROPERTIES",
	  439: "PIVOT.REFRESH",
	  440: "LINK.COMBO",
	  441: "OPEN.TEXT",
	  442: "HIDE.DIALOG",
	  443: "SET.DIALOG.FOCUS",
	  444: "ENABLE.OBJECT",
	  445: "PUSHBUTTON.PROPERTIES",
	  446: "SET.DIALOG.DEFAULT",
	  447: "FILTER",
	  448: "FILTER.SHOW.ALL",
	  449: "CLEAR.OUTLINE",
	  450: "FUNCTION.WIZARD",
	  451: "ADD.LIST.ITEM",
	  452: "SET.LIST.ITEM",
	  453: "REMOVE.LIST.ITEM",
	  454: "SELECT.LIST.ITEM",
	  455: "SET.CONTROL.VALUE",
	  456: "SAVE.COPY.AS",
	  458: "OPTIONS.LISTS.ADD",
	  459: "OPTIONS.LISTS.DELETE",
	  460: "SERIES.AXES",
	  461: "SERIES.X",
	  462: "SERIES.Y",
	  463: "ERRORBAR.X",
	  464: "ERRORBAR.Y",
	  465: "FORMAT.CHART",
	  466: "SERIES.ORDER",
	  467: "MAIL.LOGOFF",
	  468: "CLEAR.ROUTING.SLIP",
	  469: "APP.ACTIVATE.MICROSOFT",
	  470: "MAIL.EDIT.MAILER",
	  471: "ON.SHEET",
	  472: "STANDARD.WIDTH",
	  473: "SCENARIO.MERGE",
	  474: "SUMMARY.INFO",
	  475: "FIND.FILE",
	  476: "ACTIVE.CELL.FONT",
	  477: "ENABLE.TIPWIZARD",
	  478: "VBA.MAKE.ADDIN",
	  480: "INSERTDATATABLE",
	  481: "WORKGROUP.OPTIONS",
	  482: "MAIL.SEND.MAILER",
	  485: "AUTOCORRECT",
	  489: "POST.DOCUMENT",
	  491: "PICKLIST",
	  493: "VIEW.SHOW",
	  494: "VIEW.DEFINE",
	  495: "VIEW.DELETE",
	  509: "SHEET.BACKGROUND",
	  510: "INSERT.MAP.OBJECT",
	  511: "OPTIONS.MENONO",
	  517: "MSOCHECKS",
	  518: "NORMAL",
	  519: "LAYOUT",
	  520: "RM.PRINT.AREA",
	  521: "CLEAR.PRINT.AREA",
	  522: "ADD.PRINT.AREA",
	  523: "MOVE.BRK",
	  545: "HIDECURR.NOTE",
	  546: "HIDEALL.NOTES",
	  547: "DELETE.NOTE",
	  548: "TRAVERSE.NOTES",
	  549: "ACTIVATE.NOTES",
	  620: "PROTECT.REVISIONS",
	  621: "UNPROTECT.REVISIONS",
	  647: "OPTIONS.ME",
	  653: "WEB.PUBLISH",
	  667: "NEWWEBQUERY",
	  673: "PIVOT.TABLE.CHART",
	  753: "OPTIONS.SAVE",
	  755: "OPTIONS.SPELL",
	  808: "HIDEALL.INKANNOTS"
	};
	var Ftab = {
	  0: "COUNT",
	  1: "IF",
	  2: "ISNA",
	  3: "ISERROR",
	  4: "SUM",
	  5: "AVERAGE",
	  6: "MIN",
	  7: "MAX",
	  8: "ROW",
	  9: "COLUMN",
	  10: "NA",
	  11: "NPV",
	  12: "STDEV",
	  13: "DOLLAR",
	  14: "FIXED",
	  15: "SIN",
	  16: "COS",
	  17: "TAN",
	  18: "ATAN",
	  19: "PI",
	  20: "SQRT",
	  21: "EXP",
	  22: "LN",
	  23: "LOG10",
	  24: "ABS",
	  25: "INT",
	  26: "SIGN",
	  27: "ROUND",
	  28: "LOOKUP",
	  29: "INDEX",
	  30: "REPT",
	  31: "MID",
	  32: "LEN",
	  33: "VALUE",
	  34: "TRUE",
	  35: "FALSE",
	  36: "AND",
	  37: "OR",
	  38: "NOT",
	  39: "MOD",
	  40: "DCOUNT",
	  41: "DSUM",
	  42: "DAVERAGE",
	  43: "DMIN",
	  44: "DMAX",
	  45: "DSTDEV",
	  46: "VAR",
	  47: "DVAR",
	  48: "TEXT",
	  49: "LINEST",
	  50: "TREND",
	  51: "LOGEST",
	  52: "GROWTH",
	  53: "GOTO",
	  54: "HALT",
	  55: "RETURN",
	  56: "PV",
	  57: "FV",
	  58: "NPER",
	  59: "PMT",
	  60: "RATE",
	  61: "MIRR",
	  62: "IRR",
	  63: "RAND",
	  64: "MATCH",
	  65: "DATE",
	  66: "TIME",
	  67: "DAY",
	  68: "MONTH",
	  69: "YEAR",
	  70: "WEEKDAY",
	  71: "HOUR",
	  72: "MINUTE",
	  73: "SECOND",
	  74: "NOW",
	  75: "AREAS",
	  76: "ROWS",
	  77: "COLUMNS",
	  78: "OFFSET",
	  79: "ABSREF",
	  80: "RELREF",
	  81: "ARGUMENT",
	  82: "SEARCH",
	  83: "TRANSPOSE",
	  84: "ERROR",
	  85: "STEP",
	  86: "TYPE",
	  87: "ECHO",
	  88: "SET.NAME",
	  89: "CALLER",
	  90: "DEREF",
	  91: "WINDOWS",
	  92: "SERIES",
	  93: "DOCUMENTS",
	  94: "ACTIVE.CELL",
	  95: "SELECTION",
	  96: "RESULT",
	  97: "ATAN2",
	  98: "ASIN",
	  99: "ACOS",
	  100: "CHOOSE",
	  101: "HLOOKUP",
	  102: "VLOOKUP",
	  103: "LINKS",
	  104: "INPUT",
	  105: "ISREF",
	  106: "GET.FORMULA",
	  107: "GET.NAME",
	  108: "SET.VALUE",
	  109: "LOG",
	  110: "EXEC",
	  111: "CHAR",
	  112: "LOWER",
	  113: "UPPER",
	  114: "PROPER",
	  115: "LEFT",
	  116: "RIGHT",
	  117: "EXACT",
	  118: "TRIM",
	  119: "REPLACE",
	  120: "SUBSTITUTE",
	  121: "CODE",
	  122: "NAMES",
	  123: "DIRECTORY",
	  124: "FIND",
	  125: "CELL",
	  126: "ISERR",
	  127: "ISTEXT",
	  128: "ISNUMBER",
	  129: "ISBLANK",
	  130: "T",
	  131: "N",
	  132: "FOPEN",
	  133: "FCLOSE",
	  134: "FSIZE",
	  135: "FREADLN",
	  136: "FREAD",
	  137: "FWRITELN",
	  138: "FWRITE",
	  139: "FPOS",
	  140: "DATEVALUE",
	  141: "TIMEVALUE",
	  142: "SLN",
	  143: "SYD",
	  144: "DDB",
	  145: "GET.DEF",
	  146: "REFTEXT",
	  147: "TEXTREF",
	  148: "INDIRECT",
	  149: "REGISTER",
	  150: "CALL",
	  151: "ADD.BAR",
	  152: "ADD.MENU",
	  153: "ADD.COMMAND",
	  154: "ENABLE.COMMAND",
	  155: "CHECK.COMMAND",
	  156: "RENAME.COMMAND",
	  157: "SHOW.BAR",
	  158: "DELETE.MENU",
	  159: "DELETE.COMMAND",
	  160: "GET.CHART.ITEM",
	  161: "DIALOG.BOX",
	  162: "CLEAN",
	  163: "MDETERM",
	  164: "MINVERSE",
	  165: "MMULT",
	  166: "FILES",
	  167: "IPMT",
	  168: "PPMT",
	  169: "COUNTA",
	  170: "CANCEL.KEY",
	  171: "FOR",
	  172: "WHILE",
	  173: "BREAK",
	  174: "NEXT",
	  175: "INITIATE",
	  176: "REQUEST",
	  177: "POKE",
	  178: "EXECUTE",
	  179: "TERMINATE",
	  180: "RESTART",
	  181: "HELP",
	  182: "GET.BAR",
	  183: "PRODUCT",
	  184: "FACT",
	  185: "GET.CELL",
	  186: "GET.WORKSPACE",
	  187: "GET.WINDOW",
	  188: "GET.DOCUMENT",
	  189: "DPRODUCT",
	  190: "ISNONTEXT",
	  191: "GET.NOTE",
	  192: "NOTE",
	  193: "STDEVP",
	  194: "VARP",
	  195: "DSTDEVP",
	  196: "DVARP",
	  197: "TRUNC",
	  198: "ISLOGICAL",
	  199: "DCOUNTA",
	  200: "DELETE.BAR",
	  201: "UNREGISTER",
	  204: "USDOLLAR",
	  205: "FINDB",
	  206: "SEARCHB",
	  207: "REPLACEB",
	  208: "LEFTB",
	  209: "RIGHTB",
	  210: "MIDB",
	  211: "LENB",
	  212: "ROUNDUP",
	  213: "ROUNDDOWN",
	  214: "ASC",
	  215: "DBCS",
	  216: "RANK",
	  219: "ADDRESS",
	  220: "DAYS360",
	  221: "TODAY",
	  222: "VDB",
	  223: "ELSE",
	  224: "ELSE.IF",
	  225: "END.IF",
	  226: "FOR.CELL",
	  227: "MEDIAN",
	  228: "SUMPRODUCT",
	  229: "SINH",
	  230: "COSH",
	  231: "TANH",
	  232: "ASINH",
	  233: "ACOSH",
	  234: "ATANH",
	  235: "DGET",
	  236: "CREATE.OBJECT",
	  237: "VOLATILE",
	  238: "LAST.ERROR",
	  239: "CUSTOM.UNDO",
	  240: "CUSTOM.REPEAT",
	  241: "FORMULA.CONVERT",
	  242: "GET.LINK.INFO",
	  243: "TEXT.BOX",
	  244: "INFO",
	  245: "GROUP",
	  246: "GET.OBJECT",
	  247: "DB",
	  248: "PAUSE",
	  251: "RESUME",
	  252: "FREQUENCY",
	  253: "ADD.TOOLBAR",
	  254: "DELETE.TOOLBAR",
	  255: "User",
	  256: "RESET.TOOLBAR",
	  257: "EVALUATE",
	  258: "GET.TOOLBAR",
	  259: "GET.TOOL",
	  260: "SPELLING.CHECK",
	  261: "ERROR.TYPE",
	  262: "APP.TITLE",
	  263: "WINDOW.TITLE",
	  264: "SAVE.TOOLBAR",
	  265: "ENABLE.TOOL",
	  266: "PRESS.TOOL",
	  267: "REGISTER.ID",
	  268: "GET.WORKBOOK",
	  269: "AVEDEV",
	  270: "BETADIST",
	  271: "GAMMALN",
	  272: "BETAINV",
	  273: "BINOMDIST",
	  274: "CHIDIST",
	  275: "CHIINV",
	  276: "COMBIN",
	  277: "CONFIDENCE",
	  278: "CRITBINOM",
	  279: "EVEN",
	  280: "EXPONDIST",
	  281: "FDIST",
	  282: "FINV",
	  283: "FISHER",
	  284: "FISHERINV",
	  285: "FLOOR",
	  286: "GAMMADIST",
	  287: "GAMMAINV",
	  288: "CEILING",
	  289: "HYPGEOMDIST",
	  290: "LOGNORMDIST",
	  291: "LOGINV",
	  292: "NEGBINOMDIST",
	  293: "NORMDIST",
	  294: "NORMSDIST",
	  295: "NORMINV",
	  296: "NORMSINV",
	  297: "STANDARDIZE",
	  298: "ODD",
	  299: "PERMUT",
	  300: "POISSON",
	  301: "TDIST",
	  302: "WEIBULL",
	  303: "SUMXMY2",
	  304: "SUMX2MY2",
	  305: "SUMX2PY2",
	  306: "CHITEST",
	  307: "CORREL",
	  308: "COVAR",
	  309: "FORECAST",
	  310: "FTEST",
	  311: "INTERCEPT",
	  312: "PEARSON",
	  313: "RSQ",
	  314: "STEYX",
	  315: "SLOPE",
	  316: "TTEST",
	  317: "PROB",
	  318: "DEVSQ",
	  319: "GEOMEAN",
	  320: "HARMEAN",
	  321: "SUMSQ",
	  322: "KURT",
	  323: "SKEW",
	  324: "ZTEST",
	  325: "LARGE",
	  326: "SMALL",
	  327: "QUARTILE",
	  328: "PERCENTILE",
	  329: "PERCENTRANK",
	  330: "MODE",
	  331: "TRIMMEAN",
	  332: "TINV",
	  334: "MOVIE.COMMAND",
	  335: "GET.MOVIE",
	  336: "CONCATENATE",
	  337: "POWER",
	  338: "PIVOT.ADD.DATA",
	  339: "GET.PIVOT.TABLE",
	  340: "GET.PIVOT.FIELD",
	  341: "GET.PIVOT.ITEM",
	  342: "RADIANS",
	  343: "DEGREES",
	  344: "SUBTOTAL",
	  345: "SUMIF",
	  346: "COUNTIF",
	  347: "COUNTBLANK",
	  348: "SCENARIO.GET",
	  349: "OPTIONS.LISTS.GET",
	  350: "ISPMT",
	  351: "DATEDIF",
	  352: "DATESTRING",
	  353: "NUMBERSTRING",
	  354: "ROMAN",
	  355: "OPEN.DIALOG",
	  356: "SAVE.DIALOG",
	  357: "VIEW.GET",
	  358: "GETPIVOTDATA",
	  359: "HYPERLINK",
	  360: "PHONETIC",
	  361: "AVERAGEA",
	  362: "MAXA",
	  363: "MINA",
	  364: "STDEVPA",
	  365: "VARPA",
	  366: "STDEVA",
	  367: "VARA",
	  368: "BAHTTEXT",
	  369: "THAIDAYOFWEEK",
	  370: "THAIDIGIT",
	  371: "THAIMONTHOFYEAR",
	  372: "THAINUMSOUND",
	  373: "THAINUMSTRING",
	  374: "THAISTRINGLENGTH",
	  375: "ISTHAIDIGIT",
	  376: "ROUNDBAHTDOWN",
	  377: "ROUNDBAHTUP",
	  378: "THAIYEAR",
	  379: "RTD",
	  380: "CUBEVALUE",
	  381: "CUBEMEMBER",
	  382: "CUBEMEMBERPROPERTY",
	  383: "CUBERANKEDMEMBER",
	  384: "HEX2BIN",
	  385: "HEX2DEC",
	  386: "HEX2OCT",
	  387: "DEC2BIN",
	  388: "DEC2HEX",
	  389: "DEC2OCT",
	  390: "OCT2BIN",
	  391: "OCT2HEX",
	  392: "OCT2DEC",
	  393: "BIN2DEC",
	  394: "BIN2OCT",
	  395: "BIN2HEX",
	  396: "IMSUB",
	  397: "IMDIV",
	  398: "IMPOWER",
	  399: "IMABS",
	  400: "IMSQRT",
	  401: "IMLN",
	  402: "IMLOG2",
	  403: "IMLOG10",
	  404: "IMSIN",
	  405: "IMCOS",
	  406: "IMEXP",
	  407: "IMARGUMENT",
	  408: "IMCONJUGATE",
	  409: "IMAGINARY",
	  410: "IMREAL",
	  411: "COMPLEX",
	  412: "IMSUM",
	  413: "IMPRODUCT",
	  414: "SERIESSUM",
	  415: "FACTDOUBLE",
	  416: "SQRTPI",
	  417: "QUOTIENT",
	  418: "DELTA",
	  419: "GESTEP",
	  420: "ISEVEN",
	  421: "ISODD",
	  422: "MROUND",
	  423: "ERF",
	  424: "ERFC",
	  425: "BESSELJ",
	  426: "BESSELK",
	  427: "BESSELY",
	  428: "BESSELI",
	  429: "XIRR",
	  430: "XNPV",
	  431: "PRICEMAT",
	  432: "YIELDMAT",
	  433: "INTRATE",
	  434: "RECEIVED",
	  435: "DISC",
	  436: "PRICEDISC",
	  437: "YIELDDISC",
	  438: "TBILLEQ",
	  439: "TBILLPRICE",
	  440: "TBILLYIELD",
	  441: "PRICE",
	  442: "YIELD",
	  443: "DOLLARDE",
	  444: "DOLLARFR",
	  445: "NOMINAL",
	  446: "EFFECT",
	  447: "CUMPRINC",
	  448: "CUMIPMT",
	  449: "EDATE",
	  450: "EOMONTH",
	  451: "YEARFRAC",
	  452: "COUPDAYBS",
	  453: "COUPDAYS",
	  454: "COUPDAYSNC",
	  455: "COUPNCD",
	  456: "COUPNUM",
	  457: "COUPPCD",
	  458: "DURATION",
	  459: "MDURATION",
	  460: "ODDLPRICE",
	  461: "ODDLYIELD",
	  462: "ODDFPRICE",
	  463: "ODDFYIELD",
	  464: "RANDBETWEEN",
	  465: "WEEKNUM",
	  466: "AMORDEGRC",
	  467: "AMORLINC",
	  468: "CONVERT",
	  724: "SHEETJS",
	  469: "ACCRINT",
	  470: "ACCRINTM",
	  471: "WORKDAY",
	  472: "NETWORKDAYS",
	  473: "GCD",
	  474: "MULTINOMIAL",
	  475: "LCM",
	  476: "FVSCHEDULE",
	  477: "CUBEKPIMEMBER",
	  478: "CUBESET",
	  479: "CUBESETCOUNT",
	  480: "IFERROR",
	  481: "COUNTIFS",
	  482: "SUMIFS",
	  483: "AVERAGEIF",
	  484: "AVERAGEIFS"
	};
	var FtabArgc = {
	  2: 1,
	  3: 1,
	  10: 0,
	  15: 1,
	  16: 1,
	  17: 1,
	  18: 1,
	  19: 0,
	  20: 1,
	  21: 1,
	  22: 1,
	  23: 1,
	  24: 1,
	  25: 1,
	  26: 1,
	  27: 2,
	  30: 2,
	  31: 3,
	  32: 1,
	  33: 1,
	  34: 0,
	  35: 0,
	  38: 1,
	  39: 2,
	  40: 3,
	  41: 3,
	  42: 3,
	  43: 3,
	  44: 3,
	  45: 3,
	  47: 3,
	  48: 2,
	  53: 1,
	  61: 3,
	  63: 0,
	  65: 3,
	  66: 3,
	  67: 1,
	  68: 1,
	  69: 1,
	  70: 1,
	  71: 1,
	  72: 1,
	  73: 1,
	  74: 0,
	  75: 1,
	  76: 1,
	  77: 1,
	  79: 2,
	  80: 2,
	  83: 1,
	  85: 0,
	  86: 1,
	  89: 0,
	  90: 1,
	  94: 0,
	  95: 0,
	  97: 2,
	  98: 1,
	  99: 1,
	  101: 3,
	  102: 3,
	  105: 1,
	  106: 1,
	  108: 2,
	  111: 1,
	  112: 1,
	  113: 1,
	  114: 1,
	  117: 2,
	  118: 1,
	  119: 4,
	  121: 1,
	  126: 1,
	  127: 1,
	  128: 1,
	  129: 1,
	  130: 1,
	  131: 1,
	  133: 1,
	  134: 1,
	  135: 1,
	  136: 2,
	  137: 2,
	  138: 2,
	  140: 1,
	  141: 1,
	  142: 3,
	  143: 4,
	  144: 4,
	  161: 1,
	  162: 1,
	  163: 1,
	  164: 1,
	  165: 2,
	  172: 1,
	  175: 2,
	  176: 2,
	  177: 3,
	  178: 2,
	  179: 1,
	  184: 1,
	  186: 1,
	  189: 3,
	  190: 1,
	  195: 3,
	  196: 3,
	  197: 1,
	  198: 1,
	  199: 3,
	  201: 1,
	  207: 4,
	  210: 3,
	  211: 1,
	  212: 2,
	  213: 2,
	  214: 1,
	  215: 1,
	  225: 0,
	  229: 1,
	  230: 1,
	  231: 1,
	  232: 1,
	  233: 1,
	  234: 1,
	  235: 3,
	  244: 1,
	  247: 4,
	  252: 2,
	  257: 1,
	  261: 1,
	  271: 1,
	  273: 4,
	  274: 2,
	  275: 2,
	  276: 2,
	  277: 3,
	  278: 3,
	  279: 1,
	  280: 3,
	  281: 3,
	  282: 3,
	  283: 1,
	  284: 1,
	  285: 2,
	  286: 4,
	  287: 3,
	  288: 2,
	  289: 4,
	  290: 3,
	  291: 3,
	  292: 3,
	  293: 4,
	  294: 1,
	  295: 3,
	  296: 1,
	  297: 3,
	  298: 1,
	  299: 2,
	  300: 3,
	  301: 3,
	  302: 4,
	  303: 2,
	  304: 2,
	  305: 2,
	  306: 2,
	  307: 2,
	  308: 2,
	  309: 3,
	  310: 2,
	  311: 2,
	  312: 2,
	  313: 2,
	  314: 2,
	  315: 2,
	  316: 4,
	  325: 2,
	  326: 2,
	  327: 2,
	  328: 2,
	  331: 2,
	  332: 2,
	  337: 2,
	  342: 1,
	  343: 1,
	  346: 2,
	  347: 1,
	  350: 4,
	  351: 3,
	  352: 1,
	  353: 2,
	  360: 1,
	  368: 1,
	  369: 1,
	  370: 1,
	  371: 1,
	  372: 1,
	  373: 1,
	  374: 1,
	  375: 1,
	  376: 1,
	  377: 1,
	  378: 1,
	  382: 3,
	  385: 1,
	  392: 1,
	  393: 1,
	  396: 2,
	  397: 2,
	  398: 2,
	  399: 1,
	  400: 1,
	  401: 1,
	  402: 1,
	  403: 1,
	  404: 1,
	  405: 1,
	  406: 1,
	  407: 1,
	  408: 1,
	  409: 1,
	  410: 1,
	  414: 4,
	  415: 1,
	  416: 1,
	  417: 2,
	  420: 1,
	  421: 1,
	  422: 2,
	  424: 1,
	  425: 2,
	  426: 2,
	  427: 2,
	  428: 2,
	  430: 3,
	  438: 3,
	  439: 3,
	  440: 3,
	  443: 2,
	  444: 2,
	  445: 2,
	  446: 2,
	  447: 6,
	  448: 6,
	  449: 2,
	  450: 2,
	  464: 2,
	  468: 3,
	  476: 2,
	  479: 1,
	  480: 2,
	  65535: 0
	};
	/* Part 3 TODO: actually parse formulae */
	function ods_to_csf_formula(f/*:string*/)/*:string*/ {
		if(f.slice(0,3) == "of:") f = f.slice(3);
		/* 5.2 Basic Expressions */
		if(f.charCodeAt(0) == 61) {
			f = f.slice(1);
			if(f.charCodeAt(0) == 61) f = f.slice(1);
		}
		f = f.replace(/COM\.MICROSOFT\./g, "");
		/* Part 3 Section 5.8 References */
		f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) { return $1.replace(/\./g,""); });
		/* TODO: something other than this */
		f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
		return f.replace(/[;~]/g,",").replace(/\|/g,";");
	}

	function ods_to_csf_3D(r/*:string*/)/*:[string, string]*/ {
		var a = r.split(":");
		var s = a[0].split(".")[0];
		return [s, a[0].split(".")[1] + (a.length > 1 ? (":" + (a[1].split(".")[1] || a[1].split(".")[0])) : "")];
	}

	var strs = {}; // shared strings
	var _ssfopts = {}; // spreadsheet formatting options

	function default_margins(margins/*:Margins*/, mode/*:?string*/) {
		if(!margins) return;
		var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
		if(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
		if(margins.left   == null) margins.left   = defs[0];
		if(margins.right  == null) margins.right  = defs[1];
		if(margins.top    == null) margins.top    = defs[2];
		if(margins.bottom == null) margins.bottom = defs[3];
		if(margins.header == null) margins.header = defs[4];
		if(margins.footer == null) margins.footer = defs[5];
	}

	function safe_format(p/*:Cell*/, fmtid/*:number*/, fillid/*:?number*/, opts, themes, styles) {
		try {
			if(opts.cellNF) p.z = table_fmt[fmtid];
		} catch(e) { if(opts.WTF) throw e; }
		if(p.t === 'z' && !opts.cellStyles) return;
		if(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
		if((!opts || opts.cellText !== false) && p.t !== 'z') try {
			if(table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
			if(p.t === 'e') p.w = p.w || BErr[p.v];
			else if(fmtid === 0) {
				if(p.t === 'n') {
					if((p.v|0) === p.v) p.w = p.v.toString(10);
					else p.w = SSF_general_num(p.v);
				}
				else if(p.t === 'd') {
					var dd = datenum(p.v);
					if((dd|0) === dd) p.w = dd.toString(10);
					else p.w = SSF_general_num(dd);
				}
				else if(p.v === undefined) return "";
				else p.w = SSF_general(p.v,_ssfopts);
			}
			else if(p.t === 'd') p.w = SSF_format(fmtid,datenum(p.v),_ssfopts);
			else p.w = SSF_format(fmtid,p.v,_ssfopts);
		} catch(e) { if(opts.WTF) throw e; }
		if(!opts.cellStyles) return;
		if(fillid != null) try {
			p.s = styles.Fills[fillid];
			if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
				p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
				if(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
			}
			if (p.s.bgColor && p.s.bgColor.theme) {
				p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
				if(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
			}
		} catch(e) { if(opts.WTF && styles.Fills) throw e; }
	}
	function parse_ws_xml_dim(ws/*:Worksheet*/, s/*:string*/) {
		var d = safe_decode_range(s);
		if(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws["!ref"] = encode_range(d);
	}
	var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
	var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
	var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
	var dimregex = /"(\w*:\w*)"/;
	var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
	var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
	var marginregex= /<(?:\w:)?pageMargins[^>]*\/>/g;
	var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
	var sheetprregex2= /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
	var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;

	/* 18.3 Worksheets */
	function parse_ws_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
		if(!data) return data;
		if(!rels) rels = {'!id':{}};

		/* 18.3.1.99 worksheet CT_Worksheet */
		var s = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
		var refguess/*:Range*/ = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} }/*:any*/);

		var data1 = "", data2 = "";
		var mtch/*:?any*/ = data.match(sheetdataregex);
		if(mtch) {
			data1 = data.slice(0, mtch.index);
			data2 = data.slice(mtch.index + mtch[0].length);
		} else data1 = data2 = data;

		/* 18.3.1.82 sheetPr CT_SheetPr */
		var sheetPr = data1.match(sheetprregex);
		if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
		else if((sheetPr = data1.match(sheetprregex2))) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1]||"", s, wb, idx);

		/* 18.3.1.35 dimension CT_SheetDimension */
		var ridx = (data1.match(/<(?:\w*:)?dimension/)||{index:-1}).index;
		if(ridx > 0) {
			var ref = data1.slice(ridx,ridx+50).match(dimregex);
			if(ref) parse_ws_xml_dim(s, ref[1]);
		}

		/* 18.3.1.88 sheetViews CT_SheetViews */
		var svs = data1.match(svsregex);
		if(svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);

		/* 18.3.1.17 cols CT_Cols */
		var columns/*:Array<ColInfo>*/ = [];
		if(opts.cellStyles) {
			/* 18.3.1.13 col CT_Col */
			var cols = data1.match(colregex);
			if(cols) parse_ws_xml_cols(columns, cols);
		}

		/* 18.3.1.80 sheetData CT_SheetData ? */
		if(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);

		/* 18.3.1.2  autoFilter CT_AutoFilter */
		var afilter = data2.match(afregex);
		if(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);

		/* 18.3.1.55 mergeCells CT_MergeCells */
		var merges/*:Array<Range>*/ = [];
		var _merge = data2.match(mergecregex);
		if(_merge) for(ridx = 0; ridx != _merge.length; ++ridx)
			merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("\"")+1));

		/* 18.3.1.48 hyperlinks CT_Hyperlinks */
		var hlink = data2.match(hlinkregex);
		if(hlink) parse_ws_xml_hlinks(s, hlink, rels);

		/* 18.3.1.62 pageMargins CT_PageMargins */
		var margins = data2.match(marginregex);
		if(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));

		if(!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
		if(opts.sheetRows > 0 && s["!ref"]) {
			var tmpref = safe_decode_range(s["!ref"]);
			if(opts.sheetRows <= +tmpref.e.r) {
				tmpref.e.r = opts.sheetRows - 1;
				if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
				if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
				if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
				if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
				s["!fullref"] = s["!ref"];
				s["!ref"] = encode_range(tmpref);
			}
		}
		if(columns.length > 0) s["!cols"] = columns;
		if(merges.length > 0) s["!merges"] = merges;
		return s;
	}

	/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */
	function parse_ws_xml_sheetpr(sheetPr/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
		var data = parsexmltag(sheetPr);
		if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
		if(data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
	}
	function parse_ws_xml_sheetpr2(sheetPr/*:string*/, body/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
		parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
	}

	function parse_ws_xml_hlinks(s, data/*:Array<string>*/, rels) {
		var dense = Array.isArray(s);
		for(var i = 0; i != data.length; ++i) {
			var val = parsexmltag(utf8read(data[i]), true);
			if(!val.ref) return;
			var rel = ((rels || {})['!id']||[])[val.id];
			if(rel) {
				val.Target = rel.Target;
				if(val.location) val.Target += "#"+unescapexml(val.location);
			} else {
				val.Target = "#" + unescapexml(val.location);
				rel = {Target: val.Target, TargetMode: 'Internal'};
			}
			val.Rel = rel;
			if(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }
			var rng = safe_decode_range(val.ref);
			for(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {
				var addr = encode_cell({c:C,r:R});
				if(dense) {
					if(!s[R]) s[R] = [];
					if(!s[R][C]) s[R][C] = {t:"z",v:undefined};
					s[R][C].l = val;
				} else {
					if(!s[addr]) s[addr] = {t:"z",v:undefined};
					s[addr].l = val;
				}
			}
		}
	}

	function parse_ws_xml_margins(margin) {
		var o = {};
		["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
			if(margin[k]) o[k] = parseFloat(margin[k]);
		});
		return o;
	}

	function parse_ws_xml_cols(columns, cols) {
		var seencol = false;
		for(var coli = 0; coli != cols.length; ++coli) {
			var coll = parsexmltag(cols[coli], true);
			if(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
			var colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;
			if(coll.outlineLevel) coll.level = (+coll.outlineLevel || 0);
			delete coll.min; delete coll.max; coll.width = +coll.width;
			if(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }
			process_col(coll);
			while(colm <= colM) columns[colm++] = dup(coll);
		}
	}

	function parse_ws_xml_autofilter(data/*:string*/) {
		var o = { ref: (data.match(/ref="([^"]*)"/)||[])[1]};
		return o;
	}

	/* 18.3.1.88 sheetViews CT_SheetViews */
	/* 18.3.1.87 sheetView CT_SheetView */
	var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
	function parse_ws_xml_sheetviews(data, wb/*:WBWBProps*/) {
		if(!wb.Views) wb.Views = [{}];
		(data.match(sviewregex)||[]).forEach(function(r/*:string*/, i/*:number*/) {
			var tag = parsexmltag(r);
			// $FlowIgnore
			if(!wb.Views[i]) wb.Views[i] = {};
			// $FlowIgnore
			if(+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
			// $FlowIgnore
			if(parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
		});
	}

	var parse_ws_xml_data = /*#__PURE__*/(function() {
		var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
		var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
		var refregex = /ref=["']([^"']*)["']/;
		var match_v = matchtag("v"), match_f = matchtag("f");

	return function parse_ws_xml_data(sdata/*:string*/, s, opts, guess/*:Range*/, themes, styles) {
		var ri = 0, x = "", cells/*:Array<string>*/ = [], cref/*:?Array<string>*/ = [], idx=0, i=0, cc=0, d="", p/*:any*/;
		var tag, tagr = 0, tagc = 0;
		var sstr, ftag;
		var fmtid = 0, fillid = 0;
		var do_format = Array.isArray(styles.CellXf), cf;
		var arrayf/*:Array<[Range, string]>*/ = [];
		var sharedf = [];
		var dense = Array.isArray(s);
		var rows/*:Array<RowInfo>*/ = [], rowobj = {}, rowrite = false;
		var sheetStubs = !!opts.sheetStubs;
		for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
			x = marr[mt].trim();
			var xlen = x.length;
			if(xlen === 0) continue;

			/* 18.3.1.73 row CT_Row */
			var rstarti = 0;
			outa: for(ri = 0; ri < xlen; ++ri) switch(/*x.charCodeAt(ri)*/x[ri]) {
				case ">" /*62*/:
					if(/*x.charCodeAt(ri-1) != 47*/x[ri-1] != "/") { ++ri; break outa; }
					if(opts && opts.cellStyles) {
						// TODO: avoid duplication
						tag = parsexmltag(x.slice(rstarti,ri), true);
						tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
						if(opts.sheetRows && opts.sheetRows < tagr) continue;
						rowobj = {}; rowrite = false;
						if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
						if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
						if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
						if(rowrite) rows[tagr-1] = rowobj;
					}
					break;
				case "<" /*60*/: rstarti = ri; break;
			}
			if(rstarti >= ri) break;
			tag = parsexmltag(x.slice(rstarti,ri), true);
			tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
			if(opts.sheetRows && opts.sheetRows < tagr) continue;
			if(guess.s.r > tagr - 1) guess.s.r = tagr - 1;
			if(guess.e.r < tagr - 1) guess.e.r = tagr - 1;

			if(opts && opts.cellStyles) {
				rowobj = {}; rowrite = false;
				if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
				if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
				if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
				if(rowrite) rows[tagr-1] = rowobj;
			}

			/* 18.3.1.4 c CT_Cell */
			cells = x.slice(ri).split(cellregex);
			for(var rslice = 0; rslice != cells.length; ++rslice) if(cells[rslice].trim().charAt(0) != "<") break;
			cells = cells.slice(rslice);
			for(ri = 0; ri != cells.length; ++ri) {
				x = cells[ri].trim();
				if(x.length === 0) continue;
				cref = x.match(rregex); idx = ri; i=0; cc=0;
				x = "<c " + (x.slice(0,1)=="<"?">":"") + x;
				if(cref != null && cref.length === 2) {
					idx = 0; d=cref[1];
					for(i=0; i != d.length; ++i) {
						if((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;
						idx = 26*idx + cc;
					}
					--idx;
					tagc = idx;
				} else ++tagc;
				for(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;
				tag = parsexmltag(x.slice(0,i), true);
				if(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});
				d = x.slice(i);
				p = ({t:""}/*:any*/);

				if((cref=d.match(match_v))!= null && /*::cref != null && */cref[1] !== '') p.v=unescapexml(cref[1]);
				if(opts.cellFormula) {
					if((cref=d.match(match_f))!= null && /*::cref != null && */cref[1] !== '') {
						/* TODO: match against XLSXFutureFunctions */
						p.f=unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
						if(!opts.xlfn) p.f = _xlfn(p.f);
						if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="array"') > -1) {
							p.F = (d.match(refregex)||[])[1];
							if(p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
						} else if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="shared"') > -1) {
							// TODO: parse formula
							ftag = parsexmltag(cref[0]);
							var ___f = unescapexml(utf8read(cref[1]));
							if(!opts.xlfn) ___f = _xlfn(___f);
							sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
						}
					} else if((cref=d.match(/<f[^>]*\/>/))) {
						ftag = parsexmltag(cref[0]);
						if(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]/*[0].ref*/, tag.r);
					}
					/* TODO: factor out contains logic */
					var _tag = decode_cell(tag.r);
					for(i = 0; i < arrayf.length; ++i)
						if(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)
							if(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
								p.F = arrayf[i][1];
				}

				if(tag.t == null && p.v === undefined) {
					if(p.f || p.F) {
						p.v = 0; p.t = "n";
					} else if(!sheetStubs) continue;
					else p.t = "z";
				}
				else p.t = tag.t || "n";
				if(guess.s.c > tagc) guess.s.c = tagc;
				if(guess.e.c < tagc) guess.e.c = tagc;
				/* 18.18.11 t ST_CellType */
				switch(p.t) {
					case 'n':
						if(p.v == "" || p.v == null) {
							if(!sheetStubs) continue;
							p.t = 'z';
						} else p.v = parseFloat(p.v);
						break;
					case 's':
						if(typeof p.v == 'undefined') {
							if(!sheetStubs) continue;
							p.t = 'z';
						} else {
							sstr = strs[parseInt(p.v, 10)];
							p.v = sstr.t;
							p.r = sstr.r;
							if(opts.cellHTML) p.h = sstr.h;
						}
						break;
					case 'str':
						p.t = "s";
						p.v = (p.v!=null) ? utf8read(p.v) : '';
						if(opts.cellHTML) p.h = escapehtml(p.v);
						break;
					case 'inlineStr':
						cref = d.match(isregex);
						p.t = 's';
						if(cref != null && (sstr = parse_si(cref[1]))) {
							p.v = sstr.t;
							if(opts.cellHTML) p.h = sstr.h;
						} else p.v = "";
						break;
					case 'b': p.v = parsexmlbool(p.v); break;
					case 'd':
						if(opts.cellDates) p.v = parseDate(p.v, 1);
						else { p.v = datenum(parseDate(p.v, 1)); p.t = 'n'; }
						break;
					/* error string in .w, number in .v */
					case 'e':
						if(!opts || opts.cellText !== false) p.w = p.v;
						p.v = RBErr[p.v]; break;
				}
				/* formatting */
				fmtid = fillid = 0;
				cf = null;
				if(do_format && tag.s !== undefined) {
					cf = styles.CellXf[tag.s];
					if(cf != null) {
						if(cf.numFmtId != null) fmtid = cf.numFmtId;
						if(opts.cellStyles) {
							if(cf.fillId != null) fillid = cf.fillId;
						}
					}
				}
				safe_format(p, fmtid, fillid, opts, themes, styles);
				if(opts.cellDates && do_format && p.t == 'n' && fmt_is_date(table_fmt[fmtid])) { p.t = 'd'; p.v = numdate(p.v); }
				if(tag.cm && opts.xlmeta) {
					var cm = (opts.xlmeta.Cell||[])[+tag.cm-1];
					if(cm && cm.type == 'XLDAPR') p.D = true;
				}
				if(dense) {
					var _r = decode_cell(tag.r);
					if(!s[_r.r]) s[_r.r] = [];
					s[_r.r][_r.c] = p;
				} else s[tag.r] = p;
			}
		}
		if(rows.length > 0) s['!rows'] = rows;
	}; })();

	/* [MS-XLSB] 2.4.726 BrtRowHdr */
	function parse_BrtRowHdr(data, length) {
		var z = ({}/*:any*/);
		var tgt = data.l + length;
		z.r = data.read_shift(4);
		data.l += 4; // TODO: ixfe
		var miyRw = data.read_shift(2);
		data.l += 1; // TODO: top/bot padding
		var flags = data.read_shift(1);
		data.l = tgt;
		if(flags & 0x07) z.level = flags & 0x07;
		if(flags & 0x10) z.hidden = true;
		if(flags & 0x20) z.hpt = miyRw / 20;
		return z;
	}

	/* [MS-XLSB] 2.4.820 BrtWsDim */
	var parse_BrtWsDim = parse_UncheckedRfX;

	/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */
	function parse_BrtWsFmtInfo(/*::data, length*/) {
	}
	//function write_BrtWsFmtInfo(ws, o) { }

	/* [MS-XLSB] 2.4.823 BrtWsProp */
	function parse_BrtWsProp(data, length) {
		var z = {};
		var f = data[data.l]; ++data.l;
		z.above = !(f & 0x40);
		z.left  = !(f & 0x80);
		/* TODO: pull flags */
		data.l += 18;
		z.name = parse_XLSBCodeName(data);
		return z;
	}

	/* [MS-XLSB] 2.4.306 BrtCellBlank */
	function parse_BrtCellBlank(data) {
		var cell = parse_XLSBCell(data);
		return [cell];
	}
	function parse_BrtShortBlank(data) {
		var cell = parse_XLSBShortCell(data);
		return [cell];
	}

	/* [MS-XLSB] 2.4.307 BrtCellBool */
	function parse_BrtCellBool(data) {
		var cell = parse_XLSBCell(data);
		var fBool = data.read_shift(1);
		return [cell, fBool, 'b'];
	}
	function parse_BrtShortBool(data) {
		var cell = parse_XLSBShortCell(data);
		var fBool = data.read_shift(1);
		return [cell, fBool, 'b'];
	}

	/* [MS-XLSB] 2.4.308 BrtCellError */
	function parse_BrtCellError(data) {
		var cell = parse_XLSBCell(data);
		var bError = data.read_shift(1);
		return [cell, bError, 'e'];
	}
	function parse_BrtShortError(data) {
		var cell = parse_XLSBShortCell(data);
		var bError = data.read_shift(1);
		return [cell, bError, 'e'];
	}


	/* [MS-XLSB] 2.4.311 BrtCellIsst */
	function parse_BrtCellIsst(data) {
		var cell = parse_XLSBCell(data);
		var isst = data.read_shift(4);
		return [cell, isst, 's'];
	}
	function parse_BrtShortIsst(data) {
		var cell = parse_XLSBShortCell(data);
		var isst = data.read_shift(4);
		return [cell, isst, 's'];
	}

	/* [MS-XLSB] 2.4.313 BrtCellReal */
	function parse_BrtCellReal(data) {
		var cell = parse_XLSBCell(data);
		var value = parse_Xnum(data);
		return [cell, value, 'n'];
	}
	function parse_BrtShortReal(data) {
		var cell = parse_XLSBShortCell(data);
		var value = parse_Xnum(data);
		return [cell, value, 'n'];
	}

	/* [MS-XLSB] 2.4.314 BrtCellRk */
	function parse_BrtCellRk(data) {
		var cell = parse_XLSBCell(data);
		var value = parse_RkNumber(data);
		return [cell, value, 'n'];
	}
	function parse_BrtShortRk(data) {
		var cell = parse_XLSBShortCell(data);
		var value = parse_RkNumber(data);
		return [cell, value, 'n'];
	}

	/* [MS-XLSB] 2.4.323 BrtCellRString */
	function parse_BrtCellRString(data) {
		var cell = parse_XLSBCell(data);
		var value = parse_RichStr(data);
		return [cell, value, 'is'];
	}

	/* [MS-XLSB] 2.4.317 BrtCellSt */
	function parse_BrtCellSt(data) {
		var cell = parse_XLSBCell(data);
		var value = parse_XLWideString(data);
		return [cell, value, 'str'];
	}
	function parse_BrtShortSt(data) {
		var cell = parse_XLSBShortCell(data);
		var value = parse_XLWideString(data);
		return [cell, value, 'str'];
	}

	/* [MS-XLSB] 2.4.653 BrtFmlaBool */
	function parse_BrtFmlaBool(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = data.read_shift(1);
		var o = [cell, value, 'b'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.654 BrtFmlaError */
	function parse_BrtFmlaError(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = data.read_shift(1);
		var o = [cell, value, 'e'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.655 BrtFmlaNum */
	function parse_BrtFmlaNum(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = parse_Xnum(data);
		var o = [cell, value, 'n'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.656 BrtFmlaString */
	function parse_BrtFmlaString(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = parse_XLWideString(data);
		var o = [cell, value, 'str'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.682 BrtMergeCell */
	var parse_BrtMergeCell = parse_UncheckedRfX;

	/* [MS-XLSB] 2.4.662 BrtHLink */
	function parse_BrtHLink(data, length/*::, opts*/) {
		var end = data.l + length;
		var rfx = parse_UncheckedRfX(data);
		var relId = parse_XLNullableWideString(data);
		var loc = parse_XLWideString(data);
		var tooltip = parse_XLWideString(data);
		var display = parse_XLWideString(data);
		data.l = end;
		var o = ({rfx:rfx, relId:relId, loc:loc, display:display}/*:any*/);
		if(tooltip) o.Tooltip = tooltip;
		return o;
	}

	/* [MS-XLSB] 2.4.692 BrtPane */
	function parse_BrtPane(/*data, length, opts*/) {
	}

	/* [MS-XLSB] 2.4.6 BrtArrFmla */
	function parse_BrtArrFmla(data, length, opts) {
		var end = data.l + length;
		var rfx = parse_RfX(data);
		var fAlwaysCalc = data.read_shift(1);
		var o = [rfx]; o[2] = fAlwaysCalc;
		if(opts.cellFormula) {
			var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
			o[1] = formula;
		} else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.750 BrtShrFmla */
	function parse_BrtShrFmla(data, length, opts) {
		var end = data.l + length;
		var rfx = parse_UncheckedRfX(data);
		var o = [rfx];
		if(opts.cellFormula) {
			var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
			o[1] = formula;
			data.l = end;
		} else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.678 BrtMargins */
	var BrtMarginKeys = ["left","right","top","bottom","header","footer"];
	function parse_BrtMargins(data/*::, length, opts*/)/*:Margins*/ {
		var margins = ({}/*:any*/);
		BrtMarginKeys.forEach(function(k) { margins[k] = parse_Xnum(data); });
		return margins;
	}

	/* [MS-XLSB] 2.4.299 BrtBeginWsView */
	function parse_BrtBeginWsView(data/*::, length, opts*/) {
		var f = data.read_shift(2);
		data.l += 28;
		return { RTL: f & 0x20 };
	}

	function parse_BrtDVal(/*data, length, opts*/) {
	}
	function parse_BrtDVal14(/*data, length, opts*/) {
	}
	/* [MS-XLSB] 2.1.7.61 Worksheet */
	function parse_ws_bin(data, _opts, idx, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
		if(!data) return data;
		var opts = _opts || {};
		if(!rels) rels = {'!id':{}};
		var s/*:Worksheet*/ = (opts.dense ? [] : {});

		var ref;
		var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
		var pass = false, end = false;
		var row, p, cf, R, C, addr, sstr, rr, cell/*:Cell*/;
		var merges/*:Array<Range>*/ = [];
		opts.biff = 12;
		opts['!row'] = 0;

		var ai = 0, af = false;

		var arrayf/*:Array<[Range, string]>*/ = [];
		var sharedf = {};
		var supbooks = opts.supbooks || /*::(*/wb/*:: :any)*/.supbooks || ([[]]/*:any*/);
		supbooks.sharedf = sharedf;
		supbooks.arrayf = arrayf;
		supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });
		if(!opts.supbooks) {
			opts.supbooks = supbooks;
			if(wb.Names) for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];
		}

		var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
		var seencol = false;

		XLSBRecordEnum[0x0010] = { n:"BrtShortReal", f:parse_BrtShortReal };

		var cm;

		recordhopper(data, function ws_parse(val, RR, RT) {
			if(end) return;
			switch(RT) {
				case 0x0094: /* 'BrtWsDim' */
					ref = val; break;
				case 0x0000: /* 'BrtRowHdr' */
					row = val;
					if(opts.sheetRows && opts.sheetRows <= row.r) end=true;
					rr = encode_row(R = row.r);
					opts['!row'] = row.r;
					if(val.hidden || val.hpt || val.level != null) {
						if(val.hpt) val.hpx = pt2px(val.hpt);
						rowinfo[val.r] = val;
					}
					break;

				case 0x0002: /* 'BrtCellRk' */
				case 0x0003: /* 'BrtCellError' */
				case 0x0004: /* 'BrtCellBool' */
				case 0x0005: /* 'BrtCellReal' */
				case 0x0006: /* 'BrtCellSt' */
				case 0x0007: /* 'BrtCellIsst' */
				case 0x0008: /* 'BrtFmlaString' */
				case 0x0009: /* 'BrtFmlaNum' */
				case 0x000A: /* 'BrtFmlaBool' */
				case 0x000B: /* 'BrtFmlaError' */
				case 0x000D: /* 'BrtShortRk' */
				case 0x000E: /* 'BrtShortError' */
				case 0x000F: /* 'BrtShortBool' */
				case 0x0010: /* 'BrtShortReal' */
				case 0x0011: /* 'BrtShortSt' */
				case 0x0012: /* 'BrtShortIsst' */
				case 0x003E: /* 'BrtCellRString' */
					p = ({t:val[2]}/*:any*/);
					switch(val[2]) {
						case 'n': p.v = val[1]; break;
						case 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;
						case 'b': p.v = val[1] ? true : false; break;
						case 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;
						case 'str': p.t = 's'; p.v = val[1]; break;
						case 'is': p.t = 's'; p.v = val[1].t; break;
					}
					if((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.numFmtId,null,opts, themes, styles);
					C = val[0].c == -1 ? C + 1 : val[0].c;
					if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
					else s[encode_col(C) + rr] = p;
					if(opts.cellFormula) {
						af = false;
						for(ai = 0; ai < arrayf.length; ++ai) {
							var aii = arrayf[ai];
							if(row.r >= aii[0].s.r && row.r <= aii[0].e.r)
								if(C >= aii[0].s.c && C <= aii[0].e.c) {
									p.F = encode_range(aii[0]); af = true;
								}
						}
						if(!af && val.length > 3) p.f = val[3];
					}

					if(refguess.s.r > row.r) refguess.s.r = row.r;
					if(refguess.s.c > C) refguess.s.c = C;
					if(refguess.e.r < row.r) refguess.e.r = row.r;
					if(refguess.e.c < C) refguess.e.c = C;
					if(opts.cellDates && cf && p.t == 'n' && fmt_is_date(table_fmt[cf.numFmtId])) {
						var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
					}
					if(cm) {
						if(cm.type == 'XLDAPR') p.D = true;
						cm = undefined;
					}
					break;

				case 0x0001: /* 'BrtCellBlank' */
				case 0x000C: /* 'BrtShortBlank' */
					if(!opts.sheetStubs || pass) break;
					p = ({t:'z',v:undefined}/*:any*/);
					C = val[0].c == -1 ? C + 1 : val[0].c;
					if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
					else s[encode_col(C) + rr] = p;
					if(refguess.s.r > row.r) refguess.s.r = row.r;
					if(refguess.s.c > C) refguess.s.c = C;
					if(refguess.e.r < row.r) refguess.e.r = row.r;
					if(refguess.e.c < C) refguess.e.c = C;
					if(cm) {
						if(cm.type == 'XLDAPR') p.D = true;
						cm = undefined;
					}
					break;

				case 0x00B0: /* 'BrtMergeCell' */
					merges.push(val); break;

				case 0x0031: { /* 'BrtCellMeta' */
					cm = ((opts.xlmeta||{}).Cell||[])[val-1];
				} break;

				case 0x01EE: /* 'BrtHLink' */
					var rel = rels['!id'][val.relId];
					if(rel) {
						val.Target = rel.Target;
						if(val.loc) val.Target += "#"+val.loc;
						val.Rel = rel;
					} else if(val.relId == '') {
						val.Target = "#" + val.loc;
					}
					for(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {
						if(opts.dense) {
							if(!s[R]) s[R] = [];
							if(!s[R][C]) s[R][C] = {t:'z',v:undefined};
							s[R][C].l = val;
						} else {
							addr = encode_cell({c:C,r:R});
							if(!s[addr]) s[addr] = {t:'z',v:undefined};
							s[addr].l = val;
						}
					}
					break;

				case 0x01AA: /* 'BrtArrFmla' */
					if(!opts.cellFormula) break;
					arrayf.push(val);
					cell = ((opts.dense ? s[R][C] : s[encode_col(C) + rr])/*:any*/);
					cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
					cell.F = encode_range(val[0]);
					break;
				case 0x01AB: /* 'BrtShrFmla' */
					if(!opts.cellFormula) break;
					sharedf[encode_cell(val[0].s)] = val[1];
					cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
					cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
					break;

				/* identical to 'ColInfo' in XLS */
				case 0x003C: /* 'BrtColInfo' */
					if(!opts.cellStyles) break;
					while(val.e >= val.s) {
						colinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01), level: val.level };
						if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
						process_col(colinfo[val.e+1]);
					}
					break;

				case 0x00A1: /* 'BrtBeginAFilter' */
					s['!autofilter'] = { ref:encode_range(val) };
					break;

				case 0x01DC: /* 'BrtMargins' */
					s['!margins'] = val;
					break;

				case 0x0093: /* 'BrtWsProp' */
					if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
					if(val.name) wb.Sheets[idx].CodeName = val.name;
					if(val.above || val.left) s['!outline'] = { above: val.above, left: val.left };
					break;

				case 0x0089: /* 'BrtBeginWsView' */
					if(!wb.Views) wb.Views = [{}];
					if(!wb.Views[0]) wb.Views[0] = {};
					if(val.RTL) wb.Views[0].RTL = true;
					break;

				case 0x01E5: /* 'BrtWsFmtInfo' */
					break;

				case 0x0040: /* 'BrtDVal' */
				case 0x041D: /* 'BrtDVal14' */
					break;

				case 0x0097: /* 'BrtPane' */
					break;
				case 0x0098: /* 'BrtSel' */
				case 0x00AF: /* 'BrtAFilterDateGroupItem' */
				case 0x0284: /* 'BrtActiveX' */
				case 0x0271: /* 'BrtBigName' */
				case 0x0232: /* 'BrtBkHim' */
				case 0x018C: /* 'BrtBrk' */
				case 0x0458: /* 'BrtCFIcon' */
				case 0x047A: /* 'BrtCFRuleExt' */
				case 0x01D7: /* 'BrtCFVO' */
				case 0x041A: /* 'BrtCFVO14' */
				case 0x0289: /* 'BrtCellIgnoreEC' */
				case 0x0451: /* 'BrtCellIgnoreEC14' */
				case 0x024D: /* 'BrtCellSmartTagProperty' */
				case 0x025F: /* 'BrtCellWatch' */
				case 0x0234: /* 'BrtColor' */
				case 0x041F: /* 'BrtColor14' */
				case 0x00A8: /* 'BrtColorFilter' */
				case 0x00AE: /* 'BrtCustomFilter' */
				case 0x049C: /* 'BrtCustomFilter14' */
				case 0x01F3: /* 'BrtDRef' */
				case 0x01FB: /* 'BrtDXF' */
				case 0x0226: /* 'BrtDrawing' */
				case 0x00AB: /* 'BrtDynamicFilter' */
				case 0x00A7: /* 'BrtFilter' */
				case 0x0499: /* 'BrtFilter14' */
				case 0x00A9: /* 'BrtIconFilter' */
				case 0x049D: /* 'BrtIconFilter14' */
				case 0x0227: /* 'BrtLegacyDrawing' */
				case 0x0228: /* 'BrtLegacyDrawingHF' */
				case 0x0295: /* 'BrtListPart' */
				case 0x027F: /* 'BrtOleObject' */
				case 0x01DE: /* 'BrtPageSetup' */
				case 0x0219: /* 'BrtPhoneticInfo' */
				case 0x01DD: /* 'BrtPrintOptions' */
				case 0x0218: /* 'BrtRangeProtection' */
				case 0x044F: /* 'BrtRangeProtection14' */
				case 0x02A8: /* 'BrtRangeProtectionIso' */
				case 0x0450: /* 'BrtRangeProtectionIso14' */
				case 0x0400: /* 'BrtRwDescent' */
				case 0x0297: /* 'BrtSheetCalcProp' */
				case 0x0217: /* 'BrtSheetProtection' */
				case 0x02A6: /* 'BrtSheetProtectionIso' */
				case 0x01F8: /* 'BrtSlc' */
				case 0x0413: /* 'BrtSparkline' */
				case 0x01AC: /* 'BrtTable' */
				case 0x00AA: /* 'BrtTop10Filter' */
				case 0x0C00: /* 'BrtUid' */
				case 0x0032: /* 'BrtValueMeta' */
				case 0x0816: /* 'BrtWebExtension' */
				case 0x0415: /* 'BrtWsFmtInfoEx14' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */
	 pass = true; break;
				case 0x0026: /* 'BrtACEnd' */
	 pass = false; break;

				default:
					if(RR.T);
					else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		}, opts);

		delete opts.supbooks;
		delete opts['!row'];

		if(!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
		if(opts.sheetRows && s["!ref"]) {
			var tmpref = safe_decode_range(s["!ref"]);
			if(opts.sheetRows <= +tmpref.e.r) {
				tmpref.e.r = opts.sheetRows - 1;
				if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
				if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
				if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
				if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
				s["!fullref"] = s["!ref"];
				s["!ref"] = encode_range(tmpref);
			}
		}
		if(merges.length > 0) s["!merges"] = merges;
		if(colinfo.length > 0) s["!cols"] = colinfo;
		if(rowinfo.length > 0) s["!rows"] = rowinfo;
		return s;
	}
	function parse_Cache(data/*:string*/)/*:[Array<number|string>, string, ?string]*/ {
		var col/*:Array<number|string>*/ = [];
		var num = data.match(/^<c:numCache>/);
		var f;

		/* 21.2.2.150 pt CT_NumVal */
		(data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(pt) {
			var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
			if(!q) return;
			col[+q[1]] = num ? +q[2] : q[2];
		});

		/* 21.2.2.71 formatCode CT_Xstring */
		var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["","General"])[1]);

		(data.match(/<c:f>(.*?)<\/c:f>/mg)||[]).forEach(function(F) { f = F.replace(/<.*?>/g,""); });

		return [col, nf, f];
	}

	/* 21.2 DrawingML - Charts */
	function parse_chart(data/*:?string*/, name/*:string*/, opts, rels, wb, csheet) {
		var cs/*:Worksheet*/ = ((csheet || {"!type":"chart"})/*:any*/);
		if(!data) return csheet;
		/* 21.2.2.27 chart CT_Chart */

		var C = 0, R = 0, col = "A";
		var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };

		/* 21.2.2.120 numCache CT_NumData */
		(data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(nc) {
			var cache = parse_Cache(nc);
			refguess.s.r = refguess.s.c = 0;
			refguess.e.c = C;
			col = encode_col(C);
			cache[0].forEach(function(n,i) {
				cs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };
				R = i;
			});
			if(refguess.e.r < R) refguess.e.r = R;
			++C;
		});
		if(C > 0) cs["!ref"] = encode_range(refguess);
		return cs;
	}
	/* 18.3 Worksheets also covers Chartsheets */
	function parse_cs_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
		if(!data) return data;
		/* 18.3.1.12 chartsheet CT_ChartSheet */
		if(!rels) rels = {'!id':{}};
		var s = ({'!type':"chart", '!drawel':null, '!rel':""}/*:any*/);
		var m;

		/* 18.3.1.83 sheetPr CT_ChartsheetPr */
		var sheetPr = data.match(sheetprregex);
		if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);

		/* 18.3.1.36 drawing CT_Drawing */
		if((m = data.match(/drawing r:id="(.*?)"/))) s['!rel'] = m[1];

		if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
		return s;
	}

	/* [MS-XLSB] 2.4.331 BrtCsProp */
	function parse_BrtCsProp(data, length/*:number*/) {
		data.l += 10;
		var name = parse_XLWideString(data);
		return { name: name };
	}

	/* [MS-XLSB] 2.1.7.7 Chart Sheet */
	function parse_cs_bin(data, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
		if(!data) return data;
		if(!rels) rels = {'!id':{}};
		var s = {'!type':"chart", '!drawel':null, '!rel':""};
		var pass = false;
		recordhopper(data, function cs_parse(val, R, RT) {
			switch(RT) {

				case 0x0226: /* 'BrtDrawing' */
					s['!rel'] = val; break;

				case 0x028B: /* 'BrtCsProp' */
					if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
					if(val.name) wb.Sheets[idx].CodeName = val.name;
					break;

				case 0x0232: /* 'BrtBkHim' */
				case 0x028C: /* 'BrtCsPageSetup' */
				case 0x029D: /* 'BrtCsProtection' */
				case 0x02A7: /* 'BrtCsProtectionIso' */
				case 0x0227: /* 'BrtLegacyDrawing' */
				case 0x0228: /* 'BrtLegacyDrawingHF' */
				case 0x01DC: /* 'BrtMargins' */
				case 0x0C00: /* 'BrtUid' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */
	 break;
				case 0x0026: /* 'BrtACEnd' */
	 break;

				default:
					if(R.T > 0) ;
					else if(R.T < 0) ;
					else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		}, opts);

		if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
		return s;
	}
	/* 18.2.28 (CT_WorkbookProtection) Defaults */
	var WBPropsDef = [
		['allowRefreshQuery',           false, "bool"],
		['autoCompressPictures',        true,  "bool"],
		['backupFile',                  false, "bool"],
		['checkCompatibility',          false, "bool"],
		['CodeName',                    ''],
		['date1904',                    false, "bool"],
		['defaultThemeVersion',         0,      "int"],
		['filterPrivacy',               false, "bool"],
		['hidePivotFieldList',          false, "bool"],
		['promptedSolutions',           false, "bool"],
		['publishItems',                false, "bool"],
		['refreshAllConnections',       false, "bool"],
		['saveExternalLinkValues',      true,  "bool"],
		['showBorderUnselectedTables',  true,  "bool"],
		['showInkAnnotation',           true,  "bool"],
		['showObjects',                 'all'],
		['showPivotChartFilter',        false, "bool"],
		['updateLinks', 'userSet']
	];

	/* 18.2.30 (CT_BookView) Defaults */
	var WBViewDef = [
		['activeTab',                   0,      "int"],
		['autoFilterDateGrouping',      true,  "bool"],
		['firstSheet',                  0,      "int"],
		['minimized',                   false, "bool"],
		['showHorizontalScroll',        true,  "bool"],
		['showSheetTabs',               true,  "bool"],
		['showVerticalScroll',          true,  "bool"],
		['tabRatio',                    600,    "int"],
		['visibility',                  'visible']
		//window{Height,Width}, {x,y}Window
	];

	/* 18.2.19 (CT_Sheet) Defaults */
	var SheetDef = [
		//['state', 'visible']
	];

	/* 18.2.2  (CT_CalcPr) Defaults */
	var CalcPrDef = [
		['calcCompleted', 'true'],
		['calcMode', 'auto'],
		['calcOnSave', 'true'],
		['concurrentCalc', 'true'],
		['fullCalcOnLoad', 'false'],
		['fullPrecision', 'true'],
		['iterate', 'false'],
		['iterateCount', '100'],
		['iterateDelta', '0.001'],
		['refMode', 'A1']
	];

	/* 18.2.3 (CT_CustomWorkbookView) Defaults */
	/*var CustomWBViewDef = [
		['autoUpdate', 'false'],
		['changesSavedWin', 'false'],
		['includeHiddenRowCol', 'true'],
		['includePrintSettings', 'true'],
		['maximized', 'false'],
		['minimized', 'false'],
		['onlySync', 'false'],
		['personalView', 'false'],
		['showComments', 'commIndicator'],
		['showFormulaBar', 'true'],
		['showHorizontalScroll', 'true'],
		['showObjects', 'all'],
		['showSheetTabs', 'true'],
		['showStatusbar', 'true'],
		['showVerticalScroll', 'true'],
		['tabRatio', '600'],
		['xWindow', '0'],
		['yWindow', '0']
	];*/

	function push_defaults_array(target, defaults) {
		for(var j = 0; j != target.length; ++j) { var w = target[j];
			for(var i=0; i != defaults.length; ++i) { var z = defaults[i];
				if(w[z[0]] == null) w[z[0]] = z[1];
				else switch(z[2]) {
				case "bool": if(typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]); break;
				case "int": if(typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10); break;
				}
			}
		}
	}
	function push_defaults(target, defaults) {
		for(var i = 0; i != defaults.length; ++i) { var z = defaults[i];
			if(target[z[0]] == null) target[z[0]] = z[1];
			else switch(z[2]) {
				case "bool": if(typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]); break;
				case "int": if(typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10); break;
			}
		}
	}

	function parse_wb_defaults(wb) {
		push_defaults(wb.WBProps, WBPropsDef);
		push_defaults(wb.CalcPr, CalcPrDef);

		push_defaults_array(wb.WBView, WBViewDef);
		push_defaults_array(wb.Sheets, SheetDef);

		_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
	}

	var badchars = /*#__PURE__*/"][*?\/\\".split("");
	function check_ws_name(n/*:string*/, safe/*:?boolean*/)/*:boolean*/ {
		if(n.length > 31) { throw new Error("Sheet names cannot exceed 31 chars"); }
		var _good = true;
		badchars.forEach(function(c) {
			if(n.indexOf(c) == -1) return;
			throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
		});
		return _good;
	}
	/* 18.2 Workbook */
	var wbnsregex = /<\w+:workbook/;
	function parse_wb_xml(data, opts)/*:WorkbookFile*/ {
		if(!data) throw new Error("Could not find file");
		var wb = /*::(*/{ AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: "" }/*::)*/;
		var pass = false, xmlns = "xmlns";
		var dname = {}, dnstart = 0;
		data.replace(tagregex, function xml_wb(x, idx) {
			var y/*:any*/ = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<?xml': break;

				/* 18.2.27 workbook CT_Workbook 1 */
				case '<workbook':
					if(x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
					wb.xmlns = y[xmlns];
					break;
				case '</workbook>': break;

				/* 18.2.13 fileVersion CT_FileVersion ? */
				case '<fileVersion': delete y[0]; wb.AppVersion = y; break;
				case '<fileVersion/>': case '</fileVersion>': break;

				/* 18.2.12 fileSharing CT_FileSharing ? */
				case '<fileSharing':
					break;
				case '<fileSharing/>': break;

				/* 18.2.28 workbookPr CT_WorkbookPr ? */
				case '<workbookPr':
				case '<workbookPr/>':
					WBPropsDef.forEach(function(w) {
						if(y[w[0]] == null) return;
						switch(w[2]) {
							case "bool": wb.WBProps[w[0]] = parsexmlbool(y[w[0]]); break;
							case "int": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break;
							default: wb.WBProps[w[0]] = y[w[0]];
						}
					});
					if(y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
					break;
				case '</workbookPr>': break;

				/* 18.2.29 workbookProtection CT_WorkbookProtection ? */
				case '<workbookProtection':
					break;
				case '<workbookProtection/>': break;

				/* 18.2.1  bookViews CT_BookViews ? */
				case '<bookViews': case '<bookViews>': case '</bookViews>': break;
				/* 18.2.30   workbookView CT_BookView + */
				case '<workbookView': case '<workbookView/>': delete y[0]; wb.WBView.push(y); break;
				case '</workbookView>': break;

				/* 18.2.20 sheets CT_Sheets 1 */
				case '<sheets': case '<sheets>': case '</sheets>': break; // aggregate sheet
				/* 18.2.19   sheet CT_Sheet + */
				case '<sheet':
					switch(y.state) {
						case "hidden": y.Hidden = 1; break;
						case "veryHidden": y.Hidden = 2; break;
						default: y.Hidden = 0;
					}
					delete y.state;
					y.name = unescapexml(utf8read(y.name));
					delete y[0]; wb.Sheets.push(y); break;
				case '</sheet>': break;

				/* 18.2.15 functionGroups CT_FunctionGroups ? */
				case '<functionGroups': case '<functionGroups/>': break;
				/* 18.2.14   functionGroup CT_FunctionGroup + */
				case '<functionGroup': break;

				/* 18.2.9  externalReferences CT_ExternalReferences ? */
				case '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;
				/* 18.2.8    externalReference CT_ExternalReference + */
				case '<externalReference': break;

				/* 18.2.6  definedNames CT_DefinedNames ? */
				case '<definedNames/>': break;
				case '<definedNames>': case '<definedNames': pass=true; break;
				case '</definedNames>': pass=false; break;
				/* 18.2.5    definedName CT_DefinedName + */
				case '<definedName': {
					dname = {};
					dname.Name = utf8read(y.name);
					if(y.comment) dname.Comment = y.comment;
					if(y.localSheetId) dname.Sheet = +y.localSheetId;
					if(parsexmlbool(y.hidden||"0")) dname.Hidden = true;
					dnstart = idx + x.length;
				}	break;
				case '</definedName>': {
					dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
					wb.Names.push(dname);
				} break;
				case '<definedName/>': break;

				/* 18.2.2  calcPr CT_CalcPr ? */
				case '<calcPr': delete y[0]; wb.CalcPr = y; break;
				case '<calcPr/>': delete y[0]; wb.CalcPr = y; break;
				case '</calcPr>': break;

				/* 18.2.16 oleSize CT_OleSize ? (ref required) */
				case '<oleSize': break;

				/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
				case '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;
				/* 18.2.3  customWorkbookView CT_CustomWorkbookView + */
				case '<customWorkbookView': case '</customWorkbookView>': break;

				/* 18.2.18 pivotCaches CT_PivotCaches ? */
				case '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;
				/* 18.2.17 pivotCache CT_PivotCache ? */
				case '<pivotCache': break;

				/* 18.2.21 smartTagPr CT_SmartTagPr ? */
				case '<smartTagPr': case '<smartTagPr/>': break;

				/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
				case '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;
				/* 18.2.22 smartTagType CT_SmartTagType ? */
				case '<smartTagType': break;

				/* 18.2.24 webPublishing CT_WebPublishing ? */
				case '<webPublishing': case '<webPublishing/>': break;

				/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
				case '<fileRecoveryPr': case '<fileRecoveryPr/>': break;

				/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
				case '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;
				/* 18.2.25 webPublishObject CT_WebPublishObject ? */
				case '<webPublishObject': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
				/* 18.2.7  ext CT_Extension + */
				case '<ext': pass=true; break; //TODO: check with versions of excel
				case '</ext>': pass=false; break;

				/* Others */
				case '<ArchID': break;
				case '<AlternateContent':
				case '<AlternateContent>': pass=true; break;
				case '</AlternateContent>': pass=false; break;

				/* TODO */
				case '<revisionPtr': break;

				default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
			}
			return x;
		});
		if(XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);

		parse_wb_defaults(wb);

		return wb;
	}
	/* [MS-XLSB] 2.4.304 BrtBundleSh */
	function parse_BrtBundleSh(data, length/*:number*/) {
		var z = {};
		z.Hidden = data.read_shift(4); //hsState ST_SheetState
		z.iTabID = data.read_shift(4);
		z.strRelID = parse_RelID(data);
		z.name = parse_XLWideString(data);
		return z;
	}

	/* [MS-XLSB] 2.4.815 BrtWbProp */
	function parse_BrtWbProp(data, length)/*:WBProps*/ {
		var o/*:WBProps*/ = ({}/*:any*/);
		var flags = data.read_shift(4);
		o.defaultThemeVersion = data.read_shift(4);
		var strName = (length > 8) ? parse_XLWideString(data) : "";
		if(strName.length > 0) o.CodeName = strName;
		o.autoCompressPictures = !!(flags & 0x10000);
		o.backupFile = !!(flags & 0x40);
		o.checkCompatibility = !!(flags & 0x1000);
		o.date1904 = !!(flags & 0x01);
		o.filterPrivacy = !!(flags & 0x08);
		o.hidePivotFieldList = !!(flags & 0x400);
		o.promptedSolutions = !!(flags & 0x10);
		o.publishItems = !!(flags & 0x800);
		o.refreshAllConnections = !!(flags & 0x40000);
		o.saveExternalLinkValues = !!(flags & 0x80);
		o.showBorderUnselectedTables = !!(flags & 0x04);
		o.showInkAnnotation = !!(flags & 0x20);
		o.showObjects = ["all", "placeholders", "none"][(flags >> 13) & 0x03];
		o.showPivotChartFilter = !!(flags & 0x8000);
		o.updateLinks = ["userSet", "never", "always"][(flags >> 8) & 0x03];
		return o;
	}

	function parse_BrtFRTArchID$(data, length) {
		var o = {};
		data.read_shift(4);
		o.ArchID = data.read_shift(4);
		data.l += length - 8;
		return o;
	}

	/* [MS-XLSB] 2.4.687 BrtName */
	function parse_BrtName(data, length, opts) {
		var end = data.l + length;
		data.l += 4; //var flags = data.read_shift(4);
		data.l += 1; //var chKey = data.read_shift(1);
		var itab = data.read_shift(4);
		var name = parse_XLNameWideString(data);
		var formula = parse_XLSBNameParsedFormula(data, 0, opts);
		var comment = parse_XLNullableWideString(data);
		//if(0 /* fProc */) {
			// unusedstring1: XLNullableWideString
			// description: XLNullableWideString
			// helpTopic: XLNullableWideString
			// unusedstring2: XLNullableWideString
		//}
		data.l = end;
		var out = ({Name:name, Ptg:formula}/*:any*/);
		if(itab < 0xFFFFFFF) out.Sheet = itab;
		if(comment) out.Comment = comment;
		return out;
	}

	/* [MS-XLSB] 2.1.7.61 Workbook */
	function parse_wb_bin(data, opts)/*:WorkbookFile*/ {
		var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: "" };
		var state/*:Array<string>*/ = [];
		var pass = false;

		if(!opts) opts = {};
		opts.biff = 12;

		var Names = [];
		var supbooks = ([[]]/*:any*/);
		supbooks.SheetNames = [];
		supbooks.XTI = [];

		XLSBRecordEnum[0x0010] = { n:"BrtFRTArchID$", f:parse_BrtFRTArchID$ };

		recordhopper(data, function hopper_wb(val, R, RT) {
			switch(RT) {
				case 0x009C: /* 'BrtBundleSh' */
					supbooks.SheetNames.push(val.name);
					wb.Sheets.push(val); break;

				case 0x0099: /* 'BrtWbProp' */
					wb.WBProps = val; break;

				case 0x0027: /* 'BrtName' */
					if(val.Sheet != null) opts.SID = val.Sheet;
					val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
					delete opts.SID;
					delete val.Ptg;
					Names.push(val);
					break;
				case 0x040C: /* 'BrtNameExt' */ break;

				case 0x0165: /* 'BrtSupSelf' */
				case 0x0166: /* 'BrtSupSame' */
				case 0x0163: /* 'BrtSupBookSrc' */
				case 0x029B: /* 'BrtSupAddin' */
					if(!supbooks[0].length) supbooks[0] = [RT, val];
					else supbooks.push([RT, val]);
					supbooks[supbooks.length - 1].XTI = [];
					break;
				case 0x016A: /* 'BrtExternSheet' */
					if(supbooks.length === 0) { supbooks[0] = []; supbooks[0].XTI = []; }
					supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
					supbooks.XTI = supbooks.XTI.concat(val);
					break;
				case 0x0169: /* 'BrtPlaceholderName' */
					break;

				case 0x0817: /* 'BrtAbsPath15' */
				case 0x009E: /* 'BrtBookView' */
				case 0x008F: /* 'BrtBeginBundleShs' */
				case 0x0298: /* 'BrtBeginFnGroup' */
				case 0x0161: /* 'BrtBeginExternals' */
					break;

				/* case 'BrtModelTimeGroupingCalcCol' */
				case 0x0C00: /* 'BrtUid' */
				case 0x0C01: /* 'BrtRevisionPtr' */
				case 0x0216: /* 'BrtBookProtection' */
				case 0x02A5: /* 'BrtBookProtectionIso' */
				case 0x009D: /* 'BrtCalcProp' */
				case 0x0262: /* 'BrtCrashRecErr' */
				case 0x0802: /* 'BrtDecoupledPivotCacheID' */
				case 0x009B: /* 'BrtFileRecover' */
				case 0x0224: /* 'BrtFileSharing' */
				case 0x02A4: /* 'BrtFileSharingIso' */
				case 0x0080: /* 'BrtFileVersion' */
				case 0x0299: /* 'BrtFnGroup' */
				case 0x0850: /* 'BrtModelRelationship' */
				case 0x084D: /* 'BrtModelTable' */
				case 0x0225: /* 'BrtOleSize' */
				case 0x0805: /* 'BrtPivotTableRef' */
				case 0x0254: /* 'BrtSmartTagType' */
				case 0x081C: /* 'BrtTableSlicerCacheID' */
				case 0x081B: /* 'BrtTableSlicerCacheIDs' */
				case 0x0822: /* 'BrtTimelineCachePivotCacheID' */
				case 0x018D: /* 'BrtUserBookView' */
				case 0x009A: /* 'BrtWbFactoid' */
				case 0x045D: /* 'BrtWbProp14' */
				case 0x0229: /* 'BrtWebOpt' */
				case 0x082B: /* 'BrtWorkBookPr15' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					state.push(RT); pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					state.pop(); pass = false; break;
				case 0x0025: /* 'BrtACBegin' */
					state.push(RT); pass = true; break;
				case 0x0026: /* 'BrtACEnd' */
					state.pop(); pass = false; break;

				case 0x0010: /* 'BrtFRTArchID$' */ break;

				default:
					if(R.T);
					else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */ && state[state.length-1] != 0x0023 /* BrtFRTBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
			}
		}, opts);

		parse_wb_defaults(wb);

		// $FlowIgnore
		wb.Names = Names;

		(wb/*:any*/).supbooks = supbooks;
		return wb;
	}
	function parse_wb(data, name/*:string*/, opts)/*:WorkbookFile*/ {
		if(name.slice(-4)===".bin") return parse_wb_bin((data/*:any*/), opts);
		return parse_wb_xml((data/*:any*/), opts);
	}

	function parse_ws(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
		if(name.slice(-4)===".bin") return parse_ws_bin((data/*:any*/), opts, idx, rels, wb, themes, styles);
		return parse_ws_xml((data/*:any*/), opts, idx, rels, wb, themes, styles);
	}

	function parse_cs(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
		if(name.slice(-4)===".bin") return parse_cs_bin((data/*:any*/), opts, idx, rels, wb);
		return parse_cs_xml((data/*:any*/), opts, idx, rels, wb);
	}

	function parse_ms(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
		if(name.slice(-4)===".bin") return parse_ms_bin();
		return parse_ms_xml();
	}

	function parse_ds(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
		if(name.slice(-4)===".bin") return parse_ds_bin();
		return parse_ds_xml();
	}

	function parse_sty(data, name/*:string*/, themes, opts) {
		if(name.slice(-4)===".bin") return parse_sty_bin((data/*:any*/), themes, opts);
		return parse_sty_xml((data/*:any*/), themes, opts);
	}

	function parse_theme(data/*:string*/, name/*:string*/, opts) {
		return parse_theme_xml(data, opts);
	}

	function parse_sst(data, name/*:string*/, opts)/*:SST*/ {
		if(name.slice(-4)===".bin") return parse_sst_bin((data/*:any*/), opts);
		return parse_sst_xml((data/*:any*/), opts);
	}

	function parse_cmnt(data, name/*:string*/, opts)/*:Array<RawComment>*/ {
		if(name.slice(-4)===".bin") return parse_comments_bin((data/*:any*/), opts);
		return parse_comments_xml((data/*:any*/), opts);
	}

	function parse_cc(data, name/*:string*/, opts) {
		if(name.slice(-4)===".bin") return parse_cc_bin((data/*:any*/));
		return parse_cc_xml((data/*:any*/));
	}

	function parse_xlink(data, rel, name/*:string*/, opts) {
		if(name.slice(-4)===".bin") return parse_xlink_bin((data/*:any*/), rel, name, opts);
		return parse_xlink_xml();
	}

	function parse_xlmeta(data, name/*:string*/, opts) {
		if(name.slice(-4)===".bin") return parse_xlmeta_bin((data/*:any*/), name, opts);
		return parse_xlmeta_xml((data/*:any*/), name, opts);
	}
	var attregexg2=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
	var attregex2=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
	function xlml_parsexmltag(tag/*:string*/, skip_root/*:?boolean*/) {
		var words = tag.split(/\s+/);
		var z/*:any*/ = ([]/*:any*/); z[0] = words[0];
		if(words.length === 1) return z;
		var m = tag.match(attregexg2), y, j, w, i;
		if(m) for(i = 0; i != m.length; ++i) {
			y = m[i].match(attregex2);
	/*:: if(!y || !y[2]) continue; */
			if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
			else {
				if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
				else w = y[1].slice(j+1);
				z[w] = y[2].slice(1,y[2].length-1);
			}
		}
		return z;
	}
	function xlml_parsexmltagobj(tag/*:string*/) {
		var words = tag.split(/\s+/);
		var z = {};
		if(words.length === 1) return z;
		var m = tag.match(attregexg2), y, j, w, i;
		if(m) for(i = 0; i != m.length; ++i) {
			y = m[i].match(attregex2);
	/*:: if(!y || !y[2]) continue; */
			if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
			else {
				if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
				else w = y[1].slice(j+1);
				z[w] = y[2].slice(1,y[2].length-1);
			}
		}
		return z;
	}

	// ----

	/* map from xlml named formats to SSF TODO: localize */
	var XLMLFormatMap/*: {[string]:string}*/;

	function xlml_format(format, value)/*:string*/ {
		var fmt = XLMLFormatMap[format] || unescapexml(format);
		if(fmt === "General") return SSF_general(value);
		return SSF_format(fmt, value);
	}

	function xlml_set_custprop(Custprops, key, cp, val/*:string*/) {
		var oval/*:any*/ = val;
		switch((cp[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]) {
			case "boolean": oval = parsexmlbool(val); break;
			case "i2": case "int": oval = parseInt(val, 10); break;
			case "r4": case "float": oval = parseFloat(val); break;
			case "date": case "dateTime.tz": oval = parseDate(val); break;
			case "i8": case "string": case "fixed": case "uuid": case "bin.base64": break;
			default: throw new Error("bad custprop:" + cp[0]);
		}
		Custprops[unescapexml(key)] = oval;
	}

	function safe_format_xlml(cell/*:Cell*/, nf, o) {
		if(cell.t === 'z') return;
		if(!o || o.cellText !== false) try {
			if(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }
			else if(nf === "General") {
				if(cell.t === 'n') {
					if((cell.v|0) === cell.v) cell.w = cell.v.toString(10);
					else cell.w = SSF_general_num(cell.v);
				}
				else cell.w = SSF_general(cell.v);
			}
			else cell.w = xlml_format(nf||"General", cell.v);
		} catch(e) { if(o.WTF) throw e; }
		try {
			var z = XLMLFormatMap[nf]||nf||"General";
			if(o.cellNF) cell.z = z;
			if(o.cellDates && cell.t == 'n' && fmt_is_date(z)) {
				var _d = SSF_parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
			}
		} catch(e) { if(o.WTF) throw e; }
	}

	function process_style_xlml(styles, stag, opts) {
		if(opts.cellStyles) {
			if(stag.Interior) {
				var I = stag.Interior;
				if(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
			}
		}
		styles[stag.ID] = stag;
	}

	/* TODO: there must exist some form of OSP-blessed spec */
	function parse_xlml_data(xml, ss, data, cell/*:any*/, base, styles, csty, row, arrayf, o) {
		var nf = "General", sid = cell.StyleID, S = {}; o = o || {};
		var interiors = [];
		var i = 0;
		if(sid === undefined && row) sid = row.StyleID;
		if(sid === undefined && csty) sid = csty.StyleID;
		while(styles[sid] !== undefined) {
			if(styles[sid].nf) nf = styles[sid].nf;
			if(styles[sid].Interior) interiors.push(styles[sid].Interior);
			if(!styles[sid].Parent) break;
			sid = styles[sid].Parent;
		}
		switch(data.Type) {
			case 'Boolean':
				cell.t = 'b';
				cell.v = parsexmlbool(xml);
				break;
			case 'String':
				cell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));
				cell.v = (xml.indexOf("<") > -1 ? unescapexml(ss||xml).replace(/<.*?>/g, "") : cell.r); // todo: BR etc
				break;
			case 'DateTime':
				if(xml.slice(-1) != "Z") xml += "Z";
				cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
				if(cell.v !== cell.v) cell.v = unescapexml(xml);
				else if(cell.v<60) cell.v = cell.v -1;
				if(!nf || nf == "General") nf = "yyyy-mm-dd";
				/* falls through */
			case 'Number':
				if(cell.v === undefined) cell.v=+xml;
				if(!cell.t) cell.t = 'n';
				break;
			case 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;
			default:
				if(xml == "" && ss == "") { cell.t = 'z'; }
				else { cell.t = 's'; cell.v = xlml_fixstr(ss||xml); }
				break;
		}
		safe_format_xlml(cell, nf, o);
		if(o.cellFormula !== false) {
			if(cell.Formula) {
				var fstr = unescapexml(cell.Formula);
				/* strictly speaking, the leading = is required but some writers omit */
				if(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.slice(1);
				cell.f = rc_to_a1(fstr, base);
				delete cell.Formula;
				if(cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
				else if(cell.ArrayRange) {
					cell.F = rc_to_a1(cell.ArrayRange, base);
					arrayf.push([safe_decode_range(cell.F), cell.F]);
				}
			} else {
				for(i = 0; i < arrayf.length; ++i)
					if(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)
						if(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
							cell.F = arrayf[i][1];
			}
		}
		if(o.cellStyles) {
			interiors.forEach(function(x) {
				if(!S.patternType && x.patternType) S.patternType = x.patternType;
			});
			cell.s = S;
		}
		if(cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
	}

	function xlml_clean_comment(comment/*:any*/) {
		comment.t = comment.v || "";
		comment.t = comment.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
		comment.v = comment.w = comment.ixfe = undefined;
	}

	/* TODO: Everything */
	function parse_xlml_xml(d, _opts)/*:Workbook*/ {
		var opts = _opts || {};
		make_ssf();
		var str = debom(xlml_normalize(d));
		if(opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
			str = utf8read(str);
		}
		var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
		opening = opening.replace(/".*?"/g, "");
		if((opening.indexOf(">") & 1023) > Math.min((opening.indexOf(",") & 1023), (opening.indexOf(";")&1023))) { var _o = dup(opts); _o.type = "string"; return PRN.to_workbook(str, _o); }
		if(opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) { if(opening.indexOf("<" + tag) >= 0) ishtml = true; });
		if(ishtml) return html_to_workbook(str, opts);

		XLMLFormatMap = ({
			"General Number": "General",
			"General Date": table_fmt[22],
			"Long Date": "dddd, mmmm dd, yyyy",
			"Medium Date": table_fmt[15],
			"Short Date": table_fmt[14],
			"Long Time": table_fmt[19],
			"Medium Time": table_fmt[18],
			"Short Time": table_fmt[20],
			"Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
			"Fixed": table_fmt[2],
			"Standard": table_fmt[4],
			"Percent": table_fmt[10],
			"Scientific": table_fmt[11],
			"Yes/No": '"Yes";"Yes";"No";@',
			"True/False": '"True";"True";"False";@',
			"On/Off": '"Yes";"Yes";"No";@'
		}/*:any*/);


		var Rn;
		var state = [], tmp;
		var sheets = {}, sheetnames/*:Array<string>*/ = [], cursheet/*:Worksheet*/ = (opts.dense ? [] : {}), sheetname = "";
		var cell = ({}/*:any*/), row = {};// eslint-disable-line no-unused-vars
		var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
		var c = 0, r = 0;
		var refguess/*:Range*/ = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
		var styles = {}, stag = {};
		var ss = "", fidx = 0;
		var merges/*:Array<Range>*/ = [];
		var Props = {}, Custprops = {}, pidx = 0, cp = [];
		var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
		var cstys = [], csty, seencol = false;
		var arrayf/*:Array<[Range, string]>*/ = [];
		var rowinfo/*:Array<RowInfo>*/ = [], rowobj = {}, cc = 0, rr = 0;
		var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false} }/*:any*/), wsprops = {};
		xlmlregex.lastIndex = 0;
		str = str.replace(/<!--([\s\S]*?)-->/mg,"");
		var raw_Rn3 = "";
		while((Rn = xlmlregex.exec(str))) switch((Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase())) {
			case 'data' /*case 'Data'*/:
				if(raw_Rn3 == "data") {
					if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
					break;
				}
				if(state[state.length-1][1]) break;
				if(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==/*"Comment"*/"comment"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);
				else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }
				break;
			case 'cell' /*case 'Cell'*/:
				if(Rn[1]==='/'){
					if(comments.length > 0) cell.c = comments;
					if((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
						if(opts.dense) {
							if(!cursheet[r]) cursheet[r] = [];
							cursheet[r][c] = cell;
						} else cursheet[encode_col(c) + encode_row(r)] = cell;
					}
					if(cell.HRef) {
						cell.l = ({Target:unescapexml(cell.HRef)}/*:any*/);
						if(cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
						delete cell.HRef; delete cell.HRefScreenTip;
					}
					if(cell.MergeAcross || cell.MergeDown) {
						cc = c + (parseInt(cell.MergeAcross,10)|0);
						rr = r + (parseInt(cell.MergeDown,10)|0);
						merges.push({s:{c:c,r:r},e:{c:cc,r:rr}});
					}
					if(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }
					else if(cell.MergeAcross || cell.MergeDown) {
						/*:: if(!cc) cc = 0; if(!rr) rr = 0; */
						for(var cma = c; cma <= cc; ++cma) {
							for(var cmd = r; cmd <= rr; ++cmd) {
								if(cma > c || cmd > r) {
									if(opts.dense) {
										if(!cursheet[cmd]) cursheet[cmd] = [];
										cursheet[cmd][cma] = {t:'z'};
									} else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};
								}
							}
						}
						c = cc + 1;
					}
					else ++c;
				} else {
					cell = xlml_parsexmltagobj(Rn[0]);
					if(cell.Index) c = +cell.Index - 1;
					if(c < refguess.s.c) refguess.s.c = c;
					if(c > refguess.e.c) refguess.e.c = c;
					if(Rn[0].slice(-2) === "/>") ++c;
					comments = [];
				}
				break;
			case 'row' /*case 'Row'*/:
				if(Rn[1]==='/' || Rn[0].slice(-2) === "/>") {
					if(r < refguess.s.r) refguess.s.r = r;
					if(r > refguess.e.r) refguess.e.r = r;
					if(Rn[0].slice(-2) === "/>") {
						row = xlml_parsexmltag(Rn[0]);
						if(row.Index) r = +row.Index - 1;
					}
					c = 0; ++r;
				} else {
					row = xlml_parsexmltag(Rn[0]);
					if(row.Index) r = +row.Index - 1;
					rowobj = {};
					if(row.AutoFitHeight == "0" || row.Height) {
						rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);
						rowinfo[r] = rowobj;
					}
					if(row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj; }
				}
				break;
			case 'worksheet' /*case 'Worksheet'*/: /* TODO: read range from FullRows/FullColumns */
				if(Rn[1]==='/'){
					if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
					sheetnames.push(sheetname);
					if(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
						cursheet["!ref"] = encode_range(refguess);
						if(opts.sheetRows && opts.sheetRows <= refguess.e.r) {
							cursheet["!fullref"] = cursheet["!ref"];
							refguess.e.r = opts.sheetRows - 1;
							cursheet["!ref"] = encode_range(refguess);
						}
					}
					if(merges.length) cursheet["!merges"] = merges;
					if(cstys.length > 0) cursheet["!cols"] = cstys;
					if(rowinfo.length > 0) cursheet["!rows"] = rowinfo;
					sheets[sheetname] = cursheet;
				} else {
					refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
					r = c = 0;
					state.push([Rn[3], false]);
					tmp = xlml_parsexmltag(Rn[0]);
					sheetname = unescapexml(tmp.Name);
					cursheet = (opts.dense ? [] : {});
					merges = [];
					arrayf = [];
					rowinfo = [];
					wsprops = {name:sheetname, Hidden:0};
					Workbook.Sheets.push(wsprops);
				}
				break;
			case 'table' /*case 'Table'*/:
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].slice(-2) == "/>") break;
				else {
					state.push([Rn[3], false]);
					cstys = []; seencol = false;
				}
				break;

			case 'style' /*case 'Style'*/:
				if(Rn[1]==='/') process_style_xlml(styles, stag, opts);
				else stag = xlml_parsexmltag(Rn[0]);
				break;

			case 'numberformat' /*case 'NumberFormat'*/:
				stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
				if(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
				for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == stag.nf) break;
				if(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == null) { SSF_load(stag.nf, ssfidx); break; }
				break;

			case 'column' /*case 'Column'*/:
				if(state[state.length-1][0] !== /*'Table'*/'table') break;
				csty = xlml_parsexmltag(Rn[0]);
				if(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }
				if(csty.Width) csty.wpx = parseInt(csty.Width, 10);
				if(!seencol && csty.wpx > 10) {
					seencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
					for(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);
				}
				if(seencol) process_col(csty);
				cstys[(csty.Index-1||cstys.length)] = csty;
				for(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
				break;

			case 'namedrange' /*case 'NamedRange'*/:
				if(Rn[1]==='/') break;
				if(!Workbook.Names) Workbook.Names = [];
				var _NamedRange = parsexmltag(Rn[0]);
				var _DefinedName/*:DefinedName*/ = ({
					Name: _NamedRange.Name,
					Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {r:0, c:0})
				}/*:any*/);
				if(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;
				/*:: if(Workbook.Names) */Workbook.Names.push(_DefinedName);
				break;

			case 'namedcell' /*case 'NamedCell'*/: break;
			case 'b' /*case 'B'*/: break;
			case 'i' /*case 'I'*/: break;
			case 'u' /*case 'U'*/: break;
			case 's' /*case 'S'*/: break;
			case 'em' /*case 'EM'*/: break;
			case 'h2' /*case 'H2'*/: break;
			case 'h3' /*case 'H3'*/: break;
			case 'sub' /*case 'Sub'*/: break;
			case 'sup' /*case 'Sup'*/: break;
			case 'span' /*case 'Span'*/: break;
			case 'alignment' /*case 'Alignment'*/:
				break;
			case 'borders' /*case 'Borders'*/: break;
			case 'border' /*case 'Border'*/: break;
			case 'font' /*case 'Font'*/:
				if(Rn[0].slice(-2) === "/>") break;
				else if(Rn[1]==="/") ss += str.slice(fidx, Rn.index);
				else fidx = Rn.index + Rn[0].length;
				break;
			case 'interior' /*case 'Interior'*/:
				if(!opts.cellStyles) break;
				stag.Interior = xlml_parsexmltag(Rn[0]);
				break;
			case 'protection' /*case 'Protection'*/: break;

			case 'author' /*case 'Author'*/:
			case 'title' /*case 'Title'*/:
			case 'description' /*case 'Description'*/:
			case 'created' /*case 'Created'*/:
			case 'keywords' /*case 'Keywords'*/:
			case 'subject' /*case 'Subject'*/:
			case 'category' /*case 'Category'*/:
			case 'company' /*case 'Company'*/:
			case 'lastauthor' /*case 'LastAuthor'*/:
			case 'lastsaved' /*case 'LastSaved'*/:
			case 'lastprinted' /*case 'LastPrinted'*/:
			case 'version' /*case 'Version'*/:
			case 'revision' /*case 'Revision'*/:
			case 'totaltime' /*case 'TotalTime'*/:
			case 'hyperlinkbase' /*case 'HyperlinkBase'*/:
			case 'manager' /*case 'Manager'*/:
			case 'contentstatus' /*case 'ContentStatus'*/:
			case 'identifier' /*case 'Identifier'*/:
			case 'language' /*case 'Language'*/:
			case 'appname' /*case 'AppName'*/:
				if(Rn[0].slice(-2) === "/>") break;
				else if(Rn[1]==="/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
				else pidx = Rn.index + Rn[0].length;
				break;
			case 'paragraphs' /*case 'Paragraphs'*/: break;

			case 'styles' /*case 'Styles'*/:
			case 'workbook' /*case 'Workbook'*/:
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else state.push([Rn[3], false]);
				break;

			case 'comment' /*case 'Comment'*/:
				if(Rn[1]==='/'){
					if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
					xlml_clean_comment(comment);
					comments.push(comment);
				} else {
					state.push([Rn[3], false]);
					tmp = xlml_parsexmltag(Rn[0]);
					comment = ({a:tmp.Author}/*:any*/);
				}
				break;

			case 'autofilter' /*case 'AutoFilter'*/:
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
					var AutoFilter = xlml_parsexmltag(Rn[0]);
					cursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\$/g,"") };
					state.push([Rn[3], true]);
				}
				break;

			case 'name' /*case 'Name'*/: break;

			case 'datavalidation' /*case 'DataValidation'*/:
				if(Rn[1]==='/'){
					if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
				} else {
					if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
				}
				break;

			case 'pixelsperinch' /*case 'PixelsPerInch'*/:
				break;
			case 'componentoptions' /*case 'ComponentOptions'*/:
			case 'documentproperties' /*case 'DocumentProperties'*/:
			case 'customdocumentproperties' /*case 'CustomDocumentProperties'*/:
			case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/:
			case 'pivottable' /*case 'PivotTable'*/:
			case 'pivotcache' /*case 'PivotCache'*/:
			case 'names' /*case 'Names'*/:
			case 'mapinfo' /*case 'MapInfo'*/:
			case 'pagebreaks' /*case 'PageBreaks'*/:
			case 'querytable' /*case 'QueryTable'*/:
			case 'sorting' /*case 'Sorting'*/:
			case 'schema' /*case 'Schema'*/: //case 'data' /*case 'data'*/:
			case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
			case 'smarttagtype' /*case 'SmartTagType'*/:
			case 'smarttags' /*case 'SmartTags'*/:
			case 'excelworkbook' /*case 'ExcelWorkbook'*/:
			case 'workbookoptions' /*case 'WorkbookOptions'*/:
			case 'worksheetoptions' /*case 'WorksheetOptions'*/:
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
				break;

			case 'null' /*case 'Null'*/: break;

			default:
				/* FODS file root is <office:document> */
				if(state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
				/* UOS file root is <uof:UOF> */
				if(state.length == 0 && Rn[3] == "uof"/*"UOF"*/) return parse_fods(str, opts);

				var seen = true;
				switch(state[state.length-1][0]) {
					/* OfficeDocumentSettings */
					case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/: switch(Rn[3]) {
						case 'allowpng' /*case 'AllowPNG'*/: break;
						case 'removepersonalinformation' /*case 'RemovePersonalInformation'*/: break;
						case 'downloadcomponents' /*case 'DownloadComponents'*/: break;
						case 'locationofcomponents' /*case 'LocationOfComponents'*/: break;
						case 'colors' /*case 'Colors'*/: break;
						case 'color' /*case 'Color'*/: break;
						case 'index' /*case 'Index'*/: break;
						case 'rgb' /*case 'RGB'*/: break;
						case 'targetscreensize' /*case 'TargetScreenSize'*/: break;
						case 'readonlyrecommended' /*case 'ReadOnlyRecommended'*/: break;
						default: seen = false;
					} break;

					/* ComponentOptions */
					case 'componentoptions' /*case 'ComponentOptions'*/: switch(Rn[3]) {
						case 'toolbar' /*case 'Toolbar'*/: break;
						case 'hideofficelogo' /*case 'HideOfficeLogo'*/: break;
						case 'spreadsheetautofit' /*case 'SpreadsheetAutoFit'*/: break;
						case 'label' /*case 'Label'*/: break;
						case 'caption' /*case 'Caption'*/: break;
						case 'maxheight' /*case 'MaxHeight'*/: break;
						case 'maxwidth' /*case 'MaxWidth'*/: break;
						case 'nextsheetnumber' /*case 'NextSheetNumber'*/: break;
						default: seen = false;
					} break;

					/* ExcelWorkbook */
					case 'excelworkbook' /*case 'ExcelWorkbook'*/: switch(Rn[3]) {
						case 'date1904' /*case 'Date1904'*/:
							/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
							Workbook.WBProps.date1904 = true;
							break;
						case 'windowheight' /*case 'WindowHeight'*/: break;
						case 'windowwidth' /*case 'WindowWidth'*/: break;
						case 'windowtopx' /*case 'WindowTopX'*/: break;
						case 'windowtopy' /*case 'WindowTopY'*/: break;
						case 'tabratio' /*case 'TabRatio'*/: break;
						case 'protectstructure' /*case 'ProtectStructure'*/: break;
						case 'protectwindow' /*case 'ProtectWindow'*/: break;
						case 'protectwindows' /*case 'ProtectWindows'*/: break;
						case 'activesheet' /*case 'ActiveSheet'*/: break;
						case 'displayinknotes' /*case 'DisplayInkNotes'*/: break;
						case 'firstvisiblesheet' /*case 'FirstVisibleSheet'*/: break;
						case 'supbook' /*case 'SupBook'*/: break;
						case 'sheetname' /*case 'SheetName'*/: break;
						case 'sheetindex' /*case 'SheetIndex'*/: break;
						case 'sheetindexfirst' /*case 'SheetIndexFirst'*/: break;
						case 'sheetindexlast' /*case 'SheetIndexLast'*/: break;
						case 'dll' /*case 'Dll'*/: break;
						case 'acceptlabelsinformulas' /*case 'AcceptLabelsInFormulas'*/: break;
						case 'donotsavelinkvalues' /*case 'DoNotSaveLinkValues'*/: break;
						case 'iteration' /*case 'Iteration'*/: break;
						case 'maxiterations' /*case 'MaxIterations'*/: break;
						case 'maxchange' /*case 'MaxChange'*/: break;
						case 'path' /*case 'Path'*/: break;
						case 'xct' /*case 'Xct'*/: break;
						case 'count' /*case 'Count'*/: break;
						case 'selectedsheets' /*case 'SelectedSheets'*/: break;
						case 'calculation' /*case 'Calculation'*/: break;
						case 'uncalced' /*case 'Uncalced'*/: break;
						case 'startupprompt' /*case 'StartupPrompt'*/: break;
						case 'crn' /*case 'Crn'*/: break;
						case 'externname' /*case 'ExternName'*/: break;
						case 'formula' /*case 'Formula'*/: break;
						case 'colfirst' /*case 'ColFirst'*/: break;
						case 'collast' /*case 'ColLast'*/: break;
						case 'wantadvise' /*case 'WantAdvise'*/: break;
						case 'boolean' /*case 'Boolean'*/: break;
						case 'error' /*case 'Error'*/: break;
						case 'text' /*case 'Text'*/: break;
						case 'ole' /*case 'OLE'*/: break;
						case 'noautorecover' /*case 'NoAutoRecover'*/: break;
						case 'publishobjects' /*case 'PublishObjects'*/: break;
						case 'donotcalculatebeforesave' /*case 'DoNotCalculateBeforeSave'*/: break;
						case 'number' /*case 'Number'*/: break;
						case 'refmoder1c1' /*case 'RefModeR1C1'*/: break;
						case 'embedsavesmarttags' /*case 'EmbedSaveSmartTags'*/: break;
						default: seen = false;
					} break;

					/* WorkbookOptions */
					case 'workbookoptions' /*case 'WorkbookOptions'*/: switch(Rn[3]) {
						case 'owcversion' /*case 'OWCVersion'*/: break;
						case 'height' /*case 'Height'*/: break;
						case 'width' /*case 'Width'*/: break;
						default: seen = false;
					} break;

					/* WorksheetOptions */
					case 'worksheetoptions' /*case 'WorksheetOptions'*/: switch(Rn[3]) {
						case 'visible' /*case 'Visible'*/:
							if(Rn[0].slice(-2) === "/>");
							else if(Rn[1]==="/") switch(str.slice(pidx, Rn.index)) {
								case "SheetHidden": wsprops.Hidden = 1; break;
								case "SheetVeryHidden": wsprops.Hidden = 2; break;
							}
							else pidx = Rn.index + Rn[0].length;
							break;
						case 'header' /*case 'Header'*/:
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
							if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].header = +parsexmltag(Rn[0]).Margin;
							break;
						case 'footer' /*case 'Footer'*/:
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
							if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].footer = +parsexmltag(Rn[0]).Margin;
							break;
						case 'pagemargins' /*case 'PageMargins'*/:
							var pagemargins = parsexmltag(Rn[0]);
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');
							if(!isNaN(+pagemargins.Top)) cursheet['!margins'].top = +pagemargins.Top;
							if(!isNaN(+pagemargins.Left)) cursheet['!margins'].left = +pagemargins.Left;
							if(!isNaN(+pagemargins.Right)) cursheet['!margins'].right = +pagemargins.Right;
							if(!isNaN(+pagemargins.Bottom)) cursheet['!margins'].bottom = +pagemargins.Bottom;
							break;
						case 'displayrighttoleft' /*case 'DisplayRightToLeft'*/:
							if(!Workbook.Views) Workbook.Views = [];
							if(!Workbook.Views[0]) Workbook.Views[0] = {};
							Workbook.Views[0].RTL = true;
							break;

						case 'freezepanes' /*case 'FreezePanes'*/: break;
						case 'frozennosplit' /*case 'FrozenNoSplit'*/: break;

						case 'splithorizontal' /*case 'SplitHorizontal'*/:
						case 'splitvertical' /*case 'SplitVertical'*/:
							break;

						case 'donotdisplaygridlines' /*case 'DoNotDisplayGridlines'*/:
							break;

						case 'activerow' /*case 'ActiveRow'*/: break;
						case 'activecol' /*case 'ActiveCol'*/: break;
						case 'toprowbottompane' /*case 'TopRowBottomPane'*/: break;
						case 'leftcolumnrightpane' /*case 'LeftColumnRightPane'*/: break;

						case 'unsynced' /*case 'Unsynced'*/: break;
						case 'print' /*case 'Print'*/: break;
						case 'printerrors' /*case 'PrintErrors'*/: break;
						case 'panes' /*case 'Panes'*/: break;
						case 'scale' /*case 'Scale'*/: break;
						case 'pane' /*case 'Pane'*/: break;
						case 'number' /*case 'Number'*/: break;
						case 'layout' /*case 'Layout'*/: break;
						case 'pagesetup' /*case 'PageSetup'*/: break;
						case 'selected' /*case 'Selected'*/: break;
						case 'protectobjects' /*case 'ProtectObjects'*/: break;
						case 'enableselection' /*case 'EnableSelection'*/: break;
						case 'protectscenarios' /*case 'ProtectScenarios'*/: break;
						case 'validprinterinfo' /*case 'ValidPrinterInfo'*/: break;
						case 'horizontalresolution' /*case 'HorizontalResolution'*/: break;
						case 'verticalresolution' /*case 'VerticalResolution'*/: break;
						case 'numberofcopies' /*case 'NumberofCopies'*/: break;
						case 'activepane' /*case 'ActivePane'*/: break;
						case 'toprowvisible' /*case 'TopRowVisible'*/: break;
						case 'leftcolumnvisible' /*case 'LeftColumnVisible'*/: break;
						case 'fittopage' /*case 'FitToPage'*/: break;
						case 'rangeselection' /*case 'RangeSelection'*/: break;
						case 'papersizeindex' /*case 'PaperSizeIndex'*/: break;
						case 'pagelayoutzoom' /*case 'PageLayoutZoom'*/: break;
						case 'pagebreakzoom' /*case 'PageBreakZoom'*/: break;
						case 'filteron' /*case 'FilterOn'*/: break;
						case 'fitwidth' /*case 'FitWidth'*/: break;
						case 'fitheight' /*case 'FitHeight'*/: break;
						case 'commentslayout' /*case 'CommentsLayout'*/: break;
						case 'zoom' /*case 'Zoom'*/: break;
						case 'lefttoright' /*case 'LeftToRight'*/: break;
						case 'gridlines' /*case 'Gridlines'*/: break;
						case 'allowsort' /*case 'AllowSort'*/: break;
						case 'allowfilter' /*case 'AllowFilter'*/: break;
						case 'allowinsertrows' /*case 'AllowInsertRows'*/: break;
						case 'allowdeleterows' /*case 'AllowDeleteRows'*/: break;
						case 'allowinsertcols' /*case 'AllowInsertCols'*/: break;
						case 'allowdeletecols' /*case 'AllowDeleteCols'*/: break;
						case 'allowinserthyperlinks' /*case 'AllowInsertHyperlinks'*/: break;
						case 'allowformatcells' /*case 'AllowFormatCells'*/: break;
						case 'allowsizecols' /*case 'AllowSizeCols'*/: break;
						case 'allowsizerows' /*case 'AllowSizeRows'*/: break;
						case 'nosummaryrowsbelowdetail' /*case 'NoSummaryRowsBelowDetail'*/:
							if(!cursheet["!outline"]) cursheet["!outline"] = {};
							cursheet["!outline"].above = true;
							break;
						case 'tabcolorindex' /*case 'TabColorIndex'*/: break;
						case 'donotdisplayheadings' /*case 'DoNotDisplayHeadings'*/: break;
						case 'showpagelayoutzoom' /*case 'ShowPageLayoutZoom'*/: break;
						case 'nosummarycolumnsrightdetail' /*case 'NoSummaryColumnsRightDetail'*/:
							if(!cursheet["!outline"]) cursheet["!outline"] = {};
							cursheet["!outline"].left = true;
							break;
						case 'blackandwhite' /*case 'BlackAndWhite'*/: break;
						case 'donotdisplayzeros' /*case 'DoNotDisplayZeros'*/: break;
						case 'displaypagebreak' /*case 'DisplayPageBreak'*/: break;
						case 'rowcolheadings' /*case 'RowColHeadings'*/: break;
						case 'donotdisplayoutline' /*case 'DoNotDisplayOutline'*/: break;
						case 'noorientation' /*case 'NoOrientation'*/: break;
						case 'allowusepivottables' /*case 'AllowUsePivotTables'*/: break;
						case 'zeroheight' /*case 'ZeroHeight'*/: break;
						case 'viewablerange' /*case 'ViewableRange'*/: break;
						case 'selection' /*case 'Selection'*/: break;
						case 'protectcontents' /*case 'ProtectContents'*/: break;
						default: seen = false;
					} break;

					/* PivotTable */
					case 'pivottable' /*case 'PivotTable'*/: case 'pivotcache' /*case 'PivotCache'*/: switch(Rn[3]) {
						case 'immediateitemsondrop' /*case 'ImmediateItemsOnDrop'*/: break;
						case 'showpagemultipleitemlabel' /*case 'ShowPageMultipleItemLabel'*/: break;
						case 'compactrowindent' /*case 'CompactRowIndent'*/: break;
						case 'location' /*case 'Location'*/: break;
						case 'pivotfield' /*case 'PivotField'*/: break;
						case 'orientation' /*case 'Orientation'*/: break;
						case 'layoutform' /*case 'LayoutForm'*/: break;
						case 'layoutsubtotallocation' /*case 'LayoutSubtotalLocation'*/: break;
						case 'layoutcompactrow' /*case 'LayoutCompactRow'*/: break;
						case 'position' /*case 'Position'*/: break;
						case 'pivotitem' /*case 'PivotItem'*/: break;
						case 'datatype' /*case 'DataType'*/: break;
						case 'datafield' /*case 'DataField'*/: break;
						case 'sourcename' /*case 'SourceName'*/: break;
						case 'parentfield' /*case 'ParentField'*/: break;
						case 'ptlineitems' /*case 'PTLineItems'*/: break;
						case 'ptlineitem' /*case 'PTLineItem'*/: break;
						case 'countofsameitems' /*case 'CountOfSameItems'*/: break;
						case 'item' /*case 'Item'*/: break;
						case 'itemtype' /*case 'ItemType'*/: break;
						case 'ptsource' /*case 'PTSource'*/: break;
						case 'cacheindex' /*case 'CacheIndex'*/: break;
						case 'consolidationreference' /*case 'ConsolidationReference'*/: break;
						case 'filename' /*case 'FileName'*/: break;
						case 'reference' /*case 'Reference'*/: break;
						case 'nocolumngrand' /*case 'NoColumnGrand'*/: break;
						case 'norowgrand' /*case 'NoRowGrand'*/: break;
						case 'blanklineafteritems' /*case 'BlankLineAfterItems'*/: break;
						case 'hidden' /*case 'Hidden'*/: break;
						case 'subtotal' /*case 'Subtotal'*/: break;
						case 'basefield' /*case 'BaseField'*/: break;
						case 'mapchilditems' /*case 'MapChildItems'*/: break;
						case 'function' /*case 'Function'*/: break;
						case 'refreshonfileopen' /*case 'RefreshOnFileOpen'*/: break;
						case 'printsettitles' /*case 'PrintSetTitles'*/: break;
						case 'mergelabels' /*case 'MergeLabels'*/: break;
						case 'defaultversion' /*case 'DefaultVersion'*/: break;
						case 'refreshname' /*case 'RefreshName'*/: break;
						case 'refreshdate' /*case 'RefreshDate'*/: break;
						case 'refreshdatecopy' /*case 'RefreshDateCopy'*/: break;
						case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
						case 'versionlastupdate' /*case 'VersionLastUpdate'*/: break;
						case 'versionupdateablemin' /*case 'VersionUpdateableMin'*/: break;
						case 'versionrefreshablemin' /*case 'VersionRefreshableMin'*/: break;
						case 'calculation' /*case 'Calculation'*/: break;
						default: seen = false;
					} break;

					/* PageBreaks */
					case 'pagebreaks' /*case 'PageBreaks'*/: switch(Rn[3]) {
						case 'colbreaks' /*case 'ColBreaks'*/: break;
						case 'colbreak' /*case 'ColBreak'*/: break;
						case 'rowbreaks' /*case 'RowBreaks'*/: break;
						case 'rowbreak' /*case 'RowBreak'*/: break;
						case 'colstart' /*case 'ColStart'*/: break;
						case 'colend' /*case 'ColEnd'*/: break;
						case 'rowend' /*case 'RowEnd'*/: break;
						default: seen = false;
					} break;

					/* AutoFilter */
					case 'autofilter' /*case 'AutoFilter'*/: switch(Rn[3]) {
						case 'autofiltercolumn' /*case 'AutoFilterColumn'*/: break;
						case 'autofiltercondition' /*case 'AutoFilterCondition'*/: break;
						case 'autofilterand' /*case 'AutoFilterAnd'*/: break;
						case 'autofilteror' /*case 'AutoFilterOr'*/: break;
						default: seen = false;
					} break;

					/* QueryTable */
					case 'querytable' /*case 'QueryTable'*/: switch(Rn[3]) {
						case 'id' /*case 'Id'*/: break;
						case 'autoformatfont' /*case 'AutoFormatFont'*/: break;
						case 'autoformatpattern' /*case 'AutoFormatPattern'*/: break;
						case 'querysource' /*case 'QuerySource'*/: break;
						case 'querytype' /*case 'QueryType'*/: break;
						case 'enableredirections' /*case 'EnableRedirections'*/: break;
						case 'refreshedinxl9' /*case 'RefreshedInXl9'*/: break;
						case 'urlstring' /*case 'URLString'*/: break;
						case 'htmltables' /*case 'HTMLTables'*/: break;
						case 'connection' /*case 'Connection'*/: break;
						case 'commandtext' /*case 'CommandText'*/: break;
						case 'refreshinfo' /*case 'RefreshInfo'*/: break;
						case 'notitles' /*case 'NoTitles'*/: break;
						case 'nextid' /*case 'NextId'*/: break;
						case 'columninfo' /*case 'ColumnInfo'*/: break;
						case 'overwritecells' /*case 'OverwriteCells'*/: break;
						case 'donotpromptforfile' /*case 'DoNotPromptForFile'*/: break;
						case 'textwizardsettings' /*case 'TextWizardSettings'*/: break;
						case 'source' /*case 'Source'*/: break;
						case 'number' /*case 'Number'*/: break;
						case 'decimal' /*case 'Decimal'*/: break;
						case 'thousandseparator' /*case 'ThousandSeparator'*/: break;
						case 'trailingminusnumbers' /*case 'TrailingMinusNumbers'*/: break;
						case 'formatsettings' /*case 'FormatSettings'*/: break;
						case 'fieldtype' /*case 'FieldType'*/: break;
						case 'delimiters' /*case 'Delimiters'*/: break;
						case 'tab' /*case 'Tab'*/: break;
						case 'comma' /*case 'Comma'*/: break;
						case 'autoformatname' /*case 'AutoFormatName'*/: break;
						case 'versionlastedit' /*case 'VersionLastEdit'*/: break;
						case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
						default: seen = false;
					} break;

					case 'datavalidation' /*case 'DataValidation'*/:
					switch(Rn[3]) {
						case 'range' /*case 'Range'*/: break;

						case 'type' /*case 'Type'*/: break;
						case 'min' /*case 'Min'*/: break;
						case 'max' /*case 'Max'*/: break;
						case 'sort' /*case 'Sort'*/: break;
						case 'descending' /*case 'Descending'*/: break;
						case 'order' /*case 'Order'*/: break;
						case 'casesensitive' /*case 'CaseSensitive'*/: break;
						case 'value' /*case 'Value'*/: break;
						case 'errorstyle' /*case 'ErrorStyle'*/: break;
						case 'errormessage' /*case 'ErrorMessage'*/: break;
						case 'errortitle' /*case 'ErrorTitle'*/: break;
						case 'inputmessage' /*case 'InputMessage'*/: break;
						case 'inputtitle' /*case 'InputTitle'*/: break;
						case 'combohide' /*case 'ComboHide'*/: break;
						case 'inputhide' /*case 'InputHide'*/: break;
						case 'condition' /*case 'Condition'*/: break;
						case 'qualifier' /*case 'Qualifier'*/: break;
						case 'useblank' /*case 'UseBlank'*/: break;
						case 'value1' /*case 'Value1'*/: break;
						case 'value2' /*case 'Value2'*/: break;
						case 'format' /*case 'Format'*/: break;

						case 'cellrangelist' /*case 'CellRangeList'*/: break;
						default: seen = false;
					} break;

					case 'sorting' /*case 'Sorting'*/:
					case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
					switch(Rn[3]) {
						case 'range' /*case 'Range'*/: break;
						case 'type' /*case 'Type'*/: break;
						case 'min' /*case 'Min'*/: break;
						case 'max' /*case 'Max'*/: break;
						case 'sort' /*case 'Sort'*/: break;
						case 'descending' /*case 'Descending'*/: break;
						case 'order' /*case 'Order'*/: break;
						case 'casesensitive' /*case 'CaseSensitive'*/: break;
						case 'value' /*case 'Value'*/: break;
						case 'errorstyle' /*case 'ErrorStyle'*/: break;
						case 'errormessage' /*case 'ErrorMessage'*/: break;
						case 'errortitle' /*case 'ErrorTitle'*/: break;
						case 'cellrangelist' /*case 'CellRangeList'*/: break;
						case 'inputmessage' /*case 'InputMessage'*/: break;
						case 'inputtitle' /*case 'InputTitle'*/: break;
						case 'combohide' /*case 'ComboHide'*/: break;
						case 'inputhide' /*case 'InputHide'*/: break;
						case 'condition' /*case 'Condition'*/: break;
						case 'qualifier' /*case 'Qualifier'*/: break;
						case 'useblank' /*case 'UseBlank'*/: break;
						case 'value1' /*case 'Value1'*/: break;
						case 'value2' /*case 'Value2'*/: break;
						case 'format' /*case 'Format'*/: break;
						default: seen = false;
					} break;

					/* MapInfo (schema) */
					case 'mapinfo' /*case 'MapInfo'*/: case 'schema' /*case 'Schema'*/: case 'data' /*case 'data'*/: switch(Rn[3]) {
						case 'map' /*case 'Map'*/: break;
						case 'entry' /*case 'Entry'*/: break;
						case 'range' /*case 'Range'*/: break;
						case 'xpath' /*case 'XPath'*/: break;
						case 'field' /*case 'Field'*/: break;
						case 'xsdtype' /*case 'XSDType'*/: break;
						case 'filteron' /*case 'FilterOn'*/: break;
						case 'aggregate' /*case 'Aggregate'*/: break;
						case 'elementtype' /*case 'ElementType'*/: break;
						case 'attributetype' /*case 'AttributeType'*/: break;
					/* These are from xsd (XML Schema Definition) */
						case 'schema' /*case 'schema'*/:
						case 'element' /*case 'element'*/:
						case 'complextype' /*case 'complexType'*/:
						case 'datatype' /*case 'datatype'*/:
						case 'all' /*case 'all'*/:
						case 'attribute' /*case 'attribute'*/:
						case 'extends' /*case 'extends'*/: break;

						case 'row' /*case 'row'*/: break;
						default: seen = false;
					} break;

					/* SmartTags (can be anything) */
					case 'smarttags' /*case 'SmartTags'*/: break;

					default: seen = false; break;
				}
				if(seen) break;
				/* CustomDocumentProperties */
				if(Rn[3].match(/!\[CDATA/)) break;
				if(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
				if(state[state.length-1][0]===/*'CustomDocumentProperties'*/'customdocumentproperties') {
					if(Rn[0].slice(-2) === "/>") break;
					else if(Rn[1]==="/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
					else { cp = Rn; pidx = Rn.index + Rn[0].length; }
					break;
				}
				if(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
		}
		var out = ({}/*:any*/);
		if(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
		out.SheetNames = sheetnames;
		out.Workbook = Workbook;
		out.SSF = dup(table_fmt);
		out.Props = Props;
		out.Custprops = Custprops;
		return out;
	}

	function parse_xlml(data/*:RawBytes|string*/, opts)/*:Workbook*/ {
		fix_read_opts(opts=opts||{});
		switch(opts.type||"base64") {
			case "base64": return parse_xlml_xml(Base64_decode(data), opts);
			case "binary": case "buffer": case "file": return parse_xlml_xml(data, opts);
			case "array": return parse_xlml_xml(a2s(data), opts);
		}
		/*:: throw new Error("unsupported type " + opts.type); */
	}
	/* [MS-OLEDS] 2.3.8 CompObjStream */
	function parse_compobj(obj/*:CFBEntry*/) {
		var v = {};
		var o = obj.content;
		/*:: if(o == null) return; */

		/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
		o.l = 28;

		v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
		v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);

		if(o.length - o.l <= 4) return v;

		var m/*:number*/ = o.read_shift(4);
		if(m == 0 || m > 40) return v;
		o.l-=4; v.Reserved1 = o.read_shift(0, "lpstr-ansi");

		if(o.length - o.l <= 4) return v;
		m = o.read_shift(4);
		if(m !== 0x71b239f4) return v;
		v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);

		m = o.read_shift(4);
		if(m == 0 || m > 40) return v;
		o.l-=4; v.Reserved2 = o.read_shift(0, "lpwstr");
	}

	/*
		Continue logic for:
		- 2.4.58 Continue          0x003c
		- 2.4.59 ContinueBigName   0x043c
		- 2.4.60 ContinueFrt       0x0812
		- 2.4.61 ContinueFrt11     0x0875
		- 2.4.62 ContinueFrt12     0x087f
	*/
	var CONTINUE_RT = [ 0x003c, 0x043c, 0x0812, 0x0875, 0x087f ];
	function slurp(RecordType, R, blob, length/*:number*/, opts)/*:any*/ {
		var l = length;
		var bufs = [];
		var d = blob.slice(blob.l,blob.l+l);
		if(opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType) {
		case 0x0009: case 0x0209: case 0x0409: case 0x0809/* BOF */: case 0x002f /* FilePass */: case 0x0195 /* FileLock */: case 0x00e1 /* InterfaceHdr */: case 0x0196 /* RRDInfo */: case 0x0138 /* RRDHead */: case 0x0194 /* UsrExcl */: case 0x000a /* EOF */:
			break;
		case 0x0085 /* BoundSheet8 */:
			break;
		default:
			opts.enc.insitu(d);
		}
		bufs.push(d);
		blob.l += l;
		var nextrt = __readUInt16LE(blob,blob.l), next = XLSRecordEnum[nextrt];
		var start = 0;
		while(next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
			l = __readUInt16LE(blob,blob.l+2);
			start = blob.l + 4;
			if(nextrt == 0x0812 /* ContinueFrt */) start += 4;
			else if(nextrt == 0x0875 || nextrt == 0x087f) {
				start += 12;
			}
			d = blob.slice(start,blob.l+4+l);
			bufs.push(d);
			blob.l += 4+l;
			next = (XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)]);
		}
		var b = (bconcat(bufs)/*:any*/);
		prep_blob(b, 0);
		var ll = 0; b.lens = [];
		for(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }
		if(b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
		return R.f(b, b.length, opts);
	}

	function safe_format_xf(p/*:any*/, opts/*:ParseOpts*/, date1904/*:?boolean*/) {
		if(p.t === 'z') return;
		if(!p.XF) return;
		var fmtid = 0;
		try {
			fmtid = p.z || p.XF.numFmtId || 0;
			if(opts.cellNF) p.z = table_fmt[fmtid];
		} catch(e) { if(opts.WTF) throw e; }
		if(!opts || opts.cellText !== false) try {
			if(p.t === 'e') { p.w = p.w || BErr[p.v]; }
			else if(fmtid === 0 || fmtid == "General") {
				if(p.t === 'n') {
					if((p.v|0) === p.v) p.w = p.v.toString(10);
					else p.w = SSF_general_num(p.v);
				}
				else p.w = SSF_general(p.v);
			}
			else p.w = SSF_format(fmtid,p.v, {date1904:!!date1904, dateNF: opts && opts.dateNF});
		} catch(e) { if(opts.WTF) throw e; }
		if(opts.cellDates && fmtid && p.t == 'n' && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
			var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
		}
	}

	function make_cell(val, ixfe, t)/*:Cell*/ {
		return ({v:val, ixfe:ixfe, t:t}/*:any*/);
	}

	// 2.3.2
	function parse_workbook(blob, options/*:ParseOpts*/)/*:Workbook*/ {
		var wb = ({opts:{}}/*:any*/);
		var Sheets = {};
		var out/*:Worksheet*/ = ((options.dense ? [] : {})/*:any*/);
		var Directory = {};
		var range/*:Range*/ = ({}/*:any*/);
		var last_formula = null;
		var sst/*:SST*/ = ([]/*:any*/);
		var cur_sheet = "";
		var Preamble = {};
		var lastcell, last_cell = "", cc/*:Cell*/, cmnt, rngC, rngR;
		var sharedf = {};
		var arrayf/*:Array<[Range, string]>*/ = [];
		var temp_val/*:Cell*/;
		var country;
		var XFs = []; /* XF records */
		var palette/*:Array<[number, number, number]>*/ = [];
		var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false}, Views:[{}] }/*:any*/), wsprops = {};
		var get_rgb = function getrgb(icv/*:number*/)/*:[number, number, number]*/ {
			if(icv < 8) return XLSIcv[icv];
			if(icv < 64) return palette[icv-8] || XLSIcv[icv];
			return XLSIcv[icv];
		};
		var process_cell_style = function pcs(cell, line/*:any*/, options) {
			var xfd = line.XF.data;
			if(!xfd || !xfd.patternType || !options || !options.cellStyles) return;
			line.s = ({}/*:any*/);
			line.s.patternType = xfd.patternType;
			var t;
			if((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }
			if((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }
		};
		var addcell = function addcell(cell/*:any*/, line/*:any*/, options/*:any*/) {
			if(file_depth > 1) return;
			if(options.sheetRows && cell.r >= options.sheetRows) return;
			if(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
			delete line.ixfe; delete line.XF;
			lastcell = cell;
			last_cell = encode_cell(cell);
			if(!range || !range.s || !range.e) range = {s:{r:0,c:0},e:{r:0,c:0}};
			if(cell.r < range.s.r) range.s.r = cell.r;
			if(cell.c < range.s.c) range.s.c = cell.c;
			if(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
			if(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
			if(options.cellFormula && line.f) {
				for(var afi = 0; afi < arrayf.length; ++afi) {
					if(arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
					if(arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
					line.F = encode_range(arrayf[afi][0]);
					if(arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
					if(line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
					break;
				}
			}
			{
				if(options.dense) {
					if(!out[cell.r]) out[cell.r] = [];
					out[cell.r][cell.c] = line;
				} else out[last_cell] = line;
			}
		};
		var opts = ({
			enc: false, // encrypted
			sbcch: 0, // cch in the preceding SupBook
			snames: [], // sheetnames
			sharedf: sharedf, // shared formulae by address
			arrayf: arrayf, // array formulae array
			rrtabid: [], // RRTabId
			lastuser: "", // Last User from WriteAccess
			biff: 8, // BIFF version
			codepage: 0, // CP from CodePage record
			winlocked: 0, // fLockWn from WinProtect
			cellStyles: !!options && !!options.cellStyles,
			WTF: !!options && !!options.wtf
		}/*:any*/);
		if(options.password) opts.password = options.password;
		var themes;
		var merges/*:Array<Range>*/ = [];
		var objects = [];
		var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
		var seencol = false;
		var supbooks = ([]/*:any*/); // 1-indexed, will hold extern names
		supbooks.SheetNames = opts.snames;
		supbooks.sharedf = opts.sharedf;
		supbooks.arrayf = opts.arrayf;
		supbooks.names = [];
		supbooks.XTI = [];
		var last_RT = 0;
		var file_depth = 0; /* TODO: make a real stack */
		var BIFF2Fmt = 0, BIFF2FmtTable/*:Array<string>*/ = [];
		var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */
		var last_lbl/*:?DefinedName*/;

		/* explicit override for some broken writers */
		opts.codepage = 1200;
		set_cp(1200);
		var seen_codepage = false;
		while(blob.l < blob.length - 1) {
			var s = blob.l;
			var RecordType = blob.read_shift(2);
			if(RecordType === 0 && last_RT === 0x000a /* EOF */) break;
			var length = (blob.l === blob.length ? 0 : blob.read_shift(2));
			var R = XLSRecordEnum[RecordType];
			//console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
			//if(!R) console.log(blob.slice(blob.l, blob.l + length));
			if(R && R.f) {
				if(options.bookSheets) {
					if(last_RT === 0x0085 /* BoundSheet8 */ && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */) break;
				}
				last_RT = RecordType;
				if(R.r === 2 || R.r == 12) {
					var rt = blob.read_shift(2); length -= 2;
					if(!opts.enc && rt !== RecordType && (((rt&0xFF)<<8)|(rt>>8)) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
					if(R.r == 12){
						blob.l += 10; length -= 10;
					} // skip FRT
				}
				//console.error(R,blob.l,length,blob.length);
				var val/*:any*/ = ({}/*:any*/);
				if(RecordType === 0x000a /* EOF */) val = /*::(*/R.f(blob, length, opts)/*:: :any)*/;
				else val = /*::(*/slurp(RecordType, R, blob, length, opts)/*:: :any)*/;
				/*:: val = (val:any); */
				if(file_depth == 0 && [0x0009, 0x0209, 0x0409, 0x0809].indexOf(last_RT) === -1 /* 'BOF' */) continue;
				switch(RecordType) {
					case 0x0022 /* Date1904 */:
						/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
						wb.opts.Date1904 = Workbook.WBProps.date1904 = val; break;
					case 0x0086 /* WriteProtect */: wb.opts.WriteProtect = true; break;
					case 0x002f /* FilePass */:
						if(!opts.enc) blob.l = 0;
						opts.enc = val;
						if(!options.password) throw new Error("File is password-protected");
						if(val.valid == null) throw new Error("Encryption scheme unsupported");
						if(!val.valid) throw new Error("Password is incorrect");
						break;
					case 0x005c /* WriteAccess */: opts.lastuser = val; break;
					case 0x0042 /* CodePage */:
						var cpval = Number(val);
						/* overrides based on test cases */
						switch(cpval) {
							case 0x5212: cpval =  1200; break;
							case 0x8000: cpval = 10000; break;
							case 0x8001: cpval =  1252; break;
						}
						set_cp(opts.codepage = cpval);
						seen_codepage = true;
						break;
					case 0x013d /* RRTabId */: opts.rrtabid = val; break;
					case 0x0019 /* WinProtect */: opts.winlocked = val; break;
					case 0x01b7 /* RefreshAll */: wb.opts["RefreshAll"] = val; break;
					case 0x000c /* CalcCount */: wb.opts["CalcCount"] = val; break;
					case 0x0010 /* CalcDelta */: wb.opts["CalcDelta"] = val; break;
					case 0x0011 /* CalcIter */: wb.opts["CalcIter"] = val; break;
					case 0x000d /* CalcMode */: wb.opts["CalcMode"] = val; break;
					case 0x000e /* CalcPrecision */: wb.opts["CalcPrecision"] = val; break;
					case 0x005f /* CalcSaveRecalc */: wb.opts["CalcSaveRecalc"] = val; break;
					case 0x000f /* CalcRefMode */: opts.CalcRefMode = val; break; // TODO: implement R1C1
					case 0x08a3 /* ForceFullCalculation */: wb.opts.FullCalc = val; break;
					case 0x0081 /* WsBool */:
						if(val.fDialog) out["!type"] = "dialog";
						if(!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
						if(!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
						break; // TODO
					case 0x00e0 /* XF */:
						XFs.push(val); break;
					case 0x01ae /* SupBook */:
						supbooks.push([val]);
						supbooks[supbooks.length-1].XTI = [];
						break;
					case 0x0023: case 0x0223 /* ExternName */:
						supbooks[supbooks.length-1].push(val);
						break;
					case 0x0018: case 0x0218 /* Lbl */:
						last_lbl = ({
							Name: val.Name,
							Ref: stringify_formula(val.rgce,range,null,supbooks,opts)
						}/*:DefinedName*/);
						if(val.itab > 0) last_lbl.Sheet = val.itab - 1;
						supbooks.names.push(last_lbl);
						if(!supbooks[0]) { supbooks[0] = []; supbooks[0].XTI = []; }
						supbooks[supbooks.length-1].push(val);
						if(val.Name == "_xlnm._FilterDatabase" && val.itab > 0)
							if(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')
								FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
						break;
					case 0x0016 /* ExternCount */: opts.ExternCount = val; break;
					case 0x0017 /* ExternSheet */:
						if(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }
						supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;
					case 0x0894 /* NameCmt */:
						/* TODO: search for correct name */
						if(opts.biff < 8) break;
						if(last_lbl != null) last_lbl.Comment = val[1];
						break;
					case 0x0012 /* Protect */: out["!protect"] = val; break; /* for sheet or book */
					case 0x0013 /* Password */: if(val !== 0 && opts.WTF) console.error("Password verifier: " + val); break;
					case 0x0085 /* BoundSheet8 */: {
						Directory[val.pos] = val;
						opts.snames.push(val.name);
					} break;
					case 0x000a /* EOF */: {
						if(--file_depth) break;
						if(range.e) {
							if(range.e.r > 0 && range.e.c > 0) {
								range.e.r--; range.e.c--;
								out["!ref"] = encode_range(range);
								if(options.sheetRows && options.sheetRows <= range.e.r) {
									var tmpri = range.e.r;
									range.e.r = options.sheetRows - 1;
									out["!fullref"] = out["!ref"];
									out["!ref"] = encode_range(range);
									range.e.r = tmpri;
								}
								range.e.r++; range.e.c++;
							}
							if(merges.length > 0) out["!merges"] = merges;
							if(objects.length > 0) out["!objects"] = objects;
							if(colinfo.length > 0) out["!cols"] = colinfo;
							if(rowinfo.length > 0) out["!rows"] = rowinfo;
							Workbook.Sheets.push(wsprops);
						}
						if(cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
						out = ((options.dense ? [] : {})/*:any*/);
					} break;
					case 0x0009: case 0x0209: case 0x0409: case 0x0809 /* BOF */: {
						if(opts.biff === 8) opts.biff = {
							/*::[*/0x0009/*::]*/:2,
							/*::[*/0x0209/*::]*/:3,
							/*::[*/0x0409/*::]*/:4
						}[RecordType] || {
							/*::[*/0x0200/*::]*/:2,
							/*::[*/0x0300/*::]*/:3,
							/*::[*/0x0400/*::]*/:4,
							/*::[*/0x0500/*::]*/:5,
							/*::[*/0x0600/*::]*/:8,
							/*::[*/0x0002/*::]*/:2,
							/*::[*/0x0007/*::]*/:2
						}[val.BIFFVer] || 8;
						opts.biffguess = val.BIFFVer == 0;
						if(val.BIFFVer == 0 && val.dt == 0x1000) { opts.biff = 5; seen_codepage = true; set_cp(opts.codepage = 28591); }
						if(opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
						if(file_depth++) break;
						out = ((options.dense ? [] : {})/*:any*/);

						if(opts.biff < 8 && !seen_codepage) { seen_codepage = true; set_cp(opts.codepage = options.codepage || 1252); }

						if(opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {
							if(cur_sheet === "") cur_sheet = "Sheet1";
							range = {s:{r:0,c:0},e:{r:0,c:0}};
							/* fake BoundSheet8 */
							var fakebs8 = {pos: blob.l - length, name:cur_sheet};
							Directory[fakebs8.pos] = fakebs8;
							opts.snames.push(cur_sheet);
						}
						else cur_sheet = (Directory[s] || {name:""}).name;
						if(val.dt == 0x20) out["!type"] = "chart";
						if(val.dt == 0x40) out["!type"] = "macro";
						merges = [];
						objects = [];
						opts.arrayf = arrayf = [];
						colinfo = []; rowinfo = [];
						seencol = false;
						wsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };
					} break;
					case 0x0203 /* Number */: case 0x0003 /* BIFF2NUM */: case 0x0002 /* BIFF2INT */: {
						if(out["!type"] == "chart") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;
						temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'}/*:any*/);
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 0x0005: case 0x0205 /* BoolErr */: {
						temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t}/*:any*/);
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 0x027e /* RK */: {
						temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'}/*:any*/);
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 0x00bd /* MulRk */: {
						for(var j = val.c; j <= val.C; ++j) {
							var ixfe = val.rkrec[j-val.c][0];
							temp_val= ({ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'}/*:any*/);
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell({c:j, r:val.r}, temp_val, options);
						}
					} break;
					case 0x0006: case 0x0206: case 0x0406 /* Formula */: {
						if(val.val == 'String') { last_formula = val; break; }
						temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
						temp_val.XF = XFs[temp_val.ixfe];
						if(options.cellFormula) {
							var _f = val.formula;
							if(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
								var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
								var _fe = encode_cell({r:_fr, c:_fc});
								if(sharedf[_fe]) temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
								else temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;
							} else temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
						}
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell(val.cell, temp_val, options);
						last_formula = val;
					} break;
					case 0x0007: case 0x0207 /* String */: {
						if(last_formula) { /* technically always true */
							last_formula.val = val;
							temp_val = make_cell(val, last_formula.cell.ixfe, 's');
							temp_val.XF = XFs[temp_val.ixfe];
							if(options.cellFormula) {
								temp_val.f = ""+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
							}
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell(last_formula.cell, temp_val, options);
							last_formula = null;
						} else throw new Error("String record expects Formula");
					} break;
					case 0x0021: case 0x0221 /* Array */: {
						arrayf.push(val);
						var _arraystart = encode_cell(val[0].s);
						cc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];
						if(options.cellFormula && cc) {
							if(!last_formula) break; /* technically unreachable */
							if(!_arraystart || !cc) break;
							cc.f = ""+stringify_formula(val[1], range, val[0], supbooks, opts);
							cc.F = encode_range(val[0]);
						}
					} break;
					case 0x04bc /* ShrFmla */: {
						if(!options.cellFormula) break;
						if(last_cell) {
							/* TODO: capture range */
							if(!last_formula) break; /* technically unreachable */
							sharedf[encode_cell(last_formula.cell)]= val[0];
							cc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
							(cc||{}).f = ""+stringify_formula(val[0], range, lastcell, supbooks, opts);
						}
					} break;
					case 0x00fd /* LabelSst */:
						temp_val=make_cell(sst[val.isst].t, val.ixfe, 's');
						if(sst[val.isst].h) temp_val.h = sst[val.isst].h;
						temp_val.XF = XFs[temp_val.ixfe];
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
						break;
					case 0x0201 /* Blank */: if(options.sheetStubs) {
						temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'}/*:any*/);
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 0x00be /* MulBlank */: if(options.sheetStubs) {
						for(var _j = val.c; _j <= val.C; ++_j) {
							var _ixfe = val.ixfe[_j-val.c];
							temp_val= ({ixfe:_ixfe, XF:XFs[_ixfe], t:'z'}/*:any*/);
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell({c:_j, r:val.r}, temp_val, options);
						}
					} break;
					case 0x00d6 /* RString */:
					case 0x0204 /* Label */: case 0x0004 /* BIFF2STR */:
						temp_val=make_cell(val.val, val.ixfe, 's');
						temp_val.XF = XFs[temp_val.ixfe];
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
						break;

					case 0x0000: case 0x0200 /* Dimensions */: {
						if(file_depth === 1) range = val; /* TODO: stack */
					} break;
					case 0x00fc /* SST */: {
						sst = val;
					} break;
					case 0x041e /* Format */: { /* val = [id, fmt] */
						if(opts.biff == 4) {
							BIFF2FmtTable[BIFF2Fmt++] = val[1];
							for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if(table_fmt[b4idx] == val[1]) break;
							if(b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
						}
						else SSF_load(val[1], val[0]);
					} break;
					case 0x001e /* BIFF2FORMAT */: {
						BIFF2FmtTable[BIFF2Fmt++] = val;
						for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(table_fmt[b2idx] == val) break;
						if(b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
					} break;

					case 0x00e5 /* MergeCells */: merges = merges.concat(val); break;

					case 0x005d /* Obj */: objects[val.cmo[0]] = opts.lastobj = val; break;
					case 0x01b6 /* TxO */: opts.lastobj.TxO = val; break;
					case 0x007f /* ImData */: opts.lastobj.ImData = val; break;

					case 0x01b8 /* HLink */: {
						for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
							for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
								cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
								if(cc) cc.l = val[1];
							}
					} break;
					case 0x0800 /* HLinkTooltip */: {
						for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
							for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
								cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
								if(cc && cc.l) cc.l.Tooltip = val[1];
								}
					} break;
					case 0x001c /* Note */: {
						if(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */
						cc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];
						var noteobj = objects[val[2]];
						if(!cc) {
							if(options.dense) {
								if(!out[val[0].r]) out[val[0].r] = [];
								cc = out[val[0].r][val[0].c] = ({t:"z"}/*:any*/);
							} else {
								cc = out[encode_cell(val[0])] = ({t:"z"}/*:any*/);
							}
							range.e.r = Math.max(range.e.r, val[0].r);
							range.s.r = Math.min(range.s.r, val[0].r);
							range.e.c = Math.max(range.e.c, val[0].c);
							range.s.c = Math.min(range.s.c, val[0].c);
						}
						if(!cc.c) cc.c = [];
						cmnt = {a:val[1],t:noteobj.TxO.t};
						cc.c.push(cmnt);
					} break;
					case 0x087d /* XFExt */: update_xfext(XFs[val.ixfe], val.ext); break;
					case 0x007d /* ColInfo */: {
						if(!opts.cellStyles) break;
						while(val.e >= val.s) {
							colinfo[val.e--] = { width: val.w/256, level: (val.level || 0), hidden: !!(val.flags & 1) };
							if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
							process_col(colinfo[val.e+1]);
						}
					} break;
					case 0x0208 /* Row */: {
						var rowobj = {};
						if(val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level; }
						if(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }
						if(val.hpt) {
							rowinfo[val.r] = rowobj;
							rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);
						}
					} break;
					case 0x0026 /* LeftMargin */:
					case 0x0027 /* RightMargin */:
					case 0x0028 /* TopMargin */:
					case 0x0029 /* BottomMargin */:
						if(!out['!margins']) default_margins(out['!margins'] = {});
						out['!margins'][({0x26: "left", 0x27:"right", 0x28:"top", 0x29:"bottom"})[RecordType]] = val;
						break;
					case 0x00a1 /* Setup */: // TODO
						if(!out['!margins']) default_margins(out['!margins'] = {});
						out['!margins'].header = val.header;
						out['!margins'].footer = val.footer;
						break;
					case 0x023e /* Window2 */: // TODO
						// $FlowIgnore
						if(val.RTL) Workbook.Views[0].RTL = true;
						break;
					case 0x0092 /* Palette */: palette = val; break;
					case 0x0896 /* Theme */: themes = val; break;
					case 0x008c /* Country */: country = val; break;
					case 0x01ba /* CodeName */: {
						/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
						if(!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
						else wsprops.CodeName = val || wsprops.name;
					} break;
				}
			} else {
				if(!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
				blob.l += length;
			}
		}
		wb.SheetNames=keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});
		if(!options.bookSheets) wb.Sheets=Sheets;
		if(!wb.SheetNames.length && Preamble["!ref"]) {
			wb.SheetNames.push("Sheet1");
			/*jshint -W069 */
			if(wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
			/*jshint +W069 */
		} else wb.Preamble=Preamble;
		if(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });
		wb.Strings = sst;
		wb.SSF = dup(table_fmt);
		if(opts.enc) wb.Encryption = opts.enc;
		if(themes) wb.Themes = themes;
		wb.Metadata = {};
		if(country !== undefined) wb.Metadata.Country = country;
		if(supbooks.names.length > 0) Workbook.Names = supbooks.names;
		wb.Workbook = Workbook;
		return wb;
	}

	/* TODO: split props*/
	var PSCLSID = {
		SI: "e0859ff2f94f6810ab9108002b27b3d9",
		DSI: "02d5cdd59c2e1b10939708002b2cf9ae"};
	function parse_xls_props(cfb/*:CFBContainer*/, props, o) {
		/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
		var DSI = CFB.find(cfb, '/!DocumentSummaryInformation');
		if(DSI && DSI.size > 0) try {
			var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
			for(var d in DocSummary) props[d] = DocSummary[d];
		} catch(e) {if(o.WTF) throw e;/* empty */}

		/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
		var SI = CFB.find(cfb, '/!SummaryInformation');
		if(SI && SI.size > 0) try {
			var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
			for(var s in Summary) if(props[s] == null) props[s] = Summary[s];
		} catch(e) {if(o.WTF) throw e;/* empty */}

		if(props.HeadingPairs && props.TitlesOfParts) {
			load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
			delete props.HeadingPairs; delete props.TitlesOfParts;
		}
	}

	function parse_xlscfb(cfb/*:any*/, options/*:?ParseOpts*/)/*:Workbook*/ {
	if(!options) options = {};
	fix_read_opts(options);
	reset_cp();
	if(options.codepage) set_ansi(options.codepage);
	var CompObj/*:?CFBEntry*/, WB/*:?any*/;
	if(cfb.FullPaths) {
		if(CFB.find(cfb, '/encryption')) throw new Error("File is password-protected");
		CompObj = CFB.find(cfb, '!CompObj');
		WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
	} else {
		switch(options.type) {
			case 'base64': cfb = s2a(Base64_decode(cfb)); break;
			case 'binary': cfb = s2a(cfb); break;
			case 'buffer': break;
			case 'array': if(!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb); break;
		}
		prep_blob(cfb, 0);
		WB = ({content: cfb}/*:any*/);
	}
	var /*::CompObjP, */WorkbookP/*:: :Workbook = XLSX.utils.book_new(); */;

	var _data/*:?any*/;
	if(CompObj) /*::CompObjP = */parse_compobj(CompObj);
	if(options.bookProps && !options.bookSheets) WorkbookP = ({}/*:any*/);
	else/*:: if(cfb instanceof CFBContainer) */ {
		var T = has_buf ? 'buffer' : 'array';
		if(WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
		/* Quattro Pro 7-8 */
		else if((_data=CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
		/* Quattro Pro 9 */
		else if((_data=CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
		/* Works 4 for Mac */
		else if((_data=CFB.find(cfb, 'MN0')) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
		else throw new Error("Cannot find Workbook stream");
		if(options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);
	}

	var props = {};
	if(cfb.FullPaths) parse_xls_props(/*::((*/cfb/*:: :any):CFBContainer)*/, props, options);

	WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */
	if(options.bookFiles) WorkbookP.cfb = cfb;
	/*WorkbookP.CompObjP = CompObjP; // TODO: storage? */
	return WorkbookP;
	}
	/* [MS-XLSB] 2.3 Record Enumeration */
	var XLSBRecordEnum = {
		/*::[*/0x0000/*::]*/: { /* n:"BrtRowHdr", */ f:parse_BrtRowHdr },
		/*::[*/0x0001/*::]*/: { /* n:"BrtCellBlank", */ f:parse_BrtCellBlank },
		/*::[*/0x0002/*::]*/: { /* n:"BrtCellRk", */ f:parse_BrtCellRk },
		/*::[*/0x0003/*::]*/: { /* n:"BrtCellError", */ f:parse_BrtCellError },
		/*::[*/0x0004/*::]*/: { /* n:"BrtCellBool", */ f:parse_BrtCellBool },
		/*::[*/0x0005/*::]*/: { /* n:"BrtCellReal", */ f:parse_BrtCellReal },
		/*::[*/0x0006/*::]*/: { /* n:"BrtCellSt", */ f:parse_BrtCellSt },
		/*::[*/0x0007/*::]*/: { /* n:"BrtCellIsst", */ f:parse_BrtCellIsst },
		/*::[*/0x0008/*::]*/: { /* n:"BrtFmlaString", */ f:parse_BrtFmlaString },
		/*::[*/0x0009/*::]*/: { /* n:"BrtFmlaNum", */ f:parse_BrtFmlaNum },
		/*::[*/0x000A/*::]*/: { /* n:"BrtFmlaBool", */ f:parse_BrtFmlaBool },
		/*::[*/0x000B/*::]*/: { /* n:"BrtFmlaError", */ f:parse_BrtFmlaError },
		/*::[*/0x000C/*::]*/: { /* n:"BrtShortBlank", */ f:parse_BrtShortBlank },
		/*::[*/0x000D/*::]*/: { /* n:"BrtShortRk", */ f:parse_BrtShortRk },
		/*::[*/0x000E/*::]*/: { /* n:"BrtShortError", */ f:parse_BrtShortError },
		/*::[*/0x000F/*::]*/: { /* n:"BrtShortBool", */ f:parse_BrtShortBool },
		/*::[*/0x0010/*::]*/: { /* n:"BrtShortReal", */ f:parse_BrtShortReal },
		/*::[*/0x0011/*::]*/: { /* n:"BrtShortSt", */ f:parse_BrtShortSt },
		/*::[*/0x0012/*::]*/: { /* n:"BrtShortIsst", */ f:parse_BrtShortIsst },
		/*::[*/0x0013/*::]*/: { /* n:"BrtSSTItem", */ f:parse_RichStr },
		/*::[*/0x0014/*::]*/: { /* n:"BrtPCDIMissing" */ },
		/*::[*/0x0015/*::]*/: { /* n:"BrtPCDINumber" */ },
		/*::[*/0x0016/*::]*/: { /* n:"BrtPCDIBoolean" */ },
		/*::[*/0x0017/*::]*/: { /* n:"BrtPCDIError" */ },
		/*::[*/0x0018/*::]*/: { /* n:"BrtPCDIString" */ },
		/*::[*/0x0019/*::]*/: { /* n:"BrtPCDIDatetime" */ },
		/*::[*/0x001A/*::]*/: { /* n:"BrtPCDIIndex" */ },
		/*::[*/0x001B/*::]*/: { /* n:"BrtPCDIAMissing" */ },
		/*::[*/0x001C/*::]*/: { /* n:"BrtPCDIANumber" */ },
		/*::[*/0x001D/*::]*/: { /* n:"BrtPCDIABoolean" */ },
		/*::[*/0x001E/*::]*/: { /* n:"BrtPCDIAError" */ },
		/*::[*/0x001F/*::]*/: { /* n:"BrtPCDIAString" */ },
		/*::[*/0x0020/*::]*/: { /* n:"BrtPCDIADatetime" */ },
		/*::[*/0x0021/*::]*/: { /* n:"BrtPCRRecord" */ },
		/*::[*/0x0022/*::]*/: { /* n:"BrtPCRRecordDt" */ },
		/*::[*/0x0023/*::]*/: { /* n:"BrtFRTBegin", */ T:1 },
		/*::[*/0x0024/*::]*/: { /* n:"BrtFRTEnd", */ T:-1 },
		/*::[*/0x0025/*::]*/: { /* n:"BrtACBegin", */ T:1 },
		/*::[*/0x0026/*::]*/: { /* n:"BrtACEnd", */ T:-1 },
		/*::[*/0x0027/*::]*/: { /* n:"BrtName", */ f:parse_BrtName },
		/*::[*/0x0028/*::]*/: { /* n:"BrtIndexRowBlock" */ },
		/*::[*/0x002A/*::]*/: { /* n:"BrtIndexBlock" */ },
		/*::[*/0x002B/*::]*/: { /* n:"BrtFont", */ f:parse_BrtFont },
		/*::[*/0x002C/*::]*/: { /* n:"BrtFmt", */ f:parse_BrtFmt },
		/*::[*/0x002D/*::]*/: { /* n:"BrtFill", */ f:parse_BrtFill },
		/*::[*/0x002E/*::]*/: { /* n:"BrtBorder", */ f:parse_BrtBorder },
		/*::[*/0x002F/*::]*/: { /* n:"BrtXF", */ f:parse_BrtXF },
		/*::[*/0x0030/*::]*/: { /* n:"BrtStyle" */ },
		/*::[*/0x0031/*::]*/: { /* n:"BrtCellMeta", */ f:parse_Int32LE },
		/*::[*/0x0032/*::]*/: { /* n:"BrtValueMeta" */ },
		/*::[*/0x0033/*::]*/: { /* n:"BrtMdb" */ f:parse_BrtMdb },
		/*::[*/0x0034/*::]*/: { /* n:"BrtBeginFmd", */ T:1 },
		/*::[*/0x0035/*::]*/: { /* n:"BrtEndFmd", */ T:-1 },
		/*::[*/0x0036/*::]*/: { /* n:"BrtBeginMdx", */ T:1 },
		/*::[*/0x0037/*::]*/: { /* n:"BrtEndMdx", */ T:-1 },
		/*::[*/0x0038/*::]*/: { /* n:"BrtBeginMdxTuple", */ T:1 },
		/*::[*/0x0039/*::]*/: { /* n:"BrtEndMdxTuple", */ T:-1 },
		/*::[*/0x003A/*::]*/: { /* n:"BrtMdxMbrIstr" */ },
		/*::[*/0x003B/*::]*/: { /* n:"BrtStr" */ },
		/*::[*/0x003C/*::]*/: { /* n:"BrtColInfo", */ f:parse_ColInfo },
		/*::[*/0x003E/*::]*/: { /* n:"BrtCellRString", */ f:parse_BrtCellRString },
		/*::[*/0x003F/*::]*/: { /* n:"BrtCalcChainItem$", */ f:parse_BrtCalcChainItem$ },
		/*::[*/0x0040/*::]*/: { /* n:"BrtDVal", */ f:parse_BrtDVal },
		/*::[*/0x0041/*::]*/: { /* n:"BrtSxvcellNum" */ },
		/*::[*/0x0042/*::]*/: { /* n:"BrtSxvcellStr" */ },
		/*::[*/0x0043/*::]*/: { /* n:"BrtSxvcellBool" */ },
		/*::[*/0x0044/*::]*/: { /* n:"BrtSxvcellErr" */ },
		/*::[*/0x0045/*::]*/: { /* n:"BrtSxvcellDate" */ },
		/*::[*/0x0046/*::]*/: { /* n:"BrtSxvcellNil" */ },
		/*::[*/0x0080/*::]*/: { /* n:"BrtFileVersion" */ },
		/*::[*/0x0081/*::]*/: { /* n:"BrtBeginSheet", */ T:1 },
		/*::[*/0x0082/*::]*/: { /* n:"BrtEndSheet", */ T:-1 },
		/*::[*/0x0083/*::]*/: { /* n:"BrtBeginBook", */ T:1, f:parsenoop, p:0 },
		/*::[*/0x0084/*::]*/: { /* n:"BrtEndBook", */ T:-1 },
		/*::[*/0x0085/*::]*/: { /* n:"BrtBeginWsViews", */ T:1 },
		/*::[*/0x0086/*::]*/: { /* n:"BrtEndWsViews", */ T:-1 },
		/*::[*/0x0087/*::]*/: { /* n:"BrtBeginBookViews", */ T:1 },
		/*::[*/0x0088/*::]*/: { /* n:"BrtEndBookViews", */ T:-1 },
		/*::[*/0x0089/*::]*/: { /* n:"BrtBeginWsView", */ T:1, f:parse_BrtBeginWsView },
		/*::[*/0x008A/*::]*/: { /* n:"BrtEndWsView", */ T:-1 },
		/*::[*/0x008B/*::]*/: { /* n:"BrtBeginCsViews", */ T:1 },
		/*::[*/0x008C/*::]*/: { /* n:"BrtEndCsViews", */ T:-1 },
		/*::[*/0x008D/*::]*/: { /* n:"BrtBeginCsView", */ T:1 },
		/*::[*/0x008E/*::]*/: { /* n:"BrtEndCsView", */ T:-1 },
		/*::[*/0x008F/*::]*/: { /* n:"BrtBeginBundleShs", */ T:1 },
		/*::[*/0x0090/*::]*/: { /* n:"BrtEndBundleShs", */ T:-1 },
		/*::[*/0x0091/*::]*/: { /* n:"BrtBeginSheetData", */ T:1 },
		/*::[*/0x0092/*::]*/: { /* n:"BrtEndSheetData", */ T:-1 },
		/*::[*/0x0093/*::]*/: { /* n:"BrtWsProp", */ f:parse_BrtWsProp },
		/*::[*/0x0094/*::]*/: { /* n:"BrtWsDim", */ f:parse_BrtWsDim, p:16 },
		/*::[*/0x0097/*::]*/: { /* n:"BrtPane", */ f:parse_BrtPane },
		/*::[*/0x0098/*::]*/: { /* n:"BrtSel" */ },
		/*::[*/0x0099/*::]*/: { /* n:"BrtWbProp", */ f:parse_BrtWbProp },
		/*::[*/0x009A/*::]*/: { /* n:"BrtWbFactoid" */ },
		/*::[*/0x009B/*::]*/: { /* n:"BrtFileRecover" */ },
		/*::[*/0x009C/*::]*/: { /* n:"BrtBundleSh", */ f:parse_BrtBundleSh },
		/*::[*/0x009D/*::]*/: { /* n:"BrtCalcProp" */ },
		/*::[*/0x009E/*::]*/: { /* n:"BrtBookView" */ },
		/*::[*/0x009F/*::]*/: { /* n:"BrtBeginSst", */ T:1, f:parse_BrtBeginSst },
		/*::[*/0x00A0/*::]*/: { /* n:"BrtEndSst", */ T:-1 },
		/*::[*/0x00A1/*::]*/: { /* n:"BrtBeginAFilter", */ T:1, f:parse_UncheckedRfX },
		/*::[*/0x00A2/*::]*/: { /* n:"BrtEndAFilter", */ T:-1 },
		/*::[*/0x00A3/*::]*/: { /* n:"BrtBeginFilterColumn", */ T:1 },
		/*::[*/0x00A4/*::]*/: { /* n:"BrtEndFilterColumn", */ T:-1 },
		/*::[*/0x00A5/*::]*/: { /* n:"BrtBeginFilters", */ T:1 },
		/*::[*/0x00A6/*::]*/: { /* n:"BrtEndFilters", */ T:-1 },
		/*::[*/0x00A7/*::]*/: { /* n:"BrtFilter" */ },
		/*::[*/0x00A8/*::]*/: { /* n:"BrtColorFilter" */ },
		/*::[*/0x00A9/*::]*/: { /* n:"BrtIconFilter" */ },
		/*::[*/0x00AA/*::]*/: { /* n:"BrtTop10Filter" */ },
		/*::[*/0x00AB/*::]*/: { /* n:"BrtDynamicFilter" */ },
		/*::[*/0x00AC/*::]*/: { /* n:"BrtBeginCustomFilters", */ T:1 },
		/*::[*/0x00AD/*::]*/: { /* n:"BrtEndCustomFilters", */ T:-1 },
		/*::[*/0x00AE/*::]*/: { /* n:"BrtCustomFilter" */ },
		/*::[*/0x00AF/*::]*/: { /* n:"BrtAFilterDateGroupItem" */ },
		/*::[*/0x00B0/*::]*/: { /* n:"BrtMergeCell", */ f:parse_BrtMergeCell },
		/*::[*/0x00B1/*::]*/: { /* n:"BrtBeginMergeCells", */ T:1 },
		/*::[*/0x00B2/*::]*/: { /* n:"BrtEndMergeCells", */ T:-1 },
		/*::[*/0x00B3/*::]*/: { /* n:"BrtBeginPivotCacheDef", */ T:1 },
		/*::[*/0x00B4/*::]*/: { /* n:"BrtEndPivotCacheDef", */ T:-1 },
		/*::[*/0x00B5/*::]*/: { /* n:"BrtBeginPCDFields", */ T:1 },
		/*::[*/0x00B6/*::]*/: { /* n:"BrtEndPCDFields", */ T:-1 },
		/*::[*/0x00B7/*::]*/: { /* n:"BrtBeginPCDField", */ T:1 },
		/*::[*/0x00B8/*::]*/: { /* n:"BrtEndPCDField", */ T:-1 },
		/*::[*/0x00B9/*::]*/: { /* n:"BrtBeginPCDSource", */ T:1 },
		/*::[*/0x00BA/*::]*/: { /* n:"BrtEndPCDSource", */ T:-1 },
		/*::[*/0x00BB/*::]*/: { /* n:"BrtBeginPCDSRange", */ T:1 },
		/*::[*/0x00BC/*::]*/: { /* n:"BrtEndPCDSRange", */ T:-1 },
		/*::[*/0x00BD/*::]*/: { /* n:"BrtBeginPCDFAtbl", */ T:1 },
		/*::[*/0x00BE/*::]*/: { /* n:"BrtEndPCDFAtbl", */ T:-1 },
		/*::[*/0x00BF/*::]*/: { /* n:"BrtBeginPCDIRun", */ T:1 },
		/*::[*/0x00C0/*::]*/: { /* n:"BrtEndPCDIRun", */ T:-1 },
		/*::[*/0x00C1/*::]*/: { /* n:"BrtBeginPivotCacheRecords", */ T:1 },
		/*::[*/0x00C2/*::]*/: { /* n:"BrtEndPivotCacheRecords", */ T:-1 },
		/*::[*/0x00C3/*::]*/: { /* n:"BrtBeginPCDHierarchies", */ T:1 },
		/*::[*/0x00C4/*::]*/: { /* n:"BrtEndPCDHierarchies", */ T:-1 },
		/*::[*/0x00C5/*::]*/: { /* n:"BrtBeginPCDHierarchy", */ T:1 },
		/*::[*/0x00C6/*::]*/: { /* n:"BrtEndPCDHierarchy", */ T:-1 },
		/*::[*/0x00C7/*::]*/: { /* n:"BrtBeginPCDHFieldsUsage", */ T:1 },
		/*::[*/0x00C8/*::]*/: { /* n:"BrtEndPCDHFieldsUsage", */ T:-1 },
		/*::[*/0x00C9/*::]*/: { /* n:"BrtBeginExtConnection", */ T:1 },
		/*::[*/0x00CA/*::]*/: { /* n:"BrtEndExtConnection", */ T:-1 },
		/*::[*/0x00CB/*::]*/: { /* n:"BrtBeginECDbProps", */ T:1 },
		/*::[*/0x00CC/*::]*/: { /* n:"BrtEndECDbProps", */ T:-1 },
		/*::[*/0x00CD/*::]*/: { /* n:"BrtBeginECOlapProps", */ T:1 },
		/*::[*/0x00CE/*::]*/: { /* n:"BrtEndECOlapProps", */ T:-1 },
		/*::[*/0x00CF/*::]*/: { /* n:"BrtBeginPCDSConsol", */ T:1 },
		/*::[*/0x00D0/*::]*/: { /* n:"BrtEndPCDSConsol", */ T:-1 },
		/*::[*/0x00D1/*::]*/: { /* n:"BrtBeginPCDSCPages", */ T:1 },
		/*::[*/0x00D2/*::]*/: { /* n:"BrtEndPCDSCPages", */ T:-1 },
		/*::[*/0x00D3/*::]*/: { /* n:"BrtBeginPCDSCPage", */ T:1 },
		/*::[*/0x00D4/*::]*/: { /* n:"BrtEndPCDSCPage", */ T:-1 },
		/*::[*/0x00D5/*::]*/: { /* n:"BrtBeginPCDSCPItem", */ T:1 },
		/*::[*/0x00D6/*::]*/: { /* n:"BrtEndPCDSCPItem", */ T:-1 },
		/*::[*/0x00D7/*::]*/: { /* n:"BrtBeginPCDSCSets", */ T:1 },
		/*::[*/0x00D8/*::]*/: { /* n:"BrtEndPCDSCSets", */ T:-1 },
		/*::[*/0x00D9/*::]*/: { /* n:"BrtBeginPCDSCSet", */ T:1 },
		/*::[*/0x00DA/*::]*/: { /* n:"BrtEndPCDSCSet", */ T:-1 },
		/*::[*/0x00DB/*::]*/: { /* n:"BrtBeginPCDFGroup", */ T:1 },
		/*::[*/0x00DC/*::]*/: { /* n:"BrtEndPCDFGroup", */ T:-1 },
		/*::[*/0x00DD/*::]*/: { /* n:"BrtBeginPCDFGItems", */ T:1 },
		/*::[*/0x00DE/*::]*/: { /* n:"BrtEndPCDFGItems", */ T:-1 },
		/*::[*/0x00DF/*::]*/: { /* n:"BrtBeginPCDFGRange", */ T:1 },
		/*::[*/0x00E0/*::]*/: { /* n:"BrtEndPCDFGRange", */ T:-1 },
		/*::[*/0x00E1/*::]*/: { /* n:"BrtBeginPCDFGDiscrete", */ T:1 },
		/*::[*/0x00E2/*::]*/: { /* n:"BrtEndPCDFGDiscrete", */ T:-1 },
		/*::[*/0x00E3/*::]*/: { /* n:"BrtBeginPCDSDTupleCache", */ T:1 },
		/*::[*/0x00E4/*::]*/: { /* n:"BrtEndPCDSDTupleCache", */ T:-1 },
		/*::[*/0x00E5/*::]*/: { /* n:"BrtBeginPCDSDTCEntries", */ T:1 },
		/*::[*/0x00E6/*::]*/: { /* n:"BrtEndPCDSDTCEntries", */ T:-1 },
		/*::[*/0x00E7/*::]*/: { /* n:"BrtBeginPCDSDTCEMembers", */ T:1 },
		/*::[*/0x00E8/*::]*/: { /* n:"BrtEndPCDSDTCEMembers", */ T:-1 },
		/*::[*/0x00E9/*::]*/: { /* n:"BrtBeginPCDSDTCEMember", */ T:1 },
		/*::[*/0x00EA/*::]*/: { /* n:"BrtEndPCDSDTCEMember", */ T:-1 },
		/*::[*/0x00EB/*::]*/: { /* n:"BrtBeginPCDSDTCQueries", */ T:1 },
		/*::[*/0x00EC/*::]*/: { /* n:"BrtEndPCDSDTCQueries", */ T:-1 },
		/*::[*/0x00ED/*::]*/: { /* n:"BrtBeginPCDSDTCQuery", */ T:1 },
		/*::[*/0x00EE/*::]*/: { /* n:"BrtEndPCDSDTCQuery", */ T:-1 },
		/*::[*/0x00EF/*::]*/: { /* n:"BrtBeginPCDSDTCSets", */ T:1 },
		/*::[*/0x00F0/*::]*/: { /* n:"BrtEndPCDSDTCSets", */ T:-1 },
		/*::[*/0x00F1/*::]*/: { /* n:"BrtBeginPCDSDTCSet", */ T:1 },
		/*::[*/0x00F2/*::]*/: { /* n:"BrtEndPCDSDTCSet", */ T:-1 },
		/*::[*/0x00F3/*::]*/: { /* n:"BrtBeginPCDCalcItems", */ T:1 },
		/*::[*/0x00F4/*::]*/: { /* n:"BrtEndPCDCalcItems", */ T:-1 },
		/*::[*/0x00F5/*::]*/: { /* n:"BrtBeginPCDCalcItem", */ T:1 },
		/*::[*/0x00F6/*::]*/: { /* n:"BrtEndPCDCalcItem", */ T:-1 },
		/*::[*/0x00F7/*::]*/: { /* n:"BrtBeginPRule", */ T:1 },
		/*::[*/0x00F8/*::]*/: { /* n:"BrtEndPRule", */ T:-1 },
		/*::[*/0x00F9/*::]*/: { /* n:"BrtBeginPRFilters", */ T:1 },
		/*::[*/0x00FA/*::]*/: { /* n:"BrtEndPRFilters", */ T:-1 },
		/*::[*/0x00FB/*::]*/: { /* n:"BrtBeginPRFilter", */ T:1 },
		/*::[*/0x00FC/*::]*/: { /* n:"BrtEndPRFilter", */ T:-1 },
		/*::[*/0x00FD/*::]*/: { /* n:"BrtBeginPNames", */ T:1 },
		/*::[*/0x00FE/*::]*/: { /* n:"BrtEndPNames", */ T:-1 },
		/*::[*/0x00FF/*::]*/: { /* n:"BrtBeginPName", */ T:1 },
		/*::[*/0x0100/*::]*/: { /* n:"BrtEndPName", */ T:-1 },
		/*::[*/0x0101/*::]*/: { /* n:"BrtBeginPNPairs", */ T:1 },
		/*::[*/0x0102/*::]*/: { /* n:"BrtEndPNPairs", */ T:-1 },
		/*::[*/0x0103/*::]*/: { /* n:"BrtBeginPNPair", */ T:1 },
		/*::[*/0x0104/*::]*/: { /* n:"BrtEndPNPair", */ T:-1 },
		/*::[*/0x0105/*::]*/: { /* n:"BrtBeginECWebProps", */ T:1 },
		/*::[*/0x0106/*::]*/: { /* n:"BrtEndECWebProps", */ T:-1 },
		/*::[*/0x0107/*::]*/: { /* n:"BrtBeginEcWpTables", */ T:1 },
		/*::[*/0x0108/*::]*/: { /* n:"BrtEndECWPTables", */ T:-1 },
		/*::[*/0x0109/*::]*/: { /* n:"BrtBeginECParams", */ T:1 },
		/*::[*/0x010A/*::]*/: { /* n:"BrtEndECParams", */ T:-1 },
		/*::[*/0x010B/*::]*/: { /* n:"BrtBeginECParam", */ T:1 },
		/*::[*/0x010C/*::]*/: { /* n:"BrtEndECParam", */ T:-1 },
		/*::[*/0x010D/*::]*/: { /* n:"BrtBeginPCDKPIs", */ T:1 },
		/*::[*/0x010E/*::]*/: { /* n:"BrtEndPCDKPIs", */ T:-1 },
		/*::[*/0x010F/*::]*/: { /* n:"BrtBeginPCDKPI", */ T:1 },
		/*::[*/0x0110/*::]*/: { /* n:"BrtEndPCDKPI", */ T:-1 },
		/*::[*/0x0111/*::]*/: { /* n:"BrtBeginDims", */ T:1 },
		/*::[*/0x0112/*::]*/: { /* n:"BrtEndDims", */ T:-1 },
		/*::[*/0x0113/*::]*/: { /* n:"BrtBeginDim", */ T:1 },
		/*::[*/0x0114/*::]*/: { /* n:"BrtEndDim", */ T:-1 },
		/*::[*/0x0115/*::]*/: { /* n:"BrtIndexPartEnd" */ },
		/*::[*/0x0116/*::]*/: { /* n:"BrtBeginStyleSheet", */ T:1 },
		/*::[*/0x0117/*::]*/: { /* n:"BrtEndStyleSheet", */ T:-1 },
		/*::[*/0x0118/*::]*/: { /* n:"BrtBeginSXView", */ T:1 },
		/*::[*/0x0119/*::]*/: { /* n:"BrtEndSXVI", */ T:-1 },
		/*::[*/0x011A/*::]*/: { /* n:"BrtBeginSXVI", */ T:1 },
		/*::[*/0x011B/*::]*/: { /* n:"BrtBeginSXVIs", */ T:1 },
		/*::[*/0x011C/*::]*/: { /* n:"BrtEndSXVIs", */ T:-1 },
		/*::[*/0x011D/*::]*/: { /* n:"BrtBeginSXVD", */ T:1 },
		/*::[*/0x011E/*::]*/: { /* n:"BrtEndSXVD", */ T:-1 },
		/*::[*/0x011F/*::]*/: { /* n:"BrtBeginSXVDs", */ T:1 },
		/*::[*/0x0120/*::]*/: { /* n:"BrtEndSXVDs", */ T:-1 },
		/*::[*/0x0121/*::]*/: { /* n:"BrtBeginSXPI", */ T:1 },
		/*::[*/0x0122/*::]*/: { /* n:"BrtEndSXPI", */ T:-1 },
		/*::[*/0x0123/*::]*/: { /* n:"BrtBeginSXPIs", */ T:1 },
		/*::[*/0x0124/*::]*/: { /* n:"BrtEndSXPIs", */ T:-1 },
		/*::[*/0x0125/*::]*/: { /* n:"BrtBeginSXDI", */ T:1 },
		/*::[*/0x0126/*::]*/: { /* n:"BrtEndSXDI", */ T:-1 },
		/*::[*/0x0127/*::]*/: { /* n:"BrtBeginSXDIs", */ T:1 },
		/*::[*/0x0128/*::]*/: { /* n:"BrtEndSXDIs", */ T:-1 },
		/*::[*/0x0129/*::]*/: { /* n:"BrtBeginSXLI", */ T:1 },
		/*::[*/0x012A/*::]*/: { /* n:"BrtEndSXLI", */ T:-1 },
		/*::[*/0x012B/*::]*/: { /* n:"BrtBeginSXLIRws", */ T:1 },
		/*::[*/0x012C/*::]*/: { /* n:"BrtEndSXLIRws", */ T:-1 },
		/*::[*/0x012D/*::]*/: { /* n:"BrtBeginSXLICols", */ T:1 },
		/*::[*/0x012E/*::]*/: { /* n:"BrtEndSXLICols", */ T:-1 },
		/*::[*/0x012F/*::]*/: { /* n:"BrtBeginSXFormat", */ T:1 },
		/*::[*/0x0130/*::]*/: { /* n:"BrtEndSXFormat", */ T:-1 },
		/*::[*/0x0131/*::]*/: { /* n:"BrtBeginSXFormats", */ T:1 },
		/*::[*/0x0132/*::]*/: { /* n:"BrtEndSxFormats", */ T:-1 },
		/*::[*/0x0133/*::]*/: { /* n:"BrtBeginSxSelect", */ T:1 },
		/*::[*/0x0134/*::]*/: { /* n:"BrtEndSxSelect", */ T:-1 },
		/*::[*/0x0135/*::]*/: { /* n:"BrtBeginISXVDRws", */ T:1 },
		/*::[*/0x0136/*::]*/: { /* n:"BrtEndISXVDRws", */ T:-1 },
		/*::[*/0x0137/*::]*/: { /* n:"BrtBeginISXVDCols", */ T:1 },
		/*::[*/0x0138/*::]*/: { /* n:"BrtEndISXVDCols", */ T:-1 },
		/*::[*/0x0139/*::]*/: { /* n:"BrtEndSXLocation", */ T:-1 },
		/*::[*/0x013A/*::]*/: { /* n:"BrtBeginSXLocation", */ T:1 },
		/*::[*/0x013B/*::]*/: { /* n:"BrtEndSXView", */ T:-1 },
		/*::[*/0x013C/*::]*/: { /* n:"BrtBeginSXTHs", */ T:1 },
		/*::[*/0x013D/*::]*/: { /* n:"BrtEndSXTHs", */ T:-1 },
		/*::[*/0x013E/*::]*/: { /* n:"BrtBeginSXTH", */ T:1 },
		/*::[*/0x013F/*::]*/: { /* n:"BrtEndSXTH", */ T:-1 },
		/*::[*/0x0140/*::]*/: { /* n:"BrtBeginISXTHRws", */ T:1 },
		/*::[*/0x0141/*::]*/: { /* n:"BrtEndISXTHRws", */ T:-1 },
		/*::[*/0x0142/*::]*/: { /* n:"BrtBeginISXTHCols", */ T:1 },
		/*::[*/0x0143/*::]*/: { /* n:"BrtEndISXTHCols", */ T:-1 },
		/*::[*/0x0144/*::]*/: { /* n:"BrtBeginSXTDMPS", */ T:1 },
		/*::[*/0x0145/*::]*/: { /* n:"BrtEndSXTDMPs", */ T:-1 },
		/*::[*/0x0146/*::]*/: { /* n:"BrtBeginSXTDMP", */ T:1 },
		/*::[*/0x0147/*::]*/: { /* n:"BrtEndSXTDMP", */ T:-1 },
		/*::[*/0x0148/*::]*/: { /* n:"BrtBeginSXTHItems", */ T:1 },
		/*::[*/0x0149/*::]*/: { /* n:"BrtEndSXTHItems", */ T:-1 },
		/*::[*/0x014A/*::]*/: { /* n:"BrtBeginSXTHItem", */ T:1 },
		/*::[*/0x014B/*::]*/: { /* n:"BrtEndSXTHItem", */ T:-1 },
		/*::[*/0x014C/*::]*/: { /* n:"BrtBeginMetadata", */ T:1 },
		/*::[*/0x014D/*::]*/: { /* n:"BrtEndMetadata", */ T:-1 },
		/*::[*/0x014E/*::]*/: { /* n:"BrtBeginEsmdtinfo", */ T:1 },
		/*::[*/0x014F/*::]*/: { /* n:"BrtMdtinfo", */ f:parse_BrtMdtinfo },
		/*::[*/0x0150/*::]*/: { /* n:"BrtEndEsmdtinfo", */ T:-1 },
		/*::[*/0x0151/*::]*/: { /* n:"BrtBeginEsmdb", */ f:parse_BrtBeginEsmdb, T:1 },
		/*::[*/0x0152/*::]*/: { /* n:"BrtEndEsmdb", */ T:-1 },
		/*::[*/0x0153/*::]*/: { /* n:"BrtBeginEsfmd", */ T:1 },
		/*::[*/0x0154/*::]*/: { /* n:"BrtEndEsfmd", */ T:-1 },
		/*::[*/0x0155/*::]*/: { /* n:"BrtBeginSingleCells", */ T:1 },
		/*::[*/0x0156/*::]*/: { /* n:"BrtEndSingleCells", */ T:-1 },
		/*::[*/0x0157/*::]*/: { /* n:"BrtBeginList", */ T:1 },
		/*::[*/0x0158/*::]*/: { /* n:"BrtEndList", */ T:-1 },
		/*::[*/0x0159/*::]*/: { /* n:"BrtBeginListCols", */ T:1 },
		/*::[*/0x015A/*::]*/: { /* n:"BrtEndListCols", */ T:-1 },
		/*::[*/0x015B/*::]*/: { /* n:"BrtBeginListCol", */ T:1 },
		/*::[*/0x015C/*::]*/: { /* n:"BrtEndListCol", */ T:-1 },
		/*::[*/0x015D/*::]*/: { /* n:"BrtBeginListXmlCPr", */ T:1 },
		/*::[*/0x015E/*::]*/: { /* n:"BrtEndListXmlCPr", */ T:-1 },
		/*::[*/0x015F/*::]*/: { /* n:"BrtListCCFmla" */ },
		/*::[*/0x0160/*::]*/: { /* n:"BrtListTrFmla" */ },
		/*::[*/0x0161/*::]*/: { /* n:"BrtBeginExternals", */ T:1 },
		/*::[*/0x0162/*::]*/: { /* n:"BrtEndExternals", */ T:-1 },
		/*::[*/0x0163/*::]*/: { /* n:"BrtSupBookSrc", */ f:parse_RelID},
		/*::[*/0x0165/*::]*/: { /* n:"BrtSupSelf" */ },
		/*::[*/0x0166/*::]*/: { /* n:"BrtSupSame" */ },
		/*::[*/0x0167/*::]*/: { /* n:"BrtSupTabs" */ },
		/*::[*/0x0168/*::]*/: { /* n:"BrtBeginSupBook", */ T:1 },
		/*::[*/0x0169/*::]*/: { /* n:"BrtPlaceholderName" */ },
		/*::[*/0x016A/*::]*/: { /* n:"BrtExternSheet", */ f:parse_ExternSheet },
		/*::[*/0x016B/*::]*/: { /* n:"BrtExternTableStart" */ },
		/*::[*/0x016C/*::]*/: { /* n:"BrtExternTableEnd" */ },
		/*::[*/0x016E/*::]*/: { /* n:"BrtExternRowHdr" */ },
		/*::[*/0x016F/*::]*/: { /* n:"BrtExternCellBlank" */ },
		/*::[*/0x0170/*::]*/: { /* n:"BrtExternCellReal" */ },
		/*::[*/0x0171/*::]*/: { /* n:"BrtExternCellBool" */ },
		/*::[*/0x0172/*::]*/: { /* n:"BrtExternCellError" */ },
		/*::[*/0x0173/*::]*/: { /* n:"BrtExternCellString" */ },
		/*::[*/0x0174/*::]*/: { /* n:"BrtBeginEsmdx", */ T:1 },
		/*::[*/0x0175/*::]*/: { /* n:"BrtEndEsmdx", */ T:-1 },
		/*::[*/0x0176/*::]*/: { /* n:"BrtBeginMdxSet", */ T:1 },
		/*::[*/0x0177/*::]*/: { /* n:"BrtEndMdxSet", */ T:-1 },
		/*::[*/0x0178/*::]*/: { /* n:"BrtBeginMdxMbrProp", */ T:1 },
		/*::[*/0x0179/*::]*/: { /* n:"BrtEndMdxMbrProp", */ T:-1 },
		/*::[*/0x017A/*::]*/: { /* n:"BrtBeginMdxKPI", */ T:1 },
		/*::[*/0x017B/*::]*/: { /* n:"BrtEndMdxKPI", */ T:-1 },
		/*::[*/0x017C/*::]*/: { /* n:"BrtBeginEsstr", */ T:1 },
		/*::[*/0x017D/*::]*/: { /* n:"BrtEndEsstr", */ T:-1 },
		/*::[*/0x017E/*::]*/: { /* n:"BrtBeginPRFItem", */ T:1 },
		/*::[*/0x017F/*::]*/: { /* n:"BrtEndPRFItem", */ T:-1 },
		/*::[*/0x0180/*::]*/: { /* n:"BrtBeginPivotCacheIDs", */ T:1 },
		/*::[*/0x0181/*::]*/: { /* n:"BrtEndPivotCacheIDs", */ T:-1 },
		/*::[*/0x0182/*::]*/: { /* n:"BrtBeginPivotCacheID", */ T:1 },
		/*::[*/0x0183/*::]*/: { /* n:"BrtEndPivotCacheID", */ T:-1 },
		/*::[*/0x0184/*::]*/: { /* n:"BrtBeginISXVIs", */ T:1 },
		/*::[*/0x0185/*::]*/: { /* n:"BrtEndISXVIs", */ T:-1 },
		/*::[*/0x0186/*::]*/: { /* n:"BrtBeginColInfos", */ T:1 },
		/*::[*/0x0187/*::]*/: { /* n:"BrtEndColInfos", */ T:-1 },
		/*::[*/0x0188/*::]*/: { /* n:"BrtBeginRwBrk", */ T:1 },
		/*::[*/0x0189/*::]*/: { /* n:"BrtEndRwBrk", */ T:-1 },
		/*::[*/0x018A/*::]*/: { /* n:"BrtBeginColBrk", */ T:1 },
		/*::[*/0x018B/*::]*/: { /* n:"BrtEndColBrk", */ T:-1 },
		/*::[*/0x018C/*::]*/: { /* n:"BrtBrk" */ },
		/*::[*/0x018D/*::]*/: { /* n:"BrtUserBookView" */ },
		/*::[*/0x018E/*::]*/: { /* n:"BrtInfo" */ },
		/*::[*/0x018F/*::]*/: { /* n:"BrtCUsr" */ },
		/*::[*/0x0190/*::]*/: { /* n:"BrtUsr" */ },
		/*::[*/0x0191/*::]*/: { /* n:"BrtBeginUsers", */ T:1 },
		/*::[*/0x0193/*::]*/: { /* n:"BrtEOF" */ },
		/*::[*/0x0194/*::]*/: { /* n:"BrtUCR" */ },
		/*::[*/0x0195/*::]*/: { /* n:"BrtRRInsDel" */ },
		/*::[*/0x0196/*::]*/: { /* n:"BrtRREndInsDel" */ },
		/*::[*/0x0197/*::]*/: { /* n:"BrtRRMove" */ },
		/*::[*/0x0198/*::]*/: { /* n:"BrtRREndMove" */ },
		/*::[*/0x0199/*::]*/: { /* n:"BrtRRChgCell" */ },
		/*::[*/0x019A/*::]*/: { /* n:"BrtRREndChgCell" */ },
		/*::[*/0x019B/*::]*/: { /* n:"BrtRRHeader" */ },
		/*::[*/0x019C/*::]*/: { /* n:"BrtRRUserView" */ },
		/*::[*/0x019D/*::]*/: { /* n:"BrtRRRenSheet" */ },
		/*::[*/0x019E/*::]*/: { /* n:"BrtRRInsertSh" */ },
		/*::[*/0x019F/*::]*/: { /* n:"BrtRRDefName" */ },
		/*::[*/0x01A0/*::]*/: { /* n:"BrtRRNote" */ },
		/*::[*/0x01A1/*::]*/: { /* n:"BrtRRConflict" */ },
		/*::[*/0x01A2/*::]*/: { /* n:"BrtRRTQSIF" */ },
		/*::[*/0x01A3/*::]*/: { /* n:"BrtRRFormat" */ },
		/*::[*/0x01A4/*::]*/: { /* n:"BrtRREndFormat" */ },
		/*::[*/0x01A5/*::]*/: { /* n:"BrtRRAutoFmt" */ },
		/*::[*/0x01A6/*::]*/: { /* n:"BrtBeginUserShViews", */ T:1 },
		/*::[*/0x01A7/*::]*/: { /* n:"BrtBeginUserShView", */ T:1 },
		/*::[*/0x01A8/*::]*/: { /* n:"BrtEndUserShView", */ T:-1 },
		/*::[*/0x01A9/*::]*/: { /* n:"BrtEndUserShViews", */ T:-1 },
		/*::[*/0x01AA/*::]*/: { /* n:"BrtArrFmla", */ f:parse_BrtArrFmla },
		/*::[*/0x01AB/*::]*/: { /* n:"BrtShrFmla", */ f:parse_BrtShrFmla },
		/*::[*/0x01AC/*::]*/: { /* n:"BrtTable" */ },
		/*::[*/0x01AD/*::]*/: { /* n:"BrtBeginExtConnections", */ T:1 },
		/*::[*/0x01AE/*::]*/: { /* n:"BrtEndExtConnections", */ T:-1 },
		/*::[*/0x01AF/*::]*/: { /* n:"BrtBeginPCDCalcMems", */ T:1 },
		/*::[*/0x01B0/*::]*/: { /* n:"BrtEndPCDCalcMems", */ T:-1 },
		/*::[*/0x01B1/*::]*/: { /* n:"BrtBeginPCDCalcMem", */ T:1 },
		/*::[*/0x01B2/*::]*/: { /* n:"BrtEndPCDCalcMem", */ T:-1 },
		/*::[*/0x01B3/*::]*/: { /* n:"BrtBeginPCDHGLevels", */ T:1 },
		/*::[*/0x01B4/*::]*/: { /* n:"BrtEndPCDHGLevels", */ T:-1 },
		/*::[*/0x01B5/*::]*/: { /* n:"BrtBeginPCDHGLevel", */ T:1 },
		/*::[*/0x01B6/*::]*/: { /* n:"BrtEndPCDHGLevel", */ T:-1 },
		/*::[*/0x01B7/*::]*/: { /* n:"BrtBeginPCDHGLGroups", */ T:1 },
		/*::[*/0x01B8/*::]*/: { /* n:"BrtEndPCDHGLGroups", */ T:-1 },
		/*::[*/0x01B9/*::]*/: { /* n:"BrtBeginPCDHGLGroup", */ T:1 },
		/*::[*/0x01BA/*::]*/: { /* n:"BrtEndPCDHGLGroup", */ T:-1 },
		/*::[*/0x01BB/*::]*/: { /* n:"BrtBeginPCDHGLGMembers", */ T:1 },
		/*::[*/0x01BC/*::]*/: { /* n:"BrtEndPCDHGLGMembers", */ T:-1 },
		/*::[*/0x01BD/*::]*/: { /* n:"BrtBeginPCDHGLGMember", */ T:1 },
		/*::[*/0x01BE/*::]*/: { /* n:"BrtEndPCDHGLGMember", */ T:-1 },
		/*::[*/0x01BF/*::]*/: { /* n:"BrtBeginQSI", */ T:1 },
		/*::[*/0x01C0/*::]*/: { /* n:"BrtEndQSI", */ T:-1 },
		/*::[*/0x01C1/*::]*/: { /* n:"BrtBeginQSIR", */ T:1 },
		/*::[*/0x01C2/*::]*/: { /* n:"BrtEndQSIR", */ T:-1 },
		/*::[*/0x01C3/*::]*/: { /* n:"BrtBeginDeletedNames", */ T:1 },
		/*::[*/0x01C4/*::]*/: { /* n:"BrtEndDeletedNames", */ T:-1 },
		/*::[*/0x01C5/*::]*/: { /* n:"BrtBeginDeletedName", */ T:1 },
		/*::[*/0x01C6/*::]*/: { /* n:"BrtEndDeletedName", */ T:-1 },
		/*::[*/0x01C7/*::]*/: { /* n:"BrtBeginQSIFs", */ T:1 },
		/*::[*/0x01C8/*::]*/: { /* n:"BrtEndQSIFs", */ T:-1 },
		/*::[*/0x01C9/*::]*/: { /* n:"BrtBeginQSIF", */ T:1 },
		/*::[*/0x01CA/*::]*/: { /* n:"BrtEndQSIF", */ T:-1 },
		/*::[*/0x01CB/*::]*/: { /* n:"BrtBeginAutoSortScope", */ T:1 },
		/*::[*/0x01CC/*::]*/: { /* n:"BrtEndAutoSortScope", */ T:-1 },
		/*::[*/0x01CD/*::]*/: { /* n:"BrtBeginConditionalFormatting", */ T:1 },
		/*::[*/0x01CE/*::]*/: { /* n:"BrtEndConditionalFormatting", */ T:-1 },
		/*::[*/0x01CF/*::]*/: { /* n:"BrtBeginCFRule", */ T:1 },
		/*::[*/0x01D0/*::]*/: { /* n:"BrtEndCFRule", */ T:-1 },
		/*::[*/0x01D1/*::]*/: { /* n:"BrtBeginIconSet", */ T:1 },
		/*::[*/0x01D2/*::]*/: { /* n:"BrtEndIconSet", */ T:-1 },
		/*::[*/0x01D3/*::]*/: { /* n:"BrtBeginDatabar", */ T:1 },
		/*::[*/0x01D4/*::]*/: { /* n:"BrtEndDatabar", */ T:-1 },
		/*::[*/0x01D5/*::]*/: { /* n:"BrtBeginColorScale", */ T:1 },
		/*::[*/0x01D6/*::]*/: { /* n:"BrtEndColorScale", */ T:-1 },
		/*::[*/0x01D7/*::]*/: { /* n:"BrtCFVO" */ },
		/*::[*/0x01D8/*::]*/: { /* n:"BrtExternValueMeta" */ },
		/*::[*/0x01D9/*::]*/: { /* n:"BrtBeginColorPalette", */ T:1 },
		/*::[*/0x01DA/*::]*/: { /* n:"BrtEndColorPalette", */ T:-1 },
		/*::[*/0x01DB/*::]*/: { /* n:"BrtIndexedColor" */ },
		/*::[*/0x01DC/*::]*/: { /* n:"BrtMargins", */ f:parse_BrtMargins },
		/*::[*/0x01DD/*::]*/: { /* n:"BrtPrintOptions" */ },
		/*::[*/0x01DE/*::]*/: { /* n:"BrtPageSetup" */ },
		/*::[*/0x01DF/*::]*/: { /* n:"BrtBeginHeaderFooter", */ T:1 },
		/*::[*/0x01E0/*::]*/: { /* n:"BrtEndHeaderFooter", */ T:-1 },
		/*::[*/0x01E1/*::]*/: { /* n:"BrtBeginSXCrtFormat", */ T:1 },
		/*::[*/0x01E2/*::]*/: { /* n:"BrtEndSXCrtFormat", */ T:-1 },
		/*::[*/0x01E3/*::]*/: { /* n:"BrtBeginSXCrtFormats", */ T:1 },
		/*::[*/0x01E4/*::]*/: { /* n:"BrtEndSXCrtFormats", */ T:-1 },
		/*::[*/0x01E5/*::]*/: { /* n:"BrtWsFmtInfo", */ f:parse_BrtWsFmtInfo },
		/*::[*/0x01E6/*::]*/: { /* n:"BrtBeginMgs", */ T:1 },
		/*::[*/0x01E7/*::]*/: { /* n:"BrtEndMGs", */ T:-1 },
		/*::[*/0x01E8/*::]*/: { /* n:"BrtBeginMGMaps", */ T:1 },
		/*::[*/0x01E9/*::]*/: { /* n:"BrtEndMGMaps", */ T:-1 },
		/*::[*/0x01EA/*::]*/: { /* n:"BrtBeginMG", */ T:1 },
		/*::[*/0x01EB/*::]*/: { /* n:"BrtEndMG", */ T:-1 },
		/*::[*/0x01EC/*::]*/: { /* n:"BrtBeginMap", */ T:1 },
		/*::[*/0x01ED/*::]*/: { /* n:"BrtEndMap", */ T:-1 },
		/*::[*/0x01EE/*::]*/: { /* n:"BrtHLink", */ f:parse_BrtHLink },
		/*::[*/0x01EF/*::]*/: { /* n:"BrtBeginDCon", */ T:1 },
		/*::[*/0x01F0/*::]*/: { /* n:"BrtEndDCon", */ T:-1 },
		/*::[*/0x01F1/*::]*/: { /* n:"BrtBeginDRefs", */ T:1 },
		/*::[*/0x01F2/*::]*/: { /* n:"BrtEndDRefs", */ T:-1 },
		/*::[*/0x01F3/*::]*/: { /* n:"BrtDRef" */ },
		/*::[*/0x01F4/*::]*/: { /* n:"BrtBeginScenMan", */ T:1 },
		/*::[*/0x01F5/*::]*/: { /* n:"BrtEndScenMan", */ T:-1 },
		/*::[*/0x01F6/*::]*/: { /* n:"BrtBeginSct", */ T:1 },
		/*::[*/0x01F7/*::]*/: { /* n:"BrtEndSct", */ T:-1 },
		/*::[*/0x01F8/*::]*/: { /* n:"BrtSlc" */ },
		/*::[*/0x01F9/*::]*/: { /* n:"BrtBeginDXFs", */ T:1 },
		/*::[*/0x01FA/*::]*/: { /* n:"BrtEndDXFs", */ T:-1 },
		/*::[*/0x01FB/*::]*/: { /* n:"BrtDXF" */ },
		/*::[*/0x01FC/*::]*/: { /* n:"BrtBeginTableStyles", */ T:1 },
		/*::[*/0x01FD/*::]*/: { /* n:"BrtEndTableStyles", */ T:-1 },
		/*::[*/0x01FE/*::]*/: { /* n:"BrtBeginTableStyle", */ T:1 },
		/*::[*/0x01FF/*::]*/: { /* n:"BrtEndTableStyle", */ T:-1 },
		/*::[*/0x0200/*::]*/: { /* n:"BrtTableStyleElement" */ },
		/*::[*/0x0201/*::]*/: { /* n:"BrtTableStyleClient" */ },
		/*::[*/0x0202/*::]*/: { /* n:"BrtBeginVolDeps", */ T:1 },
		/*::[*/0x0203/*::]*/: { /* n:"BrtEndVolDeps", */ T:-1 },
		/*::[*/0x0204/*::]*/: { /* n:"BrtBeginVolType", */ T:1 },
		/*::[*/0x0205/*::]*/: { /* n:"BrtEndVolType", */ T:-1 },
		/*::[*/0x0206/*::]*/: { /* n:"BrtBeginVolMain", */ T:1 },
		/*::[*/0x0207/*::]*/: { /* n:"BrtEndVolMain", */ T:-1 },
		/*::[*/0x0208/*::]*/: { /* n:"BrtBeginVolTopic", */ T:1 },
		/*::[*/0x0209/*::]*/: { /* n:"BrtEndVolTopic", */ T:-1 },
		/*::[*/0x020A/*::]*/: { /* n:"BrtVolSubtopic" */ },
		/*::[*/0x020B/*::]*/: { /* n:"BrtVolRef" */ },
		/*::[*/0x020C/*::]*/: { /* n:"BrtVolNum" */ },
		/*::[*/0x020D/*::]*/: { /* n:"BrtVolErr" */ },
		/*::[*/0x020E/*::]*/: { /* n:"BrtVolStr" */ },
		/*::[*/0x020F/*::]*/: { /* n:"BrtVolBool" */ },
		/*::[*/0x0210/*::]*/: { /* n:"BrtBeginCalcChain$", */ T:1 },
		/*::[*/0x0211/*::]*/: { /* n:"BrtEndCalcChain$", */ T:-1 },
		/*::[*/0x0212/*::]*/: { /* n:"BrtBeginSortState", */ T:1 },
		/*::[*/0x0213/*::]*/: { /* n:"BrtEndSortState", */ T:-1 },
		/*::[*/0x0214/*::]*/: { /* n:"BrtBeginSortCond", */ T:1 },
		/*::[*/0x0215/*::]*/: { /* n:"BrtEndSortCond", */ T:-1 },
		/*::[*/0x0216/*::]*/: { /* n:"BrtBookProtection" */ },
		/*::[*/0x0217/*::]*/: { /* n:"BrtSheetProtection" */ },
		/*::[*/0x0218/*::]*/: { /* n:"BrtRangeProtection" */ },
		/*::[*/0x0219/*::]*/: { /* n:"BrtPhoneticInfo" */ },
		/*::[*/0x021A/*::]*/: { /* n:"BrtBeginECTxtWiz", */ T:1 },
		/*::[*/0x021B/*::]*/: { /* n:"BrtEndECTxtWiz", */ T:-1 },
		/*::[*/0x021C/*::]*/: { /* n:"BrtBeginECTWFldInfoLst", */ T:1 },
		/*::[*/0x021D/*::]*/: { /* n:"BrtEndECTWFldInfoLst", */ T:-1 },
		/*::[*/0x021E/*::]*/: { /* n:"BrtBeginECTwFldInfo", */ T:1 },
		/*::[*/0x0224/*::]*/: { /* n:"BrtFileSharing" */ },
		/*::[*/0x0225/*::]*/: { /* n:"BrtOleSize" */ },
		/*::[*/0x0226/*::]*/: { /* n:"BrtDrawing", */ f:parse_RelID },
		/*::[*/0x0227/*::]*/: { /* n:"BrtLegacyDrawing" */ },
		/*::[*/0x0228/*::]*/: { /* n:"BrtLegacyDrawingHF" */ },
		/*::[*/0x0229/*::]*/: { /* n:"BrtWebOpt" */ },
		/*::[*/0x022A/*::]*/: { /* n:"BrtBeginWebPubItems", */ T:1 },
		/*::[*/0x022B/*::]*/: { /* n:"BrtEndWebPubItems", */ T:-1 },
		/*::[*/0x022C/*::]*/: { /* n:"BrtBeginWebPubItem", */ T:1 },
		/*::[*/0x022D/*::]*/: { /* n:"BrtEndWebPubItem", */ T:-1 },
		/*::[*/0x022E/*::]*/: { /* n:"BrtBeginSXCondFmt", */ T:1 },
		/*::[*/0x022F/*::]*/: { /* n:"BrtEndSXCondFmt", */ T:-1 },
		/*::[*/0x0230/*::]*/: { /* n:"BrtBeginSXCondFmts", */ T:1 },
		/*::[*/0x0231/*::]*/: { /* n:"BrtEndSXCondFmts", */ T:-1 },
		/*::[*/0x0232/*::]*/: { /* n:"BrtBkHim" */ },
		/*::[*/0x0234/*::]*/: { /* n:"BrtColor" */ },
		/*::[*/0x0235/*::]*/: { /* n:"BrtBeginIndexedColors", */ T:1 },
		/*::[*/0x0236/*::]*/: { /* n:"BrtEndIndexedColors", */ T:-1 },
		/*::[*/0x0239/*::]*/: { /* n:"BrtBeginMRUColors", */ T:1 },
		/*::[*/0x023A/*::]*/: { /* n:"BrtEndMRUColors", */ T:-1 },
		/*::[*/0x023C/*::]*/: { /* n:"BrtMRUColor" */ },
		/*::[*/0x023D/*::]*/: { /* n:"BrtBeginDVals", */ T:1 },
		/*::[*/0x023E/*::]*/: { /* n:"BrtEndDVals", */ T:-1 },
		/*::[*/0x0241/*::]*/: { /* n:"BrtSupNameStart" */ },
		/*::[*/0x0242/*::]*/: { /* n:"BrtSupNameValueStart" */ },
		/*::[*/0x0243/*::]*/: { /* n:"BrtSupNameValueEnd" */ },
		/*::[*/0x0244/*::]*/: { /* n:"BrtSupNameNum" */ },
		/*::[*/0x0245/*::]*/: { /* n:"BrtSupNameErr" */ },
		/*::[*/0x0246/*::]*/: { /* n:"BrtSupNameSt" */ },
		/*::[*/0x0247/*::]*/: { /* n:"BrtSupNameNil" */ },
		/*::[*/0x0248/*::]*/: { /* n:"BrtSupNameBool" */ },
		/*::[*/0x0249/*::]*/: { /* n:"BrtSupNameFmla" */ },
		/*::[*/0x024A/*::]*/: { /* n:"BrtSupNameBits" */ },
		/*::[*/0x024B/*::]*/: { /* n:"BrtSupNameEnd" */ },
		/*::[*/0x024C/*::]*/: { /* n:"BrtEndSupBook", */ T:-1 },
		/*::[*/0x024D/*::]*/: { /* n:"BrtCellSmartTagProperty" */ },
		/*::[*/0x024E/*::]*/: { /* n:"BrtBeginCellSmartTag", */ T:1 },
		/*::[*/0x024F/*::]*/: { /* n:"BrtEndCellSmartTag", */ T:-1 },
		/*::[*/0x0250/*::]*/: { /* n:"BrtBeginCellSmartTags", */ T:1 },
		/*::[*/0x0251/*::]*/: { /* n:"BrtEndCellSmartTags", */ T:-1 },
		/*::[*/0x0252/*::]*/: { /* n:"BrtBeginSmartTags", */ T:1 },
		/*::[*/0x0253/*::]*/: { /* n:"BrtEndSmartTags", */ T:-1 },
		/*::[*/0x0254/*::]*/: { /* n:"BrtSmartTagType" */ },
		/*::[*/0x0255/*::]*/: { /* n:"BrtBeginSmartTagTypes", */ T:1 },
		/*::[*/0x0256/*::]*/: { /* n:"BrtEndSmartTagTypes", */ T:-1 },
		/*::[*/0x0257/*::]*/: { /* n:"BrtBeginSXFilters", */ T:1 },
		/*::[*/0x0258/*::]*/: { /* n:"BrtEndSXFilters", */ T:-1 },
		/*::[*/0x0259/*::]*/: { /* n:"BrtBeginSXFILTER", */ T:1 },
		/*::[*/0x025A/*::]*/: { /* n:"BrtEndSXFilter", */ T:-1 },
		/*::[*/0x025B/*::]*/: { /* n:"BrtBeginFills", */ T:1 },
		/*::[*/0x025C/*::]*/: { /* n:"BrtEndFills", */ T:-1 },
		/*::[*/0x025D/*::]*/: { /* n:"BrtBeginCellWatches", */ T:1 },
		/*::[*/0x025E/*::]*/: { /* n:"BrtEndCellWatches", */ T:-1 },
		/*::[*/0x025F/*::]*/: { /* n:"BrtCellWatch" */ },
		/*::[*/0x0260/*::]*/: { /* n:"BrtBeginCRErrs", */ T:1 },
		/*::[*/0x0261/*::]*/: { /* n:"BrtEndCRErrs", */ T:-1 },
		/*::[*/0x0262/*::]*/: { /* n:"BrtCrashRecErr" */ },
		/*::[*/0x0263/*::]*/: { /* n:"BrtBeginFonts", */ T:1 },
		/*::[*/0x0264/*::]*/: { /* n:"BrtEndFonts", */ T:-1 },
		/*::[*/0x0265/*::]*/: { /* n:"BrtBeginBorders", */ T:1 },
		/*::[*/0x0266/*::]*/: { /* n:"BrtEndBorders", */ T:-1 },
		/*::[*/0x0267/*::]*/: { /* n:"BrtBeginFmts", */ T:1 },
		/*::[*/0x0268/*::]*/: { /* n:"BrtEndFmts", */ T:-1 },
		/*::[*/0x0269/*::]*/: { /* n:"BrtBeginCellXFs", */ T:1 },
		/*::[*/0x026A/*::]*/: { /* n:"BrtEndCellXFs", */ T:-1 },
		/*::[*/0x026B/*::]*/: { /* n:"BrtBeginStyles", */ T:1 },
		/*::[*/0x026C/*::]*/: { /* n:"BrtEndStyles", */ T:-1 },
		/*::[*/0x0271/*::]*/: { /* n:"BrtBigName" */ },
		/*::[*/0x0272/*::]*/: { /* n:"BrtBeginCellStyleXFs", */ T:1 },
		/*::[*/0x0273/*::]*/: { /* n:"BrtEndCellStyleXFs", */ T:-1 },
		/*::[*/0x0274/*::]*/: { /* n:"BrtBeginComments", */ T:1 },
		/*::[*/0x0275/*::]*/: { /* n:"BrtEndComments", */ T:-1 },
		/*::[*/0x0276/*::]*/: { /* n:"BrtBeginCommentAuthors", */ T:1 },
		/*::[*/0x0277/*::]*/: { /* n:"BrtEndCommentAuthors", */ T:-1 },
		/*::[*/0x0278/*::]*/: { /* n:"BrtCommentAuthor", */ f:parse_BrtCommentAuthor },
		/*::[*/0x0279/*::]*/: { /* n:"BrtBeginCommentList", */ T:1 },
		/*::[*/0x027A/*::]*/: { /* n:"BrtEndCommentList", */ T:-1 },
		/*::[*/0x027B/*::]*/: { /* n:"BrtBeginComment", */ T:1, f:parse_BrtBeginComment},
		/*::[*/0x027C/*::]*/: { /* n:"BrtEndComment", */ T:-1 },
		/*::[*/0x027D/*::]*/: { /* n:"BrtCommentText", */ f:parse_BrtCommentText },
		/*::[*/0x027E/*::]*/: { /* n:"BrtBeginOleObjects", */ T:1 },
		/*::[*/0x027F/*::]*/: { /* n:"BrtOleObject" */ },
		/*::[*/0x0280/*::]*/: { /* n:"BrtEndOleObjects", */ T:-1 },
		/*::[*/0x0281/*::]*/: { /* n:"BrtBeginSxrules", */ T:1 },
		/*::[*/0x0282/*::]*/: { /* n:"BrtEndSxRules", */ T:-1 },
		/*::[*/0x0283/*::]*/: { /* n:"BrtBeginActiveXControls", */ T:1 },
		/*::[*/0x0284/*::]*/: { /* n:"BrtActiveX" */ },
		/*::[*/0x0285/*::]*/: { /* n:"BrtEndActiveXControls", */ T:-1 },
		/*::[*/0x0286/*::]*/: { /* n:"BrtBeginPCDSDTCEMembersSortBy", */ T:1 },
		/*::[*/0x0288/*::]*/: { /* n:"BrtBeginCellIgnoreECs", */ T:1 },
		/*::[*/0x0289/*::]*/: { /* n:"BrtCellIgnoreEC" */ },
		/*::[*/0x028A/*::]*/: { /* n:"BrtEndCellIgnoreECs", */ T:-1 },
		/*::[*/0x028B/*::]*/: { /* n:"BrtCsProp", */ f:parse_BrtCsProp },
		/*::[*/0x028C/*::]*/: { /* n:"BrtCsPageSetup" */ },
		/*::[*/0x028D/*::]*/: { /* n:"BrtBeginUserCsViews", */ T:1 },
		/*::[*/0x028E/*::]*/: { /* n:"BrtEndUserCsViews", */ T:-1 },
		/*::[*/0x028F/*::]*/: { /* n:"BrtBeginUserCsView", */ T:1 },
		/*::[*/0x0290/*::]*/: { /* n:"BrtEndUserCsView", */ T:-1 },
		/*::[*/0x0291/*::]*/: { /* n:"BrtBeginPcdSFCIEntries", */ T:1 },
		/*::[*/0x0292/*::]*/: { /* n:"BrtEndPCDSFCIEntries", */ T:-1 },
		/*::[*/0x0293/*::]*/: { /* n:"BrtPCDSFCIEntry" */ },
		/*::[*/0x0294/*::]*/: { /* n:"BrtBeginListParts", */ T:1 },
		/*::[*/0x0295/*::]*/: { /* n:"BrtListPart" */ },
		/*::[*/0x0296/*::]*/: { /* n:"BrtEndListParts", */ T:-1 },
		/*::[*/0x0297/*::]*/: { /* n:"BrtSheetCalcProp" */ },
		/*::[*/0x0298/*::]*/: { /* n:"BrtBeginFnGroup", */ T:1 },
		/*::[*/0x0299/*::]*/: { /* n:"BrtFnGroup" */ },
		/*::[*/0x029A/*::]*/: { /* n:"BrtEndFnGroup", */ T:-1 },
		/*::[*/0x029B/*::]*/: { /* n:"BrtSupAddin" */ },
		/*::[*/0x029C/*::]*/: { /* n:"BrtSXTDMPOrder" */ },
		/*::[*/0x029D/*::]*/: { /* n:"BrtCsProtection" */ },
		/*::[*/0x029F/*::]*/: { /* n:"BrtBeginWsSortMap", */ T:1 },
		/*::[*/0x02A0/*::]*/: { /* n:"BrtEndWsSortMap", */ T:-1 },
		/*::[*/0x02A1/*::]*/: { /* n:"BrtBeginRRSort", */ T:1 },
		/*::[*/0x02A2/*::]*/: { /* n:"BrtEndRRSort", */ T:-1 },
		/*::[*/0x02A3/*::]*/: { /* n:"BrtRRSortItem" */ },
		/*::[*/0x02A4/*::]*/: { /* n:"BrtFileSharingIso" */ },
		/*::[*/0x02A5/*::]*/: { /* n:"BrtBookProtectionIso" */ },
		/*::[*/0x02A6/*::]*/: { /* n:"BrtSheetProtectionIso" */ },
		/*::[*/0x02A7/*::]*/: { /* n:"BrtCsProtectionIso" */ },
		/*::[*/0x02A8/*::]*/: { /* n:"BrtRangeProtectionIso" */ },
		/*::[*/0x02A9/*::]*/: { /* n:"BrtDValList" */ },
		/*::[*/0x0400/*::]*/: { /* n:"BrtRwDescent" */ },
		/*::[*/0x0401/*::]*/: { /* n:"BrtKnownFonts" */ },
		/*::[*/0x0402/*::]*/: { /* n:"BrtBeginSXTupleSet", */ T:1 },
		/*::[*/0x0403/*::]*/: { /* n:"BrtEndSXTupleSet", */ T:-1 },
		/*::[*/0x0404/*::]*/: { /* n:"BrtBeginSXTupleSetHeader", */ T:1 },
		/*::[*/0x0405/*::]*/: { /* n:"BrtEndSXTupleSetHeader", */ T:-1 },
		/*::[*/0x0406/*::]*/: { /* n:"BrtSXTupleSetHeaderItem" */ },
		/*::[*/0x0407/*::]*/: { /* n:"BrtBeginSXTupleSetData", */ T:1 },
		/*::[*/0x0408/*::]*/: { /* n:"BrtEndSXTupleSetData", */ T:-1 },
		/*::[*/0x0409/*::]*/: { /* n:"BrtBeginSXTupleSetRow", */ T:1 },
		/*::[*/0x040A/*::]*/: { /* n:"BrtEndSXTupleSetRow", */ T:-1 },
		/*::[*/0x040B/*::]*/: { /* n:"BrtSXTupleSetRowItem" */ },
		/*::[*/0x040C/*::]*/: { /* n:"BrtNameExt" */ },
		/*::[*/0x040D/*::]*/: { /* n:"BrtPCDH14" */ },
		/*::[*/0x040E/*::]*/: { /* n:"BrtBeginPCDCalcMem14", */ T:1 },
		/*::[*/0x040F/*::]*/: { /* n:"BrtEndPCDCalcMem14", */ T:-1 },
		/*::[*/0x0410/*::]*/: { /* n:"BrtSXTH14" */ },
		/*::[*/0x0411/*::]*/: { /* n:"BrtBeginSparklineGroup", */ T:1 },
		/*::[*/0x0412/*::]*/: { /* n:"BrtEndSparklineGroup", */ T:-1 },
		/*::[*/0x0413/*::]*/: { /* n:"BrtSparkline" */ },
		/*::[*/0x0414/*::]*/: { /* n:"BrtSXDI14" */ },
		/*::[*/0x0415/*::]*/: { /* n:"BrtWsFmtInfoEx14" */ },
		/*::[*/0x0416/*::]*/: { /* n:"BrtBeginConditionalFormatting14", */ T:1 },
		/*::[*/0x0417/*::]*/: { /* n:"BrtEndConditionalFormatting14", */ T:-1 },
		/*::[*/0x0418/*::]*/: { /* n:"BrtBeginCFRule14", */ T:1 },
		/*::[*/0x0419/*::]*/: { /* n:"BrtEndCFRule14", */ T:-1 },
		/*::[*/0x041A/*::]*/: { /* n:"BrtCFVO14" */ },
		/*::[*/0x041B/*::]*/: { /* n:"BrtBeginDatabar14", */ T:1 },
		/*::[*/0x041C/*::]*/: { /* n:"BrtBeginIconSet14", */ T:1 },
		/*::[*/0x041D/*::]*/: { /* n:"BrtDVal14", */ f: parse_BrtDVal14 },
		/*::[*/0x041E/*::]*/: { /* n:"BrtBeginDVals14", */ T:1 },
		/*::[*/0x041F/*::]*/: { /* n:"BrtColor14" */ },
		/*::[*/0x0420/*::]*/: { /* n:"BrtBeginSparklines", */ T:1 },
		/*::[*/0x0421/*::]*/: { /* n:"BrtEndSparklines", */ T:-1 },
		/*::[*/0x0422/*::]*/: { /* n:"BrtBeginSparklineGroups", */ T:1 },
		/*::[*/0x0423/*::]*/: { /* n:"BrtEndSparklineGroups", */ T:-1 },
		/*::[*/0x0425/*::]*/: { /* n:"BrtSXVD14" */ },
		/*::[*/0x0426/*::]*/: { /* n:"BrtBeginSXView14", */ T:1 },
		/*::[*/0x0427/*::]*/: { /* n:"BrtEndSXView14", */ T:-1 },
		/*::[*/0x0428/*::]*/: { /* n:"BrtBeginSXView16", */ T:1 },
		/*::[*/0x0429/*::]*/: { /* n:"BrtEndSXView16", */ T:-1 },
		/*::[*/0x042A/*::]*/: { /* n:"BrtBeginPCD14", */ T:1 },
		/*::[*/0x042B/*::]*/: { /* n:"BrtEndPCD14", */ T:-1 },
		/*::[*/0x042C/*::]*/: { /* n:"BrtBeginExtConn14", */ T:1 },
		/*::[*/0x042D/*::]*/: { /* n:"BrtEndExtConn14", */ T:-1 },
		/*::[*/0x042E/*::]*/: { /* n:"BrtBeginSlicerCacheIDs", */ T:1 },
		/*::[*/0x042F/*::]*/: { /* n:"BrtEndSlicerCacheIDs", */ T:-1 },
		/*::[*/0x0430/*::]*/: { /* n:"BrtBeginSlicerCacheID", */ T:1 },
		/*::[*/0x0431/*::]*/: { /* n:"BrtEndSlicerCacheID", */ T:-1 },
		/*::[*/0x0433/*::]*/: { /* n:"BrtBeginSlicerCache", */ T:1 },
		/*::[*/0x0434/*::]*/: { /* n:"BrtEndSlicerCache", */ T:-1 },
		/*::[*/0x0435/*::]*/: { /* n:"BrtBeginSlicerCacheDef", */ T:1 },
		/*::[*/0x0436/*::]*/: { /* n:"BrtEndSlicerCacheDef", */ T:-1 },
		/*::[*/0x0437/*::]*/: { /* n:"BrtBeginSlicersEx", */ T:1 },
		/*::[*/0x0438/*::]*/: { /* n:"BrtEndSlicersEx", */ T:-1 },
		/*::[*/0x0439/*::]*/: { /* n:"BrtBeginSlicerEx", */ T:1 },
		/*::[*/0x043A/*::]*/: { /* n:"BrtEndSlicerEx", */ T:-1 },
		/*::[*/0x043B/*::]*/: { /* n:"BrtBeginSlicer", */ T:1 },
		/*::[*/0x043C/*::]*/: { /* n:"BrtEndSlicer", */ T:-1 },
		/*::[*/0x043D/*::]*/: { /* n:"BrtSlicerCachePivotTables" */ },
		/*::[*/0x043E/*::]*/: { /* n:"BrtBeginSlicerCacheOlapImpl", */ T:1 },
		/*::[*/0x043F/*::]*/: { /* n:"BrtEndSlicerCacheOlapImpl", */ T:-1 },
		/*::[*/0x0440/*::]*/: { /* n:"BrtBeginSlicerCacheLevelsData", */ T:1 },
		/*::[*/0x0441/*::]*/: { /* n:"BrtEndSlicerCacheLevelsData", */ T:-1 },
		/*::[*/0x0442/*::]*/: { /* n:"BrtBeginSlicerCacheLevelData", */ T:1 },
		/*::[*/0x0443/*::]*/: { /* n:"BrtEndSlicerCacheLevelData", */ T:-1 },
		/*::[*/0x0444/*::]*/: { /* n:"BrtBeginSlicerCacheSiRanges", */ T:1 },
		/*::[*/0x0445/*::]*/: { /* n:"BrtEndSlicerCacheSiRanges", */ T:-1 },
		/*::[*/0x0446/*::]*/: { /* n:"BrtBeginSlicerCacheSiRange", */ T:1 },
		/*::[*/0x0447/*::]*/: { /* n:"BrtEndSlicerCacheSiRange", */ T:-1 },
		/*::[*/0x0448/*::]*/: { /* n:"BrtSlicerCacheOlapItem" */ },
		/*::[*/0x0449/*::]*/: { /* n:"BrtBeginSlicerCacheSelections", */ T:1 },
		/*::[*/0x044A/*::]*/: { /* n:"BrtSlicerCacheSelection" */ },
		/*::[*/0x044B/*::]*/: { /* n:"BrtEndSlicerCacheSelections", */ T:-1 },
		/*::[*/0x044C/*::]*/: { /* n:"BrtBeginSlicerCacheNative", */ T:1 },
		/*::[*/0x044D/*::]*/: { /* n:"BrtEndSlicerCacheNative", */ T:-1 },
		/*::[*/0x044E/*::]*/: { /* n:"BrtSlicerCacheNativeItem" */ },
		/*::[*/0x044F/*::]*/: { /* n:"BrtRangeProtection14" */ },
		/*::[*/0x0450/*::]*/: { /* n:"BrtRangeProtectionIso14" */ },
		/*::[*/0x0451/*::]*/: { /* n:"BrtCellIgnoreEC14" */ },
		/*::[*/0x0457/*::]*/: { /* n:"BrtList14" */ },
		/*::[*/0x0458/*::]*/: { /* n:"BrtCFIcon" */ },
		/*::[*/0x0459/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheIDs", */ T:1 },
		/*::[*/0x045A/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheIDs", */ T:-1 },
		/*::[*/0x045B/*::]*/: { /* n:"BrtBeginSlicers", */ T:1 },
		/*::[*/0x045C/*::]*/: { /* n:"BrtEndSlicers", */ T:-1 },
		/*::[*/0x045D/*::]*/: { /* n:"BrtWbProp14" */ },
		/*::[*/0x045E/*::]*/: { /* n:"BrtBeginSXEdit", */ T:1 },
		/*::[*/0x045F/*::]*/: { /* n:"BrtEndSXEdit", */ T:-1 },
		/*::[*/0x0460/*::]*/: { /* n:"BrtBeginSXEdits", */ T:1 },
		/*::[*/0x0461/*::]*/: { /* n:"BrtEndSXEdits", */ T:-1 },
		/*::[*/0x0462/*::]*/: { /* n:"BrtBeginSXChange", */ T:1 },
		/*::[*/0x0463/*::]*/: { /* n:"BrtEndSXChange", */ T:-1 },
		/*::[*/0x0464/*::]*/: { /* n:"BrtBeginSXChanges", */ T:1 },
		/*::[*/0x0465/*::]*/: { /* n:"BrtEndSXChanges", */ T:-1 },
		/*::[*/0x0466/*::]*/: { /* n:"BrtSXTupleItems" */ },
		/*::[*/0x0468/*::]*/: { /* n:"BrtBeginSlicerStyle", */ T:1 },
		/*::[*/0x0469/*::]*/: { /* n:"BrtEndSlicerStyle", */ T:-1 },
		/*::[*/0x046A/*::]*/: { /* n:"BrtSlicerStyleElement" */ },
		/*::[*/0x046B/*::]*/: { /* n:"BrtBeginStyleSheetExt14", */ T:1 },
		/*::[*/0x046C/*::]*/: { /* n:"BrtEndStyleSheetExt14", */ T:-1 },
		/*::[*/0x046D/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheID", */ T:1 },
		/*::[*/0x046E/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheID", */ T:-1 },
		/*::[*/0x046F/*::]*/: { /* n:"BrtBeginConditionalFormattings", */ T:1 },
		/*::[*/0x0470/*::]*/: { /* n:"BrtEndConditionalFormattings", */ T:-1 },
		/*::[*/0x0471/*::]*/: { /* n:"BrtBeginPCDCalcMemExt", */ T:1 },
		/*::[*/0x0472/*::]*/: { /* n:"BrtEndPCDCalcMemExt", */ T:-1 },
		/*::[*/0x0473/*::]*/: { /* n:"BrtBeginPCDCalcMemsExt", */ T:1 },
		/*::[*/0x0474/*::]*/: { /* n:"BrtEndPCDCalcMemsExt", */ T:-1 },
		/*::[*/0x0475/*::]*/: { /* n:"BrtPCDField14" */ },
		/*::[*/0x0476/*::]*/: { /* n:"BrtBeginSlicerStyles", */ T:1 },
		/*::[*/0x0477/*::]*/: { /* n:"BrtEndSlicerStyles", */ T:-1 },
		/*::[*/0x0478/*::]*/: { /* n:"BrtBeginSlicerStyleElements", */ T:1 },
		/*::[*/0x0479/*::]*/: { /* n:"BrtEndSlicerStyleElements", */ T:-1 },
		/*::[*/0x047A/*::]*/: { /* n:"BrtCFRuleExt" */ },
		/*::[*/0x047B/*::]*/: { /* n:"BrtBeginSXCondFmt14", */ T:1 },
		/*::[*/0x047C/*::]*/: { /* n:"BrtEndSXCondFmt14", */ T:-1 },
		/*::[*/0x047D/*::]*/: { /* n:"BrtBeginSXCondFmts14", */ T:1 },
		/*::[*/0x047E/*::]*/: { /* n:"BrtEndSXCondFmts14", */ T:-1 },
		/*::[*/0x0480/*::]*/: { /* n:"BrtBeginSortCond14", */ T:1 },
		/*::[*/0x0481/*::]*/: { /* n:"BrtEndSortCond14", */ T:-1 },
		/*::[*/0x0482/*::]*/: { /* n:"BrtEndDVals14", */ T:-1 },
		/*::[*/0x0483/*::]*/: { /* n:"BrtEndIconSet14", */ T:-1 },
		/*::[*/0x0484/*::]*/: { /* n:"BrtEndDatabar14", */ T:-1 },
		/*::[*/0x0485/*::]*/: { /* n:"BrtBeginColorScale14", */ T:1 },
		/*::[*/0x0486/*::]*/: { /* n:"BrtEndColorScale14", */ T:-1 },
		/*::[*/0x0487/*::]*/: { /* n:"BrtBeginSxrules14", */ T:1 },
		/*::[*/0x0488/*::]*/: { /* n:"BrtEndSxrules14", */ T:-1 },
		/*::[*/0x0489/*::]*/: { /* n:"BrtBeginPRule14", */ T:1 },
		/*::[*/0x048A/*::]*/: { /* n:"BrtEndPRule14", */ T:-1 },
		/*::[*/0x048B/*::]*/: { /* n:"BrtBeginPRFilters14", */ T:1 },
		/*::[*/0x048C/*::]*/: { /* n:"BrtEndPRFilters14", */ T:-1 },
		/*::[*/0x048D/*::]*/: { /* n:"BrtBeginPRFilter14", */ T:1 },
		/*::[*/0x048E/*::]*/: { /* n:"BrtEndPRFilter14", */ T:-1 },
		/*::[*/0x048F/*::]*/: { /* n:"BrtBeginPRFItem14", */ T:1 },
		/*::[*/0x0490/*::]*/: { /* n:"BrtEndPRFItem14", */ T:-1 },
		/*::[*/0x0491/*::]*/: { /* n:"BrtBeginCellIgnoreECs14", */ T:1 },
		/*::[*/0x0492/*::]*/: { /* n:"BrtEndCellIgnoreECs14", */ T:-1 },
		/*::[*/0x0493/*::]*/: { /* n:"BrtDxf14" */ },
		/*::[*/0x0494/*::]*/: { /* n:"BrtBeginDxF14s", */ T:1 },
		/*::[*/0x0495/*::]*/: { /* n:"BrtEndDxf14s", */ T:-1 },
		/*::[*/0x0499/*::]*/: { /* n:"BrtFilter14" */ },
		/*::[*/0x049A/*::]*/: { /* n:"BrtBeginCustomFilters14", */ T:1 },
		/*::[*/0x049C/*::]*/: { /* n:"BrtCustomFilter14" */ },
		/*::[*/0x049D/*::]*/: { /* n:"BrtIconFilter14" */ },
		/*::[*/0x049E/*::]*/: { /* n:"BrtPivotCacheConnectionName" */ },
		/*::[*/0x0800/*::]*/: { /* n:"BrtBeginDecoupledPivotCacheIDs", */ T:1 },
		/*::[*/0x0801/*::]*/: { /* n:"BrtEndDecoupledPivotCacheIDs", */ T:-1 },
		/*::[*/0x0802/*::]*/: { /* n:"BrtDecoupledPivotCacheID" */ },
		/*::[*/0x0803/*::]*/: { /* n:"BrtBeginPivotTableRefs", */ T:1 },
		/*::[*/0x0804/*::]*/: { /* n:"BrtEndPivotTableRefs", */ T:-1 },
		/*::[*/0x0805/*::]*/: { /* n:"BrtPivotTableRef" */ },
		/*::[*/0x0806/*::]*/: { /* n:"BrtSlicerCacheBookPivotTables" */ },
		/*::[*/0x0807/*::]*/: { /* n:"BrtBeginSxvcells", */ T:1 },
		/*::[*/0x0808/*::]*/: { /* n:"BrtEndSxvcells", */ T:-1 },
		/*::[*/0x0809/*::]*/: { /* n:"BrtBeginSxRow", */ T:1 },
		/*::[*/0x080A/*::]*/: { /* n:"BrtEndSxRow", */ T:-1 },
		/*::[*/0x080C/*::]*/: { /* n:"BrtPcdCalcMem15" */ },
		/*::[*/0x0813/*::]*/: { /* n:"BrtQsi15" */ },
		/*::[*/0x0814/*::]*/: { /* n:"BrtBeginWebExtensions", */ T:1 },
		/*::[*/0x0815/*::]*/: { /* n:"BrtEndWebExtensions", */ T:-1 },
		/*::[*/0x0816/*::]*/: { /* n:"BrtWebExtension" */ },
		/*::[*/0x0817/*::]*/: { /* n:"BrtAbsPath15" */ },
		/*::[*/0x0818/*::]*/: { /* n:"BrtBeginPivotTableUISettings", */ T:1 },
		/*::[*/0x0819/*::]*/: { /* n:"BrtEndPivotTableUISettings", */ T:-1 },
		/*::[*/0x081B/*::]*/: { /* n:"BrtTableSlicerCacheIDs" */ },
		/*::[*/0x081C/*::]*/: { /* n:"BrtTableSlicerCacheID" */ },
		/*::[*/0x081D/*::]*/: { /* n:"BrtBeginTableSlicerCache", */ T:1 },
		/*::[*/0x081E/*::]*/: { /* n:"BrtEndTableSlicerCache", */ T:-1 },
		/*::[*/0x081F/*::]*/: { /* n:"BrtSxFilter15" */ },
		/*::[*/0x0820/*::]*/: { /* n:"BrtBeginTimelineCachePivotCacheIDs", */ T:1 },
		/*::[*/0x0821/*::]*/: { /* n:"BrtEndTimelineCachePivotCacheIDs", */ T:-1 },
		/*::[*/0x0822/*::]*/: { /* n:"BrtTimelineCachePivotCacheID" */ },
		/*::[*/0x0823/*::]*/: { /* n:"BrtBeginTimelineCacheIDs", */ T:1 },
		/*::[*/0x0824/*::]*/: { /* n:"BrtEndTimelineCacheIDs", */ T:-1 },
		/*::[*/0x0825/*::]*/: { /* n:"BrtBeginTimelineCacheID", */ T:1 },
		/*::[*/0x0826/*::]*/: { /* n:"BrtEndTimelineCacheID", */ T:-1 },
		/*::[*/0x0827/*::]*/: { /* n:"BrtBeginTimelinesEx", */ T:1 },
		/*::[*/0x0828/*::]*/: { /* n:"BrtEndTimelinesEx", */ T:-1 },
		/*::[*/0x0829/*::]*/: { /* n:"BrtBeginTimelineEx", */ T:1 },
		/*::[*/0x082A/*::]*/: { /* n:"BrtEndTimelineEx", */ T:-1 },
		/*::[*/0x082B/*::]*/: { /* n:"BrtWorkBookPr15" */ },
		/*::[*/0x082C/*::]*/: { /* n:"BrtPCDH15" */ },
		/*::[*/0x082D/*::]*/: { /* n:"BrtBeginTimelineStyle", */ T:1 },
		/*::[*/0x082E/*::]*/: { /* n:"BrtEndTimelineStyle", */ T:-1 },
		/*::[*/0x082F/*::]*/: { /* n:"BrtTimelineStyleElement" */ },
		/*::[*/0x0830/*::]*/: { /* n:"BrtBeginTimelineStylesheetExt15", */ T:1 },
		/*::[*/0x0831/*::]*/: { /* n:"BrtEndTimelineStylesheetExt15", */ T:-1 },
		/*::[*/0x0832/*::]*/: { /* n:"BrtBeginTimelineStyles", */ T:1 },
		/*::[*/0x0833/*::]*/: { /* n:"BrtEndTimelineStyles", */ T:-1 },
		/*::[*/0x0834/*::]*/: { /* n:"BrtBeginTimelineStyleElements", */ T:1 },
		/*::[*/0x0835/*::]*/: { /* n:"BrtEndTimelineStyleElements", */ T:-1 },
		/*::[*/0x0836/*::]*/: { /* n:"BrtDxf15" */ },
		/*::[*/0x0837/*::]*/: { /* n:"BrtBeginDxfs15", */ T:1 },
		/*::[*/0x0838/*::]*/: { /* n:"BrtEndDxfs15", */ T:-1 },
		/*::[*/0x0839/*::]*/: { /* n:"BrtSlicerCacheHideItemsWithNoData" */ },
		/*::[*/0x083A/*::]*/: { /* n:"BrtBeginItemUniqueNames", */ T:1 },
		/*::[*/0x083B/*::]*/: { /* n:"BrtEndItemUniqueNames", */ T:-1 },
		/*::[*/0x083C/*::]*/: { /* n:"BrtItemUniqueName" */ },
		/*::[*/0x083D/*::]*/: { /* n:"BrtBeginExtConn15", */ T:1 },
		/*::[*/0x083E/*::]*/: { /* n:"BrtEndExtConn15", */ T:-1 },
		/*::[*/0x083F/*::]*/: { /* n:"BrtBeginOledbPr15", */ T:1 },
		/*::[*/0x0840/*::]*/: { /* n:"BrtEndOledbPr15", */ T:-1 },
		/*::[*/0x0841/*::]*/: { /* n:"BrtBeginDataFeedPr15", */ T:1 },
		/*::[*/0x0842/*::]*/: { /* n:"BrtEndDataFeedPr15", */ T:-1 },
		/*::[*/0x0843/*::]*/: { /* n:"BrtTextPr15" */ },
		/*::[*/0x0844/*::]*/: { /* n:"BrtRangePr15" */ },
		/*::[*/0x0845/*::]*/: { /* n:"BrtDbCommand15" */ },
		/*::[*/0x0846/*::]*/: { /* n:"BrtBeginDbTables15", */ T:1 },
		/*::[*/0x0847/*::]*/: { /* n:"BrtEndDbTables15", */ T:-1 },
		/*::[*/0x0848/*::]*/: { /* n:"BrtDbTable15" */ },
		/*::[*/0x0849/*::]*/: { /* n:"BrtBeginDataModel", */ T:1 },
		/*::[*/0x084A/*::]*/: { /* n:"BrtEndDataModel", */ T:-1 },
		/*::[*/0x084B/*::]*/: { /* n:"BrtBeginModelTables", */ T:1 },
		/*::[*/0x084C/*::]*/: { /* n:"BrtEndModelTables", */ T:-1 },
		/*::[*/0x084D/*::]*/: { /* n:"BrtModelTable" */ },
		/*::[*/0x084E/*::]*/: { /* n:"BrtBeginModelRelationships", */ T:1 },
		/*::[*/0x084F/*::]*/: { /* n:"BrtEndModelRelationships", */ T:-1 },
		/*::[*/0x0850/*::]*/: { /* n:"BrtModelRelationship" */ },
		/*::[*/0x0851/*::]*/: { /* n:"BrtBeginECTxtWiz15", */ T:1 },
		/*::[*/0x0852/*::]*/: { /* n:"BrtEndECTxtWiz15", */ T:-1 },
		/*::[*/0x0853/*::]*/: { /* n:"BrtBeginECTWFldInfoLst15", */ T:1 },
		/*::[*/0x0854/*::]*/: { /* n:"BrtEndECTWFldInfoLst15", */ T:-1 },
		/*::[*/0x0855/*::]*/: { /* n:"BrtBeginECTWFldInfo15", */ T:1 },
		/*::[*/0x0856/*::]*/: { /* n:"BrtFieldListActiveItem" */ },
		/*::[*/0x0857/*::]*/: { /* n:"BrtPivotCacheIdVersion" */ },
		/*::[*/0x0858/*::]*/: { /* n:"BrtSXDI15" */ },
		/*::[*/0x0859/*::]*/: { /* n:"BrtBeginModelTimeGroupings", */ T:1 },
		/*::[*/0x085A/*::]*/: { /* n:"BrtEndModelTimeGroupings", */ T:-1 },
		/*::[*/0x085B/*::]*/: { /* n:"BrtBeginModelTimeGrouping", */ T:1 },
		/*::[*/0x085C/*::]*/: { /* n:"BrtEndModelTimeGrouping", */ T:-1 },
		/*::[*/0x085D/*::]*/: { /* n:"BrtModelTimeGroupingCalcCol" */ },
		/*::[*/0x0C00/*::]*/: { /* n:"BrtUid" */ },
		/*::[*/0x0C01/*::]*/: { /* n:"BrtRevisionPtr" */ },
		/*::[*/0x1000/*::]*/: { /* n:"BrtBeginDynamicArrayPr", */ T:1 },
		/*::[*/0x1001/*::]*/: { /* n:"BrtEndDynamicArrayPr", */ T:-1 },
		/*::[*/0x138A/*::]*/: { /* n:"BrtBeginRichValueBlock", */ T:1 },
		/*::[*/0x138B/*::]*/: { /* n:"BrtEndRichValueBlock", */ T:-1 },
		/*::[*/0x13D9/*::]*/: { /* n:"BrtBeginRichFilters", */ T:1 },
		/*::[*/0x13DA/*::]*/: { /* n:"BrtEndRichFilters", */ T:-1 },
		/*::[*/0x13DB/*::]*/: { /* n:"BrtRichFilter" */ },
		/*::[*/0x13DC/*::]*/: { /* n:"BrtBeginRichFilterColumn", */ T:1 },
		/*::[*/0x13DD/*::]*/: { /* n:"BrtEndRichFilterColumn", */ T:-1 },
		/*::[*/0x13DE/*::]*/: { /* n:"BrtBeginCustomRichFilters", */ T:1 },
		/*::[*/0x13DF/*::]*/: { /* n:"BrtEndCustomRichFilters", */ T:-1 },
		/*::[*/0x13E0/*::]*/: { /* n:"BrtCustomRichFilter" */ },
		/*::[*/0x13E1/*::]*/: { /* n:"BrtTop10RichFilter" */ },
		/*::[*/0x13E2/*::]*/: { /* n:"BrtDynamicRichFilter" */ },
		/*::[*/0x13E4/*::]*/: { /* n:"BrtBeginRichSortCondition", */ T:1 },
		/*::[*/0x13E5/*::]*/: { /* n:"BrtEndRichSortCondition", */ T:-1 },
		/*::[*/0x13E6/*::]*/: { /* n:"BrtRichFilterDateGroupItem" */ },
		/*::[*/0x13E7/*::]*/: { /* n:"BrtBeginCalcFeatures", */ T:1 },
		/*::[*/0x13E8/*::]*/: { /* n:"BrtEndCalcFeatures", */ T:-1 },
		/*::[*/0x13E9/*::]*/: { /* n:"BrtCalcFeature" */ },
		/*::[*/0x13EB/*::]*/: { /* n:"BrtExternalLinksPr" */ },
		/*::[*/0xFFFF/*::]*/: { n:"" }
	};

	/* [MS-XLS] 2.3 Record Enumeration (and other sources) */
	var XLSRecordEnum = {
		/* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
		/*::[*/0x0006/*::]*/: { /* n:"Formula", */ f:parse_Formula },
		/*::[*/0x000a/*::]*/: { /* n:"EOF", */ f:parsenoop2 },
		/*::[*/0x000c/*::]*/: { /* n:"CalcCount", */ f:parseuint16 }, //
		/*::[*/0x000d/*::]*/: { /* n:"CalcMode", */ f:parseuint16 }, //
		/*::[*/0x000e/*::]*/: { /* n:"CalcPrecision", */ f:parsebool }, //
		/*::[*/0x000f/*::]*/: { /* n:"CalcRefMode", */ f:parsebool }, //
		/*::[*/0x0010/*::]*/: { /* n:"CalcDelta", */ f:parse_Xnum }, //
		/*::[*/0x0011/*::]*/: { /* n:"CalcIter", */ f:parsebool }, //
		/*::[*/0x0012/*::]*/: { /* n:"Protect", */ f:parsebool },
		/*::[*/0x0013/*::]*/: { /* n:"Password", */ f:parseuint16 },
		/*::[*/0x0014/*::]*/: { /* n:"Header", */ f:parse_XLHeaderFooter },
		/*::[*/0x0015/*::]*/: { /* n:"Footer", */ f:parse_XLHeaderFooter },
		/*::[*/0x0017/*::]*/: { /* n:"ExternSheet", */ f:parse_ExternSheet },
		/*::[*/0x0018/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
		/*::[*/0x0019/*::]*/: { /* n:"WinProtect", */ f:parsebool },
		/*::[*/0x001a/*::]*/: { /* n:"VerticalPageBreaks", */ },
		/*::[*/0x001b/*::]*/: { /* n:"HorizontalPageBreaks", */ },
		/*::[*/0x001c/*::]*/: { /* n:"Note", */ f:parse_Note },
		/*::[*/0x001d/*::]*/: { /* n:"Selection", */ },
		/*::[*/0x0022/*::]*/: { /* n:"Date1904", */ f:parsebool },
		/*::[*/0x0023/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
		/*::[*/0x0026/*::]*/: { /* n:"LeftMargin", */ f:parse_Xnum }, // *
		/*::[*/0x0027/*::]*/: { /* n:"RightMargin", */ f:parse_Xnum }, // *
		/*::[*/0x0028/*::]*/: { /* n:"TopMargin", */ f:parse_Xnum }, // *
		/*::[*/0x0029/*::]*/: { /* n:"BottomMargin", */ f:parse_Xnum }, // *
		/*::[*/0x002a/*::]*/: { /* n:"PrintRowCol", */ f:parsebool },
		/*::[*/0x002b/*::]*/: { /* n:"PrintGrid", */ f:parsebool },
		/*::[*/0x002f/*::]*/: { /* n:"FilePass", */ f:parse_FilePass },
		/*::[*/0x0031/*::]*/: { /* n:"Font", */ f:parse_Font },
		/*::[*/0x0033/*::]*/: { /* n:"PrintSize", */ f:parseuint16 },
		/*::[*/0x003c/*::]*/: { /* n:"Continue", */ },
		/*::[*/0x003d/*::]*/: { /* n:"Window1", */ f:parse_Window1 },
		/*::[*/0x0040/*::]*/: { /* n:"Backup", */ f:parsebool },
		/*::[*/0x0041/*::]*/: { /* n:"Pane", */ f:parse_Pane },
		/*::[*/0x0042/*::]*/: { /* n:"CodePage", */ f:parseuint16 },
		/*::[*/0x004d/*::]*/: { /* n:"Pls", */ },
		/*::[*/0x0050/*::]*/: { /* n:"DCon", */ },
		/*::[*/0x0051/*::]*/: { /* n:"DConRef", */ },
		/*::[*/0x0052/*::]*/: { /* n:"DConName", */ },
		/*::[*/0x0055/*::]*/: { /* n:"DefColWidth", */ f:parseuint16 },
		/*::[*/0x0059/*::]*/: { /* n:"XCT", */ },
		/*::[*/0x005a/*::]*/: { /* n:"CRN", */ },
		/*::[*/0x005b/*::]*/: { /* n:"FileSharing", */ },
		/*::[*/0x005c/*::]*/: { /* n:"WriteAccess", */ f:parse_WriteAccess },
		/*::[*/0x005d/*::]*/: { /* n:"Obj", */ f:parse_Obj },
		/*::[*/0x005e/*::]*/: { /* n:"Uncalced", */ },
		/*::[*/0x005f/*::]*/: { /* n:"CalcSaveRecalc", */ f:parsebool }, //
		/*::[*/0x0060/*::]*/: { /* n:"Template", */ },
		/*::[*/0x0061/*::]*/: { /* n:"Intl", */ },
		/*::[*/0x0063/*::]*/: { /* n:"ObjProtect", */ f:parsebool },
		/*::[*/0x007d/*::]*/: { /* n:"ColInfo", */ f:parse_ColInfo },
		/*::[*/0x0080/*::]*/: { /* n:"Guts", */ f:parse_Guts },
		/*::[*/0x0081/*::]*/: { /* n:"WsBool", */ f:parse_WsBool },
		/*::[*/0x0082/*::]*/: { /* n:"GridSet", */ f:parseuint16 },
		/*::[*/0x0083/*::]*/: { /* n:"HCenter", */ f:parsebool },
		/*::[*/0x0084/*::]*/: { /* n:"VCenter", */ f:parsebool },
		/*::[*/0x0085/*::]*/: { /* n:"BoundSheet8", */ f:parse_BoundSheet8 },
		/*::[*/0x0086/*::]*/: { /* n:"WriteProtect", */ },
		/*::[*/0x008c/*::]*/: { /* n:"Country", */ f:parse_Country },
		/*::[*/0x008d/*::]*/: { /* n:"HideObj", */ f:parseuint16 },
		/*::[*/0x0090/*::]*/: { /* n:"Sort", */ },
		/*::[*/0x0092/*::]*/: { /* n:"Palette", */ f:parse_Palette },
		/*::[*/0x0097/*::]*/: { /* n:"Sync", */ },
		/*::[*/0x0098/*::]*/: { /* n:"LPr", */ },
		/*::[*/0x0099/*::]*/: { /* n:"DxGCol", */ },
		/*::[*/0x009a/*::]*/: { /* n:"FnGroupName", */ },
		/*::[*/0x009b/*::]*/: { /* n:"FilterMode", */ },
		/*::[*/0x009c/*::]*/: { /* n:"BuiltInFnGroupCount", */ f:parseuint16 },
		/*::[*/0x009d/*::]*/: { /* n:"AutoFilterInfo", */ },
		/*::[*/0x009e/*::]*/: { /* n:"AutoFilter", */ },
		/*::[*/0x00a0/*::]*/: { /* n:"Scl", */ f:parse_Scl },
		/*::[*/0x00a1/*::]*/: { /* n:"Setup", */ f:parse_Setup },
		/*::[*/0x00ae/*::]*/: { /* n:"ScenMan", */ },
		/*::[*/0x00af/*::]*/: { /* n:"SCENARIO", */ },
		/*::[*/0x00b0/*::]*/: { /* n:"SxView", */ },
		/*::[*/0x00b1/*::]*/: { /* n:"Sxvd", */ },
		/*::[*/0x00b2/*::]*/: { /* n:"SXVI", */ },
		/*::[*/0x00b4/*::]*/: { /* n:"SxIvd", */ },
		/*::[*/0x00b5/*::]*/: { /* n:"SXLI", */ },
		/*::[*/0x00b6/*::]*/: { /* n:"SXPI", */ },
		/*::[*/0x00b8/*::]*/: { /* n:"DocRoute", */ },
		/*::[*/0x00b9/*::]*/: { /* n:"RecipName", */ },
		/*::[*/0x00bd/*::]*/: { /* n:"MulRk", */ f:parse_MulRk },
		/*::[*/0x00be/*::]*/: { /* n:"MulBlank", */ f:parse_MulBlank },
		/*::[*/0x00c1/*::]*/: { /* n:"Mms", */ f:parsenoop2 },
		/*::[*/0x00c5/*::]*/: { /* n:"SXDI", */ },
		/*::[*/0x00c6/*::]*/: { /* n:"SXDB", */ },
		/*::[*/0x00c7/*::]*/: { /* n:"SXFDB", */ },
		/*::[*/0x00c8/*::]*/: { /* n:"SXDBB", */ },
		/*::[*/0x00c9/*::]*/: { /* n:"SXNum", */ },
		/*::[*/0x00ca/*::]*/: { /* n:"SxBool", */ f:parsebool },
		/*::[*/0x00cb/*::]*/: { /* n:"SxErr", */ },
		/*::[*/0x00cc/*::]*/: { /* n:"SXInt", */ },
		/*::[*/0x00cd/*::]*/: { /* n:"SXString", */ },
		/*::[*/0x00ce/*::]*/: { /* n:"SXDtr", */ },
		/*::[*/0x00cf/*::]*/: { /* n:"SxNil", */ },
		/*::[*/0x00d0/*::]*/: { /* n:"SXTbl", */ },
		/*::[*/0x00d1/*::]*/: { /* n:"SXTBRGIITM", */ },
		/*::[*/0x00d2/*::]*/: { /* n:"SxTbpg", */ },
		/*::[*/0x00d3/*::]*/: { /* n:"ObProj", */ },
		/*::[*/0x00d5/*::]*/: { /* n:"SXStreamID", */ },
		/*::[*/0x00d7/*::]*/: { /* n:"DBCell", */ },
		/*::[*/0x00d8/*::]*/: { /* n:"SXRng", */ },
		/*::[*/0x00d9/*::]*/: { /* n:"SxIsxoper", */ },
		/*::[*/0x00da/*::]*/: { /* n:"BookBool", */ f:parseuint16 },
		/*::[*/0x00dc/*::]*/: { /* n:"DbOrParamQry", */ },
		/*::[*/0x00dd/*::]*/: { /* n:"ScenarioProtect", */ f:parsebool },
		/*::[*/0x00de/*::]*/: { /* n:"OleObjectSize", */ },
		/*::[*/0x00e0/*::]*/: { /* n:"XF", */ f:parse_XF },
		/*::[*/0x00e1/*::]*/: { /* n:"InterfaceHdr", */ f:parse_InterfaceHdr },
		/*::[*/0x00e2/*::]*/: { /* n:"InterfaceEnd", */ f:parsenoop2 },
		/*::[*/0x00e3/*::]*/: { /* n:"SXVS", */ },
		/*::[*/0x00e5/*::]*/: { /* n:"MergeCells", */ f:parse_MergeCells },
		/*::[*/0x00e9/*::]*/: { /* n:"BkHim", */ },
		/*::[*/0x00eb/*::]*/: { /* n:"MsoDrawingGroup", */ },
		/*::[*/0x00ec/*::]*/: { /* n:"MsoDrawing", */ },
		/*::[*/0x00ed/*::]*/: { /* n:"MsoDrawingSelection", */ },
		/*::[*/0x00ef/*::]*/: { /* n:"PhoneticInfo", */ },
		/*::[*/0x00f0/*::]*/: { /* n:"SxRule", */ },
		/*::[*/0x00f1/*::]*/: { /* n:"SXEx", */ },
		/*::[*/0x00f2/*::]*/: { /* n:"SxFilt", */ },
		/*::[*/0x00f4/*::]*/: { /* n:"SxDXF", */ },
		/*::[*/0x00f5/*::]*/: { /* n:"SxItm", */ },
		/*::[*/0x00f6/*::]*/: { /* n:"SxName", */ },
		/*::[*/0x00f7/*::]*/: { /* n:"SxSelect", */ },
		/*::[*/0x00f8/*::]*/: { /* n:"SXPair", */ },
		/*::[*/0x00f9/*::]*/: { /* n:"SxFmla", */ },
		/*::[*/0x00fb/*::]*/: { /* n:"SxFormat", */ },
		/*::[*/0x00fc/*::]*/: { /* n:"SST", */ f:parse_SST },
		/*::[*/0x00fd/*::]*/: { /* n:"LabelSst", */ f:parse_LabelSst },
		/*::[*/0x00ff/*::]*/: { /* n:"ExtSST", */ f:parse_ExtSST },
		/*::[*/0x0100/*::]*/: { /* n:"SXVDEx", */ },
		/*::[*/0x0103/*::]*/: { /* n:"SXFormula", */ },
		/*::[*/0x0122/*::]*/: { /* n:"SXDBEx", */ },
		/*::[*/0x0137/*::]*/: { /* n:"RRDInsDel", */ },
		/*::[*/0x0138/*::]*/: { /* n:"RRDHead", */ },
		/*::[*/0x013b/*::]*/: { /* n:"RRDChgCell", */ },
		/*::[*/0x013d/*::]*/: { /* n:"RRTabId", */ f:parseuint16a },
		/*::[*/0x013e/*::]*/: { /* n:"RRDRenSheet", */ },
		/*::[*/0x013f/*::]*/: { /* n:"RRSort", */ },
		/*::[*/0x0140/*::]*/: { /* n:"RRDMove", */ },
		/*::[*/0x014a/*::]*/: { /* n:"RRFormat", */ },
		/*::[*/0x014b/*::]*/: { /* n:"RRAutoFmt", */ },
		/*::[*/0x014d/*::]*/: { /* n:"RRInsertSh", */ },
		/*::[*/0x014e/*::]*/: { /* n:"RRDMoveBegin", */ },
		/*::[*/0x014f/*::]*/: { /* n:"RRDMoveEnd", */ },
		/*::[*/0x0150/*::]*/: { /* n:"RRDInsDelBegin", */ },
		/*::[*/0x0151/*::]*/: { /* n:"RRDInsDelEnd", */ },
		/*::[*/0x0152/*::]*/: { /* n:"RRDConflict", */ },
		/*::[*/0x0153/*::]*/: { /* n:"RRDDefName", */ },
		/*::[*/0x0154/*::]*/: { /* n:"RRDRstEtxp", */ },
		/*::[*/0x015f/*::]*/: { /* n:"LRng", */ },
		/*::[*/0x0160/*::]*/: { /* n:"UsesELFs", */ f:parsebool },
		/*::[*/0x0161/*::]*/: { /* n:"DSF", */ f:parsenoop2 },
		/*::[*/0x0191/*::]*/: { /* n:"CUsr", */ },
		/*::[*/0x0192/*::]*/: { /* n:"CbUsr", */ },
		/*::[*/0x0193/*::]*/: { /* n:"UsrInfo", */ },
		/*::[*/0x0194/*::]*/: { /* n:"UsrExcl", */ },
		/*::[*/0x0195/*::]*/: { /* n:"FileLock", */ },
		/*::[*/0x0196/*::]*/: { /* n:"RRDInfo", */ },
		/*::[*/0x0197/*::]*/: { /* n:"BCUsrs", */ },
		/*::[*/0x0198/*::]*/: { /* n:"UsrChk", */ },
		/*::[*/0x01a9/*::]*/: { /* n:"UserBView", */ },
		/*::[*/0x01aa/*::]*/: { /* n:"UserSViewBegin", */ },
		/*::[*/0x01ab/*::]*/: { /* n:"UserSViewEnd", */ },
		/*::[*/0x01ac/*::]*/: { /* n:"RRDUserView", */ },
		/*::[*/0x01ad/*::]*/: { /* n:"Qsi", */ },
		/*::[*/0x01ae/*::]*/: { /* n:"SupBook", */ f:parse_SupBook },
		/*::[*/0x01af/*::]*/: { /* n:"Prot4Rev", */ f:parsebool },
		/*::[*/0x01b0/*::]*/: { /* n:"CondFmt", */ },
		/*::[*/0x01b1/*::]*/: { /* n:"CF", */ },
		/*::[*/0x01b2/*::]*/: { /* n:"DVal", */ },
		/*::[*/0x01b5/*::]*/: { /* n:"DConBin", */ },
		/*::[*/0x01b6/*::]*/: { /* n:"TxO", */ f:parse_TxO },
		/*::[*/0x01b7/*::]*/: { /* n:"RefreshAll", */ f:parsebool }, //
		/*::[*/0x01b8/*::]*/: { /* n:"HLink", */ f:parse_HLink },
		/*::[*/0x01b9/*::]*/: { /* n:"Lel", */ },
		/*::[*/0x01ba/*::]*/: { /* n:"CodeName", */ f:parse_XLUnicodeString },
		/*::[*/0x01bb/*::]*/: { /* n:"SXFDBType", */ },
		/*::[*/0x01bc/*::]*/: { /* n:"Prot4RevPass", */ f:parseuint16 },
		/*::[*/0x01bd/*::]*/: { /* n:"ObNoMacros", */ },
		/*::[*/0x01be/*::]*/: { /* n:"Dv", */ },
		/*::[*/0x01c0/*::]*/: { /* n:"Excel9File", */ f:parsenoop2 },
		/*::[*/0x01c1/*::]*/: { /* n:"RecalcId", */ f:parse_RecalcId, r:2},
		/*::[*/0x01c2/*::]*/: { /* n:"EntExU2", */ f:parsenoop2 },
		/*::[*/0x0200/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
		/*::[*/0x0201/*::]*/: { /* n:"Blank", */ f:parse_Blank },
		/*::[*/0x0203/*::]*/: { /* n:"Number", */ f:parse_Number },
		/*::[*/0x0204/*::]*/: { /* n:"Label", */ f:parse_Label },
		/*::[*/0x0205/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
		/*::[*/0x0207/*::]*/: { /* n:"String", */ f:parse_String },
		/*::[*/0x0208/*::]*/: { /* n:"Row", */ f:parse_Row },
		/*::[*/0x020b/*::]*/: { /* n:"Index", */ },
		/*::[*/0x0221/*::]*/: { /* n:"Array", */ f:parse_Array },
		/*::[*/0x0225/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
		/*::[*/0x0236/*::]*/: { /* n:"Table", */ },
		/*::[*/0x023e/*::]*/: { /* n:"Window2", */ f:parse_Window2 },
		/*::[*/0x027e/*::]*/: { /* n:"RK", */ f:parse_RK },
		/*::[*/0x0293/*::]*/: { /* n:"Style", */ },
		/*::[*/0x0418/*::]*/: { /* n:"BigName", */ },
		/*::[*/0x041e/*::]*/: { /* n:"Format", */ f:parse_Format },
		/*::[*/0x043c/*::]*/: { /* n:"ContinueBigName", */ },
		/*::[*/0x04bc/*::]*/: { /* n:"ShrFmla", */ f:parse_ShrFmla },
		/*::[*/0x0800/*::]*/: { /* n:"HLinkTooltip", */ f:parse_HLinkTooltip },
		/*::[*/0x0801/*::]*/: { /* n:"WebPub", */ },
		/*::[*/0x0802/*::]*/: { /* n:"QsiSXTag", */ },
		/*::[*/0x0803/*::]*/: { /* n:"DBQueryExt", */ },
		/*::[*/0x0804/*::]*/: { /* n:"ExtString", */ },
		/*::[*/0x0805/*::]*/: { /* n:"TxtQry", */ },
		/*::[*/0x0806/*::]*/: { /* n:"Qsir", */ },
		/*::[*/0x0807/*::]*/: { /* n:"Qsif", */ },
		/*::[*/0x0808/*::]*/: { /* n:"RRDTQSIF", */ },
		/*::[*/0x0809/*::]*/: { /* n:"BOF", */ f:parse_BOF },
		/*::[*/0x080a/*::]*/: { /* n:"OleDbConn", */ },
		/*::[*/0x080b/*::]*/: { /* n:"WOpt", */ },
		/*::[*/0x080c/*::]*/: { /* n:"SXViewEx", */ },
		/*::[*/0x080d/*::]*/: { /* n:"SXTH", */ },
		/*::[*/0x080e/*::]*/: { /* n:"SXPIEx", */ },
		/*::[*/0x080f/*::]*/: { /* n:"SXVDTEx", */ },
		/*::[*/0x0810/*::]*/: { /* n:"SXViewEx9", */ },
		/*::[*/0x0812/*::]*/: { /* n:"ContinueFrt", */ },
		/*::[*/0x0813/*::]*/: { /* n:"RealTimeData", */ },
		/*::[*/0x0850/*::]*/: { /* n:"ChartFrtInfo", */ },
		/*::[*/0x0851/*::]*/: { /* n:"FrtWrapper", */ },
		/*::[*/0x0852/*::]*/: { /* n:"StartBlock", */ },
		/*::[*/0x0853/*::]*/: { /* n:"EndBlock", */ },
		/*::[*/0x0854/*::]*/: { /* n:"StartObject", */ },
		/*::[*/0x0855/*::]*/: { /* n:"EndObject", */ },
		/*::[*/0x0856/*::]*/: { /* n:"CatLab", */ },
		/*::[*/0x0857/*::]*/: { /* n:"YMult", */ },
		/*::[*/0x0858/*::]*/: { /* n:"SXViewLink", */ },
		/*::[*/0x0859/*::]*/: { /* n:"PivotChartBits", */ },
		/*::[*/0x085a/*::]*/: { /* n:"FrtFontList", */ },
		/*::[*/0x0862/*::]*/: { /* n:"SheetExt", */ },
		/*::[*/0x0863/*::]*/: { /* n:"BookExt", */ r:12},
		/*::[*/0x0864/*::]*/: { /* n:"SXAddl", */ },
		/*::[*/0x0865/*::]*/: { /* n:"CrErr", */ },
		/*::[*/0x0866/*::]*/: { /* n:"HFPicture", */ },
		/*::[*/0x0867/*::]*/: { /* n:"FeatHdr", */ f:parsenoop2 },
		/*::[*/0x0868/*::]*/: { /* n:"Feat", */ },
		/*::[*/0x086a/*::]*/: { /* n:"DataLabExt", */ },
		/*::[*/0x086b/*::]*/: { /* n:"DataLabExtContents", */ },
		/*::[*/0x086c/*::]*/: { /* n:"CellWatch", */ },
		/*::[*/0x0871/*::]*/: { /* n:"FeatHdr11", */ },
		/*::[*/0x0872/*::]*/: { /* n:"Feature11", */ },
		/*::[*/0x0874/*::]*/: { /* n:"DropDownObjIds", */ },
		/*::[*/0x0875/*::]*/: { /* n:"ContinueFrt11", */ },
		/*::[*/0x0876/*::]*/: { /* n:"DConn", */ },
		/*::[*/0x0877/*::]*/: { /* n:"List12", */ },
		/*::[*/0x0878/*::]*/: { /* n:"Feature12", */ },
		/*::[*/0x0879/*::]*/: { /* n:"CondFmt12", */ },
		/*::[*/0x087a/*::]*/: { /* n:"CF12", */ },
		/*::[*/0x087b/*::]*/: { /* n:"CFEx", */ },
		/*::[*/0x087c/*::]*/: { /* n:"XFCRC", */ f:parse_XFCRC, r:12 },
		/*::[*/0x087d/*::]*/: { /* n:"XFExt", */ f:parse_XFExt, r:12 },
		/*::[*/0x087e/*::]*/: { /* n:"AutoFilter12", */ },
		/*::[*/0x087f/*::]*/: { /* n:"ContinueFrt12", */ },
		/*::[*/0x0884/*::]*/: { /* n:"MDTInfo", */ },
		/*::[*/0x0885/*::]*/: { /* n:"MDXStr", */ },
		/*::[*/0x0886/*::]*/: { /* n:"MDXTuple", */ },
		/*::[*/0x0887/*::]*/: { /* n:"MDXSet", */ },
		/*::[*/0x0888/*::]*/: { /* n:"MDXProp", */ },
		/*::[*/0x0889/*::]*/: { /* n:"MDXKPI", */ },
		/*::[*/0x088a/*::]*/: { /* n:"MDB", */ },
		/*::[*/0x088b/*::]*/: { /* n:"PLV", */ },
		/*::[*/0x088c/*::]*/: { /* n:"Compat12", */ f:parsebool, r:12 },
		/*::[*/0x088d/*::]*/: { /* n:"DXF", */ },
		/*::[*/0x088e/*::]*/: { /* n:"TableStyles", */ r:12 },
		/*::[*/0x088f/*::]*/: { /* n:"TableStyle", */ },
		/*::[*/0x0890/*::]*/: { /* n:"TableStyleElement", */ },
		/*::[*/0x0892/*::]*/: { /* n:"StyleExt", */ },
		/*::[*/0x0893/*::]*/: { /* n:"NamePublish", */ },
		/*::[*/0x0894/*::]*/: { /* n:"NameCmt", */ f:parse_NameCmt, r:12 },
		/*::[*/0x0895/*::]*/: { /* n:"SortData", */ },
		/*::[*/0x0896/*::]*/: { /* n:"Theme", */ f:parse_Theme, r:12 },
		/*::[*/0x0897/*::]*/: { /* n:"GUIDTypeLib", */ },
		/*::[*/0x0898/*::]*/: { /* n:"FnGrp12", */ },
		/*::[*/0x0899/*::]*/: { /* n:"NameFnGrp12", */ },
		/*::[*/0x089a/*::]*/: { /* n:"MTRSettings", */ f:parse_MTRSettings, r:12 },
		/*::[*/0x089b/*::]*/: { /* n:"CompressPictures", */ f:parsenoop2 },
		/*::[*/0x089c/*::]*/: { /* n:"HeaderFooter", */ },
		/*::[*/0x089d/*::]*/: { /* n:"CrtLayout12", */ },
		/*::[*/0x089e/*::]*/: { /* n:"CrtMlFrt", */ },
		/*::[*/0x089f/*::]*/: { /* n:"CrtMlFrtContinue", */ },
		/*::[*/0x08a3/*::]*/: { /* n:"ForceFullCalculation", */ f:parse_ForceFullCalculation },
		/*::[*/0x08a4/*::]*/: { /* n:"ShapePropsStream", */ },
		/*::[*/0x08a5/*::]*/: { /* n:"TextPropsStream", */ },
		/*::[*/0x08a6/*::]*/: { /* n:"RichTextStream", */ },
		/*::[*/0x08a7/*::]*/: { /* n:"CrtLayout12A", */ },
		/*::[*/0x1001/*::]*/: { /* n:"Units", */ },
		/*::[*/0x1002/*::]*/: { /* n:"Chart", */ },
		/*::[*/0x1003/*::]*/: { /* n:"Series", */ },
		/*::[*/0x1006/*::]*/: { /* n:"DataFormat", */ },
		/*::[*/0x1007/*::]*/: { /* n:"LineFormat", */ },
		/*::[*/0x1009/*::]*/: { /* n:"MarkerFormat", */ },
		/*::[*/0x100a/*::]*/: { /* n:"AreaFormat", */ },
		/*::[*/0x100b/*::]*/: { /* n:"PieFormat", */ },
		/*::[*/0x100c/*::]*/: { /* n:"AttachedLabel", */ },
		/*::[*/0x100d/*::]*/: { /* n:"SeriesText", */ },
		/*::[*/0x1014/*::]*/: { /* n:"ChartFormat", */ },
		/*::[*/0x1015/*::]*/: { /* n:"Legend", */ },
		/*::[*/0x1016/*::]*/: { /* n:"SeriesList", */ },
		/*::[*/0x1017/*::]*/: { /* n:"Bar", */ },
		/*::[*/0x1018/*::]*/: { /* n:"Line", */ },
		/*::[*/0x1019/*::]*/: { /* n:"Pie", */ },
		/*::[*/0x101a/*::]*/: { /* n:"Area", */ },
		/*::[*/0x101b/*::]*/: { /* n:"Scatter", */ },
		/*::[*/0x101c/*::]*/: { /* n:"CrtLine", */ },
		/*::[*/0x101d/*::]*/: { /* n:"Axis", */ },
		/*::[*/0x101e/*::]*/: { /* n:"Tick", */ },
		/*::[*/0x101f/*::]*/: { /* n:"ValueRange", */ },
		/*::[*/0x1020/*::]*/: { /* n:"CatSerRange", */ },
		/*::[*/0x1021/*::]*/: { /* n:"AxisLine", */ },
		/*::[*/0x1022/*::]*/: { /* n:"CrtLink", */ },
		/*::[*/0x1024/*::]*/: { /* n:"DefaultText", */ },
		/*::[*/0x1025/*::]*/: { /* n:"Text", */ },
		/*::[*/0x1026/*::]*/: { /* n:"FontX", */ f:parseuint16 },
		/*::[*/0x1027/*::]*/: { /* n:"ObjectLink", */ },
		/*::[*/0x1032/*::]*/: { /* n:"Frame", */ },
		/*::[*/0x1033/*::]*/: { /* n:"Begin", */ },
		/*::[*/0x1034/*::]*/: { /* n:"End", */ },
		/*::[*/0x1035/*::]*/: { /* n:"PlotArea", */ },
		/*::[*/0x103a/*::]*/: { /* n:"Chart3d", */ },
		/*::[*/0x103c/*::]*/: { /* n:"PicF", */ },
		/*::[*/0x103d/*::]*/: { /* n:"DropBar", */ },
		/*::[*/0x103e/*::]*/: { /* n:"Radar", */ },
		/*::[*/0x103f/*::]*/: { /* n:"Surf", */ },
		/*::[*/0x1040/*::]*/: { /* n:"RadarArea", */ },
		/*::[*/0x1041/*::]*/: { /* n:"AxisParent", */ },
		/*::[*/0x1043/*::]*/: { /* n:"LegendException", */ },
		/*::[*/0x1044/*::]*/: { /* n:"ShtProps", */ f:parse_ShtProps },
		/*::[*/0x1045/*::]*/: { /* n:"SerToCrt", */ },
		/*::[*/0x1046/*::]*/: { /* n:"AxesUsed", */ },
		/*::[*/0x1048/*::]*/: { /* n:"SBaseRef", */ },
		/*::[*/0x104a/*::]*/: { /* n:"SerParent", */ },
		/*::[*/0x104b/*::]*/: { /* n:"SerAuxTrend", */ },
		/*::[*/0x104e/*::]*/: { /* n:"IFmtRecord", */ },
		/*::[*/0x104f/*::]*/: { /* n:"Pos", */ },
		/*::[*/0x1050/*::]*/: { /* n:"AlRuns", */ },
		/*::[*/0x1051/*::]*/: { /* n:"BRAI", */ },
		/*::[*/0x105b/*::]*/: { /* n:"SerAuxErrBar", */ },
		/*::[*/0x105c/*::]*/: { /* n:"ClrtClient", */ f:parse_ClrtClient },
		/*::[*/0x105d/*::]*/: { /* n:"SerFmt", */ },
		/*::[*/0x105f/*::]*/: { /* n:"Chart3DBarShape", */ },
		/*::[*/0x1060/*::]*/: { /* n:"Fbi", */ },
		/*::[*/0x1061/*::]*/: { /* n:"BopPop", */ },
		/*::[*/0x1062/*::]*/: { /* n:"AxcExt", */ },
		/*::[*/0x1063/*::]*/: { /* n:"Dat", */ },
		/*::[*/0x1064/*::]*/: { /* n:"PlotGrowth", */ },
		/*::[*/0x1065/*::]*/: { /* n:"SIIndex", */ },
		/*::[*/0x1066/*::]*/: { /* n:"GelFrame", */ },
		/*::[*/0x1067/*::]*/: { /* n:"BopPopCustom", */ },
		/*::[*/0x1068/*::]*/: { /* n:"Fbi2", */ },

		/*::[*/0x0000/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
		/*::[*/0x0001/*::]*/: { /* n:"BIFF2BLANK", */ },
		/*::[*/0x0002/*::]*/: { /* n:"BIFF2INT", */ f:parse_BIFF2INT },
		/*::[*/0x0003/*::]*/: { /* n:"BIFF2NUM", */ f:parse_BIFF2NUM },
		/*::[*/0x0004/*::]*/: { /* n:"BIFF2STR", */ f:parse_BIFF2STR },
		/*::[*/0x0005/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
		/*::[*/0x0007/*::]*/: { /* n:"String", */ f:parse_BIFF2STRING },
		/*::[*/0x0008/*::]*/: { /* n:"BIFF2ROW", */ },
		/*::[*/0x0009/*::]*/: { /* n:"BOF", */ f:parse_BOF },
		/*::[*/0x000b/*::]*/: { /* n:"Index", */ },
		/*::[*/0x0016/*::]*/: { /* n:"ExternCount", */ f:parseuint16 },
		/*::[*/0x001e/*::]*/: { /* n:"BIFF2FORMAT", */ f:parse_BIFF2Format },
		/*::[*/0x001f/*::]*/: { /* n:"BIFF2FMTCNT", */ }, /* 16-bit cnt of BIFF2FORMAT records */
		/*::[*/0x0020/*::]*/: { /* n:"BIFF2COLINFO", */ },
		/*::[*/0x0021/*::]*/: { /* n:"Array", */ f:parse_Array },
		/*::[*/0x0024/*::]*/: { /* n:"COLWIDTH", */ },
		/*::[*/0x0025/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
		// 0x2c ??
		// 0x2d ??
		// 0x2e ??
		// 0x30 FONTCOUNT: number of fonts
		/*::[*/0x0032/*::]*/: { /* n:"BIFF2FONTXTRA", */ f:parse_BIFF2FONTXTRA },
		// 0x35: INFOOPTS
		// 0x36: TABLE (BIFF2 only)
		// 0x37: TABLE2 (BIFF2 only)
		// 0x38: WNDESK
		// 0x39 ??
		// 0x3a: BEGINPREF
		// 0x3b: ENDPREF
		/*::[*/0x003e/*::]*/: { /* n:"BIFF2WINDOW2", */ },
		// 0x3f ??
		// 0x46: SHOWSCROLL
		// 0x47: SHOWFORMULA
		// 0x48: STATUSBAR
		// 0x49: SHORTMENUS
		// 0x4A:
		// 0x4B:
		// 0x4C:
		// 0x4E:
		// 0x4F:
		// 0x58: TOOLBAR (BIFF3)

		/* - - - */
		/*::[*/0x0034/*::]*/: { /* n:"DDEObjName", */ },
		/*::[*/0x0043/*::]*/: { /* n:"BIFF2XF", */ },
		/*::[*/0x0044/*::]*/: { /* n:"BIFF2XFINDEX", */ f:parseuint16 },
		/*::[*/0x0045/*::]*/: { /* n:"BIFF2FONTCLR", */ },
		/*::[*/0x0056/*::]*/: { /* n:"BIFF4FMTCNT", */ }, /* 16-bit cnt, similar to BIFF2 */
		/*::[*/0x007e/*::]*/: { /* n:"RK", */ }, /* Not necessarily same as 0x027e */
		/*::[*/0x007f/*::]*/: { /* n:"ImData", */ f:parse_ImData },
		/*::[*/0x0087/*::]*/: { /* n:"Addin", */ },
		/*::[*/0x0088/*::]*/: { /* n:"Edg", */ },
		/*::[*/0x0089/*::]*/: { /* n:"Pub", */ },
		// 0x8A
		// 0x8B LH: alternate menu key flag (BIFF3/4)
		// 0x8E
		// 0x8F
		/*::[*/0x0091/*::]*/: { /* n:"Sub", */ },
		// 0x93 STYLE
		/*::[*/0x0094/*::]*/: { /* n:"LHRecord", */ },
		/*::[*/0x0095/*::]*/: { /* n:"LHNGraph", */ },
		/*::[*/0x0096/*::]*/: { /* n:"Sound", */ },
		// 0xA2 FNPROTO: function prototypes (BIFF4)
		// 0xA3
		// 0xA8
		/*::[*/0x00a9/*::]*/: { /* n:"CoordList", */ },
		/*::[*/0x00ab/*::]*/: { /* n:"GCW", */ },
		/*::[*/0x00bc/*::]*/: { /* n:"ShrFmla", */ }, /* Not necessarily same as 0x04bc */
		/*::[*/0x00bf/*::]*/: { /* n:"ToolbarHdr", */ },
		/*::[*/0x00c0/*::]*/: { /* n:"ToolbarEnd", */ },
		/*::[*/0x00c2/*::]*/: { /* n:"AddMenu", */ },
		/*::[*/0x00c3/*::]*/: { /* n:"DelMenu", */ },
		/*::[*/0x00d6/*::]*/: { /* n:"RString", */ f:parse_RString },
		/*::[*/0x00df/*::]*/: { /* n:"UDDesc", */ },
		/*::[*/0x00ea/*::]*/: { /* n:"TabIdConf", */ },
		/*::[*/0x0162/*::]*/: { /* n:"XL5Modify", */ },
		/*::[*/0x01a5/*::]*/: { /* n:"FileSharing2", */ },
		/*::[*/0x0206/*::]*/: { /* n:"Formula", */ f:parse_Formula },
		/*::[*/0x0209/*::]*/: { /* n:"BOF", */ f:parse_BOF },
		/*::[*/0x0218/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
		/*::[*/0x0223/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
		/*::[*/0x0231/*::]*/: { /* n:"Font", */ },
		/*::[*/0x0243/*::]*/: { /* n:"BIFF3XF", */ },
		/*::[*/0x0406/*::]*/: { /* n:"Formula", */ f:parse_Formula },
		/*::[*/0x0409/*::]*/: { /* n:"BOF", */ f:parse_BOF },
		/*::[*/0x0443/*::]*/: { /* n:"BIFF4XF", */ },
		/*::[*/0x086d/*::]*/: { /* n:"FeatInfo", */ },
		/*::[*/0x0873/*::]*/: { /* n:"FeatInfo11", */ },
		/*::[*/0x0881/*::]*/: { /* n:"SXAddl12", */ },
		/*::[*/0x08c0/*::]*/: { /* n:"AutoWebPub", */ },
		/*::[*/0x08c1/*::]*/: { /* n:"ListObj", */ },
		/*::[*/0x08c2/*::]*/: { /* n:"ListField", */ },
		/*::[*/0x08c3/*::]*/: { /* n:"ListDV", */ },
		/*::[*/0x08c4/*::]*/: { /* n:"ListCondFmt", */ },
		/*::[*/0x08c5/*::]*/: { /* n:"ListCF", */ },
		/*::[*/0x08c6/*::]*/: { /* n:"FMQry", */ },
		/*::[*/0x08c7/*::]*/: { /* n:"FMSQry", */ },
		/*::[*/0x08c8/*::]*/: { /* n:"PLV", */ },
		/*::[*/0x08c9/*::]*/: { /* n:"LnExt", */ },
		/*::[*/0x08ca/*::]*/: { /* n:"MkrExt", */ },
		/*::[*/0x08cb/*::]*/: { /* n:"CrtCoopt", */ },
		/*::[*/0x08d6/*::]*/: { /* n:"FRTArchId$", */ r:12 },

		/*::[*/0x7262/*::]*/: {}
	};

	function write_biff_rec(ba/*:BufArray*/, type/*:number*/, payload, length/*:?number*/)/*:void*/ {
		var t/*:number*/ = type;
		if(isNaN(t)) return;
		var len = (payload||[]).length || 0;
		var o = ba.next(4);
		o.write_shift(2, t);
		o.write_shift(2, len);
		if(/*:: len != null &&*/len > 0 && is_buf(payload)) ba.push(payload);
	}
	/* note: browser DOM element cannot see mso- style attrs, must parse */
	function html_to_sheet(str/*:string*/, _opts)/*:Workbook*/ {
		var opts = _opts || {};
		var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
		str = str.replace(/<!--.*?-->/g, "");
		var mtch/*:any*/ = str.match(/<table/i);
		if(!mtch) throw new Error("Invalid HTML: could not find <table>");
		var mtch2/*:any*/ = str.match(/<\/table/i);
		var i/*:number*/ = mtch.index, j/*:number*/ = mtch2 && mtch2.index || str.length;
		var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
		var R = -1, C = 0, RS = 0, CS = 0;
		var range/*:Range*/ = {s:{r:10000000, c:10000000},e:{r:0,c:0}};
		var merges/*:Array<Range>*/ = [];
		for(i = 0; i < rows.length; ++i) {
			var row = rows[i].trim();
			var hd = row.slice(0,3).toLowerCase();
			if(hd == "<tr") { ++R; if(opts.sheetRows && opts.sheetRows <= R) { --R; break; } C = 0; continue; }
			if(hd != "<td" && hd != "<th") continue;
			var cells = row.split(/<\/t[dh]>/i);
			for(j = 0; j < cells.length; ++j) {
				var cell = cells[j].trim();
				if(!cell.match(/<t[dh]/i)) continue;
				var m = cell, cc = 0;
				/* TODO: parse styles etc */
				while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc+1);
				for(var midx = 0; midx < merges.length; ++midx) {
					var _merge/*:Range*/ = merges[midx];
					if(_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) { C = _merge.e.c + 1; midx = -1; }
				}
				var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
				CS = tag.colspan ? +tag.colspan : 1;
				if((RS = +tag.rowspan)>1 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
				var _t/*:string*/ = tag.t || tag["data-t"] || "";
				/* TODO: generate stub cells */
				if(!m.length) { C += CS; continue; }
				m = htmldecode(m);
				if(range.s.r > R) range.s.r = R; if(range.e.r < R) range.e.r = R;
				if(range.s.c > C) range.s.c = C; if(range.e.c < C) range.e.c = C;
				if(!m.length) { C += CS; continue; }
				var o/*:Cell*/ = {t:'s', v:m};
				if(opts.raw || !m.trim().length || _t == 's');
				else if(m === 'TRUE') o = {t:'b', v:true};
				else if(m === 'FALSE') o = {t:'b', v:false};
				else if(!isNaN(fuzzynum(m))) o = {t:'n', v:fuzzynum(m)};
				else if(!isNaN(fuzzydate(m).getDate())) {
					o = ({t:'d', v:parseDate(m)}/*:any*/);
					if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
					o.z = opts.dateNF || table_fmt[14];
				}
				if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
				else ws[encode_cell({r:R, c:C})] = o;
				C += CS;
			}
		}
		ws['!ref'] = encode_range(range);
		if(merges.length) ws["!merges"] = merges;
		return ws;
	}
	function make_html_row(ws/*:Worksheet*/, r/*:Range*/, R/*:number*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
		var M/*:Array<Range>*/ = (ws['!merges'] ||[]);
		var oo/*:Array<string>*/ = [];
		for(var C = r.s.c; C <= r.e.c; ++C) {
			var RS = 0, CS = 0;
			for(var j = 0; j < M.length; ++j) {
				if(M[j].s.r > R || M[j].s.c > C) continue;
				if(M[j].e.r < R || M[j].e.c < C) continue;
				if(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }
				RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;
			}
			if(RS < 0) continue;
			var coord = encode_cell({r:R,c:C});
			var cell = o.dense ? (ws[R]||[])[C] : ws[coord];
			/* TODO: html entities */
			var w = (cell && cell.v != null) && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
			var sp = ({}/*:any*/);
			if(RS > 1) sp.rowspan = RS;
			if(CS > 1) sp.colspan = CS;
			if(o.editable) w = '<span contenteditable="true">' + w + '</span>';
			else if(cell) {
				sp["data-t"] = cell && cell.t || 'z';
				if(cell.v != null) sp["data-v"] = cell.v;
				if(cell.z != null) sp["data-z"] = cell.z;
				if(cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target +'">' + w + '</a>';
			}
			sp.id = (o.id || "sjs") + "-" + coord;
			oo.push(writextag('td', w, sp));
		}
		var preamble = "<tr>";
		return preamble + oo.join("") + "</tr>";
	}

	var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
	var HTML_END = '</body></html>';

	function html_to_workbook(str/*:string*/, opts)/*:Workbook*/ {
		var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
		if(!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
		if(mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
		var wb = book_new();
		mtch.forEach(function(s, idx) { book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx+1)); });
		return wb;
	}

	function make_html_preamble(ws/*:Worksheet*/, R/*:Range*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
		var out/*:Array<string>*/ = [];
		return out.join("") + '<table' + (o && o.id ? ' id="' + o.id + '"' : "") + '>';
	}

	function sheet_to_html(ws/*:Worksheet*/, opts/*:?Sheet2HTMLOpts*//*, wb:?Workbook*/)/*:string*/ {
		var o = opts || {};
		var header = o.header != null ? o.header : HTML_BEGIN;
		var footer = o.footer != null ? o.footer : HTML_END;
		var out/*:Array<string>*/ = [header];
		var r = decode_range(ws['!ref']);
		o.dense = Array.isArray(ws);
		out.push(make_html_preamble(ws, r, o));
		for(var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
		out.push("</table>" + footer);
		return out.join("");
	}

	function sheet_add_dom(ws/*:Worksheet*/, table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
		var opts = _opts || {};
		var or_R = 0, or_C = 0;
		if(opts.origin != null) {
			if(typeof opts.origin == 'number') or_R = opts.origin;
			else {
				var _origin/*:CellAddress*/ = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
				or_R = _origin.r; or_C = _origin.c;
			}
		}

		var rows/*:HTMLCollection<HTMLTableRowElement>*/ = table.getElementsByTagName('tr');
		var sheetRows = Math.min(opts.sheetRows||10000000, rows.length);
		var range/*:Range*/ = {s:{r:0,c:0},e:{r:or_R,c:or_C}};
		if(ws["!ref"]) {
			var _range/*:Range*/ = decode_range(ws["!ref"]);
			range.s.r = Math.min(range.s.r, _range.s.r);
			range.s.c = Math.min(range.s.c, _range.s.c);
			range.e.r = Math.max(range.e.r, _range.e.r);
			range.e.c = Math.max(range.e.c, _range.e.c);
			if(or_R == -1) range.e.r = or_R = _range.e.r + 1;
		}
		var merges/*:Array<Range>*/ = [], midx = 0;
		var rowinfo/*:Array<RowInfo>*/ = ws["!rows"] || (ws["!rows"] = []);
		var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
		if(!ws["!cols"]) ws['!cols'] = [];
		for(; _R < rows.length && R < sheetRows; ++_R) {
			var row/*:HTMLTableRowElement*/ = rows[_R];
			if (is_dom_element_hidden(row)) {
				if (opts.display) continue;
				rowinfo[R] = {hidden: true};
			}
			var elts/*:HTMLCollection<HTMLTableCellElement>*/ = (row.children/*:any*/);
			for(_C = C = 0; _C < elts.length; ++_C) {
				var elt/*:HTMLTableCellElement*/ = elts[_C];
				if (opts.display && is_dom_element_hidden(elt)) continue;
				var v/*:?string*/ = elt.hasAttribute('data-v') ? elt.getAttribute('data-v') : elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);
				var z/*:?string*/ = elt.getAttribute('data-z') || elt.getAttribute('z');
				for(midx = 0; midx < merges.length; ++midx) {
					var m/*:Range*/ = merges[midx];
					if(m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) { C = m.e.c+1 - or_C; midx = -1; }
				}
				/* TODO: figure out how to extract nonstandard mso- style */
				CS = +elt.getAttribute("colspan") || 1;
				if( ((RS = (+elt.getAttribute("rowspan") || 1)))>1 || CS>1) merges.push({s:{r:R + or_R,c:C + or_C},e:{r:R + or_R + (RS||1) - 1, c:C + or_C + (CS||1) - 1}});
				var o/*:Cell*/ = {t:'s', v:v};
				var _t/*:string*/ = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
				if(v != null) {
					if(v.length == 0) o.t = _t || 'z';
					else if(opts.raw || v.trim().length == 0 || _t == "s");
					else if(v === 'TRUE') o = {t:'b', v:true};
					else if(v === 'FALSE') o = {t:'b', v:false};
					else if(!isNaN(fuzzynum(v))) o = {t:'n', v:fuzzynum(v)};
					else if(!isNaN(fuzzydate(v).getDate())) {
						o = ({t:'d', v:parseDate(v)}/*:any*/);
						if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
						o.z = opts.dateNF || table_fmt[14];
					}
				}
				if(o.z === undefined && z != null) o.z = z;
				/* The first link is used.  Links are assumed to be fully specified.
				 * TODO: The right way to process relative links is to make a new <a> */
				var l = "", Aelts = elt.getElementsByTagName("A");
				if(Aelts && Aelts.length) for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)	if(Aelts[Aelti].hasAttribute("href")) {
					l = Aelts[Aelti].getAttribute("href"); if(l.charAt(0) != "#") break;
				}
				if(l && l.charAt(0) != "#") o.l = ({ Target: l });
				if(opts.dense) { if(!ws[R + or_R]) ws[R + or_R] = []; ws[R + or_R][C + or_C] = o; }
				else ws[encode_cell({c:C + or_C, r:R + or_R})] = o;
				if(range.e.c < C + or_C) range.e.c = C + or_C;
				C += CS;
			}
			++R;
		}
		if(merges.length) ws['!merges'] = (ws["!merges"] || []).concat(merges);
		range.e.r = Math.max(range.e.r, R - 1 + or_R);
		ws['!ref'] = encode_range(range);
		if(R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length-_R+R-1 + or_R,range)); // We can count the real number of rows to parse but we don't to improve the performance
		return ws;
	}

	function parse_dom_table(table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
		var opts = _opts || {};
		var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
		return sheet_add_dom(ws, table, _opts);
	}

	function table_to_book(table/*:HTMLElement*/, opts/*:?any*/)/*:Workbook*/ {
		return sheet_to_workbook(parse_dom_table(table, opts), opts);
	}

	function is_dom_element_hidden(element/*:HTMLElement*/)/*:boolean*/ {
		var display/*:string*/ = '';
		var get_computed_style/*:?function*/ = get_get_computed_style_function(element);
		if(get_computed_style) display = get_computed_style(element).getPropertyValue('display');
		if(!display) display = element.style && element.style.display;
		return display === 'none';
	}

	/* global getComputedStyle */
	function get_get_computed_style_function(element/*:HTMLElement*/)/*:?function*/ {
		// The proper getComputedStyle implementation is the one defined in the element window
		if(element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle;
		// If it is not available, try to get one from the global namespace
		if(typeof getComputedStyle === 'function') return getComputedStyle;
		return null;
	}
	/* OpenDocument */
	function parse_text_p(text/*:string*//*::, tag*/)/*:Array<any>*/ {
		/* 6.1.2 White Space Characters */
		var fixed = text
			.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ")
			.replace(/<text:s\/>/g," ")
			.replace(/<text:s text:c="(\d+)"\/>/g, function($$,$1) { return Array(parseInt($1,10)+1).join(" "); })
			.replace(/<text:tab[^>]*\/>/g,"\t")
			.replace(/<text:line-break\/>/g,"\n");
		var v = unescapexml(fixed.replace(/<[^>]*>/g,""));

		return [v];
	}

	var number_formats_ods = {
		/* ods name: [short ssf fmt, long ssf fmt] */
		day:           ["d",   "dd"],
		month:         ["m",   "mm"],
		year:          ["y",   "yy"],
		hours:         ["h",   "hh"],
		minutes:       ["m",   "mm"],
		seconds:       ["s",   "ss"],
		"am-pm":       ["A/P", "AM/PM"],
		"day-of-week": ["ddd", "dddd"],
		era:           ["e",   "ee"],
		/* there is no native representation of LO "Q" format */
		quarter:       ["\\Qm", "m\\\"th quarter\""]
	};


	function parse_content_xml(d/*:string*/, _opts)/*:Workbook*/ {
			var opts = _opts || {};
			var str = xlml_normalize(d);
			var state/*:Array<any>*/ = [], tmp;
			var tag/*:: = {}*/;
			var NFtag = {name:""}, NF = "", pidx = 0;
			var sheetag/*:: = {name:"", '名称':""}*/;
			var rowtag/*:: = {'行号':""}*/;
			var Sheets = {}, SheetNames/*:Array<string>*/ = [];
			var ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
			var Rn, q/*:: :any = ({t:"", v:null, z:null, w:"",c:[],}:any)*/;
			var ctag = ({value:""}/*:any*/);
			var textp = "", textpidx = 0;
			var textR = [];
			var R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};
			var row_ol = 0;
			var number_format_map = {};
			var merges/*:Array<Range>*/ = [], mrange = {}, mR = 0, mC = 0;
			var rowinfo/*:Array<RowInfo>*/ = [], rowpeat = 1, colpeat = 1;
			var arrayf/*:Array<[Range, string]>*/ = [];
			var WB = {Names:[]};
			var atag = ({}/*:any*/);
			var _Ref/*:[string, string]*/ = ["", ""];
			var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
			var creator = "", creatoridx = 0;
			var isstub = false, intable = false;
			var i = 0;
			xlmlregex.lastIndex = 0;
			str = str.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
			while((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,""))) {

				case 'table': case '工作表': // 9.1.2 <table:table>
					if(Rn[1]==='/') {
						if(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);
						else ws['!ref'] = "A1:A1";
						if(opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
							ws['!fullref'] = ws['!ref'];
							range.e.r = opts.sheetRows - 1;
							ws['!ref'] = encode_range(range);
						}
						if(merges.length) ws['!merges'] = merges;
						if(rowinfo.length) ws["!rows"] = rowinfo;
						sheetag.name = sheetag['名称'] || sheetag.name;
						if(typeof JSON !== 'undefined') JSON.stringify(sheetag);
						SheetNames.push(sheetag.name);
						Sheets[sheetag.name] = ws;
						intable = false;
					}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
						sheetag = parsexmltag(Rn[0], false);
						R = C = -1;
						range.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;
						ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/); merges = [];
						rowinfo = [];
						intable = true;
					}
					break;

				case 'table-row-group': // 9.1.9 <table:table-row-group>
					if(Rn[1] === "/") --row_ol; else ++row_ol;
					break;
				case 'table-row': case '行': // 9.1.3 <table:table-row>
					if(Rn[1] === '/') { R+=rowpeat; rowpeat = 1; break; }
					rowtag = parsexmltag(Rn[0], false);
					if(rowtag['行号']) R = rowtag['行号'] - 1; else if(R == -1) R = 0;
					rowpeat = +rowtag['number-rows-repeated'] || 1;
					/* TODO: remove magic */
					if(rowpeat < 10) for(i = 0; i < rowpeat; ++i) if(row_ol > 0) rowinfo[R + i] = {level: row_ol};
					C = -1; break;
				case 'covered-table-cell': // 9.1.5 <table:covered-table-cell>
					if(Rn[1] !== '/') ++C;
					if(opts.sheetStubs) {
						if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }
						else ws[encode_cell({r:R,c:C})] = {t:'z'};
					}
					textp = ""; textR = [];
					break; /* stub */
				case 'table-cell': case '数据':
					if(Rn[0].charAt(Rn[0].length-2) === '/') {
						++C;
						ctag = parsexmltag(Rn[0], false);
						colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
						q = ({t:'z', v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
						if(ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
						if((ctag['数据类型'] || ctag['value-type']) == "string") {
							q.t = "s"; q.v = unescapexml(ctag['string-value'] || "");
							if(opts.dense) {
								if(!ws[R]) ws[R] = [];
								ws[R][C] = q;
							} else {
								ws[encode_cell({r:R,c:C})] = q;
							}
						}
						C+= colpeat-1;
					} else if(Rn[1]!=='/') {
						++C;
						textp = ""; textpidx = 0; textR = [];
						colpeat = 1;
						var rptR = rowpeat ? R + rowpeat - 1 : R;
						if(C > range.e.c) range.e.c = C;
						if(C < range.s.c) range.s.c = C;
						if(R < range.s.r) range.s.r = R;
						if(rptR > range.e.r) range.e.r = rptR;
						ctag = parsexmltag(Rn[0], false);
						comments = []; comment = ({}/*:any*/);
						q = ({t:ctag['数据类型'] || ctag['value-type'], v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
						if(opts.cellFormula) {
							if(ctag.formula) ctag.formula = unescapexml(ctag.formula);
							if(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
								mR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;
								mC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;
								mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
								q.F = encode_range(mrange);
								arrayf.push([mrange, q.F]);
							}
							if(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
							else for(i = 0; i < arrayf.length; ++i)
								if(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)
									if(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
										q.F = arrayf[i][1];
						}
						if(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
							mR = parseInt(ctag['number-rows-spanned'],10) || 0;
							mC = parseInt(ctag['number-columns-spanned'],10) || 0;
							mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
							merges.push(mrange);
						}

						/* 19.675.2 table:number-columns-repeated */
						if(ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);

						/* 19.385 office:value-type */
						switch(q.t) {
							case 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;
							case 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);
								if(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }
								q.z = 'm/d/yy'; break;
							case 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400;
								if(opts.cellDates) { q.t = 'd'; q.v = numdate(q.v); }
								q.z = 'HH:MM:SS'; break;
							case 'number': q.t = 'n'; q.v = parseFloat(ctag['数据数值']); break;
							default:
								if(q.t === 'string' || q.t === 'text' || !q.t) {
									q.t = 's';
									if(ctag['string-value'] != null) { textp = unescapexml(ctag['string-value']); textR = []; }
								} else throw new Error('Unsupported value type ' + q.t);
						}
					} else {
						isstub = false;
						if(q.t === 's') {
							q.v = textp || '';
							if(textR.length) q.R = textR;
							isstub = textpidx == 0;
						}
						if(atag.Target) q.l = atag;
						if(comments.length > 0) { q.c = comments; comments = []; }
						if(textp && opts.cellText !== false) q.w = textp;
						if(isstub) { q.t = "z"; delete q.v; }
						if(!isstub || opts.sheetStubs) {
							if(!(opts.sheetRows && opts.sheetRows <= R)) {
								for(var rpt = 0; rpt < rowpeat; ++rpt) {
									colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
									if(opts.dense) {
										if(!ws[R + rpt]) ws[R + rpt] = [];
										ws[R + rpt][C] = rpt == 0 ? q : dup(q);
										while(--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
									} else {
										ws[encode_cell({r:R + rpt,c:C})] = q;
										while(--colpeat > 0) ws[encode_cell({r:R + rpt,c:C + colpeat})] = dup(q);
									}
									if(range.e.c <= C) range.e.c = C;
								}
							}
						}
						colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
						C += colpeat-1; colpeat = 0;
						q = {/*:: t:"", v:null, z:null, w:"",c:[]*/};
						textp = ""; textR = [];
					}
					atag = ({}/*:any*/);
					break; // 9.1.4 <table:table-cell>

				/* pure state */
				case 'document': // TODO: <office:document> is the root for FODS
				case 'document-content': case '电子表格文档': // 3.1.3.2 <office:document-content>
				case 'spreadsheet': case '主体': // 3.7 <office:spreadsheet>
				case 'scripts': // 3.12 <office:scripts>
				case 'styles': // TODO <office:styles>
				case 'font-face-decls': // 3.14 <office:font-face-decls>
				case 'master-styles': // 3.15.4 <office:master-styles> -- relevant for FODS
					if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
					break;

				case 'annotation': // 14.1 <office:annotation>
					if(Rn[1]==='/'){
						if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
						comment.t = textp;
						if(textR.length) /*::(*/comment/*:: :any)*/.R = textR;
						comment.a = creator;
						comments.push(comment);
					}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}
					creator = ""; creatoridx = 0;
					textp = ""; textpidx = 0; textR = [];
					break;

				case 'creator': // 4.3.2.7 <dc:creator>
					if(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }
					else creatoridx = Rn.index + Rn[0].length;
					break;

				/* ignore state */
				case 'meta': case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF
				case 'settings': // TODO: <office:settings>
				case 'config-item-set': // TODO: <office:config-item-set>
				case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>
				case 'config-item-map-entry': // TODO: <office:config-item-map-entry>
				case 'config-item-map-named': // TODO: <office:config-item-map-entry>
				case 'shapes': // 9.2.8 <table:shapes>
				case 'frame': // 10.4.2 <draw:frame>
				case 'text-box': // 10.4.3 <draw:text-box>
				case 'image': // 10.4.4 <draw:image>
				case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>
				case 'list-style': // 16.30 <text:list-style>
				case 'form': // 13.13 <form:form>
				case 'dde-links': // 9.8 <table:dde-links>
				case 'event-listeners': // TODO
				case 'chart': // TODO
					if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);
					textp = ""; textpidx = 0; textR = [];
					break;

				case 'scientific-number': // TODO: <number:scientific-number>
					break;
				case 'currency-symbol': // TODO: <number:currency-symbol>
					break;
				case 'currency-style': // TODO: <number:currency-style>
					break;
				case 'number-style': // 16.27.2 <number:number-style>
				case 'percentage-style': // 16.27.9 <number:percentage-style>
				case 'date-style': // 16.27.10 <number:date-style>
				case 'time-style': // 16.27.18 <number:time-style>
					if(Rn[1]==='/'){
						number_format_map[NFtag.name] = NF;
						if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
					} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
						NF = "";
						NFtag = parsexmltag(Rn[0], false);
						state.push([Rn[3], true]);
					} break;

				case 'script': break; // 3.13 <office:script>
				case 'libraries': break; // TODO: <ooo:libraries>
				case 'automatic-styles': break; // 3.15.3 <office:automatic-styles>

				case 'default-style': // TODO: <style:default-style>
				case 'page-layout': break; // TODO: <style:page-layout>
				case 'style': // 16.2 <style:style>
					break;
				case 'map': break; // 16.3 <style:map>
				case 'font-face': break; // 16.21 <style:font-face>

				case 'paragraph-properties': break; // 17.6 <style:paragraph-properties>
				case 'table-properties': break; // 17.15 <style:table-properties>
				case 'table-column-properties': break; // 17.16 <style:table-column-properties>
				case 'table-row-properties': break; // 17.17 <style:table-row-properties>
				case 'table-cell-properties': break; // 17.18 <style:table-cell-properties>

				case 'number': // 16.27.3 <number:number>
					switch(state[state.length-1][0]) {
						case 'time-style':
						case 'date-style':
							tag = parsexmltag(Rn[0], false);
							NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
					} break;

				case 'fraction': break; // TODO 16.27.6 <number:fraction>

				case 'day': // 16.27.11 <number:day>
				case 'month': // 16.27.12 <number:month>
				case 'year': // 16.27.13 <number:year>
				case 'era': // 16.27.14 <number:era>
				case 'day-of-week': // 16.27.15 <number:day-of-week>
				case 'week-of-year': // 16.27.16 <number:week-of-year>
				case 'quarter': // 16.27.17 <number:quarter>
				case 'hours': // 16.27.19 <number:hours>
				case 'minutes': // 16.27.20 <number:minutes>
				case 'seconds': // 16.27.21 <number:seconds>
				case 'am-pm': // 16.27.22 <number:am-pm>
					switch(state[state.length-1][0]) {
						case 'time-style':
						case 'date-style':
							tag = parsexmltag(Rn[0], false);
							NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
					} break;

				case 'boolean-style': break; // 16.27.23 <number:boolean-style>
				case 'boolean': break; // 16.27.24 <number:boolean>
				case 'text-style': break; // 16.27.25 <number:text-style>
				case 'text': // 16.27.26 <number:text>
					if(Rn[0].slice(-2) === "/>") break;
					else if(Rn[1]==="/") switch(state[state.length-1][0]) {
						case 'number-style':
						case 'date-style':
						case 'time-style':
							NF += str.slice(pidx, Rn.index);
							break;
					}
					else pidx = Rn.index + Rn[0].length;
					break;

				case 'named-range': // 9.4.12 <table:named-range>
					tag = parsexmltag(Rn[0], false);
					_Ref = ods_to_csf_3D(tag['cell-range-address']);
					var nrange = ({Name:tag.name, Ref:_Ref[0] + '!' + _Ref[1]}/*:any*/);
					if(intable) nrange.Sheet = SheetNames.length;
					WB.Names.push(nrange);
					break;

				case 'text-content': break; // 16.27.27 <number:text-content>
				case 'text-properties': break; // 16.27.27 <style:text-properties>
				case 'embedded-text': break; // 16.27.4 <number:embedded-text>

				case 'body': case '电子表格': break; // 3.3 16.9.6 19.726.3

				case 'forms': break; // 12.25.2 13.2
				case 'table-column': break; // 9.1.6 <table:table-column>
				case 'table-header-rows': break; // 9.1.7 <table:table-header-rows>
				case 'table-rows': break; // 9.1.12 <table:table-rows>
				/* TODO: outline levels */
				case 'table-column-group': break; // 9.1.10 <table:table-column-group>
				case 'table-header-columns': break; // 9.1.11 <table:table-header-columns>
				case 'table-columns': break; // 9.1.12 <table:table-columns>

				case 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904

				case 'graphic-properties': break; // 17.21 <style:graphic-properties>
				case 'calculation-settings': break; // 9.4.1 <table:calculation-settings>
				case 'named-expressions': break; // 9.4.11 <table:named-expressions>
				case 'label-range': break; // 9.4.9 <table:label-range>
				case 'label-ranges': break; // 9.4.10 <table:label-ranges>
				case 'named-expression': break; // 9.4.13 <table:named-expression>
				case 'sort': break; // 9.4.19 <table:sort>
				case 'sort-by': break; // 9.4.20 <table:sort-by>
				case 'sort-groups': break; // 9.4.22 <table:sort-groups>

				case 'tab': break; // 6.1.4 <text:tab>
				case 'line-break': break; // 6.1.5 <text:line-break>
				case 'span': break; // 6.1.7 <text:span>
				case 'p': case '文本串': // 5.1.3 <text:p>
					if(['master-styles'].indexOf(state[state.length-1][0]) > -1) break;
					if(Rn[1]==='/' && (!ctag || !ctag['string-value'])) {
						var ptp = parse_text_p(str.slice(textpidx,Rn.index));
						textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
					} else { parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }
					break; // <text:p>
				case 's': break; // <text:s>

				case 'database-range': // 9.4.15 <table:database-range>
					if(Rn[1]==='/') break;
					try {
						_Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
						Sheets[_Ref[0]]['!autofilter'] = { ref:_Ref[1] };
					} catch(e) {/* empty */}
					break;

				case 'date': break; // <*:date>

				case 'object': break; // 10.4.6.2 <draw:object>
				case 'title': case '标题': break; // <*:title> OR <uof:标题>
				case 'desc': break; // <*:desc>
				case 'binary-data': break; // 10.4.5 TODO: b64 blob

				/* 9.2 Advanced Tables */
				case 'table-source': break; // 9.2.6
				case 'scenario': break; // 9.2.6

				case 'iteration': break; // 9.4.3 <table:iteration>
				case 'content-validations': break; // 9.4.4 <table:
				case 'content-validation': break; // 9.4.5 <table:
				case 'help-message': break; // 9.4.6 <table:
				case 'error-message': break; // 9.4.7 <table:
				case 'database-ranges': break; // 9.4.14 <table:database-ranges>
				case 'filter': break; // 9.5.2 <table:filter>
				case 'filter-and': break; // 9.5.3 <table:filter-and>
				case 'filter-or': break; // 9.5.4 <table:filter-or>
				case 'filter-condition': break; // 9.5.5 <table:filter-condition>

				case 'list-level-style-bullet': break; // 16.31 <text:
				case 'list-level-style-number': break; // 16.32 <text:
				case 'list-level-properties': break; // 17.19 <style:

				/* 7.3 Document Fields */
				case 'sender-firstname': // 7.3.6.2
				case 'sender-lastname': // 7.3.6.3
				case 'sender-initials': // 7.3.6.4
				case 'sender-title': // 7.3.6.5
				case 'sender-position': // 7.3.6.6
				case 'sender-email': // 7.3.6.7
				case 'sender-phone-private': // 7.3.6.8
				case 'sender-fax': // 7.3.6.9
				case 'sender-company': // 7.3.6.10
				case 'sender-phone-work': // 7.3.6.11
				case 'sender-street': // 7.3.6.12
				case 'sender-city': // 7.3.6.13
				case 'sender-postal-code': // 7.3.6.14
				case 'sender-country': // 7.3.6.15
				case 'sender-state-or-province': // 7.3.6.16
				case 'author-name': // 7.3.7.1
				case 'author-initials': // 7.3.7.2
				case 'chapter': // 7.3.8
				case 'file-name': // 7.3.9
				case 'template-name': // 7.3.9
				case 'sheet-name': // 7.3.9
					break;

				case 'event-listener':
					break;
				/* TODO: FODS Properties */
				case 'initial-creator':
				case 'creation-date':
				case 'print-date':
				case 'generator':
				case 'document-statistic':
				case 'user-defined':
				case 'editing-duration':
				case 'editing-cycles':
					break;

				/* TODO: FODS Config */
				case 'config-item':
					break;

				/* TODO: style tokens */
				case 'page-number': break; // TODO <text:page-number>
				case 'page-count': break; // TODO <text:page-count>
				case 'time': break; // TODO <text:time>

				/* 9.3 Advanced Table Cells */
				case 'cell-range-source': break; // 9.3.1 <table:
				case 'detective': break; // 9.3.2 <table:
				case 'operation': break; // 9.3.3 <table:
				case 'highlighted-range': break; // 9.3.4 <table:

				/* 9.6 Data Pilot Tables <table: */
				case 'data-pilot-table': // 9.6.3
				case 'source-cell-range': // 9.6.5
				case 'source-service': // 9.6.6
				case 'data-pilot-field': // 9.6.7
				case 'data-pilot-level': // 9.6.8
				case 'data-pilot-subtotals': // 9.6.9
				case 'data-pilot-subtotal': // 9.6.10
				case 'data-pilot-members': // 9.6.11
				case 'data-pilot-member': // 9.6.12
				case 'data-pilot-display-info': // 9.6.13
				case 'data-pilot-sort-info': // 9.6.14
				case 'data-pilot-layout-info': // 9.6.15
				case 'data-pilot-field-reference': // 9.6.16
				case 'data-pilot-groups': // 9.6.17
				case 'data-pilot-group': // 9.6.18
				case 'data-pilot-group-member': // 9.6.19
					break;

				/* 10.3 Drawing Shapes */
				case 'rect': // 10.3.2
					break;

				/* 14.6 DDE Connections */
				case 'dde-connection-decls': // 14.6.2 <text:
				case 'dde-connection-decl': // 14.6.3 <text:
				case 'dde-link': // 14.6.4 <table:
				case 'dde-source': // 14.6.5 <office:
					break;

				case 'properties': break; // 13.7 <form:properties>
				case 'property': break; // 13.8 <form:property>

				case 'a': // 6.1.8 hyperlink
					if(Rn[1]!== '/') {
						atag = parsexmltag(Rn[0], false);
						if(!atag.href) break;
						atag.Target = unescapexml(atag.href); delete atag.href;
						if(atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
							_Ref = ods_to_csf_3D(atag.Target.slice(1));
							atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
						} else if(atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
					}
					break;

				/* non-standard */
				case 'table-protection': break;
				case 'data-pilot-grand-total': break; // <table:
				case 'office-document-common-attrs': break; // bare
				default: switch(Rn[2]) {
					case 'dc:':       // TODO: properties
					case 'calcext:':  // ignore undocumented extensions
					case 'loext:':    // ignore undocumented extensions
					case 'ooo:':      // ignore undocumented extensions
					case 'chartooo:': // ignore undocumented extensions
					case 'draw:':     // TODO: drawing
					case 'style:':    // TODO: styles
					case 'chart:':    // TODO: charts
					case 'form:':     // TODO: forms
					case 'uof:':      // TODO: uof
					case '表:':       // TODO: uof
					case '字:':       // TODO: uof
						break;
					default: if(opts.WTF) throw new Error(Rn);
				}
			}
			var out/*:Workbook*/ = ({
				Sheets: Sheets,
				SheetNames: SheetNames,
				Workbook: WB
			}/*:any*/);
			if(opts.bookSheets) delete /*::(*/out/*:: :any)*/.Sheets;
			return out;
	}

	function parse_ods(zip/*:ZIPFile*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		opts = opts || ({}/*:any*/);
		if(safegetzipfile(zip, 'META-INF/manifest.xml')) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
		var content = getzipstr(zip, 'content.xml');
		if(!content) throw new Error("Missing content.xml in ODS / UOF file");
		var wb = parse_content_xml(utf8read(content), opts);
		if(safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
		return wb;
	}
	function parse_fods(data/*:string*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		return parse_content_xml(data, opts);
	}

	/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
	function u8_to_dataview(array) {
	  return new DataView(array.buffer, array.byteOffset, array.byteLength);
	}
	function u8str(u8) {
	  return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
	}
	function u8concat(u8a) {
	  var len = u8a.reduce(function(acc, x) {
	    return acc + x.length;
	  }, 0);
	  var out = new Uint8Array(len);
	  var off = 0;
	  u8a.forEach(function(u8) {
	    out.set(u8, off);
	    off += u8.length;
	  });
	  return out;
	}
	function popcnt(x) {
	  x -= x >> 1 & 1431655765;
	  x = (x & 858993459) + (x >> 2 & 858993459);
	  return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
	}
	function readDecimal128LE(buf, offset) {
	  var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
	  var mantissa = buf[offset + 14] & 1;
	  for (var j = offset + 13; j >= offset; --j)
	    mantissa = mantissa * 256 + buf[j];
	  return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
	}
	function parse_varint49(buf, ptr) {
	  var l = ptr ? ptr[0] : 0;
	  var usz = buf[l] & 127;
	  varint:
	    if (buf[l++] >= 128) {
	      usz |= (buf[l] & 127) << 7;
	      if (buf[l++] < 128)
	        break varint;
	      usz |= (buf[l] & 127) << 14;
	      if (buf[l++] < 128)
	        break varint;
	      usz |= (buf[l] & 127) << 21;
	      if (buf[l++] < 128)
	        break varint;
	      usz += (buf[l] & 127) * Math.pow(2, 28);
	      ++l;
	      if (buf[l++] < 128)
	        break varint;
	      usz += (buf[l] & 127) * Math.pow(2, 35);
	      ++l;
	      if (buf[l++] < 128)
	        break varint;
	      usz += (buf[l] & 127) * Math.pow(2, 42);
	      ++l;
	      if (buf[l++] < 128)
	        break varint;
	    }
	  if (ptr)
	    ptr[0] = l;
	  return usz;
	}
	function varint_to_i32(buf) {
	  var l = 0, i32 = buf[l] & 127;
	  varint:
	    if (buf[l++] >= 128) {
	      i32 |= (buf[l] & 127) << 7;
	      if (buf[l++] < 128)
	        break varint;
	      i32 |= (buf[l] & 127) << 14;
	      if (buf[l++] < 128)
	        break varint;
	      i32 |= (buf[l] & 127) << 21;
	      if (buf[l++] < 128)
	        break varint;
	      i32 |= (buf[l] & 127) << 28;
	    }
	  return i32;
	}
	function parse_shallow(buf) {
	  var out = [], ptr = [0];
	  while (ptr[0] < buf.length) {
	    var off = ptr[0];
	    var num = parse_varint49(buf, ptr);
	    var type = num & 7;
	    num = Math.floor(num / 8);
	    var len = 0;
	    var res;
	    if (num == 0)
	      break;
	    switch (type) {
	      case 0:
	        {
	          var l = ptr[0];
	          while (buf[ptr[0]++] >= 128)
	            ;
	          res = buf.slice(l, ptr[0]);
	        }
	        break;
	      case 5:
	        len = 4;
	        res = buf.slice(ptr[0], ptr[0] + len);
	        ptr[0] += len;
	        break;
	      case 1:
	        len = 8;
	        res = buf.slice(ptr[0], ptr[0] + len);
	        ptr[0] += len;
	        break;
	      case 2:
	        len = parse_varint49(buf, ptr);
	        res = buf.slice(ptr[0], ptr[0] + len);
	        ptr[0] += len;
	        break;
	      case 3:
	      case 4:
	      default:
	        throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
	    }
	    var v = { data: res, type: type };
	    if (out[num] == null)
	      out[num] = [v];
	    else
	      out[num].push(v);
	  }
	  return out;
	}
	function mappa(data, cb) {
	  return (data == null ? undefined : data.map(function(d) {
	    return cb(d.data);
	  })) || [];
	}
	function parse_iwa_file(buf) {
	  var _a;
	  var out = [], ptr = [0];
	  while (ptr[0] < buf.length) {
	    var len = parse_varint49(buf, ptr);
	    var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
	    ptr[0] += len;
	    var res = {
	      id: varint_to_i32(ai[1][0].data),
	      messages: []
	    };
	    ai[2].forEach(function(b) {
	      var mi = parse_shallow(b.data);
	      var fl = varint_to_i32(mi[3][0].data);
	      res.messages.push({
	        meta: mi,
	        data: buf.slice(ptr[0], ptr[0] + fl)
	      });
	      ptr[0] += fl;
	    });
	    if ((_a = ai[3]) == null ? undefined : _a[0])
	      res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
	    out.push(res);
	  }
	  return out;
	}
	function parse_snappy_chunk(type, buf) {
	  if (type != 0)
	    throw new Error("Unexpected Snappy chunk type ".concat(type));
	  var ptr = [0];
	  var usz = parse_varint49(buf, ptr);
	  var chunks = [];
	  while (ptr[0] < buf.length) {
	    var tag = buf[ptr[0]] & 3;
	    if (tag == 0) {
	      var len = buf[ptr[0]++] >> 2;
	      if (len < 60)
	        ++len;
	      else {
	        var c = len - 59;
	        len = buf[ptr[0]];
	        if (c > 1)
	          len |= buf[ptr[0] + 1] << 8;
	        if (c > 2)
	          len |= buf[ptr[0] + 2] << 16;
	        if (c > 3)
	          len |= buf[ptr[0] + 3] << 24;
	        len >>>= 0;
	        len++;
	        ptr[0] += c;
	      }
	      chunks.push(buf.slice(ptr[0], ptr[0] + len));
	      ptr[0] += len;
	      continue;
	    } else {
	      var offset = 0, length = 0;
	      if (tag == 1) {
	        length = (buf[ptr[0]] >> 2 & 7) + 4;
	        offset = (buf[ptr[0]++] & 224) << 3;
	        offset |= buf[ptr[0]++];
	      } else {
	        length = (buf[ptr[0]++] >> 2) + 1;
	        if (tag == 2) {
	          offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
	          ptr[0] += 2;
	        } else {
	          offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
	          ptr[0] += 4;
	        }
	      }
	      chunks = [u8concat(chunks)];
	      if (offset == 0)
	        throw new Error("Invalid offset 0");
	      if (offset > chunks[0].length)
	        throw new Error("Invalid offset beyond length");
	      if (length >= offset) {
	        chunks.push(chunks[0].slice(-offset));
	        length -= offset;
	        while (length >= chunks[chunks.length - 1].length) {
	          chunks.push(chunks[chunks.length - 1]);
	          length -= chunks[chunks.length - 1].length;
	        }
	      }
	      chunks.push(chunks[0].slice(-offset, -offset + length));
	    }
	  }
	  var o = u8concat(chunks);
	  if (o.length != usz)
	    throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
	  return o;
	}
	function decompress_iwa_file(buf) {
	  var out = [];
	  var l = 0;
	  while (l < buf.length) {
	    var t = buf[l++];
	    var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
	    l += 3;
	    out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
	    l += len;
	  }
	  if (l !== buf.length)
	    throw new Error("data is not a valid framed stream!");
	  return u8concat(out);
	}
	function parse_old_storage(buf, sst, rsst, v) {
	  var dv = u8_to_dataview(buf);
	  var flags = dv.getUint32(4, true);
	  var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
	  var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
	  if (flags & 512) {
	    ridx = dv.getUint32(data_offset, true);
	    data_offset += 4;
	  }
	  data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
	  if (flags & 16) {
	    sidx = dv.getUint32(data_offset, true);
	    data_offset += 4;
	  }
	  if (flags & 32) {
	    ieee = dv.getFloat64(data_offset, true);
	    data_offset += 8;
	  }
	  if (flags & 64) {
	    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
	    data_offset += 8;
	  }
	  var ret;
	  switch (buf[2]) {
	    case 0:
	      break;
	    case 2:
	      ret = { t: "n", v: ieee };
	      break;
	    case 3:
	      ret = { t: "s", v: sst[sidx] };
	      break;
	    case 5:
	      ret = { t: "d", v: dt };
	      break;
	    case 6:
	      ret = { t: "b", v: ieee > 0 };
	      break;
	    case 7:
	      ret = { t: "n", v: ieee / 86400 };
	      break;
	    case 8:
	      ret = { t: "e", v: 0 };
	      break;
	    case 9:
	      {
	        if (ridx > -1)
	          ret = { t: "s", v: rsst[ridx] };
	        else if (sidx > -1)
	          ret = { t: "s", v: sst[sidx] };
	        else if (!isNaN(ieee))
	          ret = { t: "n", v: ieee };
	        else
	          throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
	      }
	      break;
	    default:
	      throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
	  }
	  return ret;
	}
	function parse_new_storage(buf, sst, rsst) {
	  var dv = u8_to_dataview(buf);
	  var flags = dv.getUint32(8, true);
	  var data_offset = 12;
	  var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
	  if (flags & 1) {
	    d128 = readDecimal128LE(buf, data_offset);
	    data_offset += 16;
	  }
	  if (flags & 2) {
	    ieee = dv.getFloat64(data_offset, true);
	    data_offset += 8;
	  }
	  if (flags & 4) {
	    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
	    data_offset += 8;
	  }
	  if (flags & 8) {
	    sidx = dv.getUint32(data_offset, true);
	    data_offset += 4;
	  }
	  if (flags & 16) {
	    ridx = dv.getUint32(data_offset, true);
	    data_offset += 4;
	  }
	  var ret;
	  switch (buf[1]) {
	    case 0:
	      break;
	    case 2:
	      ret = { t: "n", v: d128 };
	      break;
	    case 3:
	      ret = { t: "s", v: sst[sidx] };
	      break;
	    case 5:
	      ret = { t: "d", v: dt };
	      break;
	    case 6:
	      ret = { t: "b", v: ieee > 0 };
	      break;
	    case 7:
	      ret = { t: "n", v: ieee / 86400 };
	      break;
	    case 8:
	      ret = { t: "e", v: 0 };
	      break;
	    case 9:
	      {
	        if (ridx > -1)
	          ret = { t: "s", v: rsst[ridx] };
	        else
	          throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
	      }
	      break;
	    case 10:
	      ret = { t: "n", v: d128 };
	      break;
	    default:
	      throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
	  }
	  return ret;
	}
	function parse_cell_storage(buf, sst, rsst) {
	  switch (buf[0]) {
	    case 0:
	    case 1:
	    case 2:
	    case 3:
	      return parse_old_storage(buf, sst, rsst, buf[0]);
	    case 5:
	      return parse_new_storage(buf, sst, rsst);
	    default:
	      throw new Error("Unsupported payload version ".concat(buf[0]));
	  }
	}
	function parse_TSP_Reference(buf) {
	  var pb = parse_shallow(buf);
	  return parse_varint49(pb[1][0].data);
	}
	function parse_TST_TableDataList(M, root) {
	  var pb = parse_shallow(root.data);
	  var type = varint_to_i32(pb[1][0].data);
	  var entries = pb[3];
	  var data = [];
	  (entries || []).forEach(function(entry) {
	    var le = parse_shallow(entry.data);
	    var key = varint_to_i32(le[1][0].data) >>> 0;
	    switch (type) {
	      case 1:
	        data[key] = u8str(le[3][0].data);
	        break;
	      case 8:
	        {
	          var rt = M[parse_TSP_Reference(le[9][0].data)][0];
	          var rtp = parse_shallow(rt.data);
	          var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
	          var mtype = varint_to_i32(rtpref.meta[1][0].data);
	          if (mtype != 2001)
	            throw new Error("2000 unexpected reference to ".concat(mtype));
	          var tswpsa = parse_shallow(rtpref.data);
	          data[key] = tswpsa[3].map(function(x) {
	            return u8str(x.data);
	          }).join("");
	        }
	        break;
	    }
	  });
	  return data;
	}
	function parse_TST_TileRowInfo(u8, type) {
	  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
	  var pb = parse_shallow(u8);
	  var R = varint_to_i32(pb[1][0].data) >>> 0;
	  var cnt = varint_to_i32(pb[2][0].data) >>> 0;
	  var wide_offsets = ((_b = (_a = pb[8]) == null ? undefined : _a[0]) == null ? undefined : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
	  var used_storage_u8, used_storage;
	  if (((_d = (_c = pb[7]) == null ? undefined : _c[0]) == null ? undefined : _d.data) && type != 0) {
	    used_storage_u8 = (_f = (_e = pb[7]) == null ? undefined : _e[0]) == null ? undefined : _f.data;
	    used_storage = (_h = (_g = pb[6]) == null ? undefined : _g[0]) == null ? undefined : _h.data;
	  } else if (((_j = (_i = pb[4]) == null ? undefined : _i[0]) == null ? undefined : _j.data) && type != 1) {
	    used_storage_u8 = (_l = (_k = pb[4]) == null ? undefined : _k[0]) == null ? undefined : _l.data;
	    used_storage = (_n = (_m = pb[3]) == null ? undefined : _m[0]) == null ? undefined : _n.data;
	  } else
	    throw "NUMBERS Tile missing ".concat(type, " cell storage");
	  var width = wide_offsets ? 4 : 1;
	  var used_storage_offsets = u8_to_dataview(used_storage_u8);
	  var offsets = [];
	  for (var C = 0; C < used_storage_u8.length / 2; ++C) {
	    var off = used_storage_offsets.getUint16(C * 2, true);
	    if (off < 65535)
	      offsets.push([C, off]);
	  }
	  if (offsets.length != cnt)
	    throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
	  var cells = [];
	  for (C = 0; C < offsets.length - 1; ++C)
	    cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
	  if (offsets.length >= 1)
	    cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
	  return { R: R, cells: cells };
	}
	function parse_TST_Tile(M, root) {
	  var _a;
	  var pb = parse_shallow(root.data);
	  var storage = ((_a = pb == null ? undefined : pb[7]) == null ? undefined : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
	  var ri = mappa(pb[5], function(u8) {
	    return parse_TST_TileRowInfo(u8, storage);
	  });
	  return {
	    nrows: varint_to_i32(pb[4][0].data) >>> 0,
	    data: ri.reduce(function(acc, x) {
	      if (!acc[x.R])
	        acc[x.R] = [];
	      x.cells.forEach(function(cell, C) {
	        if (acc[x.R][C])
	          throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
	        acc[x.R][C] = cell;
	      });
	      return acc;
	    }, [])
	  };
	}
	function parse_TST_TableModelArchive(M, root, ws) {
	  var _a;
	  var pb = parse_shallow(root.data);
	  var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
	  range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
	  if (range.e.r < 0)
	    throw new Error("Invalid row varint ".concat(pb[6][0].data));
	  range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
	  if (range.e.c < 0)
	    throw new Error("Invalid col varint ".concat(pb[7][0].data));
	  ws["!ref"] = encode_range(range);
	  var store = parse_shallow(pb[4][0].data);
	  var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
	  var rsst = ((_a = store[17]) == null ? undefined : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
	  var tile = parse_shallow(store[3][0].data);
	  var _R = 0;
	  tile[1].forEach(function(t) {
	    var tl = parse_shallow(t.data);
	    var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
	    var mtype = varint_to_i32(ref.meta[1][0].data);
	    if (mtype != 6002)
	      throw new Error("6001 unexpected reference to ".concat(mtype));
	    var _tile = parse_TST_Tile(M, ref);
	    _tile.data.forEach(function(row, R) {
	      row.forEach(function(buf, C) {
	        var addr = encode_cell({ r: _R + R, c: C });
	        var res = parse_cell_storage(buf, sst, rsst);
	        if (res)
	          ws[addr] = res;
	      });
	    });
	    _R += _tile.nrows;
	  });
	}
	function parse_TST_TableInfoArchive(M, root) {
	  var pb = parse_shallow(root.data);
	  var out = { "!ref": "A1" };
	  var tableref = M[parse_TSP_Reference(pb[2][0].data)];
	  var mtype = varint_to_i32(tableref[0].meta[1][0].data);
	  if (mtype != 6001)
	    throw new Error("6000 unexpected reference to ".concat(mtype));
	  parse_TST_TableModelArchive(M, tableref[0], out);
	  return out;
	}
	function parse_TN_SheetArchive(M, root) {
	  var _a;
	  var pb = parse_shallow(root.data);
	  var out = {
	    name: ((_a = pb[1]) == null ? undefined : _a[0]) ? u8str(pb[1][0].data) : "",
	    sheets: []
	  };
	  var shapeoffs = mappa(pb[2], parse_TSP_Reference);
	  shapeoffs.forEach(function(off) {
	    M[off].forEach(function(m) {
	      var mtype = varint_to_i32(m.meta[1][0].data);
	      if (mtype == 6e3)
	        out.sheets.push(parse_TST_TableInfoArchive(M, m));
	    });
	  });
	  return out;
	}
	function parse_TN_DocumentArchive(M, root) {
	  var out = book_new();
	  var pb = parse_shallow(root.data);
	  var sheetoffs = mappa(pb[1], parse_TSP_Reference);
	  sheetoffs.forEach(function(off) {
	    M[off].forEach(function(m) {
	      var mtype = varint_to_i32(m.meta[1][0].data);
	      if (mtype == 2) {
	        var root2 = parse_TN_SheetArchive(M, m);
	        root2.sheets.forEach(function(sheet, idx) {
	          book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
	        });
	      }
	    });
	  });
	  if (out.SheetNames.length == 0)
	    throw new Error("Empty NUMBERS file");
	  return out;
	}
	function parse_numbers_iwa(cfb) {
	  var _a, _b, _c, _d;
	  var M = {}, indices = [];
	  cfb.FullPaths.forEach(function(p) {
	    if (p.match(/\.iwpv2/))
	      throw new Error("Unsupported password protection");
	  });
	  cfb.FileIndex.forEach(function(s) {
	    if (!s.name.match(/\.iwa$/))
	      return;
	    var o;
	    try {
	      o = decompress_iwa_file(s.content);
	    } catch (e) {
	      return console.log("?? " + s.content.length + " " + (e.message || e));
	    }
	    var packets;
	    try {
	      packets = parse_iwa_file(o);
	    } catch (e) {
	      return console.log("## " + (e.message || e));
	    }
	    packets.forEach(function(packet) {
	      M[packet.id] = packet.messages;
	      indices.push(packet.id);
	    });
	  });
	  if (!indices.length)
	    throw new Error("File has no messages");
	  var docroot = ((_d = (_c = (_b = (_a = M == null ? undefined : M[1]) == null ? undefined : _a[0]) == null ? undefined : _b.meta) == null ? undefined : _c[1]) == null ? undefined : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
	  if (!docroot)
	    indices.forEach(function(idx) {
	      M[idx].forEach(function(iwam) {
	        var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
	        if (mtype == 1) {
	          if (!docroot)
	            docroot = iwam;
	          else
	            throw new Error("Document has multiple roots");
	        }
	      });
	    });
	  if (!docroot)
	    throw new Error("Cannot find Document root");
	  return parse_TN_DocumentArchive(M, docroot);
	}
	function fix_opts_func(defaults/*:Array<Array<any> >*/)/*:{(o:any):void}*/ {
		return function fix_opts(opts) {
			for(var i = 0; i != defaults.length; ++i) {
				var d = defaults[i];
				if(opts[d[0]] === undefined) opts[d[0]] = d[1];
				if(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
			}
		};
	}

	function fix_read_opts(opts) {
	fix_opts_func([
		['cellNF', false], /* emit cell number format string as .z */
		['cellHTML', true], /* emit html string as .h */
		['cellFormula', true], /* emit formulae as .f */
		['cellStyles', false], /* emits style/theme as .s */
		['cellText', true], /* emit formatted text as .w */
		['cellDates', false], /* emit date cells with type `d` */

		['sheetStubs', false], /* emit empty cells */
		['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */

		['bookDeps', false], /* parse calculation chains */
		['bookSheets', false], /* only try to get sheet names (no Sheets) */
		['bookProps', false], /* only try to get properties (no Sheets) */
		['bookFiles', false], /* include raw file structure (keys, files, cfb) */
		['bookVBA', false], /* include vba raw data (vbaraw) */

		['password',''], /* password */
		['WTF', false] /* WTF mode (throws errors) */
	])(opts);
	}
	function get_sheet_type(n/*:string*/)/*:string*/ {
		if(RELS.WS.indexOf(n) > -1) return "sheet";
		if(n == RELS.CS) return "chart";
		if(n == RELS.DS) return "dialog";
		if(n == RELS.MS) return "macro";
		return (n && n.length) ? n : "sheet";
	}
	function safe_parse_wbrels(wbrels, sheets) {
		if(!wbrels) return 0;
		try {
			wbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });
		} catch(e) { return null; }
		return !wbrels || wbrels.length === 0 ? null : wbrels;
	}

	function safe_parse_sheet(zip, path/*:string*/, relsPath/*:string*/, sheet, idx/*:number*/, sheetRels, sheets, stype/*:string*/, opts, wb, themes, styles) {
		try {
			sheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);
			var data = getzipdata(zip, path);
			var _ws;
			switch(stype) {
				case 'sheet':  _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
				case 'chart':  _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
					if(!_ws || !_ws['!drawel']) break;
					var dfile = resolve_path(_ws['!drawel'].Target, path);
					var drelsp = get_rels_path(dfile);
					var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
					var chartp = resolve_path(draw, dfile);
					var crelsp = get_rels_path(chartp);
					_ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
					break;
				case 'macro':  _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
				case 'dialog': _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
				default: throw new Error("Unrecognized sheet type " + stype);
			}
			sheets[sheet] = _ws;

			/* scan rels for comments and threaded comments */
			var tcomments = [];
			if(sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
				var dfile = "";
				if(sheetRels[sheet][n].Type == RELS.CMNT) {
					dfile = resolve_path(sheetRels[sheet][n].Target, path);
					var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
					if(!comments || !comments.length) return;
					sheet_insert_comments(_ws, comments, false);
				}
				if(sheetRels[sheet][n].Type == RELS.TCMNT) {
					dfile = resolve_path(sheetRels[sheet][n].Target, path);
					tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
				}
			});
			if(tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
		} catch(e) { if(opts.WTF) throw e; }
	}

	function strip_front_slash(x/*:string*/)/*:string*/ { return x.charAt(0) == '/' ? x.slice(1) : x; }

	function parse_zip(zip/*:ZIP*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		make_ssf();
		opts = opts || {};
		fix_read_opts(opts);

		/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
		if(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
		/* UOC */
		if(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
		/* Numbers */
		if(safegetzipfile(zip, 'Index/Document.iwa')) {
			if(typeof Uint8Array == "undefined") throw new Error('NUMBERS file parsing requires Uint8Array support');
			if(typeof parse_numbers_iwa != "undefined") {
				if(zip.FileIndex) return parse_numbers_iwa(zip);
				var _zip = CFB.utils.cfb_new();
				zipentries(zip).forEach(function(e) { zip_add_file(_zip, e, getzipbin(zip, e)); });
				return parse_numbers_iwa(_zip);
			}
			throw new Error('Unsupported NUMBERS file');
		}
		if(!safegetzipfile(zip, '[Content_Types].xml')) {
			if(safegetzipfile(zip, 'index.xml.gz')) throw new Error('Unsupported NUMBERS 08 file');
			if(safegetzipfile(zip, 'index.xml')) throw new Error('Unsupported NUMBERS 09 file');
			throw new Error('Unsupported ZIP file');
		}

		var entries = zipentries(zip);
		var dir = parse_ct((getzipstr(zip, '[Content_Types].xml')/*:?any*/));
		var xlsb = false;
		var sheets, binname;
		if(dir.workbooks.length === 0) {
			binname = "xl/workbook.xml";
			if(getzipdata(zip,binname, true)) dir.workbooks.push(binname);
		}
		if(dir.workbooks.length === 0) {
			binname = "xl/workbook.bin";
			if(!getzipdata(zip,binname,true)) throw new Error("Could not find workbook");
			dir.workbooks.push(binname);
			xlsb = true;
		}
		if(dir.workbooks[0].slice(-3) == "bin") xlsb = true;

		var themes = ({}/*:any*/);
		var styles = ({}/*:any*/);
		if(!opts.bookSheets && !opts.bookProps) {
			strs = [];
			if(dir.sst) try { strs=parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts); } catch(e) { if(opts.WTF) throw e; }

			if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//,''), true)||"",dir.themes[0], opts);

			if(dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
		}

		/*var externbooks = */dir.links.map(function(link) {
			try {
				var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
				return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
			} catch(e) {}
		});

		var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);

		var props = {}, propdata = "";

		if(dir.coreprops.length) {
			propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
			if(propdata) props = parse_core_props(propdata);
			if(dir.extprops.length !== 0) {
				propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
				if(propdata) parse_ext_props(propdata, props, opts);
			}
		}

		var custprops = {};
		if(!opts.bookSheets || opts.bookProps) {
			if (dir.custprops.length !== 0) {
				propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
				if(propdata) custprops = parse_cust_props(propdata, opts);
			}
		}

		var out = ({}/*:any*/);
		if(opts.bookSheets || opts.bookProps) {
			if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });
			else if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;
			if(opts.bookProps) { out.Props = props; out.Custprops = custprops; }
			if(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
			if(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
		}
		sheets = {};

		var deps = {};
		if(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)),dir.calcchain);

		var i=0;
		var sheetRels = ({}/*:any*/);
		var path, relsPath;

		{
			var wbsheets = wb.Sheets;
			props.Worksheets = wbsheets.length;
			props.SheetNames = [];
			for(var j = 0; j != wbsheets.length; ++j) {
				props.SheetNames[j] = wbsheets[j].name;
			}
		}

		var wbext = xlsb ? "bin" : "xml";
		var wbrelsi = dir.workbooks[0].lastIndexOf("/");
		var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi+1) + "_rels/" + dir.workbooks[0].slice(wbrelsi+1) + ".rels").replace(/^\//,"");
		if(!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
		var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));

		if((dir.metadata || []).length >= 1) {
			/* TODO: MDX and other types of metadata */
			opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])),dir.metadata[0],opts);
		}

		if((dir.people || []).length >= 1) {
			opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])),opts);
		}

		if(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);

		/* Numbers iOS hack */
		var nmode = (getzipdata(zip,"xl/worksheets/sheet.xml",true))?1:0;
		wsloop: for(i = 0; i != props.Worksheets; ++i) {
			var stype = "sheet";
			if(wbrels && wbrels[i]) {
				path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
				if(!safegetzipfile(zip, path)) path = wbrels[i][1];
				if(!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/,"") + wbrels[i][1];
				stype = wbrels[i][2];
			} else {
				path = 'xl/worksheets/sheet'+(i+1-nmode)+"." + wbext;
				path = path.replace(/sheet0\./,"sheet.");
			}
			relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
			if(opts && opts.sheets != null) switch(typeof opts.sheets) {
				case "number": if(i != opts.sheets) continue wsloop; break;
				case "string": if(props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop; break;
				default: if(Array.isArray && Array.isArray(opts.sheets)) {
					var snjseen = false;
					for(var snj = 0; snj != opts.sheets.length; ++snj) {
						if(typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen=1;
						if(typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
					}
					if(!snjseen) continue wsloop;
				}
			}
			safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
		}

		out = ({
			Directory: dir,
			Workbook: wb,
			Props: props,
			Custprops: custprops,
			Deps: deps,
			Sheets: sheets,
			SheetNames: props.SheetNames,
			Strings: strs,
			Styles: styles,
			Themes: themes,
			SSF: dup(table_fmt)
		}/*:any*/);
		if(opts && opts.bookFiles) {
			if(zip.files) {
				out.keys = entries;
				out.files = zip.files;
			} else {
				out.keys = [];
				out.files = {};
				zip.FullPaths.forEach(function(p, idx) {
					p = p.replace(/^Root Entry[\/]/, "");
					out.keys.push(p);
					out.files[p] = zip.FileIndex[idx];
				});
			}
		}
		if(opts && opts.bookVBA) {
			if(dir.vba.length > 0) out.vbaraw = getzipdata(zip,strip_front_slash(dir.vba[0]),true);
			else if(dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin',true);
		}
		return out;
	}

	/* [MS-OFFCRYPTO] 2.1.1 */
	function parse_xlsxcfb(cfb, _opts/*:?ParseOpts*/)/*:Workbook*/ {
		var opts = _opts || {};
		var f = 'Workbook', data = CFB.find(cfb, f);
		try {
		f = '/!DataSpaces/Version';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
		/*var version = */parse_DataSpaceVersionInfo(data.content);

		/* 2.3.4.1 */
		f = '/!DataSpaces/DataSpaceMap';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
		var dsm = parse_DataSpaceMap(data.content);
		if(dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
			throw new Error("ECMA-376 Encrypted file bad " + f);

		/* 2.3.4.2 */
		f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
		var seds = parse_DataSpaceDefinition(data.content);
		if(seds.length != 1 || seds[0] != "StrongEncryptionTransform")
			throw new Error("ECMA-376 Encrypted file bad " + f);

		/* 2.3.4.3 */
		f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
		/*var hdr = */parse_Primary(data.content);
		} catch(e) {}

		f = '/EncryptionInfo';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
		var einfo = parse_EncryptionInfo(data.content);

		/* 2.3.4.4 */
		f = '/EncryptedPackage';
		data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);

	/*global decrypt_agile */
	/*:: declare var decrypt_agile:any; */
		if(einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
	/*global decrypt_std76 */
	/*:: declare var decrypt_std76:any; */
		if(einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
		throw new Error("File is password-protected");
	}

	function firstbyte(f/*:RawData*/,o/*:?TypeOpts*/)/*:Array<number>*/ {
		var x = "";
		switch((o||{}).type || "base64") {
			case 'buffer': return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
			case 'base64': x = Base64_decode(f.slice(0,12)); break;
			case 'binary': x = f; break;
			case 'array':  return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
			default: throw new Error("Unrecognized type " + (o && o.type || "undefined"));
		}
		return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
	}

	function read_cfb(cfb/*:CFBContainer*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		if(CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
		return parse_xlscfb(cfb, opts);
	}

	function read_zip(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		var zip, d = data;
		var o = opts||{};
		if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
		zip = zip_read(d, o);
		return parse_zip(zip, o);
	}

	function read_plaintext(data/*:string*/, o/*:ParseOpts*/)/*:Workbook*/ {
		var i = 0;
		main: while(i < data.length) switch(data.charCodeAt(i)) {
			case 0x0A: case 0x0D: case 0x20: ++i; break;
			case 0x3C: return parse_xlml(data.slice(i),o);
			default: break main;
		}
		return PRN.to_workbook(data, o);
	}

	function read_plaintext_raw(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
		var str = "", bytes = firstbyte(data, o);
		switch(o.type) {
			case 'base64': str = Base64_decode(data); break;
			case 'binary': str = data; break;
			case 'buffer': str = data.toString('binary'); break;
			case 'array': str = cc2str(data); break;
			default: throw new Error("Unrecognized type " + o.type);
		}
		if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
		o.type = "binary";
		return read_plaintext(str, o);
	}

	function read_utf16(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
		var d = data;
		if(o.type == 'base64') d = Base64_decode(d);
		d = $cptable.utils.decode(1200, d.slice(2), 'str');
		o.type = "binary";
		return read_plaintext(d, o);
	}

	function bstrify(data/*:string*/)/*:string*/ {
		return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
	}

	function read_prn(data, d, o, str) {
		if(str) { o.type = "string"; return PRN.to_workbook(data, o); }
		return PRN.to_workbook(d, o);
	}

	function readSync(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
		reset_cp();
		var o = opts||{};
		if(typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
		if(typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
		var d = data, n = [0,0,0,0], str = false;
		if(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }
		_ssfopts = {};
		if(o.dateNF) _ssfopts.dateNF = o.dateNF;
		if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
		if(o.type == "file") { o.type = has_buf ? "buffer" : "binary"; d = read_binary(data); if(typeof Uint8Array !== 'undefined' && !has_buf) o.type = "array"; }
		if(o.type == "string") { str = true; o.type = "binary"; o.codepage = 65001; d = bstrify(data); }
		if(o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {
			// $FlowIgnore
			var ab=new ArrayBuffer(3), vu=new Uint8Array(ab); vu.foo="bar";
			// $FlowIgnore
			if(!vu.foo) {o=dup(o); o.type='array'; return readSync(ab2a(d), o);}
		}
		switch((n = firstbyte(d, o))[0]) {
			case 0xD0: if(n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o); break;
			case 0x09: if(n[1] <= 0x08) return parse_xlscfb(d, o); break;
			case 0x3C: return parse_xlml(d, o);
			case 0x49:
				if(n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error("TIFF Image File is not a spreadsheet");
				if(n[1] === 0x44) return read_wb_ID(d, o);
				break;
			case 0x54: if(n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o); break;
			case 0x50: return (n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09) ? read_zip(d, o) : read_prn(data, d, o, str);
			case 0xEF: return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
			case 0xFF:
				if(n[1] === 0xFE) { return read_utf16(d, o); }
				else if(n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
				break;
			case 0x00:
				if(n[1] === 0x00) {
					if(n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
					if(n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);
				}
				break;
			case 0x03: case 0x83: case 0x8B: case 0x8C: return DBF.to_workbook(d, o);
			case 0x7B: if(n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o); break;
			case 0x0A: case 0x0D: case 0x20: return read_plaintext_raw(d, o);
			case 0x89: if(n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error("PNG Image File is not a spreadsheet"); break;
		}
		if(DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
		return read_prn(data, d, o, str);
	}
	/*::
	type MJRObject = {
		row: any;
		isempty: boolean;
	};
	*/
	function make_json_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, header/*:number*/, hdr/*:Array<any>*/, dense/*:boolean*/, o/*:Sheet2JSONOpts*/)/*:MJRObject*/ {
		var rr = encode_row(R);
		var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
		var isempty = true;
		var row/*:any*/ = (header === 1) ? [] : {};
		if(header !== 1) {
			if(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }
			else row.__rowNum__ = R;
		}
		if(!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {
			var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
			if(val === undefined || val.t === undefined) {
				if(defval === undefined) continue;
				if(hdr[C] != null) { row[hdr[C]] = defval; }
				continue;
			}
			var v = val.v;
			switch(val.t){
				case 'z': if(v == null) break; continue;
				case 'e': v = (v == 0 ? null : undefined); break;
				case 's': case 'd': case 'b': case 'n': break;
				default: throw new Error('unrecognized type ' + val.t);
			}
			if(hdr[C] != null) {
				if(v == null) {
					if(val.t == "e" && v === null) row[hdr[C]] = null;
					else if(defval !== undefined) row[hdr[C]] = defval;
					else if(raw && v === null) row[hdr[C]] = null;
					else continue;
				} else {
					row[hdr[C]] = raw && (val.t !== "n" || (val.t === "n" && o.rawNumbers !== false)) ? v : format_cell(val,v,o);
				}
				if(v != null) isempty = false;
			}
		}
		return { row: row, isempty: isempty };
	}


	function sheet_to_json(sheet/*:Worksheet*/, opts/*:?Sheet2JSONOpts*/) {
		if(sheet == null || sheet["!ref"] == null) return [];
		var val = {t:'n',v:0}, header = 0, offset = 1, hdr/*:Array<any>*/ = [], v=0, vv="";
		var r = {s:{r:0,c:0},e:{r:0,c:0}};
		var o = opts || {};
		var range = o.range != null ? o.range : sheet["!ref"];
		if(o.header === 1) header = 1;
		else if(o.header === "A") header = 2;
		else if(Array.isArray(o.header)) header = 3;
		else if(o.header == null) header = 0;
		switch(typeof range) {
			case 'string': r = safe_decode_range(range); break;
			case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
			default: r = range;
		}
		if(header > 0) offset = 0;
		var rr = encode_row(r.s.r);
		var cols/*:Array<string>*/ = [];
		var out/*:Array<any>*/ = [];
		var outi = 0, counter = 0;
		var dense = Array.isArray(sheet);
		var R = r.s.r, C = 0;
		var header_cnt = {};
		if(dense && !sheet[R]) sheet[R] = [];
		var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
		var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
		for(C = r.s.c; C <= r.e.c; ++C) {
			if(((colinfo[C]||{}).hidden)) continue;
			cols[C] = encode_col(C);
			val = dense ? sheet[R][C] : sheet[cols[C] + rr];
			switch(header) {
				case 1: hdr[C] = C - r.s.c; break;
				case 2: hdr[C] = cols[C]; break;
				case 3: hdr[C] = o.header[C - r.s.c]; break;
				default:
					if(val == null) val = {w: "__EMPTY", t: "s"};
					vv = v = format_cell(val, null, o);
					counter = header_cnt[v] || 0;
					if(!counter) header_cnt[v] = 1;
					else {
						do { vv = v + "_" + (counter++); } while(header_cnt[vv]); header_cnt[v] = counter;
						header_cnt[vv] = 1;
					}
					hdr[C] = vv;
			}
		}
		for (R = r.s.r + offset; R <= r.e.r; ++R) {
			if ((rowinfo[R]||{}).hidden) continue;
			var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
			if((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
		}
		out.length = outi;
		return out;
	}

	var qreg = /"/g;
	function make_csv_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, fs/*:number*/, rs/*:number*/, FS/*:string*/, o/*:Sheet2CSVOpts*/)/*:?string*/ {
		var isempty = true;
		var row/*:Array<string>*/ = [], txt = "", rr = encode_row(R);
		for(var C = r.s.c; C <= r.e.c; ++C) {
			if (!cols[C]) continue;
			var val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];
			if(val == null) txt = "";
			else if(val.v != null) {
				isempty = false;
				txt = ''+(o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
				for(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {txt = "\"" + txt.replace(qreg, '""') + "\""; break; }
				if(txt == "ID") txt = '"ID"';
			} else if(val.f != null && !val.F) {
				isempty = false;
				txt = '=' + val.f; if(txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
			} else txt = "";
			/* NOTE: Excel CSV does not support array formulae */
			row.push(txt);
		}
		if(o.blankrows === false && isempty) return null;
		return row.join(FS);
	}

	function sheet_to_csv(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/)/*:string*/ {
		var out/*:Array<string>*/ = [];
		var o = opts == null ? {} : opts;
		if(sheet == null || sheet["!ref"] == null) return "";
		var r = safe_decode_range(sheet["!ref"]);
		var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
		var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
		var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
		var row = "", cols/*:Array<string>*/ = [];
		o.dense = Array.isArray(sheet);
		var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
		var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
		for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
		var w = 0;
		for(var R = r.s.r; R <= r.e.r; ++R) {
			if ((rowinfo[R]||{}).hidden) continue;
			row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
			if(row == null) { continue; }
			if(o.strip) row = row.replace(endregex,"");
			if(row || (o.blankrows !== false)) out.push((w++ ? RS : "") + row);
		}
		delete o.dense;
		return out.join("");
	}

	function sheet_to_txt(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/) {
		if(!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n";
		var s = sheet_to_csv(sheet, opts);
		return s;
	}

	function sheet_to_formulae(sheet/*:Worksheet*/)/*:Array<string>*/ {
		var y = "", x, val="";
		if(sheet == null || sheet["!ref"] == null) return [];
		var r = safe_decode_range(sheet['!ref']), rr = "", cols/*:Array<string>*/ = [], C;
		var cmds/*:Array<string>*/ = [];
		var dense = Array.isArray(sheet);
		for(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
		for(var R = r.s.r; R <= r.e.r; ++R) {
			rr = encode_row(R);
			for(C = r.s.c; C <= r.e.c; ++C) {
				y = cols[C] + rr;
				x = dense ? (sheet[R]||[])[C] : sheet[y];
				val = "";
				if(x === undefined) continue;
				else if(x.F != null) {
					y = x.F;
					if(!x.f) continue;
					val = x.f;
					if(y.indexOf(":") == -1) y = y + ":" + y;
				}
				if(x.f != null) val = x.f;
				else if(x.t == 'z') continue;
				else if(x.t == 'n' && x.v != null) val = "" + x.v;
				else if(x.t == 'b') val = x.v ? "TRUE" : "FALSE";
				else if(x.w !== undefined) val = "'" + x.w;
				else if(x.v === undefined) continue;
				else if(x.t == 's') val = "'" + x.v;
				else val = ""+x.v;
				cmds[cmds.length] = y + "=" + val;
			}
		}
		return cmds;
	}

	function sheet_add_json(_ws/*:?Worksheet*/, js/*:Array<any>*/, opts)/*:Worksheet*/ {
		var o = opts || {};
		var offset = +!o.skipHeader;
		var ws/*:Worksheet*/ = _ws || ({}/*:any*/);
		var _R = 0, _C = 0;
		if(ws && o.origin != null) {
			if(typeof o.origin == 'number') _R = o.origin;
			else {
				var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
				_R = _origin.r; _C = _origin.c;
			}
		}
		var cell/*:Cell*/;
		var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:_C, r:_R + js.length - 1 + offset}}/*:any*/);
		if(ws['!ref']) {
			var _range = safe_decode_range(ws['!ref']);
			range.e.c = Math.max(range.e.c, _range.e.c);
			range.e.r = Math.max(range.e.r, _range.e.r);
			if(_R == -1) { _R = _range.e.r + 1; range.e.r = _R + js.length - 1 + offset; }
		} else {
			if(_R == -1) { _R = 0; range.e.r = js.length - 1 + offset; }
		}
		var hdr/*:Array<string>*/ = o.header || [], C = 0;

		js.forEach(function (JS, R/*:number*/) {
			keys(JS).forEach(function(k) {
				if((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;
				var v = JS[k];
				var t = 'z';
				var z = "";
				var ref = encode_cell({c:_C + C,r:_R + R + offset});
				cell = ws_get_cell_stub(ws, ref);
				if(v && typeof v === 'object' && !(v instanceof Date)){
					ws[ref] = v;
				} else {
					if(typeof v == 'number') t = 'n';
					else if(typeof v == 'boolean') t = 'b';
					else if(typeof v == 'string') t = 's';
					else if(v instanceof Date) {
						t = 'd';
						if(!o.cellDates) { t = 'n'; v = datenum(v); }
						z = (o.dateNF || table_fmt[14]);
					}
					else if(v === null && o.nullError) { t = 'e'; v = 0; }
					if(!cell) ws[ref] = cell = ({t:t, v:v}/*:any*/);
					else {
						cell.t = t; cell.v = v;
						delete cell.w; delete cell.R;
						if(z) cell.z = z;
					}
					if(z) cell.z = z;
				}
			});
		});
		range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
		var __R = encode_row(_R);
		if(offset) for(C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {t:'s', v:hdr[C]};
		ws['!ref'] = encode_range(range);
		return ws;
	}
	function json_to_sheet(js/*:Array<any>*/, opts)/*:Worksheet*/ { return sheet_add_json(null, js, opts); }

	/* get cell, creating a stub if necessary */
	function ws_get_cell_stub(ws/*:Worksheet*/, R, C/*:?number*/)/*:Cell*/ {
		/* A1 cell address */
		if(typeof R == "string") {
			/* dense */
			if(Array.isArray(ws)) {
				var RC = decode_cell(R);
				if(!ws[RC.r]) ws[RC.r] = [];
				return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {t:'z'});
			}
			return ws[R] || (ws[R] = {t:'z'});
		}
		/* cell address object */
		if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
		/* R and C are 0-based indices */
		return ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));
	}

	/* find sheet index for given name / validate index */
	function wb_sheet_idx(wb/*:Workbook*/, sh/*:number|string*/) {
		if(typeof sh == "number") {
			if(sh >= 0 && wb.SheetNames.length > sh) return sh;
			throw new Error("Cannot find sheet # " + sh);
		} else if(typeof sh == "string") {
			var idx = wb.SheetNames.indexOf(sh);
			if(idx > -1) return idx;
			throw new Error("Cannot find sheet name |" + sh + "|");
		} else throw new Error("Cannot find sheet |" + sh + "|");
	}

	/* simple blank workbook object */
	function book_new()/*:Workbook*/ {
		return { SheetNames: [], Sheets: {} };
	}

	/* add a worksheet to the end of a given workbook */
	function book_append_sheet(wb/*:Workbook*/, ws/*:Worksheet*/, name/*:?string*/, roll/*:?boolean*/)/*:string*/ {
		var i = 1;
		if(!name) for(; i <= 0xFFFF; ++i, name = undefined) if(wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
		if(!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
		if(roll && wb.SheetNames.indexOf(name) >= 0) {
			var m = name.match(/(^.*?)(\d+)$/);
			i = m && +m[2] || 0;
			var root = m && m[1] || name;
			for(++i; i <= 0xFFFF; ++i) if(wb.SheetNames.indexOf(name = root + i) == -1) break;
		}
		check_ws_name(name);
		if(wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");

		wb.SheetNames.push(name);
		wb.Sheets[name] = ws;
		return name;
	}

	/* set sheet visibility (visible/hidden/very hidden) */
	function book_set_sheet_visibility(wb/*:Workbook*/, sh/*:number|string*/, vis/*:number*/) {
		if(!wb.Workbook) wb.Workbook = {};
		if(!wb.Workbook.Sheets) wb.Workbook.Sheets = [];

		var idx = wb_sheet_idx(wb, sh);
		// $FlowIgnore
		if(!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};

		switch(vis) {
			case 0: case 1: case 2: break;
			default: throw new Error("Bad sheet visibility setting " + vis);
		}
		// $FlowIgnore
		wb.Workbook.Sheets[idx].Hidden = vis;
	}

	/* set number format */
	function cell_set_number_format(cell/*:Cell*/, fmt/*:string|number*/) {
		cell.z = fmt;
		return cell;
	}

	/* set cell hyperlink */
	function cell_set_hyperlink(cell/*:Cell*/, target/*:string*/, tooltip/*:?string*/) {
		if(!target) {
			delete cell.l;
		} else {
			cell.l = ({ Target: target }/*:Hyperlink*/);
			if(tooltip) cell.l.Tooltip = tooltip;
		}
		return cell;
	}
	function cell_set_internal_link(cell/*:Cell*/, range/*:string*/, tooltip/*:?string*/) { return cell_set_hyperlink(cell, "#" + range, tooltip); }

	/* add to cell comments */
	function cell_add_comment(cell/*:Cell*/, text/*:string*/, author/*:?string*/) {
		if(!cell.c) cell.c = [];
		cell.c.push({t:text, a:author||"SheetJS"});
	}

	/* set array formula and flush related cells */
	function sheet_set_array_formula(ws/*:Worksheet*/, range, formula/*:string*/, dynamic/*:boolean*/) {
		var rng = typeof range != "string" ? range : safe_decode_range(range);
		var rngstr = typeof range == "string" ? range : encode_range(range);
		for(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {
			var cell = ws_get_cell_stub(ws, R, C);
			cell.t = 'n';
			cell.F = rngstr;
			delete cell.v;
			if(R == rng.s.r && C == rng.s.c) {
				cell.f = formula;
				if(dynamic) cell.D = true;
			}
		}
		return ws;
	}

	var utils/*:any*/ = {
		encode_col: encode_col,
		encode_row: encode_row,
		encode_cell: encode_cell,
		encode_range: encode_range,
		decode_col: decode_col,
		decode_row: decode_row,
		split_cell: split_cell,
		decode_cell: decode_cell,
		decode_range: decode_range,
		format_cell: format_cell,
		sheet_add_aoa: sheet_add_aoa,
		sheet_add_json: sheet_add_json,
		sheet_add_dom: sheet_add_dom,
		aoa_to_sheet: aoa_to_sheet,
		json_to_sheet: json_to_sheet,
		table_to_sheet: parse_dom_table,
		table_to_book: table_to_book,
		sheet_to_csv: sheet_to_csv,
		sheet_to_txt: sheet_to_txt,
		sheet_to_json: sheet_to_json,
		sheet_to_html: sheet_to_html,
		sheet_to_formulae: sheet_to_formulae,
		sheet_to_row_object_array: sheet_to_json,
		sheet_get_cell: ws_get_cell_stub,
		book_new: book_new,
		book_append_sheet: book_append_sheet,
		book_set_sheet_visibility: book_set_sheet_visibility,
		cell_set_number_format: cell_set_number_format,
		cell_set_hyperlink: cell_set_hyperlink,
		cell_set_internal_link: cell_set_internal_link,
		cell_add_comment: cell_add_comment,
		sheet_set_array_formula: sheet_set_array_formula,
		consts: {
			SHEET_VISIBLE: 0,
			SHEET_HIDDEN: 1,
			SHEET_VERY_HIDDEN: 2
		}
	};

	/* ***************************************************************************************
	Default color modes
	*************************************************************************************** */

	var ColorModes = {
	  Black: {
	    Civilian: "black",
	    Friend: "black",
	    Hostile: "black",
	    Neutral: "black",
	    Unknown: "black",
	    Suspect: "black",
	  },
	  Dark: {
	    Civilian: "rgb(80,0,80)",
	    Friend: "rgb(0,107,140)",
	    Hostile: "rgb(200,0,0)",
	    Neutral: "rgb(0,160,0)",
	    Unknown: "rgb(225,220,0)",
	    Suspect: "rgb(255, 188, 1)",
	  },
	  FrameColor: {
	    Civilian: "rgb(255,0,255)",
	    Friend: "rgb(0, 255, 255)",
	    Hostile: "rgb(255, 0, 0)",
	    Neutral: "rgb(0, 255, 0)",
	    Unknown: "rgb(255, 255, 0)",
	    Suspect: "rbg(255, 188, 1)",
	  },
	  IconColor: {
	    Civilian: "rgb(255,0,255)",
	    Friend: "rgb(0, 255, 255)",
	    Hostile: "rgb(255, 0, 0)",
	    Neutral: "rgb(0, 255, 0)",
	    Unknown: "rgb(255, 255, 0)",
	    Suspect: "rgb(255, 188, 1)",
	  },
	  Light: {
	    Civilian: "rgb(255,161,255)",
	    Friend: "rgb(128,224,255)",
	    Hostile: "rgb(255,128,128)",
	    Neutral: "rgb(170,255,170)",
	    Unknown: "rgb(255,255,128)",
	    Suspect: "rgb(255, 229, 153)",
	  },
	  Medium: {
	    Civilian: "rgb(128,0,128)",
	    Friend: "rgb(0,168,220)",
	    Hostile: "rgb(255,48,49)",
	    Neutral: "rgb(0,226,110)",
	    Unknown: "rgb(255,255,0)",
	    Suspect: "rgb(255, 217, 107)",
	  },
	  None: {
	    Civilian: false,
	    Friend: false,
	    Hostile: false,
	    Neutral: false,
	    Unknown: false,
	    Suspect: false,
	  },
	  OffWhite: {
	    Civilian: "rgb(239, 239, 239)",
	    Friend: "rgb(239, 239, 239)",
	    Hostile: "rgb(239, 239, 239)",
	    Neutral: "rgb(239, 239, 239)",
	    Unknown: "rgb(239, 239, 239)",
	    Suspect: "rgb(239, 239, 239)",
	  },
	  White: {
	    Civilian: "white",
	    Friend: "white",
	    Hostile: "white",
	    Neutral: "white",
	    Unknown: "white",
	    Suspect: "white",
	  },
	};

	//Base Geometry for the Symbol ###########################################################
	function basegeometry(ms) {
	  let modifier;
	  const drawArray1 = [];
	  const drawArray2 = [];
	  const frameColor = this.colors.frameColor[this.metadata.affiliation];

	  //If unframed but with icon, then just return.
	  if (
	    (!this.metadata.frame && this.style.icon) ||
	    typeof this.metadata.baseGeometry.g.type == "undefined"
	  ) {
	    return {
	      pre: drawArray1,
	      post: drawArray2,
	      bbox: this.metadata.baseGeometry.bbox,
	    };
	  }

	  //Clone the base geometry
	  let geom = { type: this.metadata.baseGeometry.g.type };
	  switch (geom.type) {
	    case "path":
	      geom.d = this.metadata.baseGeometry.g.d;
	      break;
	    case "circle":
	      geom.cx = this.metadata.baseGeometry.g.cx;
	      geom.cy = this.metadata.baseGeometry.g.cy;
	      geom.r = this.metadata.baseGeometry.g.r;
	  }
	  geom.fill =
	    this.style.fillColor || this.colors.fillColor[this.metadata.affiliation];
	  geom.fillopacity = this.style.fillOpacity;
	  geom.stroke = frameColor;
	  geom.strokewidth = this.style.size >= 10 ? this.style.strokeWidth : 10;
	  //outline
	  if (this.style.frame && this.style.outlineWidth > 0) {
	    let outline;
	    if (geom.type == "path" && this.metadata.fill && !this.style.monoColor) {
	      outline = { type: this.metadata.baseGeometry.g.type };
	      outline.d = this.metadata.baseGeometry.g.d + " Z"; //Making sure the path is closed
	      outline.strokewidth = this.style.size >= 10 ? this.style.strokeWidth : 10;
	    } else {
	      outline = geom;
	    }
	    drawArray1.push(
	      ms.outline(
	        outline,
	        this.style.outlineWidth,
	        this.style.strokeWidth,
	        typeof this.style.outlineColor === "object"
	          ? this.style.outlineColor[this.metadata.affiliation]
	          : this.style.outlineColor
	      )
	    );
	  }
	  //Add a dashed outline to the frame if we are using monocolor and the status is not present.
	  if (
	    (this.style.monoColor != "" || !this.style.fill) &&
	    this.metadata.notpresent
	  )
	    geom.strokedasharray = this.metadata.notpresent;
	  drawArray2.push(geom);

	  // Dismounted Individual
	  /*
	  if (this.metadata.dismounted) {
	    modifier = {
	      Neutral: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 92.6 140.1 L 92.6 151.6 L 100 155 L 108 151.3 L 108 140.1 L 92.6 140.1 z "
	      },
	      Unknown: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 92.5 147.1 L 92.5 156.5 L 99.8 162 L 107.5 156.3 L 107.5 147.1 L 92.5 147.1 z "
	      }
	    };
	    if (modifier.hasOwnProperty(this.metadata.affiliation))
	      drawArray2.push(modifier[this.metadata.affiliation]);
	  }
	  //*/
	  // Space Modifiers
	  if (this.metadata.space) {
	    modifier = {
	      Friend: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 100,30 C 90,30 80,35 68.65625,50 l 62.6875,0 C 120,35 110,30 100,30",
	      },
	      Hostile: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "M67,50 L100,20 133,50 z",
	      },
	      Neutral: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "M45,50 l0,-20 110,0 0,20 z",
	      },
	      Unknown: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 100 22.5 C 85 22.5 70 31.669211 66 50 L 134 50 C 130 31.669204 115 22.5 100 22.5 z",
	      },
	    };
	    drawArray2.push(modifier[this.metadata.affiliation]);
	  }
	  // Modifiers for activity.
	  if (this.metadata.activity) {
	    modifier = {
	      Friend: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "m 160,135 0,15 15,0 0,-15 z m -135,0 15,0 0,15 -15,0 z m 135,-85 0,15 15,0 0,-15 z m -135,0 15,0 0,15 -15,0 z",
	      },
	      Hostile: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 100 28 L 89.40625 38.59375 L 100 49.21875 L 110.59375 38.59375 L 100 28 z M 38.6875 89.3125 L 28.0625 99.9375 L 38.6875 110.53125 L 49.28125 99.9375 L 38.6875 89.3125 z M 161.40625 89.40625 L 150.78125 100 L 161.40625 110.59375 L 172 100 L 161.40625 89.40625 z M 99.9375 150.71875 L 89.3125 161.3125 L 99.9375 171.9375 L 110.53125 161.3125 L 99.9375 150.71875",
	      },
	      Neutral: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "m 140,140 15,0 0,15 -15,0 z m -80,0 0,15 -15,0 0,-15 z m 80,-80 0,-15 15,0 0,15 z m -80,0 -15,0 0,-15 15,0 z",
	      },
	      Unknown: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d:
	          "M 107.96875 31.46875 L 92.03125 31.71875 L 92.03125 46.4375 L 107.71875 46.4375 L 107.96875 31.46875 z M 47.03125 92.5 L 31.09375 92.75 L 31.09375 107.5 L 46.78125 107.5 L 47.03125 92.5 z M 168.4375 92.5 L 152.5 92.75 L 152.5 107.5 L 168.1875 107.5 L 168.4375 92.5 z M 107.96875 153.5625 L 92.03125 153.8125 L 92.03125 168.53125 L 107.71875 168.53125 L 107.96875 153.5625 z",
	      },
	    };
	    drawArray2.push(modifier[this.metadata.affiliation]);
	  }
	  // Cyberspace Modifiers
	  //*
	  if (this.metadata.cyberspace) {
	    modifier = {
	      Friend: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "m 135,150 40,-40 0,40 z",
	      },
	      Hostile: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "m 150,78 0,44 22,-22 z",
	      },
	      Neutral: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "m 115,155 40,-40 0,40 z",
	      },
	      Unknown: {
	        type: "path",
	        stroke: false,
	        fill: frameColor,
	        d: "M 150 65.7 L 150 134 C 176 123 176 77.2 150 65.7 z",
	      },
	    };
	    drawArray2.push(modifier[this.metadata.affiliation]);
	  }
	  //*/
	  //Add a dashed outline to the frame if the status is not present.
	  if (
	    this.style.fill &&
	    this.style.frame &&
	    this.metadata.notpresent &&
	    !this.metadata.unframed
	  ) {
	    //Clone the base geometry
	    geom = { type: this.metadata.baseGeometry.g.type };
	    switch (geom.type) {
	      case "path":
	        geom.d = this.metadata.baseGeometry.g.d;
	        break;
	      case "circle":
	        geom.cx = this.metadata.baseGeometry.g.cx;
	        geom.cy = this.metadata.baseGeometry.g.cy;
	        geom.r = this.metadata.baseGeometry.g.r;
	    }
	    geom.fill = false;
	    geom.stroke = this.colors.white[this.metadata.affiliation];
	    geom.strokewidth = parseFloat(this.style.strokeWidth) + 1;
	    geom.strokedasharray = this.metadata.notpresent;
	    drawArray2.push(geom);
	  }
	  return {
	    pre: drawArray1,
	    post: drawArray2,
	    bbox: this.metadata.baseGeometry.bbox,
	  };
	}

	//Icon #################################################################################
	function icon(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  let gbbox = new ms.BBox({ x1: 50, x2: 150, y1: 50, y2: 150 });
	  let icons, iconColor;

	  //This is the building blocks we use to create icons
	  let iconParts = [];
	  //Main icon
	  //let icon = [];
	  //Modifier 1 used in number based SIDCs
	  let m1 = [];
	  //Modifier 2 used in number based SIDCs
	  let m2 = [];
	  //Boundingboxes other than normal
	  let specialbbox = [];

	  if (this.style.icon) {
	    const fillColor = this.colors.fillColor[this.metadata.affiliation];
	    //So we don't happend to use civilian colors
	    const neutralColor = this.colors.fillColor.Neutral;
	    iconColor = this.colors.iconColor[this.metadata.affiliation];
	    const iconFillColor = this.colors.iconFillColor[this.metadata.affiliation];
	    const none = this.colors.none[this.metadata.affiliation];
	    const black = this.colors.black[this.metadata.affiliation];
	    const white = this.colors.white[this.metadata.affiliation];
	    //Store previous used icons in memory.
	    const icnet =
	      "standard:" +
	      (this.metadata.STD2525 ? "2525" : "APP6") +
	      ",edition:" +
	      (this.metadata.edition || "") +
	      "," +
	      this.metadata.dimension +
	      this.metadata.affiliation +
	      this.metadata.notpresent +
	      this.metadata.numberSIDC +
	      ",frame:" +
	      this.style.frame +
	      ",alternateMedal:" +
	      this.style.alternateMedal +
	      ",colors:{fillcolor:" +
	      fillColor +
	      ",neutralColor" +
	      neutralColor +
	      ",iconColor:" +
	      iconColor +
	      ",iconFillColor:" +
	      iconFillColor +
	      ",none:" +
	      none +
	      ",black:" +
	      black +
	      ",white:" +
	      white +
	      "}";
	    if (ms._iconCache.hasOwnProperty(icnet)) {
	      iconParts = ms._iconCache[icnet].iconParts;
	    } else {
	      ms._iconCache[icnet] = {};
	      iconParts = ms._iconCache[icnet].iconParts = ms._getIconParts(
	        this.metadata,
	        this.colors,
	        this.metadata.STD2525,
	        this.style.monoColor,
	        this.style.alternateMedal
	      );
	    }

	    //Letter based SIDCs.
	    if (!this.metadata.numberSIDC) {
	      //Sea mine exercise has stuff outsIde the boundingbox...
	      //TODO see if we can fix this in another way.
	      if (
	        ["WMGX--", "WMMX--", "WMFX--", "WMX---", "WMSX--"].indexOf(
	          this.metadata.functionid
	        ) != -1
	      ) {
	        gbbox.y1 = 10;
	        if (this.metadata.affiliation != "Unknown") {
	          gbbox.x2 = this.metadata.baseGeometry.bbox.x2 + 20;
	        }
	      }

	      //Try to fetch the icons form the cache
	      if (ms._iconCache[icnet].hasOwnProperty("letterSIDC")) {
	        icons = ms._iconCache[icnet].letterSIDC.icons;
	        specialbbox = ms._iconCache[icnet].letterSIDC.bbox;
	      } else {
	        if (typeof ms._getIcons.letter === "function") {
	          ms._iconCache[icnet].letterSIDC = ms._getIcons.letter(
	            ms,
	            iconParts,
	            this.metadata.STD2525
	          );
	          icons = ms._iconCache[icnet].letterSIDC.icons;
	          specialbbox = ms._iconCache[icnet].letterSIDC.bbox;
	          //THIS IS JUST FOR Printing bottom coords of all equipment ===========================
	          /*			This code dosen't work at the moment..... TODO
						if(element){
						listBBoxes = '';
						for (let property in sId) {
							if(property.substr(4,1) == 'E'){
								let BaseGeometry = document.createElementNS(ms._svgNS, "g");
								BaseGeometry.setAttribute('id', 'BaseGeometryEquipment');
									BaseGeometry.appendChild(
										BaseGeometry.ownerDocument.importNode(
											parseXML(
												'<g xmlns="'+ms._svgNS+'">' + sId[property] + '</g>'
											), true
										)
									);
								let svgSymbol = document.createElementNS(ms._svgNS, "svg");
								svgSymbol.setAttribute("width", 200);
								svgSymbol.setAttribute("height", 200);
								svgSymbol.setAttribute("version", 1.1);
								svgSymbol.setAttribute("baseProfile", "tiny");
								svgSymbol.setAttribute("xmlns", ms._svgNS);
								svgSymbol.appendChild(BaseGeometry);

								let targetElement = document.getElementById(element);
								if(targetElement.hasChildNodes()){
									targetElement.removeChild(targetElement.childNodes[0])
								}
								targetElement.appendChild(svgSymbol);
								let BBox = document.getElementById("BaseGeometryEquipment").getBBox()
								listBBoxes += '\'' + property.substr(4,6) + '\':' + (BBox.y+ BBox.height)+',';
							}
							}
						document.getElementById(element).innerHTML=listBBoxes;
					}
			*/
	        } else {
	          console.warn(
	            "ms._getIcons.letter() is not present, you will need to load functionality for letter based SIDCs"
	          );
	        }
	      }
	    }

	    //Number based SIDCs.
	    if (this.metadata.numberSIDC) {
	      //Number based SIDCs.
	      const symbolSet = String(this.options.sidc).substring(4, 6);
	      if (ms._iconCache[icnet].hasOwnProperty("numberSIDC")) {
	        if (
	          ms._iconCache[icnet].numberSIDC.symbolSet.hasOwnProperty(symbolSet)
	        ) {
	          icons = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].icons;
	          m1 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m1;
	          m2 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m2;
	          specialbbox =
	            ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].bbox;
	        } else {
	          if (typeof ms._getIcons.number === "function") {
	            // This calls the icons function in each sidc symbol object
	            ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet] =
	              ms._getIcons.number(
	                ms,
	                symbolSet,
	                iconParts,
	                this.metadata.STD2525,
	                this.metadata.edition
	              );
	            icons = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].icons;
	            m1 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m1;
	            m2 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m2;
	            specialbbox =
	              ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].bbox;
	          } else {
	            console.warn(
	              "ms._getIcons.number() is not present, you will need to load functionality for number based SIDCs"
	            );
	          }
	        }
	      } else {
	        ms._iconCache[icnet].numberSIDC = {};
	        ms._iconCache[icnet].numberSIDC.symbolSet = {};
	        if (typeof ms._getIcons.number === "function") {
	          ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet] =
	            ms._getIcons.number(
	              ms,
	              symbolSet,
	              iconParts,
	              this.metadata.STD2525,
	              this.metadata.edition
	            );
	          icons = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].icons;
	          m1 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m1;
	          m2 = ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].m2;
	          specialbbox =
	            ms._iconCache[icnet].numberSIDC.symbolSet[symbolSet].bbox;
	          //for printing equipment bottom  set ms._element to the id of an html element and call milsymbol with an equipment sysbol
	          /*
						if(ms._element){
						listBBoxes = '';
						sId = ms._iconCache[icnet].numberSIDC.symbolSet[15].icn;
						for (let property in sId) {
						console.log(property)
								let BaseGeometry = document.createElementNS("http://www.w3.org/2000/svg", "g");
								BaseGeometry.setAttribute('id', 'BaseGeometryEquipment');
									BaseGeometry.appendChild(
										BaseGeometry.ownerDocument.importNode(
											parseXML(
												'<g xmlns="'+"http://www.w3.org/2000/svg"+'">' + sId[property] + '</g>'
											), true
										)
									);
								let svgSymbol = document.createElementNS("http://www.w3.org/2000/svg", "svg");
								svgSymbol.setAttribute("width", 200);
								svgSymbol.setAttribute("height", 200);
								svgSymbol.setAttribute("version", 1.1);
								svgSymbol.setAttribute("baseProfile", "tiny");
								svgSymbol.setAttribute("id", property);

								svgSymbol.setAttribute("xmlns", "http://www.w3.org/2000/svg");
								svgSymbol.appendChild(BaseGeometry);

								let targetElement = document.getElementById(ms._element);
								if(targetElement.hasChildNodes()){
									targetElement.removeChild(targetElement.childNodes[0])
								}
								targetElement.appendChild(svgSymbol);
								console.log(targetElement)
								let BBox = document.getElementById("BaseGeometryEquipment").getBBox()
								listBBoxes +=  property + ':' + (BBox.y+ BBox.height)+',';

							}
						document.getElementById(ms._element).innerHTML=listBBoxes;
						}*/
	        } else {
	          console.warn(
	            "ms._getIcons.number() is not present, you will need to load functionality for number based SIDCs"
	          );
	        }
	      }
	    }

	    // Put all this togheter and return the Icon. ============================================
	    iconColor = this.colors.iconColor[this.metadata.affiliation];
	    const undefinedIcon = [
	      {
	        type: "path",
	        stroke: false,
	        fill: iconColor,
	        d: "m 94.8206,78.1372 c -0.4542,6.8983 0.6532,14.323 5.3424,19.6985 4.509,5.6933 11.309,9.3573 14.98,15.7283 3.164,6.353 -0.09,14.245 -5.903,17.822 -7.268,4.817 -18.6219,2.785 -22.7328,-5.249 -1.5511,-2.796 -2.3828,-5.931 -2.8815,-9.071 -3.5048,0.416 -7.0093,0.835 -10.5142,1.252 0.8239,8.555 5.2263,17.287 13.2544,21.111 7.8232,3.736 17.1891,3.783 25.3291,1.052 8.846,-3.103 15.737,-11.958 15.171,-21.537 0.05,-6.951 -4.272,-12.85 -9.134,-17.403 -4.526,-4.6949 -11.048,-8.3862 -12.401,-15.2748 -1.215,-2.3639 -0.889,-8.129 -0.889,-8.129 z m -0.6253,-20.5177 0,11.6509 11.6527,0 0,-11.6509 z"
	      }
	    ];
	    if (this.metadata.numberSIDC) {
	      //Number based SIDC
	      let mainIcon = icons[this.metadata.functionid.substr(0, 6)]; //Main symbol
	      //*
	      if (
	        typeof mainIcon === "undefined" &&
	        this.metadata.functionid.substr(4, 2) >= 95
	      ) {
	        //We have some special entity subtype and will try to find original symbol.
	        mainIcon = icons[this.metadata.functionid.substr(0, 4) + "00"];
	      }
	      //*/
	      if (typeof mainIcon === "undefined") {
	        if (
	          !(
	            this.metadata.functionid.substr(0, 6) == "000000" ||
	            this.metadata.functionid.substr(0, 6) == ""
	          )
	        ) {
	          drawArray2.push(undefinedIcon);
	          this.validIcon = false;
	          //console.log('Invalid icon code in SIDC: ' + this.options.sidc);
	        }
	      } else {
	        //Handle special cases of dismounted individual where weapons should be scaled
	        const symbolSet = String(this.options.sidc).substring(4, 6);
	        const mainSIDC = Number(this.metadata.functionid.substr(0, 6));
	        if (
	          /*this.metadata.dismounted*/ (symbolSet == "27" &&
	            mainSIDC >= 110301 &&
	            mainSIDC <= 110403) ||
	          (symbolSet == "15" &&
	            // Symbols that shouldn't scale
	            [
	              "130100",
	              "170000",
	              "170400",
	              "170600",
	              "170700",
	              "170800",
	              "170900",
	              "171100",
	              "200200",
	              "200300",
	              "200600",
	              "200700",
	              "200800",
	              "200900",
	              "201100",
	              "201301",
	              "201302",
	              "201400",
	              "210100",
	              "210200",
	              "210300",
	              "210400",
	              "210500",
	              "230200",
	              "250000"
	            ].indexOf(mainSIDC) == -1)
	          //this.metadata.landequipment
	        ) {
	          if (
	            this.metadata._modifier1 != "000" &&
	            this.metadata._modifier2 != "000"
	          ) {
	            mainIcon = [ms._scale(0.45, mainIcon, true)];
	          }
	          if (
	            this.metadata._modifier1 == "000" &&
	            this.metadata._modifier2 != "000"
	          ) {
	            mainIcon = [ms._translate(0, -10, ms._scale(0.7, mainIcon, true))];
	          }
	          if (
	            this.metadata._modifier1 != "000" &&
	            this.metadata._modifier2 == "000"
	          ) {
	            mainIcon = [ms._translate(0, 10, ms._scale(0.7, mainIcon, true))];
	          }
	          if (
	            this.metadata._modifier1 == "000" &&
	            this.metadata._modifier2 == "000"
	          ) {
	            // This is to make sure we reset the stroke width if the symbol shouldn't be scaled.
	            // Not the cleanest way to do it, but it works
	            // TODO to fix this in a better way, will probably never be done
	            mainIcon = [ms._scale(1, mainIcon, true)];
	          }
	        }
	        // End special case, just add to draw array
	        drawArray2.push(mainIcon);
	      }
	      if (specialbbox.hasOwnProperty(this.metadata.functionid.substr(0, 6))) {
	        gbbox = new ms.BBox(specialbbox[this.metadata.functionid.substr(0, 6)]);
	      }
	      if (this.metadata.functionid.substr(4, 2) == "95")
	        drawArray2.push(
	          iconParts["GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT"]
	        );
	      if (this.metadata.functionid.substr(4, 2) == "96")
	        drawArray2.push(iconParts["GR.IC.FF.DIVISION AND BELOW SUPPORT"]);
	      if (this.metadata.functionid.substr(4, 2) == "97")
	        drawArray2.push(iconParts["GR.IC.FF.CORPS SUPPORT"]);
	      if (this.metadata.functionid.substr(4, 2) == "98")
	        drawArray2.push(iconParts["GR.IC.FF.THEATRE SUPPORT"]);
	      //Modifier 1
	      if (this.metadata._modifier1.substr(0, 1) == "0") {
	        if (this.metadata.functionid.substr(6, 2) != "00") {
	          const modifier1 = m1[this.metadata.functionid.substr(6, 2)];
	          if (typeof modifier1 === "undefined") {
	            this.validIcon = false;
	          } else {
	            drawArray2.push(modifier1);
	          }
	        }
	      } else {
	        const modifier1 = m1[this.metadata._modifier1];
	        if (typeof modifier1 === "undefined") {
	          this.validIcon = false;
	        } else {
	          drawArray2.push(modifier1);
	        }
	      }

	      //Modifier 2
	      if (this.metadata._modifier2.substr(0, 1) == "0") {
	        if (this.metadata.functionid.substr(8, 2) != "00") {
	          const modifier2 = m2[this.metadata.functionid.substr(8, 2)];
	          if (typeof modifier2 === "undefined") {
	            this.validIcon = false;
	          } else {
	            drawArray2.push(modifier2);
	          }
	        }
	      } else {
	        const modifier2 = m2[this.metadata._modifier2];
	        if (typeof modifier2 === "undefined") {
	          this.validIcon = false;
	        } else {
	          drawArray2.push(modifier2);
	        }
	      }
	    } else {
	      //Letter based SIDC
	      const genericSIDC =
	        this.options.sidc.substr(0, 1) +
	        "-" +
	        this.options.sidc.substr(2, 1) +
	        "-" +
	        this.options.sidc.substr(4, 6);
	      if (icons.hasOwnProperty(genericSIDC)) {
	        drawArray2.push(icons[genericSIDC]);
	      } else {
	        if (
	          !(
	            this.options.sidc.substr(4, 6) == "------" ||
	            this.options.sidc.substr(4, 6) == ""
	          )
	        ) {
	          drawArray2.push(undefinedIcon);
	          this.validIcon = false;
	          //console.info("Invalid icon code in SIDC: " + this.options.sidc);
	        }
	      }
	      if (specialbbox[genericSIDC]) {
	        gbbox = new ms.BBox(specialbbox[genericSIDC]);
	      }
	    }
	  }
	  //outline
	  if (
	    !(this.style.frame && this.metadata.fill) ||
	    this.style.monoColor ||
	    this.metadata.controlMeasure
	  ) {
	    if (this.style.outlineWidth > 0)
	      drawArray1.push(
	        ms.outline(
	          drawArray2,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );
	  }
	  return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	}

	//Symbol Modifiers #######################################################################
	function modifier(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  const bbox = new ms.BBox(this.metadata.baseGeometry.bbox); // clone the bbox
	  const color = this.style.frameColor
	    ? this.style.frameColor[this.metadata.affiliation]
	    : this.colors.iconColor[this.metadata.affiliation];
	  const gbbox = new ms.BBox(); // bounding box for the added geometries
	  let geom;

	  const hqStaffLength = Number(this.style.hqStaffLength || ms._hqStaffLength);
	  if (this.metadata.headquarters && hqStaffLength > 0) {
	    //HEADQUARTERS
	    let y = 100;
	    if (
	      [
	        "AirFriend",
	        "AirNeutral",
	        "GroundFriend",
	        "GroundNeutral",
	        "SeaNeutral",
	        "SubsurfaceNeutral",
	      ].indexOf(this.metadata.dimension + this.metadata.affiliation) > -1
	    )
	      y = bbox.y2;
	    if (
	      this.metadata.dimensionType + this.metadata.affiliationType ==
	      "SubsurfaceFriend"
	    )
	      y = bbox.y1;
	    geom = {
	      type: "path",
	      d:
	        "M" +
	        bbox.x1 +
	        "," +
	        y +
	        " L" +
	        bbox.x1 +
	        "," +
	        (bbox.y2 + hqStaffLength),
	    };

	    //outline
	    if (this.style.outlineWidth > 0)
	      drawArray1.push(
	        ms.outline(
	          geom,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );

	    drawArray2.push(geom);
	    gbbox.y2 = bbox.y2 + hqStaffLength;
	  }
	  if (this.metadata.taskForce) {
	    //TASK FORCE
	    let width = {
	      "Corps/MEF": 110,
	      Army: 145,
	      "Army Group/front": 180,
	      "Region/Theater": 215,
	    };
	    width = width[this.metadata.echelon] || 90;
	    geom = {
	      type: "path",
	      d:
	        "M" +
	        (100 - width / 2) +
	        "," +
	        bbox.y1 +
	        " L" +
	        (100 - width / 2) +
	        "," +
	        (bbox.y1 - 40) +
	        " " +
	        (100 + width / 2) +
	        "," +
	        (bbox.y1 - 40) +
	        " " +
	        (100 + width / 2) +
	        "," +
	        bbox.y1,
	    };

	    //outline
	    if (this.style.outlineWidth > 0)
	      drawArray1.push(
	        ms.outline(
	          geom,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );

	    drawArray2.push(geom);
	    gbbox.x1 = Math.min(bbox.x1, 100 - width / 2);
	    gbbox.x2 = Math.max(bbox.x2, 100 + width / 2);
	    gbbox.y1 = bbox.y1 - 40;
	  }
	  if (this.metadata.installation) {
	    //INSTALLATION
	    let gapFiller = 0;
	    if (
	      ["AirHostile", "GroundHostile", "SeaHostile"].indexOf(
	        this.metadata.dimension + this.metadata.affiliation
	      ) > -1
	    )
	      gapFiller = 14;
	    if (
	      [
	        "AirUnknown",
	        "GroundUnknown",
	        "SeaUnknown",
	        "AirFriend",
	        "SeaFriend",
	      ].indexOf(this.metadata.dimension + this.metadata.affiliation) > -1
	    )
	      gapFiller = 2;
	    geom = {
	      type: "path",
	      fill: color,
	      d:
	        "M85," +
	        (bbox.y1 + gapFiller - this.style.strokeWidth / 2) +
	        " 85," +
	        (bbox.y1 - 10) +
	        " 115," +
	        (bbox.y1 - 10) +
	        " 115," +
	        (bbox.y1 + gapFiller - this.style.strokeWidth / 2) +
	        " 100," +
	        (bbox.y1 - this.style.strokeWidth) +
	        " Z",
	    };

	    //outline
	    if (this.style.outlineWidth > 0)
	      drawArray1.push(
	        ms.outline(
	          geom,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );

	    drawArray2.push(geom);
	    gbbox.merge({ y1: bbox.y1 - 10 });
	  }
	  if (this.metadata.feintDummy) {
	    //FEINT DUMMY
	    const topPoint = bbox.y1 - 0 - bbox.width() / 2;
	    geom = {
	      type: "path",
	      strokedasharray: ms._dashArrays.feintDummy,
	      d:
	        "M100," +
	        topPoint +
	        " L" +
	        bbox.x1 +
	        "," +
	        (bbox.y1 - 0) +
	        " M100," +
	        topPoint +
	        " L" +
	        bbox.x2 +
	        "," +
	        (bbox.y1 - 0),
	    };

	    //outline
	    if (this.style.outlineWidth > 0)
	      drawArray1.push(
	        ms.outline(
	          geom,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );

	    drawArray2.push(geom);
	    gbbox.merge({ y1: topPoint });
	  }
	  //Unit Size
	  if (this.metadata.echelon) {
	    const installationPadding = this.metadata.installation ? 15 : 0;
	    const echelons = {
	      "Team/Crew": {
	        g: [
	          { type: "circle", cx: 100, cy: bbox.y1 - 20, r: 15 },
	          {
	            type: "path",
	            d: "M80," + (bbox.y1 - 10) + "L120," + (bbox.y1 - 30),
	          },
	        ],
	        bbox: { y1: bbox.y1 - 40 - installationPadding },
	      },
	      Squad: {
	        g: [
	          {
	            type: "circle",
	            fill: color,
	            cx: 100,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	        ],
	        bbox: { y1: bbox.y1 - 20 - 7.5 - installationPadding },
	      },
	      Section: {
	        g: [
	          {
	            type: "circle",
	            fill: color,
	            cx: 115,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	          {
	            type: "circle",
	            fill: color,
	            cx: 85,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	        ],
	        bbox: { y1: bbox.y1 - 20 - 7.5 - installationPadding },
	      },
	      "Platoon/detachment": {
	        g: [
	          {
	            type: "circle",
	            fill: color,
	            cx: 100,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	          {
	            type: "circle",
	            fill: color,
	            cx: 70,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	          {
	            type: "circle",
	            fill: color,
	            cx: 130,
	            cy: bbox.y1 - 20,
	            r: 7.5,
	          },
	        ],
	        bbox: { y1: bbox.y1 - 20 - 7.5 - installationPadding },
	      },
	      "Company/battery/troop": {
	        g: [
	          {
	            type: "path",
	            d: "M100," + (bbox.y1 - 10) + "L100," + (bbox.y1 - 35),
	          },
	        ],
	        bbox: { y1: bbox.y1 - 40 - installationPadding },
	      },
	      "Battalion/squadron": {
	        g: [
	          {
	            type: "path",
	            d: "M90," + (bbox.y1 - 10) + "L90," + (bbox.y1 - 35),
	          },
	          {
	            type: "path",
	            d: "M110," + (bbox.y1 - 10) + "L110," + (bbox.y1 - 35),
	          },
	        ],
	        bbox: { y1: bbox.y1 - 40 - installationPadding },
	      },
	      "Regiment/group": {
	        g: [
	          {
	            type: "path",
	            d: "M100," + (bbox.y1 - 10) + "L100," + (bbox.y1 - 35),
	          },
	          {
	            type: "path",
	            d: "M120," + (bbox.y1 - 10) + "L120," + (bbox.y1 - 35),
	          },
	          { type: "path", d: "M80," + (bbox.y1 - 10) + "L80," + (bbox.y1 - 35) },
	        ],
	        bbox: { y1: bbox.y1 - 40 - installationPadding },
	      },
	      Brigade: {
	        g: [
	          {
	            type: "path",
	            d: "M87.5," + (bbox.y1 - 10) + " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: { y1: bbox.y1 - 15 - 25 - installationPadding },
	      },
	      Division: {
	        g: [
	          {
	            type: "path",
	            d:
	              "M70," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M105," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 70,
	          x2: 130,
	        },
	      },
	      "Corps/MEF": {
	        g: [
	          {
	            type: "path",
	            d:
	              "M52.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M87.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M122.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 52.5,
	          x2: 147.5,
	        },
	      },
	      Army: {
	        g: [
	          {
	            type: "path",
	            d:
	              "M35," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M70," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M105," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M140," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 35,
	          x2: 165,
	        },
	      },
	      "Army Group/front": {
	        g: [
	          {
	            type: "path",
	            d:
	              "M17.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M52.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M87.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M122.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25       M157.5," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 17.5,
	          x2: 182.5,
	        },
	      },
	      "Region/Theater": {
	        g: [
	          {
	            type: "path",
	            d:
	              "M0," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M35," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M70," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25   M105," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25    M140," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25     M175," +
	              (bbox.y1 - 10) +
	              " l25,-25 m0,25 l-25,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 0,
	          x2: 200,
	        },
	      },
	      Command: {
	        g: [
	          {
	            type: "path",
	            d:
	              "M70," +
	              (bbox.y1 - 22.5) +
	              " l25,0 m-12.5,12.5 l0,-25   M105," +
	              (bbox.y1 - 22.5) +
	              " l25,0 m-12.5,12.5 l0,-25",
	          },
	        ],
	        bbox: {
	          y1: bbox.y1 - 15 - 25 - installationPadding,
	          x1: 70,
	          x2: 130,
	        },
	      },
	    };
	    if (echelons.hasOwnProperty(this.metadata.echelon)) {
	      geom = echelons[this.metadata.echelon].g;

	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            { type: "translate", x: 0, y: -installationPadding, draw: geom },
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	      //geometry
	      drawArray2.push({
	        type: "translate",
	        x: 0,
	        y: -installationPadding,
	        draw: geom,
	      });
	      gbbox.merge(echelons[this.metadata.echelon].bbox);
	    }
	  }
	  //This is for movability indicators.
	  if (this.metadata.mobility) {
	    if (!this.style.frame) {
	      bbox.y2 = this.bbox.y2;
	    }
	    if (this.metadata.affiliation == "Neutral") {
	      if (
	        this.metadata.mobility == "Towed" ||
	        this.metadata.mobility == "Short towed array" ||
	        this.metadata.mobility == "Long towed Array"
	      ) {
	        bbox.y2 += 8;
	      }
	      if (
	        this.metadata.mobility == "Over snow (prime mover)" ||
	        this.metadata.mobility == "Sled"
	      ) {
	        bbox.y2 += 18;
	      }
	      if (this.metadata.mobility == "Barge") {
	        bbox.y2 += 5;
	      }
	    }
	    const mobilities = {
	      "Wheeled limited cross country": {
	        g: [
	          { type: "path", d: "M 53,1 l 94,0" },
	          { type: "circle", cx: 58, cy: 8, r: 8 },
	          { type: "circle", cx: 142, cy: 8, r: 8 },
	        ],
	        bbox: { y2: bbox.y2 + 8 * 2 },
	      },
	      "Wheeled cross country": {
	        g: [
	          { type: "path", d: "M 53,1 l 94,0" },
	          { type: "circle", cx: 58, cy: 8, r: 8 },
	          { type: "circle", cx: 142, cy: 8, r: 8 },
	          { type: "circle", cx: 100, cy: 8, r: 8 },
	        ],
	        bbox: { y2: bbox.y2 + 8 * 2 },
	      },
	      Tracked: {
	        g: [
	          {
	            type: "path",
	            d: "M 53,1 l 100,0 c15,0 15,15 0,15 l -100,0 c-15,0 -15,-15 0,-15",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 18, x1: 42, x2: 168 },
	      },
	      "Wheeled and tracked combination": {
	        g: [
	          { type: "circle", cx: 58, cy: 8, r: 8 },
	          {
	            type: "path",
	            d: "M 83,1 l 70,0 c15,0 15,15 0,15 l -70,0 c-15,0 -15,-15 0,-15",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 8 * 2, x2: 168 },
	      },
	      Towed: {
	        g: [
	          { type: "path", d: "M 63,1 l 74,0" },
	          { type: "circle", cx: 58, cy: 3, r: 8 },
	          { type: "circle", cx: 142, cy: 3, r: 8 },
	        ],
	        bbox: { y2: bbox.y2 + 10 },
	      },
	      Rail: {
	        g: [
	          { type: "path", d: "M 53,1 l 96,0" },
	          { type: "circle", cx: 58, cy: 8, r: 8 },
	          { type: "circle", cx: 73, cy: 8, r: 8 },
	          { type: "circle", cx: 127, cy: 8, r: 8 },
	          { type: "circle", cx: 142, cy: 8, r: 8 },
	        ],
	        bbox: { y2: bbox.y2 + 8 * 2 },
	      },
	      "Over snow (prime mover)": {
	        g: [{ type: "path", d: "M 50,-9 l10,10 90,0" }],
	        bbox: { y2: bbox.y2 + 9 },
	      },
	      Sled: {
	        g: [
	          {
	            type: "path",
	            d: "M 145,-12  c15,0 15,15 0,15 l -90,0 c-15,0 -15,-15 0,-15",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 15, x1: 42, x2: 168 },
	      },
	      "Pack animals": {
	        g: [{ type: "path", d: "M 80,20 l 10,-20 10,20 10,-20 10,20" }],
	        bbox: { y2: bbox.y2 + 20 },
	      },
	      Barge: {
	        g: [{ type: "path", d: "M 50,1 l 100,0 c0,10 -100,10 -100,0" }],
	        bbox: { y2: bbox.y2 + 10 },
	      },
	      Amphibious: {
	        g: [
	          {
	            type: "path",
	            d:
	              "M 65,10 c 0,-10 10,-10 10,0 0,10 10,10 10,0	0,-10 10,-10 10,0 0,10 10,10 10,0	0,-10 10,-10 10,0 0,10 10,10 10,0	0,-10 10,-10 10,0",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 20 },
	      },
	      "Short towed array": {
	        g: [
	          {
	            type: "path",
	            fill: color,
	            d:
	              "M 50,5 l 100,0 M50,0 l10,0 0,10 -10,0 z M150,0 l-10,0 0,10 10,0 z M100,0 l5,5 -5,5 -5,-5 z",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 10 },
	      },
	      "Long towed Array": {
	        g: [
	          {
	            type: "path",
	            fill: color,
	            d:
	              "M 50,5 l 100,0 M50,0 l10,0 0,10 -10,0 z M150,0 l-10,0 0,10 10,0 z M105,0 l-10,0 0,10 10,0 z M75,0 l5,5 -5,5 -5,-5 z  M125,0 l5,5 -5,5 -5,-5 z",
	          },
	        ],
	        bbox: { y2: bbox.y2 + 10 },
	      },
	    };
	    if (mobilities.hasOwnProperty(this.metadata.mobility)) {
	      geom = mobilities[this.metadata.mobility].g;
	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            { type: "translate", x: 0, y: bbox.y2, draw: geom },
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	      //geometry
	      drawArray2.push({ type: "translate", x: 0, y: bbox.y2, draw: geom });
	      gbbox.merge(mobilities[this.metadata.mobility].bbox);
	    }
	  }

	  //Dismounted Leadership
	  if (this.metadata.leadership) {
	    const leadership = {
	      Friend: {
	        type: "path",
	        d: "m 45,60 55,-25 55,25",
	      }, /*,
	      Neutral: { type: "path", d: "m 45,60 55,-25 55,25" },
	      Hostile: { type: "path", d: "m 42,71 57.8,-43.3 58.2,42.8" },
	      Unknown: { type: "path", d: "m 50,60 10,-20 80,0 10,20" }//*/
	    }[this.metadata.affiliation];
	    //if (this.metadata.leadership == "Deputy Individual")
	    //  leadership.strokedasharray = ms._dashArrays.feintDummy;
	    if (leadership) {
	      drawArray1.push(leadership);
	      gbbox.merge({ y1: bbox.y1 - 20 });
	    }
	  }
	  //Assign fill, stroke and stroke-width
	  for (let i = 0; i < drawArray1.length; i++) {
	    if (!drawArray1[i].hasOwnProperty("fill")) drawArray1[i].fill = false;
	    if (!drawArray1[i].hasOwnProperty("stroke")) drawArray1[i].stroke = color;
	    if (!drawArray1[i].hasOwnProperty("strokewidth"))
	      drawArray1[i].strokewidth = this.style.strokeWidth;
	  }
	  for (let i = 0; i < drawArray2.length; i++) {
	    if (!drawArray2[i].hasOwnProperty("fill")) drawArray2[i].fill = false;
	    if (!drawArray2[i].hasOwnProperty("stroke")) drawArray2[i].stroke = color;
	    if (!drawArray2[i].hasOwnProperty("strokewidth"))
	      drawArray2[i].strokewidth = this.style.strokeWidth;
	  }

	  return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	}

	//Sets modifiers depending of status #####################################################
	function statusmodifier(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  const bbox = this.metadata.baseGeometry.bbox;
	  let y1 = bbox.y1;
	  let y2 = bbox.y2;

	  if (this.metadata.condition) {
	    if (
	      this.metadata.fill &&
	      this.style.monoColor === "" &&
	      !this.style.simpleStatusModifier
	    ) {
	      const colors = {
	        FullyCapable: "rgb(0,255,0)",
	        Damaged: "rgb(255,255,0)",
	        Destroyed: "rgb(255,0,0)",
	        FullToCapacity: "rgb(0, 180, 240)",
	      };
	      //If it is unframed and equipment use the bottom of the icon
	      if (!this.metadata.frame && this.metadata.iconBottom) {
	        y2 = this.metadata.iconBottom;
	      }
	      // If we have headquartersElement add space for the text
	      if (this.options.headquartersElement) {
	        y2 += 35;
	      }
	      //If we have a mobility indicator we need to make space for it.
	      y2 += this.metadata.mobility ? 25 : 5;
	      //Add the bar to the geometry
	      drawArray2.push({
	        type: "path",
	        strokewidth: this.style.strokeWidth,
	        fill: colors[this.metadata.condition],
	        stroke: this.colors.frameColor[this.metadata.affiliation],
	        d:
	          "M" +
	          bbox.x1 +
	          "," +
	          y2 +
	          " l" +
	          bbox.width() +
	          ",0 0,25 -" +
	          bbox.width() +
	          ",0 z",
	      });
	      //Add the hight of the codition bar to the geometry bounds
	      y2 += 25;
	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            drawArray2,
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	    } else {
	      if (
	        this.metadata.condition == "Damaged" ||
	        this.metadata.condition == "Destroyed"
	      ) {
	        drawArray2.push({
	          type: "path",
	          d: "M150,20 L50,180",
	          strokewidth: this.style.strokeWidth * 2,
	          stroke: this.colors.frameColor[this.metadata.affiliation],
	        });
	        //Add space for the modifier to the geometry bounds
	        y1 = 20;
	        y2 = 180;
	      }
	      if (this.metadata.condition == "Destroyed")
	        drawArray2.push({
	          type: "path",
	          d: "M50,20 L150,180",
	          strokewidth: this.style.strokeWidth * 2,
	          stroke: this.colors.frameColor[this.metadata.affiliation],
	        });
	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            drawArray2,
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	    }
	  }

	  //A bounding box only needs the values that might change
	  return { pre: drawArray1, post: drawArray2, bbox: { y1: y1, y2: y2 } };
	}

	// Engagment bar ##################################################################################
	function engagement(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  const bbox = this.bbox;
	  let x1 = bbox.x1;
	  let x2 = bbox.x2;
	  let y1 = bbox.y1;
	  const y2 = bbox.y2;

	  if (this.options.engagementBar !== "") {
	    y1 -= 6;
	    const fontFamily = this.style.fontfamily;
	    const fontColor =
	      this.colors.iconColor[this.metadata.affiliation] ||
	      this.colors.iconColor["Friend"];

	    drawArray2.push({
	      type: "text",
	      text: this.options.engagementBar,
	      x: 100,
	      y: bbox.y1 - 11,
	      textanchor: "middle",
	      fontsize: 22,
	      fontfamily: fontFamily,
	      fontweight: "bold",
	      fill: fontColor,
	      stroke: false,
	    });

	    let color = false;
	    if (this.metadata.fill && this.style.monoColor === "") {
	      const colors = {
	        TARGET: "rgb(255, 0, 0)",
	        "NON-TARGET": "rgb(255, 255, 255)",
	        EXPIRED: "rgb(255, 120, 0)",
	      };
	      color =
	        colors[this.options.engagementType.toUpperCase()] ||
	        this.colors.fillColor[this.metadata.affiliation];
	    }
	    // Bar width
	    const width = Math.max(bbox.width(), this.options.engagementBar.length * 16);
	    x1 = Math.min(x1, 100 - width / 2);
	    x2 = Math.max(x2, 100 + width / 2);

	    //Add the bar to the geometry
	    drawArray2.unshift({
	      type: "path",
	      strokewidth: this.style.strokeWidth,
	      fill: color,
	      stroke: this.colors.frameColor[this.metadata.affiliation],
	      d:
	        "M" +
	        (100 - width / 2) +
	        "," +
	        y1 +
	        " l" +
	        width +
	        ",0 0,-25 -" +
	        width +
	        ",0 z",
	    });

	    //Add the hight of the codition bar to the geometry bounds
	    y1 -= 25;
	    //outline
	    if (this.style.outlineWidth > 0) {
	      let outline;
	      if (this.metadata.fill && this.style.monoColor === "") {
	        outline = drawArray2[0];
	      } else {
	        outline = drawArray2;
	      }
	      drawArray1.push(
	        ms.outline(
	          outline,
	          this.style.outlineWidth,
	          this.style.strokeWidth,
	          typeof this.style.outlineColor === "object"
	            ? this.style.outlineColor[this.metadata.affiliation]
	            : this.style.outlineColor
	        )
	      );
	    }
	  }

	  //A bounding box only needs the values that might change
	  return {
	    pre: drawArray1,
	    post: drawArray2,
	    bbox: { x1: x1, x2: x2, y1: y1, y2: y2 },
	  };
	}

	//Affiliation and dimension addons to base geometries ####################################
	function affliationdimension(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  let bbox = this.metadata.baseGeometry.bbox;
	  const frameColor = this.colors.frameColor[this.metadata.affiliation];
	  //Draws the a question mark for some unknown or other dimension symbols
	  if (this.metadata.dimensionUnknown && frameColor) {
	    drawArray2.push({
	      type: "text",
	      text: "?",
	      x: 100,
	      y: 127,
	      fill: frameColor,
	      fontfamily: this.style.fontfamily,
	      fontsize: 80,
	      fontweight: "bold",
	      textanchor: "middle",
	    });
	  }
	  //If we don't have a geometry we shouldn't add anything.
	  if (this.metadata.baseGeometry.g && frameColor) {
	    let spacing = 10;
	    if (
	      this.metadata.affiliation == "Unknown" ||
	      (this.metadata.affiliation == "Hostile" &&
	        this.metadata.dimension != "Subsurface")
	    ) {
	      spacing = -10;
	    }
	    if (this.metadata.context == "Exercise") {
	      if (!(this.metadata.joker || this.metadata.faker)) {
	        drawArray2.push({
	          type: "text",
	          text: "X",
	          x: bbox.x2 + spacing,
	          y: 50,
	          fill: frameColor,
	          fontfamily: this.style.fontfamily,
	          fontsize: 35,
	          fontweight: "bold",
	          textanchor: "start",
	        });
	      }
	      if (this.metadata.joker) {
	        drawArray2.push({
	          type: "text",
	          text: "J",
	          x: bbox.x2 + spacing,
	          y: 50,
	          fill: frameColor,
	          fontfamily: this.style.fontfamily,
	          fontsize: 35,
	          fontweight: "bold",
	          textanchor: "start",
	        });
	      }
	      if (this.metadata.faker) {
	        drawArray2.push({
	          type: "text",
	          text: "K",
	          x: bbox.x2 + spacing,
	          y: 50,
	          fill: frameColor,
	          fontfamily: this.style.fontfamily,
	          fontsize: 35,
	          fontweight: "bold",
	          textanchor: "start",
	        });
	      }
	      bbox = { x2: bbox.x2 + spacing + 22, y1: 50 - 25 };
	    }
	    if (this.metadata.context == "Simulation") {
	      drawArray2.push({
	        type: "text",
	        text: "S",
	        x: bbox.x2 + spacing,
	        y: 50,
	        fill: frameColor,
	        fontfamily: this.style.fontfamily,
	        fontsize: 35,
	        fontweight: "bold",
	        textanchor: "start",
	      });
	      bbox = new ms.BBox({ x2: bbox.x2 + spacing + 22, y1: 50 - 25 });
	    }
	  }
	  //outline
	  if (this.style.outlineWidth > 0)
	    drawArray1.push(
	      ms.outline(
	        drawArray2,
	        this.style.outlineWidth,
	        this.style.strokeWidth,
	        typeof this.style.outlineColor === "object"
	          ? this.style.outlineColor[this.metadata.affiliation]
	          : this.style.outlineColor
	      )
	    );
	  return { pre: drawArray1, post: drawArray2, bbox: bbox };
	}

	//Text Fields ############################################################################
	function textfields(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  const bbox = this.metadata.baseGeometry.bbox;
	  const fontColor =
	    (typeof this.style.infoColor === "object"
	      ? this.style.infoColor[this.metadata.affiliation]
	      : this.style.infoColor) ||
	    this.colors.iconColor[this.metadata.affiliation] ||
	    this.colors.iconColor["Friend"];
	  const fontFamily = this.style.fontfamily;
	  const fontSize = this.style.infoSize;

	  const infoBackground =
	    typeof this.style.infoBackground === "object"
	      ? this.style.infoBackground[this.metadata.affiliation]
	      : this.style.infoBackground;
	  const infoBackgroundFrame =
	    typeof this.style.infoBackground === "object"
	      ? this.style.infoBackground[this.metadata.affiliation]
	      : this.style.infoBackground;

	  const gbbox = new ms.BBox();
	  const spaceTextIcon = 20; //The distance between the Icon and the labels

	  //Text fields overrides
	  function labelOverride(label) {
	    const texts = [];
	    let labelbox;
	    for (const i in label) {
	      if (this.options.hasOwnProperty(i) && this.options[i] != "") {
	        if (!label.hasOwnProperty(i)) continue;
	        for (let j = 0; j < (label[i].length || 1); j++) {
	          let lbl;
	          if (Array.isArray(label[i])) {
	            lbl = label[i][j];
	          } else {
	            lbl = label[i];
	          }
	          labelbox = { y2: lbl.y, y1: lbl.y - lbl.fontsize };
	          if (lbl.textanchor == "start") {
	            labelbox.x1 = lbl.x;
	            labelbox.x2 =
	              lbl.x + strWidth(this.options[i]) * (lbl.fontsize / fontSize);
	          }
	          if (lbl.textanchor == "middle") {
	            const w = strWidth(this.options[i]) * (lbl.fontsize / fontSize);
	            labelbox.x1 = lbl.x - w / 2;
	            labelbox.x2 = lbl.x + w / 2;
	          }
	          //if(lbl.textanchor == 'middle'){}
	          if (lbl.textanchor == "end") {
	            labelbox.x1 =
	              lbl.x - strWidth(this.options[i]) * (lbl.fontsize / fontSize);
	            labelbox.x2 = lbl.x;
	          }
	          gbbox.merge(labelbox);
	          const text = {
	            type: "text",
	            fontfamily: fontFamily,
	            fill: fontColor,
	          };
	          if (lbl.hasOwnProperty("alignmentBaseline"))
	            text.alignmentBaseline = lbl.alignmentBaseline;
	          if (lbl.hasOwnProperty("fill")) text.fill = lbl.fill;
	          if (lbl.hasOwnProperty("stroke")) text.stroke = lbl.stroke;
	          if (lbl.hasOwnProperty("textanchor"))
	            text.textanchor = lbl.textanchor;
	          if (lbl.hasOwnProperty("fontsize")) text.fontsize = lbl.fontsize;
	          if (lbl.hasOwnProperty("fontweight"))
	            text.fontweight = lbl.fontweight;
	          text.x = lbl.x;
	          text.y = lbl.y;
	          text.text = this.options[i];
	          texts.push(text);
	        }
	      }
	    }
	    return texts;
	  }

	  //Function to calculate the width of a string
	  function strWidth(str) {
	    if (str.length == 0) return 0;
	    //We need to calculate how long our string will be in pixels
	    // Calculated by dev/char-width.html
	    // If there is a better way, please make a pull request
	    const strWidths = {
	      0: 19,
	      1: 19,
	      2: 19,
	      3: 19,
	      4: 19,
	      5: 19,
	      6: 19,
	      7: 19,
	      8: 19,
	      9: 19,
	      " ": 10,
	      "!": 10,
	      '"': 12,
	      "#": 19,
	      $: 19,
	      "%": 30,
	      "&": 23,
	      "'": 7,
	      "(": 11,
	      ")": 11,
	      "*": 13,
	      "+": 20,
	      ",": 10,
	      "-": 11,
	      ".": 10,
	      "/": 10,
	      ":": 10,
	      ";": 10,
	      "<": 20,
	      "=": 20,
	      ">": 20,
	      "?": 19,
	      "@": 34,
	      "{": 12,
	      "|": 9,
	      "}": 12,
	      "~": 20,
	      "[": 10,
	      "]": 10,
	      "^": 16,
	      _: 19,
	      "`": 11,
	      A: 23,
	      B: 23,
	      C: 24,
	      D: 24,
	      E: 23,
	      F: 21,
	      G: 26,
	      H: 24,
	      I: 10,
	      J: 17,
	      K: 23,
	      L: 19,
	      M: 28,
	      N: 24,
	      O: 26,
	      P: 23,
	      Q: 26,
	      R: 24,
	      S: 23,
	      T: 21,
	      U: 24,
	      V: 23,
	      W: 32,
	      X: 23,
	      Y: 23,
	      Z: 21,
	      a: 19,
	      b: 19,
	      c: 17,
	      d: 19,
	      e: 19,
	      f: 10,
	      g: 19,
	      h: 19,
	      i: 8,
	      j: 8,
	      k: 17,
	      l: 8,
	      m: 28,
	      n: 19,
	      o: 19,
	      p: 19,
	      q: 19,
	      r: 11,
	      s: 17,
	      t: 10,
	      u: 19,
	      v: 17,
	      w: 24,
	      x: 17,
	      y: 17,
	      z: 17,
	      А: 23,
	      а: 19,
	      Б: 22,
	      б: 19,
	      В: 23,
	      в: 18,
	      Г: 18,
	      г: 13,
	      Д: 23,
	      д: 20,
	      Е: 23,
	      е: 19,
	      Ё: 23,
	      ё: 19,
	      Ж: 31,
	      ж: 23,
	      З: 20,
	      з: 16,
	      И: 24,
	      и: 19,
	      Й: 24,
	      й: 19,
	      К: 20,
	      к: 15,
	      Л: 22,
	      л: 20,
	      М: 28,
	      м: 23,
	      Н: 24,
	      н: 19,
	      О: 26,
	      о: 19,
	      П: 24,
	      п: 18,
	      Р: 23,
	      р: 19,
	      С: 24,
	      с: 17,
	      Т: 21,
	      т: 16,
	      У: 21,
	      у: 17,
	      Ф: 26,
	      ф: 28,
	      Х: 23,
	      х: 17,
	      Ц: 25,
	      ц: 19,
	      Ч: 22,
	      ч: 18,
	      Ш: 31,
	      ш: 27,
	      Щ: 31,
	      щ: 28,
	      Ъ: 27,
	      ъ: 21,
	      Ы: 30,
	      ы: 24,
	      Ь: 22,
	      ь: 18,
	      Э: 24,
	      э: 17,
	      Ю: 34,
	      ю: 25,
	      Я: 24,
	      я: 18,
	    };
	    let w = 0;
	    for (let i = 0; i < str.length; i++) {
	      //If we dont know how wide the char is, set it to 28.5 that is the width of W and no char is wider than that.
	      w += (fontSize / 30) * (strWidths[str[i]] ? strWidths[str[i]] : 28.5);
	    }
	    //This is for the space between the text and the symbol.
	    w += spaceTextIcon;
	    return w;
	  }

	  // Print text in right position
	  function text(str) {
	    let size = 42;
	    const y = 100;
	    if (str.length == 1) {
	      size = 45;
	    }
	    if (str.length == 3) {
	      size = 35;
	    }
	    if (str.length == 4) {
	      size = 32;
	    }
	    if (str.length == 5) {
	      size = 29;
	    }
	    if (str.length == 6) {
	      size = 26;
	    }
	    if (str.length == 7) {
	      size = 25;
	    }
	    if (str.length >= 8) {
	      size = 24;
	    }
	    const t = {
	      type: "text",
	      text: str,
	      x: 100,
	      y: y,
	      textanchor: "middle",
	      alignmentBaseline: "middle",
	      fontsize: size,
	      fontfamily: fontFamily,
	      fill: fontColor,
	      stroke: false,
	      fontweight: "bold",
	    };
	    return t;
	  }
	  let i, genericSIDC;
	  if (this.metadata.numberSIDC) {
	    //Number based SIDCs.
	    if (!ms._labelCache.hasOwnProperty("number")) {
	      ms._labelCache["number"] = {};
	      for (i in ms._labelOverrides["number"]) {
	        if (!ms._labelOverrides["number"].hasOwnProperty(i)) continue;
	        ms._labelOverrides["number"][i].call(this, ms._labelCache["number"]);
	      }
	    }
	    genericSIDC = this.metadata.functionid.substr(0, 6);

	    if (
	      this.metadata.controlMeasure &&
	      ms._labelCache["number"].hasOwnProperty(genericSIDC)
	    ) {
	      drawArray2.push(
	        labelOverride.call(this, ms._labelCache["number"][genericSIDC])
	      );

	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            drawArray2,
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	      return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	    }
	  } else {
	    //Letter based SIDCs.
	    if (!ms._labelCache.hasOwnProperty("letter")) {
	      ms._labelCache["letter"] = {};
	      for (i in ms._labelOverrides["letter"]) {
	        if (!ms._labelOverrides["letter"].hasOwnProperty(i)) continue;
	        ms._labelOverrides["letter"][i].call(this, ms._labelCache["letter"]);
	      }
	    }
	    genericSIDC =
	      this.options.sidc.substr(0, 1) +
	      "-" +
	      this.options.sidc.substr(2, 1) +
	      "-" +
	      this.options.sidc.substr(4, 6);
	    if (ms._labelCache["letter"].hasOwnProperty(genericSIDC)) {
	      drawArray2.push(
	        labelOverride.call(this, ms._labelCache["letter"][genericSIDC])
	      );

	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.push(
	          ms.outline(
	            drawArray2,
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	      return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	    }
	  }

	  //Check that we have some texts to print
	  const textFields =
	    this.options.quantity ||
	    this.options.reinforcedReduced ||
	    this.options.staffComments ||
	    this.options.additionalInformation ||
	    this.options.evaluationRating ||
	    this.options.combatEffectiveness ||
	    this.options.signatureEquipment ||
	    this.options.higherFormation ||
	    this.options.hostile ||
	    this.options.iffSif ||
	    this.options.sigint ||
	    this.options.uniqueDesignation ||
	    this.options.type ||
	    this.options.dtg ||
	    this.options.altitudeDepth ||
	    this.options.location ||
	    this.options.speed ||
	    this.options.specialHeadquarters ||
	    this.options.platformType ||
	    this.options.equipmentTeardownTime ||
	    this.options.commonIdentifier ||
	    this.options.auxiliaryEquipmentIndicator ||
	    this.options.headquartersElement ||
	    this.options.installationComposition ||
	    this.options.guardedUnit ||
	    this.options.specialDesignator;
	  if (this.style.infoFields && textFields) {
	    if (this.options.specialHeadquarters) {
	      drawArray2.push(text(this.options.specialHeadquarters));
	    }
	    if (this.options.quantity && !this.metadata.dismounted) {
	      //geometry
	      drawArray2.push({
	        type: "text",
	        text: this.options.quantity,
	        x: 100,
	        y: bbox.y1 - 10,
	        textanchor: "middle",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	      gbbox.y1 = bbox.y1 - 10 - fontSize;
	    }
	    if (this.options.headquartersElement) {
	      /*
	      if (
	        this.metadata.condition &&
	        this.metadata.fill &&
	        this.style.monoColor == ""
	      ) {
	        //Add the hight of the codition bar to the geometry bounds
	        bbox.y2 += 15;
	      }
	      //*/
	      //geometry
	      drawArray2.push({
	        type: "text",
	        text: this.options.headquartersElement,
	        x: 100,
	        y: bbox.y2 + 35,
	        textanchor: "middle",
	        fontsize: 35,
	        fontfamily: fontFamily,
	        fontweight: "bold",
	        fill: fontColor,
	        stroke: false,
	      });
	      gbbox.y2 = bbox.y2 + 35;
	    }

	    const gStrings = {
	      L1: "",
	      L2: "",
	      L3: "",
	      L4: "",
	      L5: "",
	      R1: "",
	      R2: "",
	      R3: "",
	      R4: "",
	      R5: "",
	    }; //Text information on left and right sIde.
	    let a;
	    //Air & Space (They should be different but we skip that at the moment) TODO
	    if (!isNaN(this.options.sidc) && this.metadata.baseDimension == "Air") {
	      gStrings.R1 = this.options.uniqueDesignation;
	      gStrings.R2 = this.options.iffSif;
	      gStrings.R3 = this.options.type;
	      if (this.options.speed || this.options.altitudeDepth) {
	        a = [];
	        if (this.options.speed) a.push(this.options.speed);
	        if (this.options.altitudeDepth) a.push(this.options.altitudeDepth);
	        gStrings.R4 = a.join("/");
	      }
	      if (this.options.staffComments || this.options.additionalInformation) {
	        a = [];
	        if (this.options.staffComments) a.push(this.options.staffComments);
	        if (this.options.additionalInformation)
	          a.push(this.options.additionalInformation);
	        gStrings.R5 = a.join("/");
	      }
	    }
	    //Land or letterbased SIDC
	    if (isNaN(this.options.sidc) || this.metadata.baseDimension == "Ground") {
	      gStrings.L1 = this.options.dtg;
	      if (this.options.altitudeDepth || this.options.location) {
	        a = [];
	        if (this.options.altitudeDepth) a.push(this.options.altitudeDepth);
	        if (this.options.location) a.push(this.options.location);
	        gStrings.L2 = a.join("/");
	      }
	      gStrings.L4 = this.options.uniqueDesignation;
	      gStrings.L5 = this.options.speed;
	      gStrings.R2 = this.options.staffComments;
	      gStrings.R4 = this.options.higherFormation;
	      if (
	        this.options.evaluationRating ||
	        this.options.combatEffectiveness ||
	        this.options.signatureEquipment ||
	        this.options.hostile ||
	        this.options.iffSif
	      ) {
	        a = [];
	        if (this.options.evaluationRating)
	          a.push(this.options.evaluationRating);
	        if (this.options.combatEffectiveness)
	          a.push(this.options.combatEffectiveness);
	        if (this.options.signatureEquipment)
	          a.push(this.options.signatureEquipment);
	        if (this.options.hostile) a.push(this.options.hostile);
	        if (this.options.iffSif) a.push(this.options.iffSif);
	        gStrings.R5 = a.join("/");
	      }
	      if (isNaN(this.options.sidc) || this.metadata.unit) {
	        if (
	          this.options.type ||
	          this.options.platformType ||
	          this.options.equipmentTeardownTime
	        ) {
	          a = [];
	          if (this.options.type) a.push(this.options.type);
	          if (this.options.platformType) a.push(this.options.platformType);
	          if (this.options.equipmentTeardownTime)
	            a.push(this.options.equipmentTeardownTime);
	          gStrings.L3 = a.join("/");
	        }
	        gStrings.R1 = this.options.reinforcedReduced;
	        if (this.metadata.activity) gStrings.R1 = this.options.country;
	        if (
	          this.options.additionalInformation ||
	          this.options.commonIdentifier
	        ) {
	          a = [];
	          if (this.options.additionalInformation)
	            a.push(this.options.additionalInformation);
	          if (this.options.commonIdentifier)
	            a.push(this.options.commonIdentifier);
	          gStrings.R3 = a.join("/");
	        }
	      } else {
	        if (
	          this.options.type ||
	          this.options.platformType ||
	          this.options.commonIdentifier ||
	          this.options.installationComposition
	        ) {
	          a = [];
	          if (this.options.type) a.push(this.options.type);
	          if (this.options.platformType) a.push(this.options.platformType);
	          if (this.options.commonIdentifier)
	            a.push(this.options.commonIdentifier);
	          if (this.options.installationComposition)
	            a.push(this.options.installationComposition);
	          gStrings.L3 = a.join("/");
	        }
	        gStrings.R1 = this.options.country;
	        if (
	          this.options.additionalInformation ||
	          this.options.equipmentTeardownTime
	        ) {
	          a = [];
	          if (this.options.additionalInformation)
	            a.push(this.options.additionalInformation);
	          if (this.options.equipmentTeardownTime)
	            a.push(this.options.equipmentTeardownTime);
	          gStrings.R3 = a.join("/");
	        }
	      }
	    }
	    // Dismounted individual
	    if (this.metadata.dismounted) {
	      if (this.options.quantity) {
	        //geometry
	        drawArray2.push({
	          type: "text",
	          text: this.options.quantity,
	          x: 100,
	          y: bbox.y2 + fontSize,
	          textanchor: "middle",
	          fontsize: fontSize,
	          fontfamily: fontFamily,
	          fill: fontColor,
	          stroke: false,
	        });
	        gbbox.y2 = bbox.y2 + fontSize;
	      }

	      gStrings.L1 = this.options.dtg;
	      if (this.options.altitudeDepth || this.options.location) {
	        a = [];
	        if (this.options.altitudeDepth) a.push(this.options.altitudeDepth);
	        if (this.options.location) a.push(this.options.location);
	        gStrings.L2 = a.join("/");
	      }
	      if (
	        this.options.type ||
	        this.options.platformType ||
	        this.options.commonIdentifier
	      ) {
	        a = [];
	        if (this.options.type) a.push(this.options.type);
	        if (this.options.platformType) a.push(this.options.platformType);
	        if (this.options.commonIdentifier)
	          a.push(this.options.commonIdentifier);
	        gStrings.L3 = a.join("/");
	      }
	      gStrings.L4 = this.options.uniqueDesignation;
	      gStrings.L5 = this.options.speed;
	      gStrings.R1 = this.options.country;
	      gStrings.R2 = this.options.staffComments;
	      if (this.options.additionalInformation) {
	        a = [];
	        if (this.options.additionalInformation)
	          a.push(this.options.additionalInformation);

	        gStrings.R3 = a.join("/");
	      }
	      gStrings.R4 = this.options.higherFormation;
	      if (
	        this.options.evaluationRating ||
	        this.options.combatEffectiveness ||
	        this.options.signatureEquipment ||
	        this.options.hostile ||
	        this.options.iffSif
	      ) {
	        a = [];
	        if (this.options.evaluationRating)
	          a.push(this.options.evaluationRating);
	        if (this.options.combatEffectiveness)
	          a.push(this.options.combatEffectiveness);
	        if (this.options.signatureEquipment)
	          a.push(this.options.signatureEquipment);
	        if (this.options.hostile) a.push(this.options.hostile);
	        if (this.options.iffSif) a.push(this.options.iffSif);
	        gStrings.R5 = a.join("/");
	      }
	    }

	    //Sea numberbased SIDC
	    if (!isNaN(this.options.sidc) && this.metadata.baseDimension == "Sea") {
	      if (this.options.guardedUnit || this.options.specialDesignator) {
	        a = [];
	        if (this.options.guardedUnit) a.push(this.options.guardedUnit);
	        if (this.options.specialDesignator)
	          a.push(this.options.specialDesignator);
	        gStrings.L1 = a.join("/");
	      }
	      gStrings.R1 = this.options.uniqueDesignation;
	      gStrings.R2 = this.options.type;
	      gStrings.R3 = this.options.iffSif;
	      if (this.options.staffComments || this.options.additionalInformation) {
	        a = [];
	        if (this.options.staffComments) a.push(this.options.staffComments);
	        if (this.options.additionalInformation)
	          a.push(this.options.additionalInformation);
	        gStrings.R4 = a.join("/");
	      }
	      if (this.options.location || this.options.speed) {
	        a = [];
	        if (this.options.location) a.push(this.options.location);
	        if (this.options.speed) a.push(this.options.speed);
	        gStrings.R5 = a.join("/");
	      }
	    }
	    //Sub numberbased SIDC
	    if (
	      !isNaN(this.options.sidc) &&
	      this.metadata.baseDimension == "Subsurface"
	    ) {
	      gStrings.L1 = this.options.specialDesignator;
	      gStrings.R1 = this.options.uniqueDesignation;
	      gStrings.R2 = this.options.type;
	      gStrings.R3 = this.options.altitudeDepth;
	      gStrings.R4 = this.options.staffComments;
	      gStrings.R5 = this.options.additionalInformation;
	    }

	    //Add space on left side
	    gbbox.x1 =
	      bbox.x1 -
	      Math.max(
	        this.options.specialHeadquarters
	          ? (strWidth(this.options.specialHeadquarters) -
	              this.metadata.baseGeometry.bbox.width()) /
	              2
	          : 0,
	        this.options.quantity
	          ? (strWidth(this.options.quantity) -
	              this.metadata.baseGeometry.bbox.width()) /
	              2
	          : 0,
	        strWidth(gStrings.L1),
	        strWidth(gStrings.L2),
	        strWidth(gStrings.L3),
	        strWidth(gStrings.L4),
	        strWidth(gStrings.L5)
	      );

	    //Space on right side
	    gbbox.x2 =
	      bbox.x2 +
	      Math.max(
	        this.options.specialHeadquarters
	          ? (strWidth(this.options.specialHeadquarters) -
	              this.metadata.baseGeometry.bbox.width()) /
	              2
	          : 0,
	        this.options.quantity
	          ? (strWidth(this.options.quantity) -
	              this.metadata.baseGeometry.bbox.width()) /
	              2
	          : 0,
	        strWidth(gStrings.R1),
	        strWidth(gStrings.R2),
	        strWidth(gStrings.R3),
	        strWidth(gStrings.R4),
	        strWidth(gStrings.R5)
	      );

	    //Extra space above for field 1
	    if (gStrings.L1 || gStrings.R1) {
	      gbbox.y1 = Math.min(gbbox.y1, 100 - 2.5 * fontSize);
	    }
	    //Extra space above for field 2
	    if (gStrings.L2 || gStrings.R2) {
	      gbbox.y1 = Math.min(gbbox.y1, 100 - 1.5 * fontSize);
	    }
	    //Extra space below for field 4
	    if (gStrings.L4 || gStrings.R4) {
	      gbbox.y2 = Math.max(gbbox.y2, 100 + 1.7 * fontSize);
	    }
	    //Extra space below for field 5
	    if (gStrings.L5 || gStrings.R5) {
	      gbbox.y2 = Math.max(gbbox.y2, 100 + 2.7 * fontSize);
	    }

	    // Background boxes behind text
	    if (this.style.infoBackground) {
	      let leftBox = { x1: 100, y1: 1000, y2: 0 };
	      let rightBox = { x2: 100, y1: 1000, y2: 0 };
	      if (gStrings.L1)
	        leftBox = {
	          x1: Math.min(leftBox.x1, bbox.x1 - strWidth(gStrings.L1)),
	          x2: bbox.x1 - spaceTextIcon / 2,
	          y1: Math.min(leftBox.y1, 100 - 2.5 * fontSize),
	          y2: Math.max(leftBox.y2, 100 - 1.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.L2)
	        leftBox = {
	          x1: Math.min(leftBox.x1, bbox.x1 - strWidth(gStrings.L2)),
	          x2: bbox.x1 - spaceTextIcon / 2,
	          y1: Math.min(leftBox.y1, 100 - 1.5 * fontSize),
	          y2: Math.max(leftBox.y2, 100 - 0.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.L3)
	        leftBox = {
	          x1: Math.min(leftBox.x1, bbox.x1 - strWidth(gStrings.L3)),
	          x2: bbox.x1 - spaceTextIcon / 2,
	          y1: Math.min(leftBox.y1, 100 - 0.5 * fontSize),
	          y2: Math.max(leftBox.y2, 100 + 0.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.L4)
	        leftBox = {
	          x1: Math.min(leftBox.x1, bbox.x1 - strWidth(gStrings.L4)),
	          x2: bbox.x1 - spaceTextIcon / 2,
	          y1: Math.min(leftBox.y1, 100 + 0.5 * fontSize),
	          y2: Math.max(leftBox.y2, 100 + 1.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.L5)
	        leftBox = {
	          x1: Math.min(leftBox.x1, bbox.x1 - strWidth(gStrings.L5)),
	          x2: bbox.x1 - spaceTextIcon / 2,
	          y1: Math.min(leftBox.y1, 100 + 1.5 * fontSize),
	          y2: Math.max(leftBox.y2, 100 + 2.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (leftBox.hasOwnProperty("x2")) {
	        gbbox.x1 -= fontSize / 2;
	        drawArray2.push({
	          type: "path",
	          d:
	            "M " +
	            (leftBox.x1 - fontSize / 2) +
	            "," +
	            (leftBox.y1 + fontSize / 2) +
	            " " +
	            leftBox.x1 +
	            "," +
	            leftBox.y1 +
	            " " +
	            leftBox.x2 +
	            "," +
	            leftBox.y1 +
	            " " +
	            leftBox.x2 +
	            "," +
	            leftBox.y2 +
	            " " +
	            (leftBox.x1 - fontSize / 2) +
	            "," +
	            leftBox.y2 +
	            "z",
	          fill: infoBackground,
	          stroke: infoBackgroundFrame || false,
	        });
	      }
	      if (gStrings.R1)
	        rightBox = {
	          x1: bbox.x2 + spaceTextIcon / 2,
	          x2: Math.max(rightBox.x2, bbox.x2 + strWidth(gStrings.R1)),
	          y1: Math.min(rightBox.y1, 100 - 2.5 * fontSize),
	          y2: Math.max(rightBox.y2, 100 - 1.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.R2)
	        rightBox = {
	          x1: bbox.x2 + spaceTextIcon / 2,
	          x2: Math.max(rightBox.x2, bbox.x2 + strWidth(gStrings.R2)),
	          y1: Math.min(rightBox.y1, 100 - 1.5 * fontSize),
	          y2: Math.max(rightBox.y2, 100 - 0.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.R3)
	        rightBox = {
	          x1: bbox.x2 + spaceTextIcon / 2,
	          x2: Math.max(rightBox.x2, bbox.x2 + strWidth(gStrings.R3)),
	          y1: Math.min(rightBox.y1, 100 - 0.5 * fontSize),
	          y2: Math.max(rightBox.y2, 100 + 0.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.R4)
	        rightBox = {
	          x1: bbox.x2 + spaceTextIcon / 2,
	          x2: Math.max(rightBox.x2, bbox.x2 + strWidth(gStrings.R4)),
	          y1: Math.min(rightBox.y1, 100 + 0.5 * fontSize),
	          y2: Math.max(rightBox.y2, 100 + 1.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (gStrings.R5)
	        rightBox = {
	          x1: bbox.x2 + spaceTextIcon / 2,
	          x2: Math.max(rightBox.x2, bbox.x2 + strWidth(gStrings.R5)),
	          y1: Math.min(rightBox.y1, 100 + 1.5 * fontSize),
	          y2: Math.max(rightBox.y2, 100 + 2.5 * fontSize + spaceTextIcon / 2),
	        };
	      if (rightBox.hasOwnProperty("x1")) {
	        gbbox.x2 += fontSize / 2;
	        drawArray2.push({
	          type: "path",
	          d:
	            "M " +
	            rightBox.x1 +
	            "," +
	            rightBox.y1 +
	            " " +
	            (rightBox.x2 + fontSize / 2) +
	            "," +
	            rightBox.y1 +
	            " " +
	            (rightBox.x2 + fontSize / 2) +
	            "," +
	            (rightBox.y2 - fontSize / 2) +
	            " " +
	            rightBox.x2 +
	            "," +
	            rightBox.y2 +
	            " " +
	            rightBox.x1 +
	            "," +
	            rightBox.y2 +
	            "z",
	          fill: infoBackground,
	          stroke: infoBackgroundFrame || false,
	        });
	      }
	    }
	    //geometries
	    if (gStrings.L1)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.L1,
	        x: bbox.x1 - spaceTextIcon,
	        y: 100 - 1.5 * fontSize,
	        textanchor: "end",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.L2)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.L2,
	        x: bbox.x1 - spaceTextIcon,
	        y: 100 - 0.5 * fontSize,
	        textanchor: "end",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.L3)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.L3,
	        x: bbox.x1 - spaceTextIcon,
	        y: 100 + 0.5 * fontSize,
	        textanchor: "end",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.L4)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.L4,
	        x: bbox.x1 - spaceTextIcon,
	        y: 100 + 1.5 * fontSize,
	        textanchor: "end",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.L5)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.L5,
	        x: bbox.x1 - spaceTextIcon,
	        y: 100 + 2.5 * fontSize,
	        textanchor: "end",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });

	    //geometries
	    if (gStrings.R1)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.R1,
	        x: bbox.x2 + spaceTextIcon,
	        y: 100 - 1.5 * fontSize,
	        textanchor: "start",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.R2)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.R2,
	        x: bbox.x2 + spaceTextIcon,
	        y: 100 - 0.5 * fontSize,
	        textanchor: "start",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.R3)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.R3,
	        x: bbox.x2 + spaceTextIcon,
	        y: 100 + 0.5 * fontSize,
	        textanchor: "start",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.R4)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.R4,
	        x: bbox.x2 + spaceTextIcon,
	        y: 100 + 1.5 * fontSize,
	        textanchor: "start",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });
	    if (gStrings.R5)
	      drawArray2.push({
	        type: "text",
	        text: gStrings.R5,
	        x: bbox.x2 + spaceTextIcon,
	        y: 100 + 2.5 * fontSize,
	        textanchor: "start",
	        fontsize: fontSize,
	        fontfamily: fontFamily,
	        fill: fontColor,
	        stroke: false,
	      });

	    //outline
	    if (
	      this.style.infoOutlineWidth > 0 ||
	      (this.style.infoOutlineWidth === false && this.style.outlineWidth > 0)
	    )
	      drawArray1.push(
	        ms.outline(
	          drawArray2,
	          this.style.infoOutlineWidth === false
	            ? this.style.outlineWidth
	            : this.style.infoOutlineWidth,
	          this.style.strokeWidth,
	          this.style.infoOutlineColor
	            ? this.style.infoOutlineColor
	            : typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	        )
	      );
	  }
	  return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	}

	//Direction Arrow #######################################################################
	function directionarrow(ms) {
	  const drawArray1 = [];
	  const drawArray2 = [];
	  let bbox = this.metadata.baseGeometry.bbox;
	  if (this.metadata.baseGeometry.g == "") {
	    // in the case we don't have any frame
	    bbox = this.bbox; //Set bbox to the current symbols bounds
	  }
	  const gbbox = new ms.BBox();
	  const color =
	    this.colors.iconColor[this.metadata.affiliation] ||
	    this.colors.iconColor["Friend"];
	  let arrow;
	  if (this.style.infoFields) {
	    if (this.options.direction !== "") {
	      if (this.options.speedLeader == 0) {
	        // Movement indicator
	        // The length of the lines in a direction of movement indicator are
	        // a bit discussed but I use one frame height. (=100px)
	        const arrowLength = 95;
	        arrow = [
	          {
	            type: "rotate",
	            degree: this.options.direction,
	            x: 100,
	            y: 100,
	            draw: [
	              {
	                type: "path",
	                fill: color,
	                stroke: color,
	                strokewidth: this.style.strokeWidth,
	                d:
	                  "M100,100 l0,-" +
	                  (arrowLength - 20) +
	                  " -5,3 5,-15 5,15 -5,-3",
	              },
	            ],
	          },
	        ];

	        gbbox.y1 = Math.min(
	          100 -
	            Math.cos((this.options.direction / 360) * Math.PI * 2) *
	              arrowLength,
	          100
	        );
	        gbbox.y2 = Math.max(
	          100 -
	            Math.cos((this.options.direction / 360) * Math.PI * 2) *
	              arrowLength,
	          100
	        );
	        gbbox.x1 = Math.min(
	          100 +
	            Math.sin((this.options.direction / 360) * Math.PI * 2) *
	              arrowLength,
	          100
	        );
	        gbbox.x2 = Math.max(
	          100 +
	            Math.sin((this.options.direction / 360) * Math.PI * 2) *
	              arrowLength,
	          100
	        );

	        if (
	          this.metadata.baseDimension == "Ground" ||
	          this.metadata.baseDimension == ""
	        ) {
	          if (!this.metadata.headquarters) {
	            // For all symbols not headquarters
	            arrow = [
	              { type: "translate", x: 0, y: bbox.y2, draw: arrow },
	              {
	                type: "path",
	                fill: color,
	                stroke: color,
	                strokewidth: this.style.strokeWidth,
	                d: "M 100," + bbox.y2 + "l0," + 100,
	              },
	            ];
	          } else {
	            // For headquarters
	            arrow = [
	              {
	                type: "translate",
	                x: bbox.x1 - 100,
	                y:
	                  bbox.y2 -
	                  (100 - (this.style.hqStaffLength || ms._hqStaffLength)),
	                draw: arrow,
	              },
	            ];
	            gbbox.x1 += bbox.x1 - 100;
	            gbbox.x2 += bbox.x1 - 100;
	          }
	        }
	        gbbox.y2 += bbox.y2 + parseFloat(this.style.strokeWidth);
	        drawArray2.push(arrow);
	      } else {
	        // This is speed leader
	        const length = this.options.speedLeader * (100 / this.style.size);
	        const rad = (this.options.direction * Math.PI) / 180;
	        const y = -length * Math.cos(rad);
	        const x = length * Math.sin(rad);

	        gbbox.x1 = Math.min(100, 100 + x);
	        gbbox.x2 = Math.max(100, 100 + x);
	        gbbox.y1 = Math.min(100, 100 + y);
	        gbbox.y2 = Math.max(100, 100 + y);
	        arrow = {
	          type: "path",
	          fill: color,
	          stroke: color,
	          strokewidth: this.style.strokeWidth,
	          d: "M 100,100  l" + x + "," + y,
	        };
	        drawArray1.push(arrow);
	      }
	      //outline
	      if (this.style.outlineWidth > 0)
	        drawArray1.unshift(
	          ms.outline(
	            arrow,
	            this.style.outlineWidth,
	            this.style.strokeWidth,
	            typeof this.style.outlineColor === "object"
	              ? this.style.outlineColor[this.metadata.affiliation]
	              : this.style.outlineColor
	          )
	        );
	    }
	  }
	  return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	}

	//Debug ##################################################################################
	function debug(ms) {
	  //This debug function is a minimal example of how to extend milsymbol.
	  //Create a variable to store your geometries
	  const drawArray1 = [];
	  const drawArray2 = [];
	  //Get a new bounding box and modify it if your geometry extends outside the current bounds.
	  const gbbox = new ms.BBox();
	  //Draws the icon octagon
	  drawArray2.push({
	    type: "path",
	    fill: false,
	    stroke: "rgb(0,0,255)",
	    strokewidth: 1,
	    d:
	      "m 120,60 0,80 m -40,-80 0,80 m -20,-20 80,0 m 0,-40 -80,0 M 100,50 135.35534,64.64466 150,100 135.35534,135.35534 100,150.00002 64.644661,135.35534 50,100 64.644661,64.64466 z",
	  });
	  return { pre: drawArray1, post: drawArray2, bbox: gbbox };
	}

	function BBox(box) {
	  if (typeof box === "undefined") {
	    box = {};
	  }
	  return {
	    x1: typeof box.x1 !== "undefined" ? box.x1 : 100,
	    y1: typeof box.y1 !== "undefined" ? box.y1 : 100,
	    x2: typeof box.x2 !== "undefined" ? box.x2 : 100,
	    y2: typeof box.y2 !== "undefined" ? box.y2 : 100,
	    width: function() {
	      return this.x2 - this.x1;
	    },
	    height: function() {
	      return this.y2 - this.y1;
	    },
	    getSize: function() {
	      return {
	        height: this.y2 - this.y1,
	        width: this.x2 - this.x1,
	      };
	    },
	    merge: function(box) {
	      this.x1 = box.x1 <= this.x1 ? box.x1 : this.x1;
	      this.y1 = box.y1 <= this.y1 ? box.y1 : this.y1;
	      this.x2 = box.x2 >= this.x2 ? box.x2 : this.x2;
	      this.y2 = box.y2 >= this.y2 ? box.y2 : this.y2;
	      return this;
	    },
	  };
	}

	function Colormode(
	  civilian,
	  friend,
	  hostile,
	  neutral,
	  unknown,
	  suspect
	) {
	  const o = {};
	  o.Civilian = civilian;
	  o.Friend = friend;
	  o.Hostile = hostile;
	  o.Neutral = neutral;
	  o.Unknown = unknown;
	  o.Suspect = suspect;
	  return o;
	}

	function outline(geom, outline, stroke, color) {
	  function process(geom, outline, stroke, color) {
	    let clone;
	    if (Array.isArray(geom)) {
	      clone = [];
	      for (const i in geom) {
	        clone.push(process(geom[i], outline, stroke, color));
	      }
	    } else {
	      clone = {};
	      for (const key in geom) {
	        if (["fill", "fillopacity"].indexOf(key) == -1) {
	          clone[key] = geom[key];
	        }
	      }
	      if (
	        geom.type == "translate" ||
	        geom.type == "rotate" ||
	        geom.type == "scale"
	      ) {
	        clone.draw = [];
	        for (const draw in geom.draw) {
	          clone.draw.push(process(geom.draw[draw], outline, stroke, color));
	        }
	      } else {
	        clone.strokewidth =
	          clone.stroke !== false
	            ? Number(clone.strokewidth || stroke) + 2 * outline
	            : 2 * outline;
	        clone.stroke = color;
	        clone.fill = false;
	        clone.linecap = "round";
	      }
	    }
	    return clone;
	  }
	  return process(geom, outline, stroke, color);
	}

	var geometries = {
	  AirHostile: {
	    g: { type: "path", d: "M 45,150 L45,70 100,20 155,70 155,150" },
	    bbox: new BBox({ x1: 45, y1: 20, x2: 45 + 110, y2: 20 + 130 }),
	  },
	  AirFriend: {
	    g: {
	      type: "path",
	      d: "M 155,150 C 155,50 115,30 100,30 85,30 45,50 45,150",
	    },
	    bbox: new BBox({ x1: 45, y1: 30, x2: 45 + 110, y2: 30 + 120 }),
	  },
	  AirNeutral: {
	    g: { type: "path", d: "M 45,150 L 45,30,155,30,155,150" },
	    bbox: new BBox({ x1: 45, y1: 30, x2: 45 + 110, y2: 30 + 120 }),
	  },
	  AirUnknown: {
	    g: {
	      type: "path",
	      d: "M 65,150 c -55,0 -50,-90 0,-90 0,-50 70,-50 70,0 50,0 55,90 0,90",
	    },
	    bbox: new BBox({ x1: 25, y1: 20, x2: 25 + 150, y2: 20 + 130 }),
	  },
	  GroundHostile: {
	    g: { type: "path", d: "M 100,28 L172,100 100,172 28,100 100,28 Z" },
	    bbox: new BBox({ x1: 28, y1: 28, x2: 28 + 144, y2: 28 + 144 }),
	  },
	  GroundFriend: {
	    g: { type: "path", d: "M25,50 l150,0 0,100 -150,0 z" },
	    bbox: new BBox({ x1: 25, y1: 50, x2: 25 + 150, y2: 50 + 100 }),
	  },
	  GroundNeutral: {
	    g: { type: "path", d: "M45,45 l110,0 0,110 -110,0 z" },
	    bbox: new BBox({ x1: 45, y1: 45, x2: 45 + 110, y2: 45 + 110 }),
	  },
	  GroundUnknown: {
	    g: {
	      type: "path",
	      d:
	        "M63,63 C63,20 137,20 137,63 C180,63 180,137 137,137 C137,180 63,180 63,137 C20,137 20,63 63,63 Z",
	    },
	    bbox: new BBox({
	      x1: 30.75,
	      y1: 30.75,
	      x2: 30.75 + 138.5,
	      y2: 30.75 + 138.5,
	    }),
	  },
	  LandDismountedIndividualHostile: {
	    g: { type: "path", d: "M 100,28 L172,100 100,172 28,100 100,28 Z" },
	    bbox: new BBox({ x1: 28, y1: 28, x2: 28 + 144, y2: 28 + 144 }),
	  },
	  LandDismountedIndividualFriend: {
	    g: { type: "path", d: "m 100,45 55,25 0,60 -55,25 -55,-25 0,-60 z" },
	    bbox: new BBox({ x1: 45, y1: 45, x2: 45 + 110, y2: 45 + 110 }),
	  },
	  LandDismountedIndividualNeutral: {
	    g: { type: "path", d: "M45,45 l110,0 0,110 -110,0 z" },
	    bbox: new BBox({ x1: 45, y1: 45, x2: 45 + 110, y2: 45 + 110 }),
	  },
	  LandDismountedIndividualUnknown: {
	    g: {
	      type: "path",
	      d:
	        "M63,63 C63,20 137,20 137,63 C180,63 180,137 137,137 C137,180 63,180 63,137 C20,137 20,63 63,63 Z",
	    },
	    bbox: new BBox({
	      x1: 30.75,
	      y1: 30.75,
	      x2: 30.75 + 138.5,
	      y2: 30.75 + 138.5,
	    }),
	  },
	  SeaHostile: {
	    g: { type: "path", d: "M100,28 L172,100 100,172 28,100 100,28 Z" },
	    bbox: new BBox({ x1: 28, y1: 28, x2: 28 + 144, y2: 28 + 144 }),
	  },
	  SeaFriend: {
	    g: { type: "circle", cx: 100, cy: 100, r: 60 },
	    bbox: new BBox({ x1: 40, y1: 40, x2: 40 + 120, y2: 40 + 120 }),
	  },
	  SeaNeutral: {
	    g: { type: "path", d: "M45,45 l110,0 0,110 -110,0 z" },
	    bbox: new BBox({ x1: 45, y1: 45, x2: 45 + 110, y2: 45 + 110 }),
	  },
	  SeaUnknown: {
	    g: {
	      type: "path",
	      d:
	        "M63,63 C63,20 137,20 137,63 C180,63 180,137 137,137 C137,180 63,180 63,137 C20,137 20,63 63,63 Z",
	    },
	    bbox: new BBox({
	      x1: 30.75,
	      y1: 30.75,
	      x2: 30.75 + 138.5,
	      y2: 30.75 + 138.5,
	    }),
	  },
	  SubsurfaceHostile: {
	    g: { type: "path", d: "M45,50 L45,130 100,180 155,130 155,50" },
	    bbox: new BBox({ x1: 45, y1: 50, x2: 45 + 110, y2: 50 + 130 }),
	  },
	  SubsurfaceFriend: {
	    g: { type: "path", d: "m 45,50 c 0,100 40,120 55,120 15,0 55,-20 55,-120" },
	    bbox: new BBox({ x1: 45, y1: 50, x2: 45 + 110, y2: 50 + 120 }),
	  },
	  SubsurfaceNeutral: {
	    g: { type: "path", d: "M45,50 L45,170 155,170 155,50" },
	    bbox: new BBox({ x1: 45, y1: 50, x2: 45 + 110, y2: 50 + 120 }),
	  },
	  SubsurfaceUnknown: {
	    g: {
	      type: "path",
	      d: "m 65,50 c -55,0 -50,90 0,90 0,50 70,50 70,0 50,0 55,-90 0,-90",
	    },
	    bbox: new BBox({ x1: 25, y1: 50, x2: 25 + 150, y2: 50 + 130 }),
	  },
	  PositionMarker: {
	    g: { type: "circle", cx: 100, cy: 100, r: 15 },
	    bbox: new BBox({ x1: 85, y1: 85, x2: 115, y2: 115 }),
	  },
	};

	const ms = new (function() {
	  this._autoValidation = false;
	  this.version = "3.0.0";
	  if (typeof console === "object" && typeof process !== "object") {
	    console.info(
	      "milsymbol.js " +
	        this.version +
	        " - Copyright (c) 2024 M" +
	        String.fromCharCode(229) +
	        "ns Beckman  http://www.spatialillusions.com"
	    );
	  }
	})();

	ms.setColorMode = function(mode, colorMode) {
	  this._colorModes[mode] = {};
	  this._colorModes[mode].Hostile = colorMode.Hostile;
	  this._colorModes[mode].Friend = colorMode.Friend;
	  this._colorModes[mode].Neutral = colorMode.Neutral;
	  this._colorModes[mode].Unknown = colorMode.Unknown;
	  this._colorModes[mode].Civilian = colorMode.Civilian;
	  this._colorModes[mode].Suspect = colorMode.Suspect;
	  return this._colorModes[mode];
	};

	ms.addSymbolPart = function(part) {
	  if (typeof part === "function") {
	    const symbolParts = ms.getSymbolParts();
	    if (symbolParts.indexOf(part) == -1)
	      ms.setSymbolParts(symbolParts.concat(part));
	  }
	  return ms;
	};

	ms.getSymbolParts = function() {
	  return this._symbolParts.slice(0);
	};

	ms.setSymbolParts = function(parts) {
	  this._symbolParts = parts;
	  return ms;
	};

	ms.reset = function() {
	  this._brokenPath2D = undefined;
	  this._colorModes = {};
	  for (const name in ColorModes) {
	    ms.setColorMode(name, ColorModes[name]);
	  }
	  this._dashArrays = {
	    pending: "4,4",
	    anticipated: "8,12",
	    feintDummy: "8,8",
	  };
	  this._getIcons = {};
	  this._getMetadata = {};
	  this._hqStaffLength = 100;
	  this._iconCache = {}; // A cache of icn to speed stuff up...
	  this._iconParts = [];
	  this._labelCache = {}; // A cache of label overrides to speed stuff up...
	  this._labelOverrides = {};
	  this._iconSIDC = {};
	  this._iconSIDC.letter = [];
	  this._iconSIDC.number = [];
	  this._STD2525 = true;
	  this._svgNS = "http://www.w3.org/2000/svg";
	  this._symbolParts = [];
	  ms.addSymbolPart(basegeometry);
	  ms.addSymbolPart(icon);
	  ms.addSymbolPart(modifier);
	  ms.addSymbolPart(statusmodifier);
	  ms.addSymbolPart(engagement);
	  ms.addSymbolPart(affliationdimension);
	  ms.addSymbolPart(textfields);
	  ms.addSymbolPart(directionarrow);
	};

	ms.reset();

	ms.BBox = BBox;
	ms.ColorMode = Colormode;

	ms.setBrokenPath2D = function(broken) {
	  ms._brokenPath2D = broken;
	};

	ms._getIconParts = function iconparts(
	  metadata,
	  colors,
	  _STD2525,
	  monoColor,
	  alternateMedal
	) {
	  const icn = {};

	  for (const i in this._iconParts) {
	    if (!this._iconParts.hasOwnProperty(i)) continue;
	    this._iconParts[i].call(
	      this,
	      icn,
	      metadata,
	      colors,
	      _STD2525,
	      monoColor,
	      alternateMedal
	    );
	  }

	  return icn;
	};

	ms._scale = function(factor, instruction, non_scaling_stroke) {
	  function recurse_scale(instruction, factor) {
	    if (Array.isArray(instruction)) {
	      instruction.forEach(d => {
	        d.non_scaling_stroke = 1 / factor;
	        if (d.hasOwnProperty("draw")) {
	          recurse_scale(d.draw, factor);
	        }
	        if (Array.isArray(d)) {
	          d.forEach(e => {
	            recurse_scale(e, factor);
	          });
	        }
	      });
	    } else {
	      instruction.non_scaling_stroke = 1 / factor;
	    }
	  }

	  if (non_scaling_stroke) {
	    recurse_scale(instruction, factor);
	  }

	  return {
	    type: "translate",
	    x: 100 - factor * 100,
	    y: 100 - factor * 100,
	    draw: [{ type: "scale", factor: factor, draw: [instruction] }],
	  };
	};
	ms._translate = function(x, y, instruction) {
	  return { type: "translate", x: x, y: y, draw: [instruction] };
	};

	ms.addIconParts = function(parts) {
	  if (!Array.isArray(parts)) parts = [parts];
	  for (let i = 0; i < parts.length; i++) {
	    if (
	      typeof parts[i] === "function" &&
	      this._iconParts.indexOf(parts[i]) == -1
	    ) {
	      this._iconParts = this._iconParts.concat(parts[i]);
	    }
	  }
	  return ms;
	};
	ms.addLabelOverrides = function(parts, type) {
	  this._labelCache = {}; // Clear the cache
	  if (typeof parts === "function") {
	    if (!this._labelOverrides.hasOwnProperty(type)) {
	      this._labelOverrides[type] = [];
	    }
	    this._labelOverrides[type] = this._labelOverrides[type].concat(parts);
	  }
	  return ms;
	};

	ms.addIcons = function(obj) {
	  this._iconCache = {}; // Clear the cache
	  if (!Array.isArray(obj)) obj = [obj];
	  for (let i = 0; i < obj.length; i++) {
	    if (obj[i].hasOwnProperty("getMetadata"))
	      ms._getMetadata[obj[i].type] = obj[i].getMetadata;
	    if (obj[i].hasOwnProperty("getIcons"))
	      ms._getIcons[obj[i].type] = obj[i].getIcons;
	    if (obj[i].hasOwnProperty("iconParts")) ms.addIconParts(obj[i].iconParts);
	    if (obj[i].hasOwnProperty("labels"))
	      ms.addLabelOverrides(obj[i].labels, obj[i].type);
	    if (obj[i].hasOwnProperty("icons"))
	      ms.addSIDCicons(obj[i].icons, obj[i].type);
	  }
	};

	ms.addSIDCicons = function(parts, type) {
	  if (typeof parts === "function") {
	    if (this._iconSIDC[type].indexOf(parts) == -1)
	      this._iconSIDC[type] = this._iconSIDC[type].concat(parts);
	  }
	  return ms;
	};

	ms.getColorMode = function(mode) {
	  const c = this._colorModes[mode];
	  // Clone the mode and return the clone
	  return new ms.ColorMode(
	    c.Civilian,
	    c.Friend,
	    c.Hostile,
	    c.Neutral,
	    c.Unknown,
	    c.Suspect
	  );
	};
	ms.getDashArrays = function() {
	  return this._dashArrays;
	};
	ms.getHqStaffLength = function() {
	  return this._hqStaffLength;
	};

	ms.getVersion = function() {
	  return this.version;
	};

	ms.outline = outline;

	ms.setDashArrays = function(pending, anticipated, feintDummy) {
	  this._dashArrays.pending = pending;
	  this._dashArrays.anticipated = anticipated;
	  this._dashArrays.feintDummy = feintDummy;
	  return this._dashArrays;
	};
	ms.setHqStaffLength = function(len) {
	  this._hqStaffLength = len;
	  return this._hqStaffLength;
	};

	ms.setStandard = function(standard) {
	  if (standard == "2525") {
	    this._STD2525 = true;
	    return true;
	  }
	  if (standard == "APP6") {
	    this._STD2525 = false;
	    return true;
	  }
	  return false;
	};

	ms.showOctagon = function() {
	  ms.addSymbolPart(debug);
	};

	ms._symbolGeometries = geometries;

	function asCanvas(ratio) {
	  if (typeof ms._brokenPath2D == "undefined") {
	    /* 
	      In EdgeHTML14 Microsoft implemented support for Path2D, but they didn't implement support 
	      for initiating it with a SVG path, and if you initiate it with an SVG path, it will not throw 
	      an error, instead it will return an empty path and log a warning.
	      This will check for that behaviour and make sure we use the workaround if Path2D is broken. 
	      //*/
	    if (typeof Path2D == "undefined") {
	      // If Path2D dosen't exist it is definetly broken
	      ms.setBrokenPath2D(true);
	    } else {
	      // If Path2D exists we need to check if it is broken
	      const canv = document.createElement("canvas");
	      canv.widht = 1;
	      canv.height = 1;
	      const _ctx = canv.getContext("2d");
	      // Draw an SVG path to the canvas...
	      const p = new Path2D("M0 0 h 10 v 10 h -10 Z");
	      _ctx.fill(p);
	      // Pick a pixel and see if it is filled with black... (if not SVG is not working)
	      const data = _ctx.getImageData(0, 0, 1, 1).data.join();
	      ms.setBrokenPath2D(!(data == "0,0,0,255"));
	    }
	  }

	  const canvas = document.createElement("canvas");
	  //TODO fix the pixel ratio
	  ratio = ratio || 1; //window.devicePixelRatio || 1;
	  canvas.width = this.width * ratio;
	  canvas.height = this.height * ratio;
	  //canvas.style.width = this.width +'px';
	  //canvas.style.height = this.height +'px';
	  const ctx = canvas.getContext("2d");
	  ctx.scale((ratio * this.style.size) / 100, (ratio * this.style.size) / 100);
	  ctx.translate(
	    -(this.bbox.x1 - this.style.strokeWidth - this.style.outlineWidth),
	    -(this.bbox.y1 - this.style.strokeWidth - this.style.outlineWidth)
	  );
	  this.canvasDraw.call(this, ctx, this.drawInstructions);
	  return canvas;
	}

	function asOffscreenCanvas(ratio) {
	  if (typeof ms._brokenPath2D == "undefined") {
	    /* 
	      In EdgeHTML14 Microsoft implemented support for Path2D, but they didn't implement support 
	      for initiating it with a SVG path, and if you initiate it with an SVG path, it will not throw 
	      an error, instead it will return an empty path and log a warning.
	      This will check for that behaviour and make sure we use the workaround if Path2D is broken. 
	      //*/
	    if (typeof Path2D == "undefined") {
	      // If Path2D dosen't exist it is definetly broken
	      ms.setBrokenPath2D(true);
	    } else {
	      // If Path2D exists we need to check if it is broken
	      const canv = new OffscreenCanvas(1, 1);
	      const _ctx = canv.getContext("2d");
	      // Draw an SVG path to the canvas...
	      const p = new Path2D("M0 0 h 10 v 10 h -10 Z");
	      _ctx.fill(p);
	      // Pick a pixel and see if it is filled with black... (if not SVG is not working)
	      const data = _ctx.getImageData(0, 0, 1, 1).data.join();
	      ms.setBrokenPath2D(!(data == "0,0,0,255"));
	    }
	  }

	  //TODO fix the pixel ratio
	  ratio = ratio || 1; //window.devicePixelRatio || 1;
	  const canvas = new OffscreenCanvas(this.width * ratio, this.height * ratio);
	  const ctx = canvas.getContext("2d");
	  ctx.scale((ratio * this.style.size) / 100, (ratio * this.style.size) / 100);
	  ctx.translate(
	    -(this.bbox.x1 - this.style.strokeWidth - this.style.outlineWidth),
	    -(this.bbox.y1 - this.style.strokeWidth - this.style.outlineWidth)
	  );
	  this.canvasDraw.call(this, ctx, this.drawInstructions);
	  return canvas;
	}

	function canvasDraw(ctx, instruction) {
	  for (let i = 0; i < instruction.length; i++) {
	    if (Array.isArray(instruction[i])) {
	      if (instruction[i].length) {
	        canvasDraw.call(this, ctx, instruction[i]);
	      }
	    } else {
	      if (typeof instruction[i] === "object") {
	        ctx.lineWidth =
	          (instruction[i].non_scaling_stroke || 1) *
	          (instruction[i].strokewidth || this.style.strokeWidth);
	        if (typeof instruction[i].stroke !== "undefined") {
	          if (instruction[i].stroke) {
	            ctx.strokeStyle = instruction[i].stroke;
	          } else {
	            ctx.strokeStyle = "rgba(0,0,0,0)";
	          }
	        }
	        if (instruction[i].strokedasharray) {
	          ctx.setLineDash(instruction[i].strokedasharray.split(","));
	        } else {
	          if (ctx.getLineDash().length != 0) {
	            ctx.setLineDash([]);
	          }
	        }
	        if (instruction[i].linecap) {
	          ctx.lineCap = instruction[i].linecap;
	          ctx.lineJoin = instruction[i].linecap;
	        }
	        if (instruction[i].fill) {
	          ctx.fillStyle = instruction[i].fill;
	        }
	        //fill is set to false, make it transparent
	        if (!instruction[i].fill) {
	          ctx.fillStyle = "rgba(0,0,0,0)";
	        }

	        if (typeof instruction[i].fillopacity !== "undefined") {
	          ctx.globalAlpha = instruction[i].fillopacity;
	        }
	        let x, y;
	        switch (instruction[i].type) {
	          case "path":
	            if (!ms._brokenPath2D) {
	              const d = new Path2D(instruction[i].d);
	              if (instruction[i].hasOwnProperty("clipPath")) {
	                ctx.save();
	                ctx.clip(new Path2D(instruction[i].clipPath), "nonzero");
	              }
	              if (
	                typeof instruction[i].fill === "undefined" ||
	                (typeof instruction[i].fill !== "undefined" &&
	                  instruction[i].fill)
	              )
	                ctx.fill(d);
	              if (instruction[i].hasOwnProperty("clipPath")) {
	                ctx.restore();
	              }
	              if (ctx.globalAlpha != 1) ctx.globalAlpha = 1; //We never have transparent strokes
	              if (
	                typeof instruction[i].stroke === "undefined" ||
	                (typeof instruction[i].stroke !== "undefined" &&
	                  instruction[i].stroke)
	              )
	                ctx.stroke(d);
	            } else {
	              if (typeof ms.Path2D === "function") {
	                ms.Path2D(ctx, instruction[i].d);
	                if (
	                  typeof instruction[i].fill === "undefined" ||
	                  (typeof instruction[i].fill !== "undefined" &&
	                    instruction[i].fill)
	                )
	                  ctx.fill();
	                if (ctx.globalAlpha != 1) ctx.globalAlpha = 1;
	                if (
	                  typeof instruction[i].stroke === "undefined" ||
	                  (typeof instruction[i].stroke !== "undefined" &&
	                    instruction[i].stroke)
	                )
	                  ctx.stroke();
	              } else {
	                console.warn("ms.Path2D() is not present");
	              }
	            }
	            break;
	          case "circle":
	            if (instruction[i].hasOwnProperty("clipPath")) {
	              ctx.save();
	              ctx.clip(new Path2D(instruction[i].clipPath), "nonzero");
	            }
	            ctx.beginPath();
	            ctx.arc(
	              instruction[i].cx,
	              instruction[i].cy,
	              instruction[i].r,
	              0,
	              2 * Math.PI,
	              false
	            );
	            if (
	              typeof instruction[i].fill === "undefined" ||
	              (typeof instruction[i].fill !== "undefined" &&
	                instruction[i].fill)
	            )
	              ctx.fill();
	            if (instruction[i].hasOwnProperty("clipPath")) {
	              ctx.restore();
	            }
	            if (
	              typeof instruction[i].stroke === "undefined" ||
	              (typeof instruction[i].stroke !== "undefined" &&
	                instruction[i].stroke)
	            )
	              ctx.stroke();
	            break;
	          case "text":
	            ctx.font =
	              (typeof instruction[i].fontweight !== "undefined"
	                ? instruction[i].fontweight + " "
	                : "") +
	              instruction[i].fontsize +
	              "px " +
	              instruction[i].fontfamily;
	            ctx.textAlign =
	              instruction[i].textanchor == "middle"
	                ? "center"
	                : instruction[i].textanchor;
	            ctx.textBaseline = instruction[i].alignmentBaseline
	              ? instruction[i].alignmentBaseline
	              : "bottom";
	            ctx.fillText(
	              instruction[i].text,
	              instruction[i].x,
	              // There is a small difference in text insertion points between SVG and Canvas
	              // add some portion of the fontsize to compensate for this
	              instruction[i].y //+ instruction[i].fontsize * 0.2
	            );
	            if (instruction[i].stroke)
	              ctx.strokeText(
	                instruction[i].text,
	                instruction[i].x,
	                // There is a small difference in text insertion points between SVG and Canvas
	                // add some portion of the fontsize to compensate for this
	                instruction[i].y // + instruction[i].fontsize * 0.2,
	              );

	            break;
	          case "translate":
	            ctx.save();
	            ctx.translate(instruction[i].x, instruction[i].y);
	            canvasDraw.call(this, ctx, instruction[i].draw);
	            ctx.restore();
	            //ctx.translate(-instruction[i].x, -instruction[i].y);
	            break;
	          case "rotate":
	            x = instruction[i].x;
	            y = instruction[i].y;
	            ctx.save();
	            ctx.translate(x, y);
	            ctx.rotate((instruction[i].degree * Math.PI) / 180);
	            ctx.translate(-x, -y);
	            canvasDraw.call(this, ctx, instruction[i].draw);
	            ctx.restore();
	            //ctx.translate(x, y);
	            //ctx.rotate(-instruction[i].degree * Math.PI / 180);
	            //ctx.translate(-x, -y);
	            break;
	          case "scale":
	            ctx.save();
	            ctx.scale(instruction[i].factor, instruction[i].factor);
	            canvasDraw.call(this, ctx, instruction[i].draw);
	            ctx.restore();
	            //ctx.scale(1/instruction[i].factor,1/instruction[i].factor);
	            break;
	        }
	        if (instruction[i].linecap) {
	          ctx.lineCap = "butt";
	          ctx.lineJoin = "miter";
	        }
	        if (typeof instruction[i].fillopacity !== "undefined") {
	          ctx.globalAlpha = 1;
	        }
	      }
	    }
	  }
	}

	function asSVG() {
	  function processInstructions(instruction) {
	    let svgxml = "";
	    for (let i = 0; i < instruction.length; i++) {
	      if (Array.isArray(instruction[i])) {
	        if (instruction[i].length) {
	          svgxml += processInstructions.call(this, instruction[i]);
	        }
	      } else {
	        if (typeof instruction[i] === "object") {
	          let svg = "";
	          if (instruction[i].type == "svg") {
	            svg += instruction[i].svg;
	          } else {
	            if (instruction[i].hasOwnProperty("clipPath")) {
	              svg += '<clipPath id="clip">';
	              svg +=
	                '<path d="' +
	                instruction[i].clipPath +
	                '" clip-rule="nonzero" />';
	              svg += "</clipPath>";
	            }
	            switch (instruction[i].type) {
	              case "path":
	                svg += '<path d="' + instruction[i].d + '" ';
	                if (instruction[i].hasOwnProperty("clipPath")) {
	                  svg += 'clip-path="url(#clip)" ';
	                }
	                break;
	              case "circle":
	                svg +=
	                  '<circle cx="' +
	                  instruction[i].cx +
	                  '" cy="' +
	                  instruction[i].cy +
	                  '" r="' +
	                  instruction[i].r +
	                  '" ';
	                if (instruction[i].hasOwnProperty("clipPath")) {
	                  svg += 'clip-path="url(#clip)" ';
	                }
	                break;
	              case "text":
	                svg +=
	                  '<text x="' +
	                  instruction[i].x +
	                  '" y="' +
	                  instruction[i].y +
	                  '" text-anchor="' +
	                  instruction[i].textanchor +
	                  '" font-size="' +
	                  instruction[i].fontsize +
	                  '" font-family="' +
	                  instruction[i].fontfamily +
	                  '" ';
	                if (instruction[i].fontweight)
	                  svg += 'font-weight="' + instruction[i].fontweight + '" ';
	                if (instruction[i].alignmentBaseline)
	                  svg +=
	                    'alignment-baseline="' +
	                    instruction[i].alignmentBaseline +
	                    '" ';
	                break;
	              case "translate":
	                svg +=
	                  '<g transform="translate(' +
	                  instruction[i].x +
	                  "," +
	                  instruction[i].y +
	                  ')" ';
	                break;
	              case "rotate":
	                svg +=
	                  '<g transform="rotate(' +
	                  instruction[i].degree +
	                  "," +
	                  instruction[i].x +
	                  "," +
	                  instruction[i].y +
	                  ')" ';
	                break;
	              case "scale":
	                svg += '<g transform="scale(' + instruction[i].factor + ')" ';
	                break;
	            }
	            if (typeof instruction[i].stroke !== "undefined") {
	              svg +=
	                'stroke-width="' +
	                (instruction[i].non_scaling_stroke || 1) *
	                  (instruction[i].strokewidth || this.style.strokeWidth) +
	                '" ';
	              if (instruction[i].strokedasharray)
	                svg +=
	                  'stroke-dasharray="' + instruction[i].strokedasharray + '" ';
	              if (instruction[i].linecap) {
	                svg += 'stroke-linecap="' + instruction[i].linecap + '" ';
	                svg += 'stroke-linejoin="' + instruction[i].linecap + '" ';
	              }
	              if (instruction[i].stroke) {
	                svg += 'stroke="' + instruction[i].stroke + '" ';
	              } else {
	                svg += 'stroke="none" ';
	              }
	            }
	            if (typeof instruction[i].fill !== "undefined")
	              svg +=
	                'fill="' +
	                (instruction[i].fill ? instruction[i].fill : "none") +
	                '" ';
	            if (typeof instruction[i].fillopacity !== "undefined")
	              svg += 'fill-opacity="' + instruction[i].fillopacity + '" ';
	            svg += ">";
	            switch (instruction[i].type) {
	              case "path":
	                svg += "</path>";
	                break;
	              case "circle":
	                svg += "</circle>";
	                break;
	              case "text":
	                svg +=
	                  String(instruction[i].text)
	                    .replace(/&/g, "&amp;")
	                    .replace(/</g, "&lt;")
	                    .replace(/>/g, "&gt;") + "</text>";
	                break;
	              case "translate":
	                svg += processInstructions.call(this, instruction[i].draw);
	                svg += "</g>";
	                break;
	              case "rotate":
	                svg += processInstructions.call(this, instruction[i].draw);
	                svg += "</g>";
	                break;
	              case "scale":
	                svg += processInstructions.call(this, instruction[i].draw);
	                svg += "</g>";
	                break;
	            }
	          }
	          svgxml += svg;
	        }
	      }
	    }
	    return svgxml;
	  }
	  let xml =
	    '<svg xmlns="' +
	    ms._svgNS +
	    '" version="1.2" baseProfile="tiny" width="' +
	    this.width +
	    '" height="' +
	    this.height +
	    '" viewBox="' +
	    (this.bbox.x1 - this.style.strokeWidth - this.style.outlineWidth) +
	    " " +
	    (this.bbox.y1 - this.style.strokeWidth - this.style.outlineWidth) +
	    " " +
	    this.baseWidth +
	    " " +
	    this.baseHeight +
	    '">';
	  xml += processInstructions.call(this, this.drawInstructions);
	  xml += "</svg>";
	  this.XML = xml;
	  return xml;
	}

	function getColors() {
	  let baseFillColor =
	    typeof this.style.colorMode === "object"
	      ? this.style.colorMode
	      : ms.getColorMode(this.style.colorMode);
	  const baseFrameColor =
	    typeof this.style.frameColor === "object"
	      ? this.style.frameColor
	      : ms.getColorMode("FrameColor");
	  const baseIconColor =
	    typeof this.style.iconColor === "object"
	      ? this.style.iconColor
	      : ms.getColorMode("IconColor");
	  const baseIconFillColor = baseFillColor;
	  let baseColorBlack = ms.getColorMode("Black");
	  let baseColorWhite = ms.getColorMode("White");
	  const baseColorOffWhite = ms.getColorMode("OffWhite");
	  const baseColorNone = ms.getColorMode("None");

	  //If it is a Civilian Symbol and civilian colors not are turned off, use civilian colors...
	  if (this.style.civilianColor && this.metadata.civilian) {
	    baseFillColor.Friend = baseFillColor.Neutral = baseFillColor.Unknown =
	      baseFillColor.Civilian;
	    baseFrameColor.Friend = baseFrameColor.Neutral = baseFrameColor.Unknown =
	      baseFrameColor.Civilian;
	    baseIconColor.Friend = baseIconColor.Neutral = baseIconColor.Unknown =
	      baseIconColor.Civilian;
	  }
	  //Joker and Faker
	  if (this.metadata.joker || this.metadata.faker) {
	    baseFillColor.Friend = baseFillColor.Hostile;
	    baseFrameColor.Friend = baseFrameColor.Hostile;
	    baseIconColor.Friend = baseIconColor.Hostile;
	  }

	  //Joker and Faker
	  if (this.metadata.suspect) {
	    baseFillColor.Friend = baseFillColor.Hostile = baseFillColor.Suspect;
	    baseFrameColor.Friend = baseFrameColor.Hostile = baseFrameColor.Suspect;
	    baseIconColor.Friend = baseIconColor.Hostile = baseIconColor.Suspect;
	  }

	  //If the user has specified a mono color to use for all symbols.
	  if (this.style.monoColor != "") {
	    baseFrameColor.Friend = baseFrameColor.Neutral = baseFrameColor.Hostile = baseFrameColor.Unknown = baseFrameColor.Civilian = this.style.monoColor;
	    baseColorBlack = baseFrameColor;
	    baseColorWhite = baseFillColor = baseColorNone;
	  }

	  const colors = {
	    fillColor: baseFillColor,
	    frameColor: baseFrameColor,
	    iconColor: baseIconColor,
	    iconFillColor: baseIconFillColor,
	    none: baseColorNone,
	    black: baseColorBlack,
	    white: baseColorWhite,
	  };
	  //console.info(baseFrameColor);
	  //Turn of the frame
	  if (this.metadata.frame /* || (!this.metadata.frame && !this.style.icon)*/) {
	    colors.frameColor =
	      typeof this.style.frameColor === "object"
	        ? this.style.frameColor
	        : baseColorBlack;
	  } else {
	    colors.frameColor = baseColorNone;
	  }
	  //Filled or not.
	  if (this.metadata.fill) {
	    //I don't think you can have an unframed but filled icon so we turn off the fill as well, unless you have turned off the icon as well.
	    colors.fillColor =
	      !this.metadata.frame && !(!this.metadata.frame && !this.style.icon)
	        ? baseColorNone
	        : baseFillColor;
	    colors.iconColor =
	      typeof this.style.iconColor === "object"
	        ? this.style.iconColor
	        : baseColorBlack;
	    //Dirty override, we want colors in the icon if we just turn off the frame. This is a special fix for filled icn in 2525.
	    colors.iconFillColor = !this.metadata.frame
	      ? baseFillColor
	      : baseColorOffWhite;
	    colors.white = baseColorOffWhite;
	  } else {
	    colors.fillColor = baseColorNone;
	    //Fix frame color if it should be turned off.
	    colors.frameColor = !this.metadata.frame ? baseColorNone : baseFrameColor;
	    colors.iconColor = baseFrameColor;
	    colors.iconFillColor = baseColorNone;
	    //If everything turned off, make everything black.
	    if (!this.metadata.frame && !this.metadata.fill && !this.style.icon) {
	      colors.frameColor = baseColorBlack;
	      colors.fillColor = baseColorBlack;
	    }
	    //Another dirty override to get correct 2525 colors for special symbols with filled icn.
	    //Colors.black = baseFrameColor;
	  }
	  return colors;
	}

	function getMetadata() {
	  let metadata = {
	    activity: false, //Is it an Activity
	    affiliation: "undefined", //Affiliation it is shown as (Friend/Hostile...)
	    baseAffilation: "", //Affiliation it belongs to (Friend/Hostile...)
	    baseDimension: "", //Dimension it belongs to (Air/Ground...)
	    baseGeometry: { g: "", bbox: {} }, //Geometry is a combination of dimension and affiliation (AirFriend/GroundHostile...)
	    civilian: false, //Is it Civilian
	    condition: "", //What condition is it in
	    context: "", //Context of the symbol (Reality/Exercise...)
	    dimension: "undefined", //Dimension it is shown as (Air/Ground...)
	    dimensionUnknown: false, //Is the dimension unknown
	    echelon: "", //What echelon (Platoon/Company...)
	    faker: false, //Is it a Faker
	    fenintDummy: false, //Is it a feint/dummy
	    fill: this.style.fill, //Standard says it should be filled
	    frame: this.style.frame, //Standard says it should be framed
	    functionid: "", //Part of SIDC referring to the icon.
	    headquarters: false, //Is it a Headquarters
	    //"iconBottom"		: 100,		//The bottom of the icon
	    installation: false, //Is it an Instalation
	    joker: false, //Is it a Joker
	    mobility: "", //What mobility (Tracked/Sled)
	    notpresent: "", //Is it Anticipated or Pending
	    numberSIDC: false, //Is the SIDC number based
	    space: false, //Is it in Space
	    STD2525: ms._STD2525,
	    taskForce: false, //Is it a task force
	    unit: false, // Is this equipment or not
	  };
	  const mapping = {};
	  mapping.context = ["Reality", "Exercise", "Simulation"];
	  mapping.status = [
	    "Present",
	    "Planned",
	    "FullyCapable",
	    "Damaged",
	    "Destroyed",
	    "FullToCapacity",
	  ];
	  mapping.echelonMobility = {
	    "11": "Team/Crew",
	    "12": "Squad",
	    "13": "Section",
	    "14": "Platoon/detachment",
	    "15": "Company/battery/troop",
	    "16": "Battalion/squadron",
	    "17": "Regiment/group",
	    "18": "Brigade",
	    "21": "Division",
	    "22": "Corps/MEF",
	    "23": "Army",
	    "24": "Army Group/front",
	    "25": "Region/Theater",
	    "26": "Command",
	    "31": "Wheeled limited cross country",
	    "32": "Wheeled cross country",
	    "33": "Tracked",
	    "34": "Wheeled and tracked combination",
	    "35": "Towed",
	    "36": "Rail",
	    "37": "Pack animals",
	    "41": "Over snow (prime mover)",
	    "42": "Sled",
	    "51": "Barge",
	    "52": "Amphibious",
	    "61": "Short towed array",
	    "62": "Long towed Array",
	    "71": "Leader Individual",
	    "72": "Deputy Individual",
	  };

	  mapping.affiliation = ["Hostile", "Friend", "Neutral", "Unknown"];
	  mapping.dimension = ["Air", "Ground", "Sea", "Subsurface"];

	  metadata.context = mapping.context[0];

	  if (this.style.standard) {
	    metadata.STD2525 = this.style.standard == "APP6" ? false : true;
	  }

	  if (this.style.monoColor != "") {
	    metadata.fill = false;
	  }
	  this.options.sidc = String(this.options.sidc)
	    .replace(/\*/g, "-")
	    .replace(/ /g, "");

	  metadata.numberSIDC = !isNaN(this.options.sidc.substr(0, 2));
	  if (metadata.numberSIDC) {
	    //This is for new number based SIDCs

	    if (typeof ms._getMetadata.number === "function") {
	      metadata = ms._getMetadata.number.call(this, ms, metadata, mapping);
	    } else {
	      console.warn(
	        "ms._getMetadata.number() is not present, you will need to load functionality for number based SIDCs"
	      );
	    }
	  } else {
	    //This would be old letter based SIDCs

	    if (typeof ms._getMetadata.letter === "function") {
	      metadata = ms._getMetadata.letter.call(this, ms, metadata, mapping);
	    } else {
	      console.warn(
	        "ms._getMetadata.letter() is not present, you will need to load functionality for letter based SIDCs"
	      );
	    }
	  }

	  if (
	    ms._symbolGeometries.hasOwnProperty(
	      metadata.dimension + metadata.affiliation
	    )
	  ) {
	    metadata.baseGeometry =
	      ms._symbolGeometries[metadata.dimension + metadata.affiliation];
	  } else {
	    metadata.baseGeometry.bbox = new ms.BBox();
	  }
	  //If both frame and icon is turned off we should just have a position marker
	  if (!this.style.frame && !this.style.icon) {
	    metadata.baseGeometry = ms._symbolGeometries.PositionMarker;
	  }

	  return metadata;
	}

	function getOptions(includeStyle) {
	  let key;
	  const options = {};
	  for (key in this.options) {
	    if (!this.options.hasOwnProperty(key)) continue;
	    // clone all options
	    options[key] = this.options[key];
	  }
	  if (includeStyle || typeof includeStyle === "undefined") {
	    for (key in this.style) {
	      if (!this.style.hasOwnProperty(key)) continue;
	      // clone all styles
	      options[key] = this.style[key];
	    }
	  }
	  return options;
	}

	function getSize() {
	  if (typeof this.width === "undefined" || typeof this.height === "undefined") {
	    this.updateSymbol();
	  }
	  return { width: this.width, height: this.height };
	}

	function getStyle() {
	  let key;
	  const options = {};
	  for (key in this.style) {
	    if (!this.style.hasOwnProperty(key)) continue;
	    // clone all styles
	    options[key] = this.style[key];
	  }

	  return options;
	}

	function isValid(extended) {
	  const drawInstructions =
	    JSON.stringify(this.drawInstructions).indexOf("null") == -1;

	  if (extended) {
	    return {
	      affiliation: this.metadata.affiliation,
	      dimension: this.metadata.dimension,
	      dimensionUnknown: this.metadata.dimensionUnknown,
	      drawInstructions: drawInstructions,
	      icon: this.validIcon,
	      mobility: this.metadata.mobility != undefined,
	    };
	  } else {
	    return (
	      !(
	        this.metadata.affiliation == "undefined" ||
	        (this.metadata.dimension == "undefined" &&
	          !this.metadata.controlMeasure)
	      ) &&
	      drawInstructions &&
	      this.validIcon &&
	      this.metadata.mobility != undefined
	    );
	  }
	}

	function setOptions() {
	  let i;
	  for (i = 0; i < arguments.length; i++) {
	    const options = arguments[i];
	    if (typeof options === "object") {
	      for (const key in options) {
	        if (!options.hasOwnProperty(key)) continue;
	        if (key === "SIDC") {
	          // backward compability
	          this.options.sidc = options[key];
	          continue;
	        }
	        if (this.style.hasOwnProperty(key)) {
	          this.style[key] = options[key];
	        } else {
	          this.options[key] = options[key];
	        }
	      }
	    } else {
	      // if there just is something not an object, we asume that it is the SIDC
	      this.options.sidc = options;
	    }
	  }
	  // Reset if the icon is valid
	  this.validIcon = true;

	  //Updating the object with metadata of the symbol
	  this.metadata = this.getMetadata();

	  //Updating the object with colors
	  this.colors = this.getColors();

	  this.drawInstructions = [];

	  this.bbox = new ms.BBox();
	  //Processing all parts of the symbol, adding them to the drawinstruction and updating the boundingbox
	  for (i in ms._symbolParts) {
	    if (!ms._symbolParts.hasOwnProperty(i)) continue;
	    const m = ms._symbolParts[i].call(this, ms);
	    const notEmpty = m.pre.length > 0 || m.post.length > 0;
	    if (!m.pre) continue;
	    if (m.pre.length > 0) {
	      while (m.pre.length == 1) {
	        m.pre = m.pre[0];
	      }
	      if (m.pre.length != 0) {
	        this.drawInstructions = [].concat(m.pre, this.drawInstructions);
	      }
	    }
	    if (m.post.length > 0) {
	      while (m.post.length == 1) {
	        m.post = m.post[0];
	        if (typeof m.post == "undefined") break;
	      }
	      if (typeof m.post == "undefined" || m.post.length != 0) {
	        /*
	        You might think it is strange to add it if it is undefined, and you are correct. 
	        But this makes it possible to find invalid symbols using the isValid function.
	        //*/
	        this.drawInstructions = this.drawInstructions.concat(m.post);
	      }
	    }
	    if (typeof m.bbox === "object" && notEmpty) {
	      this.bbox.merge(m.bbox);
	    }
	  }

	  if (this.style.padding) {
	    // if set, add extra padding
	    this.bbox.x1 -= this.style.padding;
	    this.bbox.x2 += this.style.padding;
	    this.bbox.y1 -= this.style.padding;
	    this.bbox.y2 += this.style.padding;
	  }

	  let anchor = { x: 100, y: 100 };
	  this.octagonAnchor = {
	    x:
	      ((anchor.x -
	        this.bbox.x1 +
	        parseFloat(this.style.strokeWidth) +
	        parseFloat(this.style.outlineWidth)) *
	        this.style.size) /
	      100,
	    y:
	      ((anchor.y -
	        this.bbox.y1 +
	        parseFloat(this.style.strokeWidth) +
	        parseFloat(this.style.outlineWidth)) *
	        this.style.size) /
	      100,
	  };
	  //If it is a headquarters the anchor should be at the end of the staf
	  if (this.metadata.headquarters) {
	    const hqStaffLength = this.style.hqStaffLength || ms._hqStaffLength;
	    anchor = {
	      x: this.metadata.baseGeometry.bbox.x1,
	      y: this.metadata.baseGeometry.bbox.y2 + hqStaffLength,
	    };
	  }

	  if (this.style.square) {
	    var maxx = Math.max(anchor.x - this.bbox.x1, this.bbox.x2 - anchor.x);
	    var maxy = Math.max(anchor.y - this.bbox.y1, this.bbox.y2 - anchor.y);
	    var max = Math.max(maxx, maxy);
	    this.bbox.x1 = anchor.x - max;
	    this.bbox.y1 = anchor.y - max;
	    this.bbox.x2 = anchor.x + max;
	    this.bbox.y2 = anchor.y + max;
	  }

	  this.baseWidth =
	    this.bbox.width() +
	    Number(this.style.strokeWidth * 2) +
	    Number(this.style.outlineWidth * 2); //Adding the stoke width as margins and a little bit extra
	  this.baseHeight =
	    this.bbox.height() +
	    Number(this.style.strokeWidth * 2) +
	    Number(this.style.outlineWidth * 2); //Adding the stoke width as margins and a little bit extra

	  this.width = (this.baseWidth * this.style.size) / 100;
	  this.height = (this.baseHeight * this.style.size) / 100;

	  this.symbolAnchor = {
	    x:
	      ((anchor.x -
	        this.bbox.x1 +
	        parseFloat(this.style.strokeWidth) +
	        parseFloat(this.style.outlineWidth)) *
	        this.style.size) /
	      100,
	    y:
	      ((anchor.y -
	        this.bbox.y1 +
	        parseFloat(this.style.strokeWidth) +
	        parseFloat(this.style.outlineWidth)) *
	        this.style.size) /
	      100,
	  };

	  //if (ms._autoSVG) this.asSVG();
	  if (ms._autoValidation)
	    if (!this.isValid()) {
	      console.warn("Error in symbol: " + this.options.sidc);
	      console.warn(this.isValid(true));
	    }

	  return this;
	}

	function Symbol() {
	  //=======================================================================================
	  this.bbox = new BBox(); // Contains the bounding box of the current symbol
	  this.colors = {}; // Contains the colors for the current symbol
	  this.metadata = {}; // Metadata of the current symbol
	  this.octagonAnchor = { x: 50, y: 50 }; // The anchor point for the octagon for the current symbol

	  this.options = {}; //initiate options object.
	  this.options.quantity = ""; // FieldID C
	  this.options.reinforcedReduced = ""; // FieldID F
	  this.options.staffComments = ""; // FieldID G
	  this.options.additionalInformation = ""; // FieldID H
	  this.options.evaluationRating = ""; // FieldID J
	  this.options.combatEffectiveness = ""; // FieldID K
	  this.options.signatureEquipment = ""; // FieldID L
	  this.options.higherFormation = ""; // FieldID M
	  this.options.hostile = ""; // FieldID N
	  this.options.iffSif = ""; // FieldID P
	  this.options.direction = ""; // FieldID Q
	  this.options.sigint = ""; // FieldID R2
	  this.options.uniqueDesignation = ""; // FieldID T
	  this.options.type = ""; // FieldID V
	  this.options.dtg = ""; // FieldID W
	  this.options.altitudeDepth = ""; // FieldID X
	  this.options.location = ""; // FieldID Y
	  this.options.speed = ""; // FieldID Z
	  this.options.speedLeader = 0; // This is the length of the speed leader
	  this.options.specialHeadquarters = ""; // FieldID AA
	  this.options.country = ""; // AC Country
	  this.options.platformType = ""; // FieldID AD
	  this.options.equipmentTeardownTime = ""; // FieldID AE
	  this.options.commonIdentifier = ""; // FieldID AF
	  this.options.auxiliaryEquipmentIndicator = ""; // FieldID AG
	  this.options.headquartersElement = ""; // FieldID AH
	  this.options.installationComposition = ""; // FieldID AI
	  // FieldID AM Distance
	  // FieldID AN Azimuth
	  this.options.engagementBar = ""; // FieldID AO EngagementBar
	  this.options.engagementType = ""; // Engagement Bar Type, should be one of "TARGET", "NON-TARGET", or "EXPIRED"
	  this.options.guardedUnit = ""; // FieldID AQ
	  this.options.specialDesignator = ""; // FieldID AR

	  this.style = {}; //initiate style object.
	  this.style.alternateMedal = false; // 2525D lets you choose between MEDAL icn and alternate MEDAL icn for Mines; default is set to MEDAL.
	  this.style.civilianColor = true; // Should we use the Civilian Purple defined in 2525? (We set this to default because I like the color.
	  this.style.colorMode = "Light"; // 2525C Allows you to use Dark; Medium or Light colors. The values you can set are "Dark";"Medium" or "Light"
	  this.style.fill = true; // Should the icon be filled with color
	  this.style.fillColor = ""; // Override the frame fill with any color
	  this.style.fillOpacity = 1; // Possibility to change the fill opacity
	  this.style.fontfamily = "Arial"; // The font family to use
	  this.style.frame = true; // Should the icon be framed
	  this.style.frameColor = "";
	  this.style.hqStaffLength = 0; // The default length of the HQ staf
	  this.style.icon = true; // Should we display the icon?
	  this.style.iconColor = "";
	  this.style.infoBackground = ""; // Color of square behind texts
	  this.style.infoBackgroundFrame = ""; // Color of the squares frame
	  this.style.infoColor = ""; // Changes the color of the info fields
	  this.style.infoFields = true; // If you have set all info fields but don't want the displayed; then just set this to false.
	  this.style.infoOutlineColor = "rgb(239, 239, 239)"; // Color of the text outline.
	  this.style.infoOutlineWidth = false; // Width of the text-field outline.
	  this.style.infoSize = 40; // Relative size of the info fields
	  this.style.monoColor = ""; // Should the icon be monocromatic and if so what color
	  this.style.outlineColor = "rgb(239, 239, 239)"; // Color of the outline
	  this.style.outlineWidth = 0; // Width of the outline.
	  this.style.padding = 0; // Extra padding around the symbol
	  this.style.simpleStatusModifier = false; // Force use of simple status modifiers
	  this.style.size = 100; // The symbol size is actually the L variable in the symbols so the symbol will be larger than this size.
	  this.style.square = false; // If the symbol should be square
	  this.style.standard = ""; // Set standard override
	  this.style.strokeWidth = 4; // The stroke width of he icon frame.

	  this.symbolAnchor = { x: 50, y: 50 }; // The anchor point for the current symbol
	  this.validIcon = true; // If we were able to find a valid icon or not.
	  // Initiate symbol.
	  if (arguments.length > 0) {
	    this.setOptions.apply(this, arguments);
	  }
	}
	Symbol.prototype.asCanvas = asCanvas;
	Symbol.prototype.asOffscreenCanvas = asOffscreenCanvas;
	Symbol.prototype.canvasDraw = canvasDraw;

	Symbol.prototype.asDOM = function() {
	  const doc = document;
	  const doc2 = new DOMParser().parseFromString(this.asSVG(), "text/xml");
	  return doc.adoptNode(doc2.documentElement);
	};
	Symbol.prototype.asSVG = asSVG;

	Symbol.prototype.getAnchor = function() {
	  return this.symbolAnchor;
	};
	Symbol.prototype.getColors = getColors;

	Symbol.prototype.getOctagonAnchor = function() {
	  return this.octagonAnchor;
	};
	Symbol.prototype.getMetadata = getMetadata;
	Symbol.prototype.getOptions = getOptions;
	Symbol.prototype.getSize = getSize;
	Symbol.prototype.getStyle = getStyle;
	Symbol.prototype.isValid = isValid;
	Symbol.prototype.setOptions = setOptions;

	Symbol.prototype.toDataURL = function() {
	  return "data:image/svg+xml;utf8," + encodeURIComponent(this.asSVG());
	};

	/* ***************************************************************************************
	Creating the base of milsymbol
	*************************************************************************************** */
	ms.Symbol = Symbol;

	//import { ms } from "../ms.js";
	function metadata$1(ms, metadata, mapping) {
	  this.options.sidc = this.options.sidc.toUpperCase();

	  const codingscheme =
	    this.options.sidc.charAt(0) != "" ? this.options.sidc.charAt(0) : "-";
	  const affiliation =
	    this.options.sidc.charAt(1) != "" ? this.options.sidc.charAt(1) : "-";
	  const battledimension =
	    this.options.sidc.charAt(2) != "" ? this.options.sidc.charAt(2) : "-";
	  const status =
	    this.options.sidc.charAt(3) != "" ? this.options.sidc.charAt(3) : "-";
	  const functionid = (metadata.functionid =
	    this.options.sidc.substr(4, 6) != ""
	      ? this.options.sidc.substr(4, 6)
	      : "------");
	  const symbolmodifier11 =
	    this.options.sidc.charAt(10) != "" ? this.options.sidc.charAt(10) : "-";
	  const symbolmodifier12 =
	    this.options.sidc.charAt(11) != "" ? this.options.sidc.charAt(11) : "-";
	  /*
	  const countrycode = this.options.sidc.substr(12, 2) != ""
	    ? this.options.sidc.substr(12, 2)
	    : "--";
	  const orderofbattle = this.options.sidc.charAt(14) != "" ? this.options.sidc.charAt(14) : "-";
	  */
	  if (["H", "S", "J", "K"].indexOf(affiliation) > -1)
	    metadata.affiliation = mapping.affiliation[0];
	  if (["F", "A", "D", "M"].indexOf(affiliation) > -1)
	    metadata.affiliation = mapping.affiliation[1];
	  if (["N", "L"].indexOf(affiliation) > -1)
	    metadata.affiliation = mapping.affiliation[2];
	  if (["P", "U", "G", "W", "O"].indexOf(affiliation) > -1)
	    metadata.affiliation = mapping.affiliation[3];

	  if (["P", "A"].indexOf(battledimension) > -1)
	    metadata.dimension = mapping.dimension[0];
	  if (["G", "Z", "F", "X"].indexOf(battledimension) > -1)
	    metadata.dimension = mapping.dimension[1];
	  if (["S"].indexOf(battledimension) > -1)
	    metadata.dimension = mapping.dimension[2];
	  if (["U"].indexOf(battledimension) > -1)
	    metadata.dimension = mapping.dimension[3];

	  //dimension is in Space
	  if (battledimension == "P" && codingscheme != "O") metadata.space = true;
	  //codingscheme that are Activities
	  if (codingscheme == "O" && ["V", "O", "R"].indexOf(battledimension) > -1) {
	    metadata.activity = true;
	  }
	  //SymbolSets that are control-measure
	  if (codingscheme == "G") metadata.controlMeasure = true;
	  //symbolmodifier11 that are Installations
	  if (symbolmodifier11 == "H") metadata.installation = true;
	  //Planned/Anticipated/Suspect symbols should have a dashed outline
	  if (this.style.frame && status == "A")
	    metadata.notpresent = ms._dashArrays.anticipated;
	  if (this.style.frame && ["P", "A", "S", "G", "M"].indexOf(affiliation) > -1) {
	    metadata.notpresent = ms._dashArrays.pending;
	  }
	  //Should it have a Condition Bar
	  if (status == "C") metadata.condition = mapping.status[2];
	  if (status == "D") metadata.condition = mapping.status[3];
	  if (status == "X") metadata.condition = mapping.status[4];
	  if (status == "F") metadata.condition = mapping.status[5];
	  //Is it part of Exercise Symbols
	  if (["G", "W", "D", "L", "M", "J", "K"].indexOf(affiliation) > -1) {
	    metadata.context = mapping.context[1];
	  }
	  //Framing of SO tactical symbols differs slightly from C2 Symbology: UEI tactical symbols in that there is only one battle dimension: ground.
	  if (codingscheme == "O") metadata.dimension = mapping.dimension[1];
	  //Framing of EMS tactical symbols differs slightly from C2 Symbology: UEI tactical symbols in that there is only one battle dimension: ground.
	  if (codingscheme == "E") metadata.dimension = mapping.dimension[1];
	  //First save the dimensionType and affiliationType before we modifies it...
	  metadata.baseDimension = metadata.dimension;
	  metadata.baseAffilation = metadata.affiliation;
	  //Joker and faker should have the shape of friendly
	  if (affiliation == "J") metadata.joker = true;
	  if (affiliation == "K") metadata.faker = true;
	  if (metadata.joker || metadata.faker) {
	    metadata.affiliation = mapping.affiliation[1];
	  }
	  //Ground Equipment should have the same geometry as sea Friend...
	  if (
	    codingscheme == "S" &&
	    battledimension == "G" &&
	    functionid.charAt(0) == "E"
	  )
	    metadata.dimension = mapping.dimension[2];
	  //Signal INTELLIGENCE Ground should have the same geometry as sea Friend...
	  if (codingscheme == "I" && battledimension == "G")
	    metadata.dimension = mapping.dimension[2];
	  //Some EMS symbosls should have the same geometry as sea Friend...
	  if (
	    codingscheme == "E" &&
	    ((battledimension == "O" &&
	      [
	        "AB----",
	        "AE----",
	        "AF----",
	        "BB----",
	        "CB----",
	        "CC----",
	        "DB----",
	        "DDB---",
	        "DEB---",
	        "DFB---",
	        "DGB---",
	        "DHB---",
	        "DIB---",
	        "DJB---",
	        "DLB---",
	        "DMB---",
	        "DOB---",
	        "EA----",
	        "EB----",
	        "EC----",
	        "ED----",
	        "EE----",
	      ].indexOf(functionid) > -1) ||
	      (battledimension == "F" &&
	        ["BA----", "MA----", "MC----"].indexOf(functionid) > -1))
	  ) {
	    metadata.dimension = mapping.dimension[2];
	  }
	  //Setting up Headquarters/task force/dummy
	  if (
	    ["F", "G", "C", "D"].indexOf(symbolmodifier11) > -1 ||
	    (symbolmodifier11 == "H" && symbolmodifier12 == "B")
	  ) {
	    metadata.feintDummy = true;
	  }
	  if (["A", "B", "C", "D"].indexOf(symbolmodifier11) > -1) {
	    metadata.headquarters = true;
	  }
	  if (battledimension == "G" && functionid == "UH----") {
	    metadata.headquarters = true;
	  }
	  if (["E", "B", "G", "D"].indexOf(symbolmodifier11) > -1) {
	    metadata.taskForce = true;
	  }
	  //Setting up Echelon/Mobility/Towed Array Amplifier
	  if (symbolmodifier12 == "A") metadata.echelon = mapping.echelonMobility[11]; //Team/Crew
	  if (symbolmodifier12 == "B" && symbolmodifier11 != "H") {
	    metadata.echelon = mapping.echelonMobility[12]; //Squad
	  }
	  if (symbolmodifier12 == "C") metadata.echelon = mapping.echelonMobility[13]; //Section
	  if (symbolmodifier12 == "D") metadata.echelon = mapping.echelonMobility[14]; //Platoon/detachment
	  if (symbolmodifier12 == "E") metadata.echelon = mapping.echelonMobility[15]; //Company/battery/troop
	  if (symbolmodifier12 == "F") metadata.echelon = mapping.echelonMobility[16]; //Battalion/squadron
	  if (symbolmodifier12 == "G") metadata.echelon = mapping.echelonMobility[17]; //Regiment/group
	  if (symbolmodifier12 == "H") metadata.echelon = mapping.echelonMobility[18]; //Brigade
	  if (symbolmodifier12 == "I") metadata.echelon = mapping.echelonMobility[21]; //Division
	  if (symbolmodifier12 == "J") metadata.echelon = mapping.echelonMobility[22]; //Corps/MEF
	  if (symbolmodifier12 == "K") metadata.echelon = mapping.echelonMobility[23]; //Army
	  if (symbolmodifier12 == "L" && symbolmodifier11 != "N") {
	    metadata.echelon = mapping.echelonMobility[24]; //Army Group/front
	  }
	  if (symbolmodifier12 == "M") metadata.echelon = mapping.echelonMobility[25]; //Region/Theater
	  if (symbolmodifier12 == "N") metadata.echelon = mapping.echelonMobility[26]; //Command
	  if (symbolmodifier11 == "M") {
	    switch (symbolmodifier12) {
	      case "O":
	        metadata.mobility = mapping.echelonMobility[31]; //Wheeled limited cross country
	        break;
	      case "P":
	        metadata.mobility = mapping.echelonMobility[32]; //Wheeled cross country
	        break;
	      case "Q":
	        metadata.mobility = mapping.echelonMobility[33]; //Tracked
	        break;
	      case "R":
	        metadata.mobility = mapping.echelonMobility[34]; //Wheeled and tracked combination
	        break;
	      case "S":
	        metadata.mobility = mapping.echelonMobility[35]; //Towed
	        break;
	      case "T":
	        metadata.mobility = mapping.echelonMobility[36]; //Rail
	        break;
	      case "U":
	        metadata.mobility = mapping.echelonMobility[41]; //Over snow (prime mover)
	        break;
	      case "V":
	        metadata.mobility = mapping.echelonMobility[42]; //Sled
	        break;
	      case "W":
	        metadata.mobility = mapping.echelonMobility[37]; //Pack animals
	        break;
	      case "X":
	        metadata.mobility = mapping.echelonMobility[51]; //Barge
	        break;
	      case "Y":
	        metadata.mobility = mapping.echelonMobility[52]; //Amphibious
	        break;
	      default:
	        metadata.mobility = undefined;
	    }
	  }
	  if (symbolmodifier11 == "N") {
	    switch (symbolmodifier12) {
	      case "S":
	        metadata.mobility = mapping.echelonMobility[61]; //Short towed array
	        break;
	      case "L":
	        metadata.mobility = mapping.echelonMobility[62]; //Long towed Array
	        break;
	      default:
	        metadata.mobility = undefined;
	    }
	  }
	  //This is for 2525
	  //Civilian stuff
	  if (
	    (battledimension == "A" && functionid.charAt(0) == "C") ||
	    (battledimension == "G" && functionid.substring(0, 3) == "EVC") ||
	    (battledimension == "S" && functionid.charAt(0) == "X")
	  ) {
	    metadata.civilian = true;
	  }
	  //Colors will be have to be fixed in symbolColors
	  if (battledimension == "Z" || battledimension == "X") {
	    if (["P", "U", "F", "N", "H", "A", "S", "G", "W"].indexOf(affiliation) > -1)
	      metadata.dimensionUnknown = true;
	    //To get the correct geometry for a lot of stuff later we will have to modify the affliationType.
	    if (["F", "A"].indexOf(affiliation) > -1) metadata.dimension = "Sea";
	    //If battle dimension is unknown and the affiliation is D,L,M,J,K we should not have a symbol
	    if (["D", "L", "M", "J", "K"].indexOf(affiliation) > -1)
	      metadata.affiliation = "none";
	  }
	  //Forcing unframing of symbols that shouldn't have a frame.
	  if (
	    battledimension == "S" &&
	    [
	      "O-----",
	      "ED----",
	      "EP----",
	      "EV----",
	      "ZM----",
	      "ZN----",
	      "ZI----",
	    ].indexOf(functionid) > -1
	  ) {
	    metadata.frame = false;
	  }
	  if (
	    codingscheme == "E" &&
	    battledimension == "N" &&
	    [
	      "AA----",
	      "AB----",
	      "AC----",
	      "AD----",
	      "AE----",
	      "AG----",
	      "BB----",
	      "BC----",
	      "BF----",
	      "BM----",
	      "-C-----",
	      "CA----",
	      "CB----",
	      "CC----",
	      "CD----",
	      "CE----",
	    ].indexOf(functionid) > -1
	  ) {
	    metadata.frame = false;
	  }
	  if (
	    codingscheme == "W" &&
	    battledimension == "S" &&
	    [
	      "WSVE--",
	      "WSD-LI",
	      "WSFGSO",
	      "WSGRL-",
	      "WSR-LI",
	      "WSDSLM",
	      "WSS-LI",
	      "WSTMH-",
	      "WST-FC",
	      "WSTSS-",
	    ].indexOf(functionid) > -1
	  ) {
	    metadata.frame = false;
	  }
	  //We have some special symbols that should be unframed but filled, like mines, let us fix them.
	  if (
	    battledimension == "U" &&
	    [
	      "WM----",
	      "WMD---",
	      "WMG---",
	      "WMGD--",
	      "WMGX--",
	      "WMGE--",
	      "WMGC--",
	      "WMGR--",
	      "WMGO--",
	      "WMM---",
	      "WMMD--",
	      "WMMX--",
	      "WMME--",
	      "WMMC--",
	      "WMMR--",
	      "WMMO--",
	      "WMF---",
	      "WMFD--",
	      "WMFX--",
	      "WMFE--",
	      "WMFC--",
	      "WMFR--",
	      "WMFO--",
	      "WMO---",
	      "WMOD--",
	      "WMX---",
	      "WME---",
	      "WMA---",
	      "WMC---",
	      "WMR---",
	      "WMB---",
	      "WMBD--",
	      "WMN---",
	      "WMS---",
	      "WMSX--",
	      "WMSD--",
	      "WD----",
	      "WDM---",
	      "WDMG--",
	      "WDMM--",
	      "ND----",
	      "E-----",
	      "V-----",
	      "X-----",
	      "NBS---",
	      "NBR---",
	      "NBW---",
	      "NM----",
	      "NA----",
	    ].indexOf(functionid) > -1
	  ) {
	    if (metadata.STD2525) {
	      metadata.fill = false;
	      if (functionid == "WD----") {
	        metadata.fill = true;
	      }
	      if (
	        ["ND----", "NBS---", "NBR---", "NBW---", "NM----", "NA----"].indexOf(
	          functionid
	        ) > -1
	      ) {
	        metadata.fill = true;
	        metadata.frame = false;
	      }
	    } else {
	      metadata.frame = false;
	      if (["E-----", "V-----", "X-----"].indexOf(functionid) > -1) {
	        metadata.fill = false;
	        metadata.frame = false;
	      }
	    }
	  }

	  //Some symbols in EMS and symbols from tactical graphics
	  if (
	    this.options.sidc.substr(0, 3) == "WAS" ||
	    this.options.sidc.substr(0, 3) == "WOS" ||
	    codingscheme == "G"
	  ) {
	    metadata.frame = false;
	  }

	  //This is for APP6 tactical points with frames
	  if (
	    codingscheme == "G" &&
	    battledimension == "O" &&
	    ["V", "L", "P", "I"].indexOf(functionid.charAt(0)) > -1
	  ) {
	    metadata.frame = true;
	    metadata.dimension = mapping.dimension[1];
	  }

	  return metadata;
	}

	//import { ms } from "../ms.js";
	function geticons$1(ms, iconParts, STD2525) {
	  const iconSIDC = {};
	  const iconBbox = {};

	  for (const i in ms._iconSIDC.letter) {
	    if (!ms._iconSIDC.letter.hasOwnProperty(i)) continue;
	    ms._iconSIDC.letter[i].call(this, iconSIDC, iconBbox, iconParts, STD2525);
	  }
	  return { icons: iconSIDC, bbox: iconBbox };
	}

	function defaultProperties(instructions, iconColor) {
	  if (typeof instructions === "object") {
	    if (Array.isArray(instructions)) {
	      for (var i = 0; i < instructions.length; i++) {
	        defaultProperties.call(this, instructions[i], iconColor);
	      }
	      return;
	    }
	    instructions.icon = true;
	    if (instructions.type == "text") {
	      if (!instructions.hasOwnProperty("fontfamily"))
	        instructions.fontfamily = "Arial";
	      if (!instructions.hasOwnProperty("fontweight"))
	        instructions.fontweight = "bold";
	      if (!instructions.hasOwnProperty("textanchor"))
	        instructions.textanchor = "middle";
	      if (!instructions.hasOwnProperty("stroke")) instructions.stroke = false;
	    }
	    if (!instructions.hasOwnProperty("fill")) instructions.fill = iconColor;
	    if (!instructions.hasOwnProperty("stroke")) instructions.stroke = iconColor;
	    if (!instructions.hasOwnProperty("strokewidth"))
	      instructions.strokewidth = 3;
	    return;
	  }
	}

	function text(str) {
	  let size = 45;
	  //let y = 115;
	  if (str.length == 1) {
	    size = 45;
	    //y = 115;
	  }
	  if (str.length == 3) {
	    size = 39;
	    //y = 110;
	  }
	  if (str.length >= 4) {
	    size = 33;
	    //y = 110;
	  }
	  return {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 100,
	    y: 103,
	    fontsize: size,
	    //fontweight: "normal",
	    text: str,
	  };
	}
	function textm1(str) {
	  let size = 28;
	  if (str.length == 3) {
	    size = 25;
	  }
	  if (str.length >= 4) {
	    size = 22;
	  }
	  return {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 100,
	    y: 71,
	    fontsize: size,
	    //fontweight: "normal",
	    text: str,
	  };
	}
	function textm2(str) {
	  let size = 28;
	  //let y = 143;

	  if (str.length == 3) {
	    size = 25;
	    // y = 140;
	  }
	  if (str.length >= 4) {
	    size = 20;
	    // y = 135;
	  }
	  return {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 100,
	    y: 134,
	    fontsize: size,
	    //fontweight: "normal",
	    text: str,
	  };
	}

	function icons$7 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const affiliation = metadata.affiliation || "Friend";
	  const frame = metadata.frame;
	  const numberSIDC = metadata.numberSIDC;

	  //If hostile and not monoColor, make it red, otherwise use the iconColor.
	  const iconColor = colors.iconColor[affiliation];
	  const iconFillColor = colors.iconFillColor[affiliation];
	  const none = colors.none[affiliation];
	  const black = colors.black[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["SP.I.ANTISATELLITE WEAPON"] = {
	    type: "path",

	    d: "m 100,110 v 9  m 0,-35 v 6  m 0,-9 -2,3 h 4 z  m -8,9 v 20 h 16 V 90 Z  m 26,0 v 20 h 26 V 90 Z  M 82,90 H 56 v 20 h 26 z  m 0,10 h 10  m 16,0 h 10",
	  };
	  icn["SP.I.ASTRONOMICAL SATELLITE"] = {
	    type: "path",

	    d: "m 97,90 -1,-9 h 8 l -1,9  m -5,20 1,9 h 2 l 1,-9  m 6,-10 h 10  m -36,0 H 92  M 82,90 H 56 v 20 h 26 z  m 36,0 v 20 h 26 V 90 Z  m -26,0 v 20 h 16 V 90 Z",
	  };
	  icn["SP.I.BIOSATELLITE"] = {
	    type: "path",

	    d: "m 98,88 c 0,3 -2.5,6 -6,6 -3.5,0 -6,-3 -6,-6 0,-4 2.5,-7 6,-7 3.5,0 6,3 6,7 z  m -6,11 v 20 h 16 V 99 Z  m 26,0 v 20 h 22 V 99 Z  M 82,99 H 60 v 20 h 22 z  m 0,10 h 10  m 16,0 h 10  M 96.192895,82.850539 115,94 114,96 98,87.5",
	  };
	  icn["SP.I.CAPSULE"] = {
	    type: "path",

	    d: "m 85,115 c -2,5 32,5 30,0 l -5,-30 c -1,-5 -19,-5 -20,0 z",
	  };
	  icn["SP.I.CIVILIAN ASTRONOMICAL SATELLITE"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 97,90 -1,-9 h 8 l -1,9  m -5,20 1,9 h 2 l 1,-9  m 6,-10 h 10  m -36,0 H 92  M 82,90 H 56 v 20 h 26 z  m 36,0 v 20 h 26 V 90 Z  m -26,0 v 20 h 16 V 90 Z",
	  };
	  icn["SP.I.CIVILIAN BIOSATELLITE"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 98,88 c 0,3 -2.5,6 -6,6 -3.5,0 -6,-3 -6,-6 0,-4 2.5,-7 6,-7 3.5,0 6,3 6,7 z  m -6,11 v 20 h 16 V 99 Z  m 26,0 v 20 h 22 V 99 Z  M 82,99 H 60 v 20 h 22 z  m 0,10 h 10  m 16,0 h 10  M 96.192895,82.850539 115,94 114,96 98,87.5",
	  };
	  icn["SP.I.CIVILIAN CAPSULE"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 85,115 c -2,5 32,5 30,0 l -5,-30 c -1,-5 -19,-5 -20,0 z",
	  };
	  icn["SP.I.CIVILIAN COMMUNICATIONS SATELLITE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,90 0,9 M 75,81 c 16,12 34,12 50,0",
	    },
	  ];
	  icn["SP.I.CIVILIAN EARTH OBSERVATION SATELLITE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 107,113 c 0,4 -3.1,7 -7,7 -3.9,0 -7,-3.1 -7,-7 0,-3.9 3.1,-7 7,-7 4,0 7,3.1 7,7 z  M 91.905742,81 92,97 h 16 l -0.0943,-16 z  M 117.90574,81 118,97 h 22 l -0.0943,-16 z  m -35.999998,0 h -22 L 60,97 H 82 Z  M 82,89 h 10  m 16,0 h 10",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 88,107 c 8,-9 16,-9 24,0",
	    },
	  ];
	  icn["SP.I.CIVILIAN MINIATURIZED SATELLITE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 92,94 v 12 h 16 V 94 Z  m 26,0 v 12 h 14 V 94 Z  M 82,94 H 68 v 12 h 14 z  m 0,6 h 9.1  m 17,0 h 10",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 90,119 10,-9 10,9 m -20,-38 10,9 10,-9 m 35,9 -10,10 10,10 M 55,90 65,100 55,110",
	    },
	  ];
	  icn["SP.I.CIVILIAN NAVIGATIONAL SATELLITE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 88,87 c 8,6 16,6 24,0 m -20,8 8,-14 8,14",
	    },
	  ];
	  icn["SP.I.CIVILIAN ORBITER SHUTTLE"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 87,115 6,-24 c 3,-12 11,-12 14,0 l 6,24 h -12 l -1,5 -1,-5 z",
	  };
	  icn["SP.I.CIVILIAN SATELLITE"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 108,100 h 10  m -36,0 H 92  M 82,90 H 56 v 20 h 26 z  m 36,0 v 20 h 26 V 90 Z  m -26,0 v 20 h 16 V 90 Z",
	  };
	  icn["SP.I.CIVILIAN SPACE STATION"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,

	    d: "m 97.5,112.5 0,7.5 5,0 0,-7.5 z m 0,-32.5 5,0 0,26.4 -5,0 z m -0.3,7.6 C 83.3,88.2 72.5,93.5 72.5,100 c 0,6.9 12.3,12.5 27.5,12.5 15.2,0 27.5,-5.6 27.5,-12.5 0,-6.5 -11,-11.9 -25,-12.4 l 0,5.6 c 9.9,0.4 17.5,3.2 17.5,6.6 0,3.7 -8.9,6.7 -19.8,6.7 -10.9,0 -19.8,-3 -19.8,-6.7 0,-3.4 7.4,-6.1 17.1,-6.6 l 0,-5.6 c -0.1,0 -0.2,-0 -0.3,0 z",
	  };
	  icn["SP.I.CIVILIAN SPACE VEHICLE"] = text("SV");
	  icn["SP.I.CIVILIAN SPACE VEHICLE"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["SP.I.CIVILIAN SPACE VEHICLE"].stroke = black;
	  icn["SP.I.CIVILIAN SPACE VEHICLE"].strokewidth = 3;
	  icn["SP.I.CIVILIAN TETHERED SATELLITE"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,

	    d: "m 120,87 -20,12  m 33,-12 c 0,3.6 -2.9,6.5 -6.5,6.5 -3.6,0 -6.5,-2.9 -6.5,-6.5 0,-3.6 2.9,-6.5 6.5,-6.5 3.6,0 6.5,2.9 6.5,6.5 z  m -25,22 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	  };
	  icn["SP.I.CIVILIAN WEATHER SATELLITE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 22,
	      text: "WX",
	    },
	  ];
	  icn["SP.I.CIVILIAN"] = text("CIV");
	  icn["SP.I.CIVILIAN"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["SP.I.CIVILIAN"].stroke = black;
	  icn["SP.I.CIVILIAN"].strokewidth = 3;
	  icn["SP.I.COMMUNICATIONS SATELLITE"] = [
	    {
	      type: "path",
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,90 0,9 M 75,81 c 16,12 34,12 50,0",
	    },
	  ];
	  icn["SP.M1.CYBERSPACE"] = textm1("CYB");
	  icn["SP.M2.CYBERSPACE"] = textm2("CYB");
	  icn["SP.I.EARTH OBSERVATION SATELLITE"] = [
	    {
	      type: "path",
	      d: "m 107,113 c 0,4 -3.1,7 -7,7 -3.9,0 -7,-3.1 -7,-7 0,-3.9 3.1,-7 7,-7 4,0 7,3.1 7,7 z  M 91.905742,81 92,97 h 16 l -0.0943,-16 z  M 117.90574,81 118,97 h 22 l -0.0943,-16 z  m -35.999998,0 h -22 L 60,97 H 82 Z  M 82,89 h 10  m 16,0 h 10",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 88,107 c 8,-9 16,-9 24,0",
	    },
	  ];
	  icn["SP.I.FF.CREWED SPACE VEHICLE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100.3,62.4 c -1.8,-0 -4.3,3.7 -4.5,5.4 -2.5,11.3 -3.4,23.1 -6.2,33.4 -2.9,6.7 -6.8,8.3 -9.9,12.1 -3,3.6 -8.5,10.4 -8.5,10.4 l 0,6.4 c 0,0 5.9,0.9 8.9,1.2 3,0.2 8.7,0.1 8.7,0.1 l 0.3,4.3 4.3,0.2 0.2,3.1 5.8,0 0.9,6.5 0.9,-6.4 5.8,0 0.2,-3.1 4.3,-0.2 0.3,-4.3 c 0,0 5.7,0.1 8.7,-0.1 3,-0.2 8.9,-1.2 8.9,-1.2 l 0,-6.4 c 0,0 -5.5,-6.7 -8.5,-10.3 -3.1,-3.8 -7,-5.4 -9.9,-12.1 -2.8,-10.4 -3.7,-22.2 -6.2,-33.4 -0.3,-2.9 -2.7,-5.5 -4.5,-5.5 z",
	  };
	  icn["SP.I.FF.SATELLITE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 115,70 20,0 0,55 -20,0 z m -25,5 20,0 0,45 -20,0 z m -25,-5 20,0 0,55 -20,0 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "M80,135 c10,-10 30,-10 40,0 M100,127 L100,100 M70,100 L130,100",
	    },
	  ];
	  icn["SP.I.FF.SPACE STATION"] = [
	    {
	      type: "path",
	      d: "m 103.1,97.4 c -12.4,0.3 -25.7,0.1 -36.7,6.7 -4.1,2.1 -8.5,5.9 -7.8,11 0.2,3.7 0.3,7.4 0.5,11.1 6.2,7.8 16.6,10.4 26,11.8 14,1.8 28.5,1.2 42.1,-3 5.2,-1.7 10.4,-4.3 14.2,-8.3 0.3,-5.1 -0.3,-10.4 0.7,-15.3 -1.2,-4.3 -5.9,-6.4 -9.7,-8.2 -9.2,-4 -19.3,-5.4 -29.2,-5.6 z m -3.2,9.6 c 10.1,-0.2 20.5,1.9 29.1,7.4 -13,8.4 -29.6,9.7 -44.3,6.1 -4.9,-1.3 -9.7,-3.3 -13.7,-6.4 8.8,-4.9 18.9,-6.9 28.9,-7.2 z",
	      fill: STD2525 ? iconFillColor : none,
	    },
	    {
	      type: "path",
	      fill: false,
	      stroke: "black",
	      d: "m 96.9,107 c 0.7,-8.1 1.4,-16.3 2.1,-24.4 M 89.3,121.8 c 3.1,-13.2 6.2,-26.3 9.3,-39.5 4.9,12.7 9.7,25.5 14.6,38.2 m 27.8,-5.3 c -0.1,3.9 -0.2,7.8 -0.3,11.6 M 58.6,113.3 c 0.2,4.5 0.3,9 0.5,13.5 m -0.5,-1.2 c 3.5,6.3 11,8.6 17.6,10.5 16.4,4.1 33.9,3.9 50.1,-0.8 5.5,-1.8 11.8,-4.3 14.7,-9.7 m 0.5,-13 c -0.5,5.4 -6.1,8.1 -10.5,10 -15.4,5.7 -32.4,6.1 -48.5,3.6 -7.9,-1.4 -16.3,-3.4 -22.2,-9.2 -3.6,-3.9 -0.9,-9.6 3.4,-11.7 8.3,-5.2 18.3,-6.6 27.9,-7.5 13.5,-1 27.5,0 40.2,5.1 4.2,1.8 9.3,4.6 9.7,9.7 z m -13.3,1.6 c -8.2,-5.9 -18.8,-6.8 -28.6,-7 -9.5,0.1 -19.5,1.2 -27.6,6.4 l -0.6,0.5 m 58.9,-2.6 c -0.8,4.8 -6.1,6.4 -10,7.8 -13.2,3.7 -27.4,3.7 -40.5,-0 -3.8,-1.2 -8.1,-2.8 -9.8,-6.7 -0.7,-4.9 5,-7.1 8.7,-8.5 12.7,-4 26.6,-4 39.5,-1 4.4,1.2 9.8,2.8 11.9,7.3 l 0.1,0.5 0,0.5 z",
	    },
	    {
	      type: "path",
	      fill: "black",
	      stroke: false,
	      d: "M 75.2,93.1 C 88.9,87 102.6,80.8 116.3,74.7 c 2.3,1.3 4.7,2.6 7,3.9 -13.7,6 -27.3,12 -41,18 -2.4,-1.2 -4.8,-2.3 -7.2,-3.5 z",
	    },
	  ];
	  icn["SP.I.MANUAL TRACK"] = text("MAN");
	  icn["SP.I.MILITARY"] = text("MIL");
	  icn["SP.I.MINIATURIZED SATELLITE"] = [
	    {
	      type: "path",
	      d: "m 92,94 v 12 h 16 V 94 Z  m 26,0 v 12 h 14 V 94 Z  M 82,94 H 68 v 12 h 14 z  m 0,6 h 9.1  m 17,0 h 10",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 90,119 10,-9 10,9 m -20,-38 10,9 10,-9 m 35,9 -10,10 10,10 M 55,90 65,100 55,110",
	    },
	  ];
	  icn["SP.I.NAVIGATIONAL SATELLITE"] = [
	    {
	      type: "path",
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 88,87 c 8,6 16,6 24,0 m -20,8 8,-14 8,14",
	    },
	  ];
	  icn["SP.I.ORBITER SHUTTLE"] = {
	    type: "path",
	    d: "m 87,115 6,-24 c 3,-12 11,-12 14,0 l 6,24 h -12 l -1,5 -1,-5 z",
	  };
	  icn["SP.I.PLANETARY LANDER"] = text("PL");
	  icn["SP.I.PLANETARY LANDER"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["SP.I.PLANETARY LANDER"].stroke = black;
	  icn["SP.I.PLANETARY LANDER"].strokewidth = 3;
	  icn["SP.I.RE-ENTRY VEHICLE"] = text("RV");
	  icn["SP.I.RECONNAISSANCE SATELLITE"] = {
	    type: "path",

	    d: "m 106,100 9,20  m -21,-20 -9,20  m 17,-20 3,20  m -7,-20 -3,20  m 13,-30 h 10  M 82,90 H 92  M 82,81 H 60 v 19 h 22 z  m 36,0 v 19 h 22 V 81 Z  m -26,0 v 19 h 16 V 81 Z",
	  };
	  icn["SP.I.SATELLITE, GENERAL"] = text("SAT");
	  icn["SP.I.SATELLITE"] = {
	    type: "path",

	    d: "m 108,100 h 10  m -36,0 H 92  M 82,90 H 56 v 20 h 26 z  m 36,0 v 20 h 26 V 90 Z  m -26,0 v 20 h 16 V 90 Z",
	  };
	  icn["SP.I.SPACE LAUNCH VEHICLE"] = text("SLV");
	  icn["SP.I.SPACE STATION"] = {
	    type: "path",
	    d: "m 97.5,112.5 0,7.5 5,0 0,-7.5 z m 0,-32.5 5,0 0,26.4 -5,0 z m -0.3,7.6 C 83.3,88.2 72.5,93.5 72.5,100 c 0,6.9 12.3,12.5 27.5,12.5 15.2,0 27.5,-5.6 27.5,-12.5 0,-6.5 -11,-11.9 -25,-12.4 l 0,5.6 c 9.9,0.4 17.5,3.2 17.5,6.6 0,3.7 -8.9,6.7 -19.8,6.7 -10.9,0 -19.8,-3 -19.8,-6.7 0,-3.4 7.4,-6.1 17.1,-6.6 l 0,-5.6 c -0.1,0 -0.2,-0 -0.3,0 z",
	  };
	  icn["SP.I.SPACE VEHICLE"] = text("SV");
	  icn["SP.I.TETHERED SATELLITE"] = {
	    type: "path",

	    d: "m 120,87 -20,12  m 33,-12 c 0,3.6 -2.9,6.5 -6.5,6.5 -3.6,0 -6.5,-2.9 -6.5,-6.5 0,-3.6 2.9,-6.5 6.5,-6.5 3.6,0 6.5,2.9 6.5,6.5 z  m -25,22 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	  };
	  icn["SP.I.WEATHER SATELLITE"] = [
	    {
	      type: "path",
	      d: "m 108,109 h 10  m -36,0 H 92  M 82,99 H 60 v 20 h 22 z  m 36,0 v 20 h 22 V 99 Z  m -26,0 v 20 h 16 V 99 Z",
	    },
	    {
	      type: "text",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 95,
	      fontsize: 22,
	      text: "WX",
	    },
	  ];
	  icn["SP.M1.GEOSTATIONARY ORBIT (GO)"] = textm1("GO");
	  icn["SP.M1.GEOSYNCHRONOUS ORBIT (GSO)"] = textm1("GSO");
	  icn["SP.M1.HIGH EARTH ORBIT (HEO)"] = textm1("HEO");
	  icn["SP.M1.LOW EARTH ORBIT (LEO)"] = textm1("LEO");
	  icn["SP.M1.MEDIUM EARTH ORBIT (MEO)"] = textm1("MEO");
	  icn["SP.M1.MOLNIYA ORBIT (MO)"] = textm1("MO");
	  icn["SP.M2.HIGH POWER MICROWAVE"] = textm2("HPM");
	  icn["SP.M2.INFRARED"] = textm2("IR");
	  icn["SP.M2.LASER"] = {
	    type: "path",

	    fill: false,
	    d: "m 130,129 h -17 l -3,7 -3,-13 -4,13 -3.1,-13 -3.4,6 h -9.9 l -3.3,7 -3.3,-13 -3.3,13 -3.3,-13 -3.3,13  m 52.9,-13 7,6 -7,7",
	  };
	  icn["SP.M2.MAINTENANCE"] = {
	    type: "path",
	    fill: false,

	    d: "M75,125 c8,0 8,16 0,16 m8,-8 l35,0 m8,-8 c-8,0 -8,16 0,16",
	  };
	  icn["SP.M2.MINE"] = {
	    type: "path",

	    d: "m 111,133 c 0,4 -5,6 -11,6 -6.3,0 -11.4,-2 -11.4,-6 0,-2 5.1,-5 11.4,-5 6,0 11,3 11,5 z  m -2,-11 -17.5,23  m 0,-23 17.5,23  m -9,-23 v 23",
	  };
	  icn["SP.M2.OPTICAL"] = textm2("O");
	  icn["SP.M2.RADAR"] = textm2("R");
	  icn["SP.M2.REFUEL"] = textm2("K");
	  icn["SP.M2.SIGNALS INTELLIGENCE (SIGINT)"] = textm2("SI"); //Space Missile
	  icn["SP.M2.ELECTROMAGNETIC WARFARE (ASAT)"] = textm2("EW");
	  icn["SP.M2.TUG"] = textm2("TUG");
	  icn["SPACE.MISSILE.ICON"] = {
	    type: "path",
	    d: "m 87,135 v -11 l 6,-5 V 65 l 7,-10 7,10 v 54 l 6,5 v 11 l -13,-10 z",
	  };
	  if (STD2525 || numberSIDC)
	    icn["SPACE.MISSILE.ICON"].fill = frame
	      ? colors.fillColor.Unknown
	      : colors.iconFillColor.Unknown;
	  icn["SPACE.MISSILE.M1.BALLISTIC"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "B",
	  };
	  icn["SPACE.MISSILE.M1.HYPERSONIC"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "H",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "V",
	    },
	  ];
	  icn["SPACE.MISSILE.M1.INTERCEPTOR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "I",
	  };
	  icn["SPACE.MISSILE.M1.SPACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "P",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.ARROW"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "A",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.GROUND-BASED INTERCEPTOR (GBI)"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "G",
	  };
	  icn["SPACE.MISSILE.M2.INTERCONTINENTAL"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "I",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "C",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.INTERMEDIATE RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "I",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.LONG RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "L",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.MEDIUM RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "M",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.PATRIOT"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "P",
	  };
	  icn["SPACE.MISSILE.M2.SHORT RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.SPACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "P",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.STANDARD MISSILE - 3 (SM-3)"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "3",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.STANDARD MISSILE - TERMINAL PHASE (SM-T)"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "T",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.TERMINAL HIGH-ALTITUDE AREA DEFENSE (THAAD)"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "T",
	  };
	  icn["SPACE.MISSILE.M2.CLOSE RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "C",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.DEBRIS"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "D",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "B",
	    },
	  ];
	  icn["SPACE.MISSILE.M2.UNKNOWN"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "U",
	  };
	  icn["SPACE.PLANET LANDER"] = text("PL");
	  //*/
	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var space$1 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$7],
	  icons: function space(sId, bbox, icn, _STD2525) {
	    // SPACE =========================================================================
	    sId["S-P-------"] = [];
	    sId["S-P-S-----"] = [icn["SP.I.FF.SATELLITE"]];
	    sId["S-P-V-----"] = [icn["SP.I.FF.CREWED SPACE VEHICLE"]];
	    sId["S-P-T-----"] = [icn["SP.I.FF.SPACE STATION"]];
	    sId["S-P-L-----"] = [icn["SP.I.SPACE LAUNCH VEHICLE"]];
	  },
	};

	function icons$6 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const frame = metadata.frame;
	  const affiliation = metadata.affiliation || "Friend";
	  //const baseGeometry = metadata.baseGeometry;
	  const numberSIDC = metadata.numberSIDC;
	  //const fillColor = colors.fillColor[affiliation];
	  const iconColor = colors.iconColor[affiliation];
	  const iconFillColor = colors.iconFillColor[affiliation];
	  //  const none = colors.none[affiliation];
	  const black = colors.black[affiliation];
	  //const white = colors.white[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["AR.I.MILITARY"] = text("MIL");
	  icn["AR.I.CIVILIAN"] = text("CIV");
	  icn["AR.I.CIVILIAN"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["AR.I.CIVILIAN"].stroke = black;
	  icn["AR.I.CIVILIAN"].strokewidth = 3;
	  icn["AR.I.MILITARY FIXED WING"] = {
	    type: "path",

	    d: "M100,100 L130,88 c15,0 15,24 0,24 L100,100 70,112 c-15,0 -15,-24 0,-24 Z",
	  };
	  icn["AR.I.CIVILIAN FIXED WING"] = {
	    type: "path",

	    fill: false,
	    d: "M100,100 L130,88 c15,0 15,24 0,24 L100,100 70,112 c-15,0 -15,-24 0,-24 Z",
	  };
	  icn["AR.I.FF.CIVILIAN FIXED WING"] = {
	    type: "path",

	    stroke: black,
	    d: "M62,80 l30,0 0,-10 16,0 0,10 30,0 0,15 -30,0 0,25 10,0 0,5 -36,0 0,-5 10,0 0,-25 -30,0 Z M95,70 l0,-5 10,0 0,5",
	    fill: STD2525 ? iconFillColor : false,
	  };
	  icn["AR.I.MILITARY ROTARY WING"] = {
	    type: "path",

	    d: "M60,85 l40,15 40,-15 0,30 -40,-15 -40,15 z",
	  };
	  icn["AR.I.CIVILIAN ROTARY WING"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "M60,85 l40,15 40,-15 0,30 -40,-15 -40,15 z",
	  };
	  icn["AR.I.FF.CIVILIAN ROTARY WING"] = [
	    {
	      type: "path",

	      stroke: black,
	      d: "M80,70 l10,10 M120,110 l-10,-10 M80,110 l10,-10 M120,70 l-10,10 M100,115 l0,20 M95,135 l10,0",
	      fill: false,
	    },
	    {
	      type: "path",

	      stroke: black,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 113,90 c -0.3,8.8 -1.9,20.3 -10.8,24.6 -7.7,2 -12.3,-7.1 -13.8,-13.3 -2.6,-11.5 -2.3,-26 6.9,-34.6 6.0,-4.9 13.1,1.9 14.9,7.8 2,4.9 2.8,10.2 2.8,15.5 z",
	    },
	  ];
	  icn["AR.I.MILITARY BALLOON"] = [
	    { type: "circle", cx: 100, cy: 95, r: 15 },
	    { type: "path", d: "M95,110 l0,10 10,0 0,-10 z" },
	  ];
	  icn["AR.I.FF.MILITARY BALLOON"] = [
	    { type: "path", d: "M90,115 l20,0 0,20 -20,0 z" },
	    { type: "circle", cx: 100, cy: 90, r: 35 },
	  ];
	  icn["AR.I.CIVILIAN BALLOON"] = [
	    {
	      type: "circle",

	      fill: STD2525 || numberSIDC ? iconFillColor : false,
	      stroke: black,
	      cx: 100,
	      cy: 95,
	      r: 15,
	    },
	    {
	      type: "path",

	      fill: STD2525 || numberSIDC ? iconFillColor : false,
	      stroke: black,
	      d: "M95,110 l0,10 10,0 0,-10 z",
	    },
	  ];
	  icn["AR.I.FF.CIVILIAN BALLOON"] = [
	    {
	      type: "path",

	      fill: STD2525 || numberSIDC ? iconFillColor : false,
	      stroke: black,
	      d: "M90,125 l20,0 0,10 -20,0 z",
	    },
	    {
	      type: "circle",

	      fill: STD2525 || numberSIDC ? iconFillColor : false,
	      stroke: black,
	      cx: 100,
	      cy: 90,
	      r: 35,
	    },
	  ];
	  icn["AR.I.MILITARY AIRSHIP"] = {
	    type: "path",

	    d: "m 126,107 c -4,2 -10,3 -16,3 l 10,10 h 10 z  m -6,-27 -9,9.4 c 5,0.6 11,1.7 15,3.2 L 130,80 Z  m 15,20 c 0,6 -16,11 -35,11 -19.3,0 -35,-5 -35,-11 0,-6.1 15.7,-11.1 35,-11.1 19,0 35,5 35,11.1 z",
	  };
	  icn["AR.I.CIVILIAN AIRSHIP"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "m 126,107 c -4,2 -10,3 -16,3 l 10,10 h 10 z  m -6,-27 -9,9.4 c 5,0.6 11,1.7 15,3.2 L 130,80 Z  m 15,20 c 0,6 -16,11 -35,11 -19.3,0 -35,-5 -35,-11 0,-6.1 15.7,-11.1 35,-11.1 19,0 35,5 35,11.1 z",
	  };
	  icn["AR.I.CIVILIAN MEDICAL EVACUATION"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "M93,83 l14,0 0,10 10,0 0,14 -10,0 0,10 -14,0 0,-10 -10,0 0,-14 10,0 Z",
	  };
	  icn["AR.I.UNMANNED AERIAL VEHICLE"] = {
	    type: "path",
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	    stroke: false,
	  };
	  icn["AR.I.AIR DECOY"] = {
	    type: "path",
	    d: "M65,95 l15,-15 0,30 Z M92.5,95 l15,-15 0,30 Z M120,95 l15,-15 0,30 Z M65,120 l70,0 0,-5 -70,0 Z",
	  };
	  icn["SU.IC.AIR DECOY DSymbol"] = {
	    type: "path",
	    d: "M 85 81 L 65 98 L 85 119 L 85 81 z M 110 81 L 90 98 L 110 119 L 110 81 z M 135 81 L 115 98 L 135 119 L 135 81 z",
	  };
	  icn["AR.I.MEDICAL EVACUATION"] = {
	    type: "path",

	    d: "M93,83 l14,0 0,10 10,0 0,14 -10,0 0,10 -14,0 0,-10 -10,0 0,-14 10,0 Z",
	  };
	  icn["AR.I.ATTACK/STRIKE"] = text("A");
	  icn["AR.I.BOMBER"] = text("B");
	  icn["AR.I.CARGO"] = text("C");
	  icn["AR.I.ESCORT"] = text("E");
	  icn["AR.I.FIGHTER"] = text("F");
	  icn["AR.I.FIGHTER INTERCEPTOR"] = text("I");
	  icn["AR.I.JAMMER / ELECTRONIC COUNTER-MEASURES"] = text("J");
	  icn["AR.I.TANKER"] = text("K");
	  icn["AR.I.PATROL"] = text("P");
	  icn["AR.I.RECONNAISSANCE"] = text("R");
	  icn["AR.I.2525 PHOTOGRAPHIC"] = text("X");
	  icn["AR.I.TRAINER"] = text("T");
	  icn["AR.I.UTILITY"] = text("U");
	  icn["AR.I.VSTOL"] = text(STD2525 && !numberSIDC ? "L" : "V");
	  icn["AR.I.AIRBORNE COMMAND POST"] =
	    STD2525 && !numberSIDC ? text("D") : text("ACP");
	  icn["AR.I.AIRBORNE EARLY WARNING"] =
	    STD2525 && !numberSIDC ? text("W") : text("AEW");
	  icn["AR.I.ANTISURFACE WARFARE"] =
	    STD2525 && !numberSIDC ? text("N") : text("ASUW");
	  icn["AR.I.ANTISUBMARINE WARFARE"] =
	    STD2525 && !numberSIDC ? text("S") : text("ASW");
	  icn["AR.I.COMMUNICATIONS"] = STD2525 && !numberSIDC ? text("Y") : text("COM");
	  icn["AR.I.COMBAT SEARCH AND RESCUE"] = text("CSAR");
	  icn["AR.I.ELECTRONIC SUPPORT MEASURES"] = STD2525 ? text("Z") : text("ESM");
	  icn["AR.I.GOVERNMENT"] = text("GOV");
	  icn["AR.I.MINE COUNTERMEASURES"] = text("MCM");
	  icn["AR.I.PERSONNEL RECOVERY"] = STD2525 ? text("H") : text("PRO");
	  icn["AR.I.PASSENGER"] = text("PX");
	  icn["AR.I.SEARCH AND RESCUE"] = text("SAR");
	  icn["AR.I.SUPRESSION OF ENEMY AIR DEFENCE"] = text("SEAD");
	  icn["AR.I.SPECIAL OPERATIONS FORCES"] = text("SOF");
	  icn["AR.I.ULTRA LIGHT"] = text("UL");
	  icn["AR.I.VIP"] = text("VIP");
	  icn["AR.I.FF.MILITARY FIXED WING"] = {
	    type: "path",
	    d: "m 99.2,58.2 c -3,0.8 -2.5,5.8 -2.5,5.8 l -0.3,16 -37.2,36.5 1.3,4.6 L 96.7,96.6 97,128.6 l -8.5,8.2 0,4.6 9.3,-4.2 c 0.7,0.6 1.8,1.7 1.8,1.7 0,0 1.2,-1.1 1.9,-1.7 l 9.3,4.2 0,-4.6 -8.5,-8.2 0.3,-32 36.2,24.5 1.3,-4.6 -37.2,-36.5 -0.3,-16 c 0,0 0.5,-5 -2.5,-5.8 -0.4,-0.1 -0.7,-0.1 -1.1,0 z",
	    stroke: false,
	  };
	  //2525D
	  icn["AR.I.FIXED-WING DSymbol"] = {
	    type: "path",

	    d: STD2525
	      ? "M 99.4 80.8 C 97.9 81.1 98.1 83.4 98.1 83.4 L 98 90.7 L 78.6 107.4 L 79.3 109.4 L 98.1 98.3 L 98.3 112.9 L 93.9 116.6 L 93.9 118.7 L 98.8 116.8 C 99.1 117 99.7 117.5 99.7 117.5 C 99.7 117.5 100.4 117 100.7 116.8 L 105.6 118.7 L 105.6 116.6 L 101.1 112.9 L 101.3 98.3 L 120.2 109.4 L 120.9 107.4 L 101.5 90.7 L 101.3 83.4 C 101.3 83.4 101.6 81.1 100 80.8 C 99.8 80.8 99.6 80.8 99.4 80.8 z"
	      : "M100,100 L130,88 c15,0 15,24 0,24 L100,100 70,112 c-15,0 -15,-24 0,-24 Z",
	  };
	  icn["AR.I.CIVILIAN FIXED-WING DSymbol"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: STD2525
	      ? "m 75.1,90.3 19.6,0 0,-6.5 10.5,0 0,6.5 19.6,0 0,9.7 -19.6,0 0,16.2 6.5,0 0,3.2 -23.6,0 0,-3.2 6.5,0 0,-16.2 -19.6,0 z m 21.6,-6.5 0,-3.2 6.5,0 0,3.2"
	      : "M100,100 L130,88 c15,0 15,24 0,24 L100,100 70,112 c-15,0 -15,-24 0,-24 Z",
	  };
	  icn["AR.I.FIGHTER/BOMBER"] = text("F/B");
	  icn["AR.I.ELECTRONIC SUPPORT"] = STD2525 ? text("ES") : text("ESM");
	  icn["AR.I.PERSONNEL RECOVERY DSymbol"] = text("PR");
	  icn["AR.I.PHOTOGRAPHIC RECONNAISSANCE"] = text("PH");
	  icn["AR.I.ELECTRONIC ATTACK (EA)"] = text("EA");
	  icn["AR.I.VERTICAL-TAKEOFF UAV (VT-UAV)"] = {
	    type: "path",

	    d: "m 70,84 30,14 30,-14 V 81 L 100,91 70,81 Z  m 0,9 30,15 30,-15 v 25 l -30,-10 -30,10 z",
	  };
	  icn["AR.I.TETHERED LIGHTER THAN AIR"] = {
	    type: "path",

	    d: "M 75,110 85,95 m -5,20 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m 15,-6 0,11 10,0 0,-11 m 10,-14 c 0,8.3 -6.7,15 -15,15 -8.3,0 -15,-6.7 -15,-15 0,-8.3 6.7,-15 15,-15 8.3,0 15,6.7 15,15 z",
	  };
	  icn["AR.I.CIVILIAN TETHERED LIGHTER THAN AIR"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "M 75,110 85,95 m -5,20 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m 15,-6 0,11 10,0 0,-11 m 10,-14 c 0,8.3 -6.7,15 -15,15 -8.3,0 -15,-6.7 -15,-15 0,-8.3 6.7,-15 15,-15 8.3,0 15,6.7 15,15 z",
	  };
	  icn["AR.I.CIVILIAN UNMANNED AERIAL VEHICLE"] = {
	    type: "path",

	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	  };
	  icn["AR.I.WEAPON"] = text("WPN");
	  icn["AR.I.UNDERWATER DECOY DSymbol"] = {
	    type: "path",

	    d: "M 86.6,82.8 68.7,100 86.6,117 Z  m 22.4,0 -18,17.2 18,17 z  m 23,0 -18,17.2 18,17 z",
	  };
	  icn["AR.I.BOMB"] = text("BOMB");
	  icn["AR.I.MANUAL TRACK"] = text("MAN");
	  icn["AIR.M1.ATTACK"] = textm1("A");
	  icn["AIR.M1.BOMBER"] = textm1("B");
	  icn["AIR.M1.CARGO"] = textm1("C");
	  icn["AIR.M1.FIGHTER"] = textm1("F");
	  icn["AIR.M1.INTERCEPTOR"] = textm1("I");
	  icn["AIR.M1.TANKER"] = textm1("K");
	  icn["AIR.M1.UTILITY"] = textm1("U");
	  icn["AIR.M1.VSTOL"] = textm1(STD2525 && !numberSIDC ? "L" : "V");
	  icn["AIR.M1.PASSENGER"] = textm1("PX");
	  icn["AIR.M1.ULTRA LIGHT"] = textm1("UL");
	  icn["AIR.M1.AIRBORNE COMMAND POST"] =
	    STD2525 && !numberSIDC ? textm1("D") : textm1("ACP");
	  icn["AIR.M1.ANTISURFACE WARFARE"] =
	    STD2525 && !numberSIDC ? textm1("N") : textm1("ASUW");
	  icn["AIR.M1.AIRBORNE EARLY WARNING"] =
	    STD2525 && !numberSIDC ? textm1("W") : textm1("AEW");
	  icn["AIR.M1.GOVERNMENT"] = textm1("GOV");
	  icn["AIR.M1.HYPERSONIC"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "H",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "V",
	    },
	  ];
	  icn["AIR.M1.MEDEVAC"] = {
	    type: "path",

	    stroke: false,
	    d: "M95.5,80 l9,0 0,-9 9,0 0,-9 -9,0 0,-9 -9,0 0,9 -9,0 0,9 9,0 Z",
	  };
	  icn["AIR.M1.ESCORT"] = textm1("E");
	  icn["AIR.M1.INTENSIVE CARE"] = textm1("IC");
	  icn["AIR.M1.JAMMER / ELECTRONIC COUNTER-MEASURES"] = textm1("J");
	  icn["AIR.M1.PATROL"] = textm1("P");
	  icn["AIR.M1.RECONNAISSANCE"] = textm1("R");
	  icn["AIR.M1.TRAINER"] = textm1("T");
	  icn["AIR.M1.PHOTOGRAPHIC"] =
	    STD2525 && !numberSIDC ? textm1("X") : textm1("PH");
	  icn["AIR.M1.PERSONNEL RECOVERY"] = textm1("PR");
	  icn["AIR.M1.ANTISUBMARINE WARFARE"] =
	    STD2525 && !numberSIDC ? textm1("S") : textm1("ASW");
	  icn["AIR.M1.COMMUNICATIONS"] =
	    STD2525 && !numberSIDC ? textm1("Y") : textm1("COM");
	  icn["AIR.M1.ELECTRONIC SURVEILLANCE MEASURES"] = STD2525
	    ? textm1("Z")
	    : textm1("ESM");
	  icn["AIR.M1.MINE COUNTERMEASURES"] = textm1("MCM");
	  icn["AIR.M1.SEARCH AND RESCUE"] = textm1("SAR");
	  icn["AIR.M1.SPECIAL OPERATIONS FORCES"] = textm1("SOF");
	  icn["AIR.M1.SURFACE WARFARE"] = textm1("SUW");
	  icn["AIR.M1.VIP"] = textm1("VIP");
	  icn["AIR.M1.COMBAT SEARCH AND RESCUE"] =
	    STD2525 && !numberSIDC ? textm1("H") : textm1("CSAR");
	  icn["AIR.M1.SUPRESSION OF ENEMY AIR DEFENCE"] = textm1("SEAD");
	  icn["AIR.M1.UNMANNED AERIAL VEHICLE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 80,65 20,13 20,-13 0,-5 -20,10 -20,-10 z",
	  };
	  icn["AIR.M1.BOOM-ONLY"] = textm1("B");
	  icn["AIR.M1.DROUGE-ONLY"] = textm1("D");
	  //2525D
	  icn["AIR.M1.ELECTRONIC SUPPORT (ES)"] = STD2525
	    ? textm1("ES")
	    : textm1("ESM");
	  icn["AIR.M1.HIJACKER"] = textm1("HJ");
	  icn["AIR.M1.CYBERSPACE"] = textm1("CYB");
	  icn["AIR.M1.FIGHTER/BOMBER"] = textm1("F/B");
	  icn["AIR.M1.ELECTRONIC ATTACK (EA)"] = textm1("EA");
	  icn["AIR.M1.MULTIMISSION"] = textm1("MM");
	  icn["AIR.M1.HIJACKING"] = textm1("H");
	  icn["AIR.M1.ASW HELO-LAMPS"] = textm1("LP");
	  icn["AIR.M1.ASW HELO - SH-60R"] = textm1("60R");
	  icn["AIR.M2.HEAVY"] = textm2("H");
	  icn["AIR.M2.MEDIUM"] = textm2("M");
	  icn["AIR.M2.LIGHT"] = textm2("L");
	  icn["AIR.M2.BOOM-ONLY"] = textm2("B");
	  icn["AIR.M2.DROUGE-ONLY"] = textm2("D");
	  icn["AIR.M2.BOOM AND DROUGE"] = textm2("B/D");
	  icn["AIR.M2.CLOSE RANGE"] = textm2("CR");
	  icn["AIR.M2.SHORT RANGE"] = textm2("SR");
	  icn["AIR.M2.MEDIUM RANGE"] = textm2("MR");
	  icn["AIR.M2.LONG RANGE"] = textm2("LR");
	  icn["AIR.M2.PHOTOGRAPHIC"] = textm2("P");
	  icn["AIR.M2.CYBERSPACE"] = textm2("CYB");
	  //2525D
	  icn["AIR.M2.DOWNLINKED"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 140,
	    fontsize: 25,
	    text: "DL",
	  };
	  icn["AIR.MISSILE.ICON"] = {
	    type: "path",
	    d: "m 87,135 v -11 l 6,-5 V 65 l 7,-10 7,10 v 54 l 6,5 v 11 l -13,-10 z",
	  };
	  if (STD2525 || numberSIDC)
	    icn["AIR.MISSILE.ICON"].fill = frame
	      ? colors.fillColor.Unknown
	      : colors.iconFillColor.Unknown;
	  icn["AIR.MISSILE.IC.ANTIBALLISTIC MISSILE"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 25,
	    text: "ABM",
	  };
	  icn["AIR.MISSILE.IC.BOMB"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 100,
	    fontsize: 25,
	    text: "BOMB",
	  };
	  icn["AIR.MISSILE.M1.AIR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "A",
	  };
	  icn["AIR.MISSILE.M1.SURFACE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "S",
	  };
	  icn["AIR.MISSILE.M1.SUBSURFACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "U",
	    },
	  ];
	  icn["AIR.MISSILE.M1.SPACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "P",
	    },
	  ];
	  icn["AIR.MISSILE.M1.ANTI-BALLISTIC"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 85,
	      fontsize: 30,
	      text: "A",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 115,
	      fontsize: 30,
	      text: "B",
	    },
	  ];
	  icn["AIR.MISSILE.M1.BALLISTIC"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "B",
	  };
	  icn["AIR.MISSILE.M1.CRUISE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "C",
	  };
	  icn["AIR.MISSILE.M1.LAND"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "L",
	  };
	  //2525D
	  icn["AIR.MISSILE.M1.INTERCEPTOR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 68,
	    y: 100,
	    fontsize: 30,
	    text: "I",
	  };
	  icn["AIR.MISSILE.M2.AIR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "A",
	  };
	  icn["AIR.MISSILE.M2.SURFACE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "S",
	  };
	  icn["AIR.MISSILE.M2.SUBSURFACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "U",
	    },
	  ];
	  icn["AIR.MISSILE.M2.SPACE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "P",
	    },
	  ];
	  icn["AIR.MISSILE.M2.LAUNCHED"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "L",
	  };
	  icn["AIR.MISSILE.M2.MISSILE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "M",
	  };
	  //2525D
	  icn["AIR.MISSILE.M2.PATRIOT"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "P",
	  };
	  icn["AIR.MISSILE.M2.STANDARD MISSILE - 2 (SM-2)"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "2",
	    },
	  ];
	  icn["AIR.MISSILE.M2.STANDARD MISSILE - 6 (SM-6)"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "6",
	    },
	  ];
	  icn["AIR.MISSILE.M2.EVOLVED SEA SPARROW MISSILE (ESSM)"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "S",
	    },
	  ];
	  icn["AIR.MISSILE.M2.ROLLING AIRFRAME MISSILE (RAM)"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 30,
	    text: "R",
	  };
	  icn["AIR.MISSILE.M2.SHORT RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "S",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["AIR.MISSILE.M2.MEDIUM RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "M",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["AIR.MISSILE.M2.INTERMEDIATE RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "I",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["AIR.MISSILE.M2.LONG RANGE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "L",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["AIR.MISSILE.M2.INTERCONTINENTAL"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 85,
	      fontsize: 30,
	      text: "I",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 115,
	      fontsize: 30,
	      text: "C",
	    },
	  ];

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var air$1 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$6],
	  icons: function air(sId, bbox, icn, _STD2525) {
	    // AIR ===========================================================================
	    sId["S-A-------"] = [];
	    sId["S-A-M-----"] = [icn["AR.I.MILITARY"]];
	    sId["S-A-MF----"] = [icn["AR.I.FF.MILITARY FIXED WING"]];
	    sId["S-A-MFB---"] = [icn["AR.I.BOMBER"]];
	    sId["S-A-MFF---"] = [icn["AR.I.FIGHTER"]];
	    sId["S-A-MFFI--"] = [icn["AR.I.FIGHTER INTERCEPTOR"]];
	    sId["S-A-MFT---"] = [icn["AR.I.TRAINER"]];
	    sId["S-A-MFA---"] = [icn["AR.I.ATTACK/STRIKE"]];
	    sId["S-A-MFL---"] = [icn["AR.I.VSTOL"]];
	    sId["S-A-MFK---"] = [icn["AR.I.TANKER"]];
	    sId["S-A-MFKB--"] = [icn["AR.I.TANKER"], icn["AIR.M1.BOOM-ONLY"]];
	    sId["S-A-MFKD--"] = [icn["AR.I.TANKER"], icn["AIR.M1.DROUGE-ONLY"]];
	    sId["S-A-MFC---"] = [icn["AR.I.CARGO"]];
	    sId["S-A-MFCL--"] = [icn["AR.I.CARGO"], icn["AIR.M2.LIGHT"]];
	    sId["S-A-MFCM--"] = [icn["AR.I.CARGO"], icn["AIR.M2.MEDIUM"]];

	    sId["S-A-MFCH--"] = [icn["AR.I.CARGO"], icn["AIR.M2.HEAVY"]];
	    sId["S-A-MFJ---"] = [icn["AR.I.JAMMER / ELECTRONIC COUNTER-MEASURES"]];
	    sId["S-A-MFO---"] = [icn["AR.I.MEDICAL EVACUATION"]];
	    sId["S-A-MFR---"] = [icn["AR.I.RECONNAISSANCE"]];
	    sId["S-A-MFRW--"] = [icn["AR.I.AIRBORNE EARLY WARNING"]];
	    sId["S-A-MFRZ--"] = [icn["AR.I.ELECTRONIC SUPPORT MEASURES"]];
	    sId["S-A-MFRX--"] = _STD2525
	      ? [icn["AR.I.2525 PHOTOGRAPHIC"]]
	      : [icn["AR.I.RECONNAISSANCE"], icn["AIR.M2.PHOTOGRAPHIC"]];
	    sId["S-A-MFP---"] = [icn["AR.I.PATROL"]];
	    sId["S-A-MFPN--"] = [icn["AR.I.ANTISURFACE WARFARE"]];
	    sId["S-A-MFPM--"] = [icn["AR.I.MINE COUNTERMEASURES"]];
	    sId["S-A-MFU---"] = [icn["AR.I.UTILITY"]];
	    sId["S-A-MFUL--"] = [icn["AR.I.UTILITY"], icn["AIR.M2.LIGHT"]];
	    sId["S-A-MFUM--"] = [icn["AR.I.UTILITY"], icn["AIR.M2.MEDIUM"]];
	    sId["S-A-MFUH--"] = [icn["AR.I.UTILITY"], icn["AIR.M2.HEAVY"]];
	    sId["S-A-MFY---"] = [icn["AR.I.COMMUNICATIONS"]];
	    sId["S-A-MFH---"] = [icn["AR.I.PERSONNEL RECOVERY"]];
	    sId["S-A-MFD---"] = [icn["AR.I.AIRBORNE COMMAND POST"]];
	    sId["S-A-MFQ---"] = [icn["AR.I.UNMANNED AERIAL VEHICLE"]];
	    sId["S-A-MFQA--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.ATTACK"],
	    ];
	    sId["S-A-MFQB--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.BOMBER"],
	    ];
	    sId["S-A-MFQC--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.CARGO"],
	    ];
	    sId["S-A-MFQD--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.AIRBORNE COMMAND POST"],
	    ];
	    sId["S-A-MFQF--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.FIGHTER"],
	    ];
	    sId["S-A-MFQH--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.COMBAT SEARCH AND RESCUE"],
	    ];
	    sId["S-A-MFQJ--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.JAMMER / ELECTRONIC COUNTER-MEASURES"],
	    ];
	    sId["S-A-MFQK--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.TANKER"],
	    ];
	    sId["S-A-MFQL--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.VSTOL"],
	    ];
	    sId["S-A-MFQM--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-A-MFQI--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.MINE COUNTERMEASURES"],
	    ];
	    sId["S-A-MFQN--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.ANTISURFACE WARFARE"],
	    ];
	    sId["S-A-MFQP--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.PATROL"],
	    ];
	    sId["S-A-MFQR--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.RECONNAISSANCE"],
	    ];
	    sId["S-A-MFQRW-"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.AIRBORNE EARLY WARNING"],
	    ];
	    sId["S-A-MFQRZ-"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.ELECTRONIC SURVEILLANCE MEASURES"],
	    ];
	    sId["S-A-MFQRX-"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.PHOTOGRAPHIC"],
	    ];
	    sId["S-A-MFQS--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-A-MFQT--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.TRAINER"],
	    ];
	    sId["S-A-MFQU--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.UTILITY"],
	    ];
	    sId["S-A-MFQY--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.COMMUNICATIONS"],
	    ];
	    sId["S-A-MFQO--"] = [
	      icn["AR.I.UNMANNED AERIAL VEHICLE"],
	      icn["AIR.M1.MEDEVAC"],
	    ];
	    sId["S-A-MFS---"] = [icn["AR.I.ANTISUBMARINE WARFARE"]];
	    sId["S-A-MFM---"] = [icn["AR.I.SPECIAL OPERATIONS FORCES"]];
	    sId["S-A-MH----"] = [icn["AR.I.MILITARY ROTARY WING"]];
	    sId["S-A-MHA---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.ATTACK"],
	    ];
	    sId["S-A-MHS---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-A-MHU---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.UTILITY"],
	    ];
	    sId["S-A-MHUL--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.UTILITY"],
	      icn["AIR.M2.LIGHT"],
	    ];
	    sId["S-A-MHUM--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.UTILITY"],
	      icn["AIR.M2.MEDIUM"],
	    ];
	    sId["S-A-MHUH--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.UTILITY"],
	      icn["AIR.M2.HEAVY"],
	    ];
	    sId["S-A-MHI---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.MINE COUNTERMEASURES"],
	    ];
	    sId["S-A-MHH---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.COMBAT SEARCH AND RESCUE"],
	    ];
	    sId["S-A-MHR---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.RECONNAISSANCE"],
	    ];
	    sId["S-A-MHQ---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.UNMANNED AERIAL VEHICLE"],
	    ];
	    sId["S-A-MHC---"] = [icn["AR.I.MILITARY ROTARY WING"], icn["AIR.M1.CARGO"]];
	    sId["S-A-MHCL--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.CARGO"],
	      icn["AIR.M2.LIGHT"],
	    ];
	    sId["S-A-MHCM--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.CARGO"],
	      icn["AIR.M2.MEDIUM"],
	    ];
	    sId["S-A-MHCH--"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.CARGO"],
	      icn["AIR.M2.HEAVY"],
	    ];
	    sId["S-A-MHT---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.TRAINER"],
	    ];
	    sId["S-A-MHO---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.MEDEVAC"],
	    ];
	    sId["S-A-MHM---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-A-MHD---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.AIRBORNE COMMAND POST"],
	    ];
	    sId["S-A-MHK---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.TANKER"],
	    ];
	    sId["S-A-MHJ---"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.JAMMER / ELECTRONIC COUNTER-MEASURES"],
	    ];
	    sId["S-A-ML----"] = [icn["AR.I.FF.MILITARY BALLOON"]];
	    sId["S-A-MV----"] = [icn["AR.I.VIP"]];
	    sId["S-A-ME----"] = [icn["AR.I.ESCORT"]];
	    sId["S-A-W-----"] = [icn["AIR.MISSILE.ICON"]];
	    sId["S-A-WM----"] = [icn["AIR.MISSILE.ICON"]];
	    sId["S-A-WMS---"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.SURFACE"],
	      icn["AIR.MISSILE.M2.LAUNCHED"],
	    ];
	    sId["S-A-WMSS--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.SURFACE"],
	      icn["AIR.MISSILE.M2.SURFACE"],
	    ];
	    sId["S-A-WMSA--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.SURFACE"],
	      icn["AIR.MISSILE.M2.AIR"],
	    ];
	    sId["S-A-WMSU--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.SURFACE"],
	      icn["AIR.MISSILE.M2.SUBSURFACE"],
	    ];
	    sId["S-A-WMSB--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.IC.ANTIBALLISTIC MISSILE"],
	    ];
	    sId["S-A-WMA---"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.AIR"],
	      icn["AIR.MISSILE.M2.LAUNCHED"],
	    ];
	    sId["S-A-WMAS--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.AIR"],
	      icn["AIR.MISSILE.M2.SURFACE"],
	    ];
	    sId["S-A-WMAA--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.AIR"],
	      icn["AIR.MISSILE.M2.AIR"],
	    ];
	    sId["S-A-WMAP--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.AIR"],
	      icn["AIR.MISSILE.M2.SPACE"],
	    ];
	    sId["S-A-WMU---"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.SUBSURFACE"],
	      icn["AIR.MISSILE.M2.SURFACE"],
	    ];
	    sId["S-A-WML---"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.LAND"],
	      icn["AIR.MISSILE.M2.AIR"],
	    ];
	    sId["S-A-WMCM--"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.CRUISE"],
	      icn["AIR.MISSILE.M2.MISSILE"],
	    ];
	    sId["S-A-WMB---"] = [
	      icn["AIR.MISSILE.ICON"],
	      icn["AIR.MISSILE.M1.BALLISTIC"],
	      icn["AIR.MISSILE.M2.MISSILE"],
	    ];
	    sId["S-A-WB----"] = [icn["AIR.MISSILE.IC.BOMB"]];
	    sId["S-A-WD----"] = [icn["AR.I.AIR DECOY"]];
	    sId["S-A-C-----"] = [icn["AR.I.CIVILIAN"]];
	    sId["S-A-CF----"] = [icn["AR.I.FF.CIVILIAN FIXED WING"]];
	    sId["S-A-CH----"] = [icn["AR.I.FF.CIVILIAN ROTARY WING"]];
	    sId["S-A-CL----"] = [icn["AR.I.FF.CIVILIAN BALLOON"]];
	  },
	};

	// TODO remove this import

	function icons$5 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const frame = metadata.frame;
	  const affiliation = metadata.affiliation || "Friend";
	  const baseGeometry = metadata.baseGeometry;
	  const numberSIDC = metadata.numberSIDC;
	  //const fillColor = colors.fillColor[affiliation];
	  const iconColor = colors.iconColor[affiliation];
	  const iconFillColor = colors.iconFillColor[affiliation];
	  //  const none = colors.none[affiliation];
	  const black = colors.black[affiliation];
	  const white = colors.white[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["GR.IC.MILITARY"] = text("MIL");
	  icn["GR.I.GOVERNMENT"] = text("GOV");
	  icn["GR.IC.SUBMARINE NUCLEAR PROPULSION"] = {
	    type: "path",
	    d: "m 75,110 -10,-10 10,-10 0,-10 50,0 0,10 10,10 -10,10 z"
	  };
	  icn["GR.IC.FERRY"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 75,100 0,-35 50,0 0,35 20,0 -15,35 -60,0 -15,-35 z"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: STD2525 ? "FE" : "F"
	    }
	  ];
	  icn["GR.IC.ADMINISTRATIVE"] = text("ADM");
	  icn["GR.IC.MANUAL TRACK"] = text("MAN");
	  icn["GR.IC.AIR DEFENSE CHAPARRAL"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 85,80 30,0 c 5.54,0 10,4.46 10,10 l 0,5 c 0,5.54 -4.46,10 -10,10 l -30,0 c -5.54,0 -10,-4.46 -10,-10 l 0,-5 c 0,-5.54 4.46,-10 10,-10 z"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 95,
	      fontsize: 20,
	      text: "C"
	    }
	  ];
	  icn["GR.IC.AIR DEFENSE COMPOSITE"] = {
	    type: "path",
	    d: "M85,120 C85,110 115,110 115,120 M90,115 L90,90 C90,80 110,80 110,90 L110,115 M100,112 l0,-30",
	    fill: false
	  };
	  icn["GR.IC.AIR DEFENSE H/MAD"] = text("HMD");
	  icn["GR.IC.AIR DEFENSE H/MAD HAWK"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 101,
	    fontsize: 20,
	    text: "H"
	  };
	  icn["GR.IC.AIR DEFENSE H/MAD PATRIOT"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 101,
	    fontsize: 20,
	    text: "P"
	  };
	  icn["GR.IC.AIR DEFENSE MISSILE"] = {
	    type: "path",
	    d: "M90,120 L90,90 C90,80 110,80 110,90 L110,120",
	    fill: false
	  };
	  icn["GR.IC.FLOATING CRAFT"] = {
	    type: "path",
	    d: "m 90,75 20,0 0,-10 -5,0 0,-10 -10,0 0,10 -5,0 z",
	    stroke: false
	  };
	  icn["GR.IC.AIR AND MISSILE DEFENSE"] = text("MD");
	  icn["GR.IC.MILITARY HISTORY"] = text("MH");
	  icn["GR.IC.AIR DEFENSE TARGETING UNIT"] = [
	    {
	      type: "path",
	      d: "M80,100 l20,-15 0,15 20,-15 M75,80 C75,100 85,115 105,115",
	      fill: false
	    },
	    { type: "circle", cx: 75, cy: 110, r: 5 }
	  ];
	  icn["GR.IC.AIR DEFENSE THEATER MISSILE DEFENSE UNIT"] = text("TMD");
	  icn["GR.IC.AIR DEFENSE SHORT RANGE"] = text("SRD");
	  icn["GR.IC.AIR DEFENSE STINGER"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 85,80 30,0 c 5.54,0 10,4.46 10,10 l 0,5 c 0,5.54 -4.46,10 -10,10 l -30,0 c -5.54,0 -10,-4.46 -10,-10 l 0,-5 c 0,-5.54 4.46,-10 10,-10 z"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 95,
	      fontsize: 20,
	      text: "S"
	    }
	  ];
	  icn["GR.IC.AIR DEFENSE VULCAN"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 85,80 30,0 c 5.54,0 10,4.46 10,10 l 0,5 c 0,5.54 -4.46,10 -10,10 l -30,0 c -5.54,0 -10,-4.46 -10,-10 l 0,-5 c 0,-5.54 4.46,-10 10,-10 z"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 95,
	      fontsize: 20,
	      text: "V"
	    }
	  ];
	  icn["GR.IC.AIR DEFENSE GUN UNIT"] = {
	    type: "path",
	    d: "M100,80 L100,120 M92,90 l0,20 M108,90 l0,20",
	    fill: false
	  };
	  icn["GR.IC.AIR TRAFFIC SERVICES"] = {
	    type: "path",
	    d: "m 100,95 0,25 m 7.5,-32.5 c 0,4.1 -3.4,7.5 -7.5,7.5 -4.1,0 -7.5,-3.4 -7.5,-7.5 0,-4.1 3.4,-7.5 7.5,-7.5 4.1,0 7.5,3.4 7.5,7.5 z M 60,85 l 40,15 40,-15 0,30 -40,-15 -40,15 z"
	  };
	  icn["GR.IC.AIRPORT OF DEBARKATION"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M80,70 l40,0 M80,80 l25,-25 M100,80 l0,40 M81,90.5 l38,19 M81,109.5 l38,-19"
	    },
	    { type: "circle", cx: 100, cy: 100, r: 20, fill: false }
	  ];
	  icn["GR.IC.ALLIED COMMAND EUROPE RAPID REACTION CORPS (ARRC)"] = text("ARRC");
	  icn["GR.IC.ALLIED COMMAND OPERATIONS"] = text("ACO");
	  icn["GR.IC.AMMUNITION"] = {
	    type: "path",
	    d: "m 90,117 0,-25 c 0,-15 20,-15 20,0 l 0,25 m -25,0 30,0",
	    fill: false
	  };
	  icn["GR.IC.ARMOUR"] = {
	    type: "path",
	    d: "M125,80 C150,80 150,120 125,120 L75,120 C50,120 50,80 75,80 Z",
	    fill: false
	  };
	  icn["GR.IC.ARMOR, WHEELED"] = [
	    {
	      type: "path",
	      d: "m 120,80 c 25,0 25,30 0,30 l -40,0 C 55,110 55,80 80,80 Z",
	      fill: false
	    },
	    { type: "circle", cx: 70, cy: 115, r: 5, fill: false },
	    { type: "circle", cx: 100, cy: 115, r: 5, fill: false },
	    { type: "circle", cx: 130, cy: 115, r: 5, fill: false }
	  ];
	  icn["GR.IC.AVIATION ROTARY WING"] = {
	    type: "path",
	    stroke: false,
	    d: "M60,85 l40,15 40,-15 0,30 -40,-15 -40,15 z"
	  };
	  icn["GR.IC.AVIATION ROTARY WING 2525C"] = {
	    type: "path",
	    stroke: false,
	    d: "M100,100 L100,140"
	  };
	  icn["GR.IC.AVIATION FIXED WING"] = {
	    type: "path",
	    stroke: false,
	    d: "M100,100 L130,88 c15,0 15,24 0,24 L100,100 70,112 c-15,0 -15,-24 0,-24 Z"
	  };
	  icn["GR.IC.COMBATANT"] = [
	    {
	      type: "path",
	      d: "m 86.9,110 c -3.6,2 -7.2,3.9 -10.8,5.9 2.1,2.9 6.7,3.9 10,2.1 2.6,-0.9 4.7,-3.8 3.1,-6.1 -0.8,-0.6 -1.5,-1.3 -2.3,-1.9 z m 26.3,0.1 c 3.6,2 7.2,3.9 10.8,5.9 -2.1,2.9 -6.7,3.9 -10,2.1 -2.6,-0.9 -4.7,-3.8 -3.1,-6.1 0.8,-0.6 1.5,-1.3 2.3,-1.9 z",
	      fill: false
	    },
	    {
	      type: "path",
	      d: "m 112.9,110 c -5.6,-4 -11.3,-7.9 -16.1,-12.5 -4.2,-4.5 -7,-9.8 -9.2,-15.1 -0.8,4.4 -0.9,9.3 2.4,13.2 3.6,4.5 8.6,8.1 13.5,11.8 2.3,1.7 4.7,3.3 7.1,4.8 0.8,-0.7 1.5,-1.5 2.3,-2.2 m -25.7,0 c 5.6,-4 11.3,-7.9 16.1,-12.5 4.2,-4.5 7,-9.8 9.2,-15.1 0.8,4.4 0.9,9.3 -2.4,13.2 -3.6,4.5 -8.6,8.1 -13.5,11.8 -2.3,1.7 -4.7,3.3 -7.1,4.8 -0.8,-0.7 -1.5,-1.5 -2.3,-2.2",
	      fill: white,
	      strokewidth: 2
	    }
	  ];
	  icn["GR.IC.AVIATION COMPOSITE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100,100 15.7,7.9 c 11.8,0 11.8,-15.7 0,-15.7 z m 0,0 -15.7,-7.9 c -11.8,0 -11.8,15.7 0,15.7 z m -10,-20 10,20 -10,20 20,0 -10,-20 10,-20 z"
	  };
	  icn["GR.IC.AVIATION TACTICAL AIR CONTROL PARTY"] = text("TACP");
	  icn["GR.IC.AVIATION FORWARD AIR CONTROLLER"] = text("FAC");
	  icn["GR.IC.SPECIAL TROOPS"] = text("ST");
	  icn["GR.IC.MULTI-DOMAIN"] = {
	    type: "path",

	    d: "m 79.3,98.2 v -7 h 7.1  M 100,112 79.3,91.2  M 76,107 l -5,5 5,6  m 24,-6 H 71  m 53,-5 5,5 -5,6  m -24,-6 h 29  M 114,91.2 h 7 v 7.1  M 100,112 121,91.2  m -26,-3.8 5,-5 5,5  M 100,112 V 82.4",
	    fill: false
	  };
	  icn["GR.IC.RANGER"] = text("RGR");
	  icn["GR.IC.BAND"] = text("BAND");
	  icn["GR.IC.ARMY MUSIC"] = {
	    type: "path",
	    d: "m 99.6,110.5 c -4.8,-1.4 -10.9,2.2 -10.4,7.7 1,2.5 6.2,2.4 9.6,-0.2 1.9,-1.5 2.7,-3.8 2.3,-6.9 l -0.1,-21.3 c 12.7,5.8 7.6,14.8 5.6,20.7 4.7,-4.9 5.8,-13.2 1.5,-17.9 -4.4,-4.6 -5,-7 -8.4,-13 z",
	    strokewidth: 2
	  };
	  icn[
	    "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	  ] = text("ATF");
	  icn["GR.IC.CBRN"] = [
	    {
	      type: "path",

	      d: "m 74,120 c 0,-15 13.2,-32.9 65,-36  m -13,36 C 126,105 113,87.1 61.5,84",
	      fill: false
	    },
	    { type: "circle", cx: 65, cy: 90, r: 6 },
	    { type: "circle", cx: 135, cy: 90, r: 6 }
	  ];
	  icn[
	    "GR.CHEMICAL, BIOLOGICAL, RADIOLOGICAL, NUCLEAR, AND HIGH-YIELD EXPLOSIVES"
	  ] = [
	    {
	      type: "path",

	      d: "M 89.5,82 H 111 l 10,18 -10,18 H 89.5 L 79,100 Z",
	      fill: iconFillColor
	    },
	    {
	      type: "text",
	      stroke: false,
	      alignmentBaseline: "middle",
	      textanchor: "middle",
	      x: 100,
	      y: 102,
	      fontsize: 25,
	      text: "E"
	    }
	  ];
	  icn["GR.IC.SPACE"] = [
	    {
	      type: "path",
	      d: "M 97.5,104.2 92,108 96,102.5 85,100 96,98.53 92,93 98.09,96.98 100,80 102.5,96.98 109,93 l -5,5.53 11,1.47 -11,2.5 5,5.5 -6.5,-3.8 -2.5,15.8 z",
	      stroke: false
	    }
	  ];
	  icn["GR.IC.CIVIL AFFAIRS"] = text("CA");
	  icn["GR.IC.CIVIL-MILITARY-COOPERATION"] = {
	    type: "path",

	    d: "m 65,85 h 69 v 15 c 0,20 -69,20 -69,0 z",
	    fill: false
	  };
	  icn["GR.I.CIVILIAN"] = text("CIV");
	  icn["GR.I.CIVILIAN"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["GR.I.CIVILIAN"].stroke = black;
	  icn["GR.I.CIVILIAN"].strokewidth = 3;
	  icn["GR.IC.COMMAND AND CONTROL"] = text("");
	  icn["GR.IC.COMBAT"] = text("CBT");
	  icn["GR.IC.COMBAT SERVICE SUPPORT"] = text("CSS");
	  icn["GR.IC.COMBAT SUPPORT"] = text("CS");
	  icn["GR.IC.COMBAT SUPPORT (MANOEUVRE ENHANCEMENT)"] = {
	    type: "path",

	    d: "m 85,80 0,25 15,15 15,-15 0,-25 z"
	  };
	  icn["GR.IC.COMBINED ARMS"] = {
	    type: "path",
	    d: "m 70,80 60,40 m 0,-40 -60,40 m 55,-40 c 25,0 25,40 0,40 l -50,0 C 50,120 50,80 75,80 z",
	    fill: false
	  };
	  icn["GR.IC.COUNTER-INTELLIGENCE"] = text("CI");
	  icn["GR.IC.CRIMINAL INVESTIGATION DIVISION"] = text("CID");
	  icn["GR.IC.CYBER"] = text("CYB");
	  icn["GR.IC.DIVING"] = []; //TODO
	  icn["GR.IC.DOG"] = text("DOG");
	  icn["GR.IC.DRILLING"] = { type: "path", d: "m 85,80 5,40 20,0 5,-40 z" };
	  icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"] = text("DEA");
	  icn["GR.IC.ELECTRONIC RANGING"] = {
	    type: "path",

	    d: "M 108,117 C 86,129 65,93 86.7,80.7 Z  M 97.2,99.1 118,88.7",
	    fill: STD2525 ? iconFillColor : false
	  };
	  icn["GR.IC.ELECTRONIC WARFARE"] = text("EW");
	  icn["GR.IC.EMERGENCY MEDICAL OPERATION"] = {
	    type: "path",
	    d: "m 90,60 0,22.7 -19.7,-11.3 -10,17.3 L 80,100 l -19.7,11.3 10,17.3 L 90,117.3 90,140 l 20,0 0,-22.7 19.7,11.3 10,-17.3 L 120,100 l 19.7,-11.3 -10,-17.3 L 110,82.7 110,60 90,60 z"
	  };
	  icn["GR.IC.ENGINEER"] = {
	    type: "path",
	    fill: false,
	    d: "M 60,118 V 83 h 80 v 35  M 100,83 V 110"
	  };
	  icn["GR.IC.ENGINEER MECHANIZED"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,90 0,15 m -25,5 0,-20 50,0 0,20 m 0,-30 c 25,0 25,40 0,40 l -50,0 C 50,120 50,80 75,80 Z"
	  };
	  icn["GR.IC.ENGINEER UTILITY VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,100 0,10 m -15,5 0,-15 30,0 0,15 M 70,80 c 0,15 60,15 60,0 l 0,40 -60,0 z"
	  };
	  icn["GR.IC.ENVIRONMENTAL PROTECTION"] = {
	    type: "path",
	    d: "m 100,80 -10,15 5,0 -10,10 5,0 -10,10 15,0 0,5 10,0 0,-5 15,0 -10,-10 5,0 -10,-10 5,0 z",
	    fill: false
	  };
	  icn["GR.IC.EXPLOSIVE ORDNANCE DISPOSAL"] = text("EOD");
	  icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"] = text("FBI");
	  icn["GR.IC.FIELD ARTILLERY"] = { type: "circle", cx: 100, cy: 100, r: 15 };
	  icn["GR.IC.FIELD ARTILLERY OBSERVER"] = [
	    { type: "circle", cx: 100, cy: 108, r: 5 },
	    {
	      type: "path",
	      d: "m 100,80 -25,40 50,0 z",
	      fill: false
	    }
	  ];
	  icn["GR.IC.FIELD CAMP CONSTRUCTION"] = [
	    icn["GR.IC.ENGINEER"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 72,
	      fontsize: 25,
	      text: "CAMP"
	    }
	  ];
	  icn["GR.IC.FINANCE"] = {
	    type: "path",

	    d: "m 80,95 10,-10 20,0 10,10 m -40,0 0,20 40,0 0,-20 z",
	    fill: false
	  };
	  icn["GR.IC.FIRE PROTECTION"] = {
	    type: "path",
	    d: "m 120,90 -5,5 -10,-10 5,-5 -20,0 5,5 -10,10 -5,-5 0,20 5,-5 10,10 -5,5 20,0 -5,-5 10,-10 5,5 z"
	  };
	  icn["GR.IC.FIXED WING MISO"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      stroke: black,
	      d: "M70,85 l40,0 10,-10 0,50 -10,-10 -40,0 z M120,85 l10,0 M120,95 l10,0 M120,105 l10,0 M120,115 l10,0"
	    },
	    {
	      type: "path",
	      d: "M 78.8 61.5 C 68.1 61.5 68.1 78.5 78.8 78.5 L 100 70 L 78.8 61.5 z M 100 70 L 121.3 78.5 C 131.9 78.5 131.9 61.5 121.3 61.5 L 100 70 z"
	    }
	  ];
	  icn["GR.IC.GEOSPATIAL SUPPORT"] = text("GEO");
	  icn["GR.IC.GOVERNMENT ORGANIZATION"] = text("GO");
	  icn["GR.IC.GRENADE"] = {
	    type: "path",

	    d: "m 86,105 h 28  M 95,92 v -9 h 10 v 9  m 0,-5.3 a 19,19 0 0 1 14,18.3  m -5,0 A 14.3,14.3 0 0 1 99.9,119 14.3,14.3 0 0 1 85.6,105 14.3,14.3 0 0 1 99.9,90.7 14.3,14.3 0 0 1 114,105 Z",
	    fill: false
	  };
	  icn["GR.IC.HUMAN RESOURCES"] = text("HR");
	  icn["GR.IC.INFORMATION OPERATIONS"] = text(
	    STD2525 && !numberSIDC ? "IW" : "IO"
	  );
	  icn["GR.IC.INTERNATIONAL SECURITY ASSISTANCE FORCE (ISAF)"] = text("ISAF");
	  icn["GR.IC.INTERROGATION"] = text("IPW");
	  icn["GR.IC.ISOLATED PERSONNEL"] = [
	    {
	      type: "path",
	      d: "M 100,100 88,88  m 12,12 12,-12  m -12,30 v -18  m -9.5,18 H 110",
	      fill: false
	    },
	    {
	      type: "path",
	      d: "m 106,87.2 a 5.92,5.92 0 0 1 -6,5.9 5.92,5.92 0 0 1 -5.9,-5.9 5.92,5.92 0 0 1 5.9,-6 5.92,5.92 0 0 1 6,6 z",
	      stroke: false
	    }
	  ];
	  icn["GR.IC.JOINT FIRE SUPPORT"] = text("JFS");
	  icn["GR.IC.JOINT INFORMATION BUREAU"] = text("JIB");
	  icn["GR.IC.JOINT INTELLIGENCE CENTRE"] = text("JIC");
	  icn["GR.IC.JUDGE ADVOCATE GENERAL"] = text("JAG");
	  icn["GR.IC.LABOUR"] = {
	    type: "path",

	    d: "m 90,85 20,0 m -10,0 0,25 -10,0 10,10 10,-10 -10,0",
	    fill: false
	  };
	  icn["GR.IC.LAUNDRY/BATH"] = {
	    type: "path",

	    d: "m 95,80 10,10 0,30 m 0,-30 -10,0 m 10,0 -10,10",
	    fill: false
	  };
	  icn["GR.IC.LAW ENFORCEMENT"] = {
	    type: "path",
	    d: "m 82,82 c 6,7 12,7 18,0 6,7 12,7 18,0  m 0,0 c -3,13 6,27 -18,36 C 76,109 85,95 82,82",
	    fill: false
	  };
	  icn["GR.IC.LAW ENFORCEMENT VESSEL"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 75,100 0,-35 50,0 0,35 20,0 -15,35 -60,0 -15,-35 z"
	    },
	    { type: "path", d: "m 135,100 -15,35 -10,0 15,-35 z" }
	  ];
	  icn["GR.IC.LIAISON"] = text("LO");
	  icn["GR.IC.MAINTENANCE"] = {
	    type: "path",

	    d: "M70,90 c10,0 10,20 0,20 m10,-10 l40,0 m10,-10 c-10,0 -10,20 0,20",
	    fill: false
	  };
	  icn["GR.IC.MATERIEL"] = text("MAT");
	  icn["GR.IC.MEDICAL EVACUATION HELICOPTER"] = {
	    type: "path",
	    d: "M60,85 l40,15 40,-15 0,30 -40,-15 -40,15 z M95.5,80 l9,0 0,-9 9,0 0,-9 -9,0 0,-9 -9,0 0,9 -9,0 0,9 9,0 Z"
	  };
	  icn["GR.IC.MESSENGER"] = text("M");
	  icn["GR.IC.METEOROLOGICAL"] = text("MET");
	  icn["GR.IC.MILITARY INFORMATION SUPPORT OPERATIONS (MISO)"] = {
	    type: "path",

	    d: "M 83.7,89 H 106 l 8,-6.8 V 118 l -8,-8 H 83.7 Z  m 30.3,0.3 h 11  m -11,7.1 h 11  m -11,6.6 h 11  m -11,7 h 11"
	  };
	  icn["GR.IC.MILITARY INTELLIGENCE"] = text("MI");
	  icn["GR.IC.MILITARY POLICE"] = text("MP");
	  icn["GR.IC.MINE"] = {
	    type: "path",
	    d: "m 120,100 c 0,5.5 -9,10 -20,10 -11,0 -20,-4.5 -20,-10 0,-5.5 9,-10 20,-10 11,0 20,4.5 20,10 z m -5,-20 -30,40 m 0,-40 30,40 m -15,-40 0,40"
	  };
	  icn["GR.IC.MINE CLEARING"] = [
	    icn["GR.IC.MINE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 72,
	      fontsize: 25,
	      text: "CLR"
	    }
	  ];
	  icn["GR.IC.MINE LAUNCHING"] = [
	    icn["GR.IC.MINE"],
	    { type: "path", d: "m 80,125 0,10 40,0 0,-10 z" }
	  ];
	  icn["GR.IC.MINE LAYING"] = [
	    icn["GR.IC.MINE"],
	    { type: "path", d: "m 80,65 0,10 40,0 0,-10 z" }
	  ];
	  // the middle stroke is to make it consistent with other symbols and with FM 1-02.2
	  icn["GR.IC.MISSILE"] = {
	    type: "path",
	    d: "M 100,82.62 V 120  M 90,120 V 90 c 0,-10 20,-10 20,0 v 30",
	    fill: false
	  };
	  icn["GR.IC.MISSILE.LIGHT"] = { type: "path", d: "M90,90 L110,90" };
	  icn["GR.IC.MISSILE.MEDIUM"] = {
	    type: "path",
	    d: "M90,90 L110,90 M90,97 L110,97"
	  };
	  icn["GR.IC.MISSILE.HEAVY"] = {
	    type: "path",
	    d: "M90,90 L110,90 M90,97 L110,97 M90,104 L110,104"
	  };
	  icn["GR.IC.MORALE, WELFARE, AND RECREATION"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "MWR"
	  };
	  icn["GR.IC.MORTAR"] = [
	    { type: "circle", cx: 100, cy: 115, r: 5, fill: false },
	    { type: "path", d: "M100,111 l0,-30 M90,90 l10,-10 10,10", fill: false }
	  ];
	  icn["GR.IC.MORTUARY AFFAIRS"] = {
	    type: "path",

	    d: "m 70,85 h 60 v 30 H 70 Z  m 40,5 v 20  M 74.8,100 H 125",
	    fill: false
	  };
	  icn["GR.IC.MULTINATIONAL (MN)"] = text("MN");
	  icn["GR.IC.NAVAL"] = [
	    {
	      type: "path",
	      d: "m 105,85 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m -20,5 30,0 m -15,0 0,30",
	      fill: false
	    },
	    {
	      type: "path",
	      d: "m 114,110 -3,-2 7,-5 -1,9 -3,-2 c -8,12 -18.6,12 -28,0 l -3,2 -2,-10 8,6 -3,2 c 9.3,11 19,11 28,0 z"
	      //stroke: false
	    }
	  ];
	  icn["GR.IC.OBSERVER/OBSERVATION"] = {
	    type: "path",
	    d: "m 100,80 -25,40 50,0 z",
	    fill: false
	  };
	  icn["GR.IC.ORDNANCE"] = {
	    type: "path",
	    d: "M 90,97 83,83 m 27,14 7,-14 M 95,95 90,81 m 15,14 5,-14 m 10,26.5 c 0,6.9 -9,12.5 -20,12.5 -11,0 -20,-5.6 -20,-12.5 0,-6.9 9,-12.5 20,-12.5 11,0 20,5.6 20,12.5 z",
	    fill: false
	  };
	  icn["GR.IC.PERSONNEL SERVICES"] = text("PS");
	  icn["GR.IC.PETROLEUM OIL LUBRICANTS"] = {
	    type: "path",

	    d: "m 100,119 0,-24 m 0,0 C 99,95 85,81 85,81 l 30,0 z",
	    fill: false
	  };
	  icn["GR.IC.PIPELINE"] = {
	    type: "path",
	    d: "m 115,110 15,0 m -15,-15 15,0 m -45,15 -15,0 M 85,95 70,95 m 30,-15 0,10 -15,0 0,25 30,0 0,-25 -15,0 m -10,-10 20,0",
	    fill: false
	  };
	  icn["GR.IC.POSTAL"] = {
	    type: "path",

	    d: "m 80,80 30,0 c -1.4,15.5 0,25 10,35 -20,0 -40,-20 -40,-35 z",
	    fill: false
	  };
	  icn["GR.IC.PUBLIC AFFAIRS"] = text("PA");
	  icn["GR.IC.PUBLIC AFFAIRS BROADCAST"] = text("BPAD");
	  icn["GR.IC.PSYCHOLOGICAL OPERATIONS"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : false,
	    stroke: black,
	    d: "M70,85 l40,0 10,-10 0,50 -10,-10 -40,0 z M120,85 l10,0 M120,95 l10,0 M120,105 l10,0 M120,115 l10,0"
	  }; //TODO
	  icn["GR.IC.QUARTERMASTER"] = {
	    type: "path",

	    fill: false,
	    d: "m 115,95 c 0,15 15,15 15,0 0,-15 -15,-15 -15,0 z m 0,0 -45,0 0,10 10,0 0,-10"
	  };
	  icn["GR.IC.RADAR"] = {
	    type: "path",
	    d: "M72,95 l30,-25 0,25 30,-25 M70,70 c0,35 15,50 50,50",
	    fill: false
	  };
	  icn["GR.IC.RADIO"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 100,108 V 82.5  m -12.5,4.1 4.1,-4.1 4.2,4.1 4.2,-4.1 4,4.1 4,-4.1 5,4.1  M 100,107 c -3.2,0 -5.9,3 -5.9,6 0,3 2.7,6 5.9,6 3,0 6,-3 6,-6 0,-3 -3,-6 -6,-6 z"
	    }
	  ];
	  icn["GR.IC.RADIO RELAY"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 85,83 h 30  m -15,25 V 82.5  m 0,24.5 c -3.2,0 -5.9,3 -5.9,6 0,3 2.7,6 5.9,6 3,0 6,-3 6,-6 0,-3 -3,-6 -6,-6 z"
	    }
	  ];
	  icn["GR.IC.RADIO TELETYPE CENTRE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 110,
	      fontsize: 30,
	      text: "C"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "M 100,120 V 82  M 85.8,82 H 114  M 90.5,86.7 H 109"
	    }
	  ];
	  icn["GR.IC.RAILHEAD"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M100,80 l0,40 M81,90.5 l38,19 M81,109.5 l38,-19"
	    },
	    { type: "circle", cx: 100, cy: 100, r: 20, fill: false },
	    ms._translate(0, -50, [
	      { type: "path", d: "M60,120 l80,0", fill: false },
	      { type: "circle", fill: false, cx: 65, cy: 125, r: 5 },
	      { type: "circle", fill: false, cx: 75, cy: 125, r: 5 },
	      { type: "circle", fill: false, cx: 125, cy: 125, r: 5 },
	      { type: "circle", fill: false, cx: 135, cy: 125, r: 5 }
	    ])
	  ];
	  icn["GR.IC.RELIGIOUS SUPPORT"] = text("REL");
	  icn["GR.IC.REPLACEMENT HOLDING UNIT"] = text("RHU");
	  icn["GR.IC.SEA-AIR-LAND"] = text("SEAL");
	  icn["GR.IC.SUPPORT"] = text("SPT");
	  icn["GR.IC.ARMY FIELD SUPPORT"] = text("AFS");
	  icn["GR.IC.CONTRACTING SERVICES"] = text("KS");
	  icn["GR.IC.SEAPORT OF DEBARKATION"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M100,80 l0,40 M81,90.5 l38,19 M81,109.5 l38,-19"
	    },
	    { type: "circle", cx: 100, cy: 100, r: 20, fill: false },
	    ms._translate(0, -35, ms._scale(0.6, icn["GR.IC.NAVAL"], true))
	  ];
	  icn["GR.IC.SECURITY"] = text("SEC");
	  icn["GR.IC.SECURITY POLICE (AIR)"] = [
	    text("SP"),
	    {
	      type: "path",
	      d: "M 78.8 121.5 C 68.1 121.5 68.1 138.5 78.8 138.5 L 100 130 L 78.8 121.5 z M 100 130 L 121.3 138.5 C 131.9 138.5 131.9 121.5 121.3 121.5 L 100 130 z"
	    }
	  ];
	  icn["GR.IC.SENSOR"] = {
	    type: "path",
	    d: "m 100,80 c 0,7.5 12.5,20 20,20 -7.5,0 -20,12.5 -20,20 0,-7.5 -12.5,-20 -20,-20 7.5,0 20,-12.5 20,-20 z"
	  };
	  icn["GR.IC.SHORE PATROL"] = text("SP");
	  icn["GR.IC.SNIPER"] = {
	    type: "path",
	    fill: false,
	    d: "M 60 85 L 90 85 L 60 85 z M 110 85 L 140 85 L 110 85 z M 100 90 L 100 115 L 100 90 z"
	  };
	  icn["GR.IC.PARACHUTE RIGGER"] = {
	    type: "path",

	    fill: false,
	    d: "m 120,100 -20,20 -20,-20 m 0,0 c 0,-25 40,-25 40,0 l -40,0"
	  };
	  icn["GR.IC.SPECIAL FORCES"] = text("SF");
	  icn["GR.IC.SPECIAL OPERATIONS FORCES"] = text("SOF");
	  icn["GR.IC.SURVEILLANCE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100,80 -25,40 50,0 z"
	  };
	  icn["GR.IC.SURVEY"] = [
	    { type: "path", d: "M85,120 l15,-15 15,15 ", fill: false },
	    {
	      type: "path",
	      d: "M100,105 l0,-25 20,12.5 z",
	      fill: STD2525 ? iconFillColor : false
	    }
	  ];
	  icn["GR.IC.SUSTAINMENT"] = text("SUST");
	  icn["GR.IC.TELEPHONE SWITCH"] = [
	    { type: "text", stroke: false, x: 100, y: 135, fontsize: 30, text: "C" },
	    { type: "path", fill: false, d: "M100,140 l0,-80  M70,60 l60,0" }
	  ];
	  icn["GR.IC.TOPOGRAPHIC"] = {
	    type: "path",

	    fill: false,
	    d: "m 85,105 c 10,5 20,5 30,0 m -15,-15 15,30 m -30,0 15,-30 0,-10"
	  };
	  icn["GR.IC.TRANSPORTATION"] = [
	    {
	      type: "path",

	      fill: false,
	      d: "M 119,100 A 18.5,18.3 0 0 1 99.4,118 18.5,18.3 0 0 1 81.2,100 18.5,18.3 0 0 1 99.4,81.8 18.5,18.3 0 0 1 119,100 Z  M 100,81.9 V 118  M 82.9,91.2 117,108  M 82.9,108 117,91.2"
	    }
	  ];
	  icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"] = text("TSA");
	  icn["GR.IC.UNMANNED SYSTEMS"] = {
	    type: "path",
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	    stroke: false
	  };
	  icn["GR.IC.SEARCH AND RESCUE"] = text("SAR");
	  icn["GR.IC.DIVER, CIVILIAN"] = {
	    type: "path",

	    fill: iconFillColor,
	    d: "M 114.3,94 C 114.3,102.3 107.9,109 100,109 c -7.9,0 -14.2,-6.7 -14.2,-15 0,-8.3 6.4,-15 14.2,-15 7.9,0 14.3,6.7 14.3,15 z m 0,27 14.3,15 -57,0 14.3,-15 M 125.7,79 l 14.3,0 0,30 -14.3,0 m -51.3,0 -14.3,0 0,-30 14.3,0 m 54.2,15 c 0,16.6 -12.8,30 -28.5,30 -15.7,0 -28.5,-13.4 -28.5,-30 C 71.5,77.4 84.3,64 100,64 115.7,64 128.5,77.4 128.5,94 z"
	  };
	  icn["GR.IC.VIDEO IMAGERY"] = {
	    type: "path",
	    fill: false,
	    d: "m 140,110 -26,0 m 7,-20 19,0 m -15,-10 -65,0 0,40 50,0 z m 15,5 0,30"
	  };
	  icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"] = text("USSS");
	  icn["GR.IC.WATER"] = {
	    type: "path",
	    d: "m 65,90 50,0 c 10,0 20,10 20,20 m -40,-30 20,0 m -10,0 0,10",
	    fill: false
	  };
	  icn["GR.IC.WATER PURIFICATION"] = [
	    icn["GR.IC.WATER"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 90,
	      y: 105,
	      fontsize: 20,
	      text: "PURE"
	    }
	  ];
	  icn["GR.IC.FF.AIR ASSAULT WITH ORGANIC LIFT"] = {
	    Unknown: {
	      type: "path",
	      d: "M35,120 L 85,120 l15,15 15,-15 L165,120",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M25,120 L 85,120 l15,15 15,-15L175,120",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "M45,120 L 85,120 l15,15 15,-15 L155,120",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M50,120 L 85,120 l15,15 15,-15 L150,120",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.AIR DEFENCE"] = {
	    Unknown: {
	      type: "path",
	      d: "m 55,135 c 10,-20 80,-20 90,0",
	      fill: false
	    },
	    Friend: { type: "path", d: "M25,150 C25,110 175,110 175,150", fill: false },
	    Neutral: {
	      type: "path",
	      d: "M45,150 C45,110 155,110 155,150",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M70,140 C70,115 130,115 130,140",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.AIR AND NAVAL GUNFIRE LIAISON COMPANY"] = []; //TODO
	  icn["GR.IC.FF.AMPHIBIOUS"] = {
	    Unknown: {
	      type: "path",
	      d: "m 30,95 c 10,0 0,15 13.5,15 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 13.5,0 3.5,-15 13.5,-15",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "m 25,90 c 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 20,-20",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "m 45,110 c 18.8,0 0,-20 18,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18,20",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "m 32,95 c 10,0 0,15 11.5,15 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 11.5,0 1.5,-15 11.5,-15",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.ANALYSIS"] = {
	    type: "path",
	    d: "m 100,125 0,-70  m 0,90 -25,-20 h 50 z",
	    fill: false
	  };
	  icn["GR.IC.FF.ANTITANK/ANTIARMOUR"] = {
	    Unknown: { type: "path", fill: false, d: "M55,135 L100,33 145,135" },
	    Friend: { type: "path", fill: false, d: "M25,150 L100,52 175,150" },
	    Neutral: { type: "path", fill: false, d: "M45,150 L100,47 155,150" },
	    Hostile: { type: "path", fill: false, d: "M60,132 L100,30 140,132" }
	  }[affiliation];
	  icn["GR.IC.FF.BORDER PATROL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 122.8 66.8 C 119.9 66.8 117.4 68.6 117.4 71.6 L 117.4 73.1 L 128.7 73.1 L 128.7 72.4 C 128.7 68.8 126.5 66.8 122.8 66.8 z M 108.6 74.8 L 108.6 76 L 117.6 76 L 117.5 77.5 L 118 80.8 C 119.1 81.5 118.9 82.5 120.8 83.5 C 122.1 84.1 124 84 125.2 83.4 C 127.5 82.4 129 79.2 128.3 76 L 137.5 76 L 137.5 74.8 L 108.6 74.8 z M 94.8 82.1 C 93.3 82.1 92 83.5 92 85 L 92 85.2 C 92 86.6 96 91.3 97 92.6 C 98.2 94.3 100.8 98.8 103.2 98.8 C 104.5 98.8 111.1 93.7 112.6 92.8 L 112.6 106.2 L 126.4 85.6 C 123 85.6 114.9 85.2 112.2 85.9 C 110.2 86.4 105 91.6 103.6 91.7 C 103.4 91 100.6 87.5 100 86.5 C 99.2 85.4 97.2 82.1 95.6 82.1 L 94.8 82.1 z M 130.4 85.6 C 129.6 85.6 117.5 104.1 116.3 106.2 L 128.1 106.2 L 128.1 110.6 L 112.5 110.6 L 112.5 133.2 L 120.7 133.2 L 122 117.5 L 124.3 117.5 L 125.6 133.2 L 133.5 133.2 L 133.5 87.9 C 133.5 87.2 131.2 85.6 130.4 85.6 z M 66.9 90.7 C 66.5 91.4 62.5 96.9 62.5 96.9 C 62.5 97.8 76.7 107.2 78.5 108.3 C 81.4 110.2 83.9 112.1 86.7 114 C 88.2 115 89.4 115.9 90.8 116.8 C 92.1 117.7 94.1 118.5 94.1 120.4 L 94.1 133.2 L 105.5 133.2 L 105.5 121.7 C 105.5 120.6 107.2 119 107.2 118.8 C 107.2 117.6 106.1 118.6 105.6 116.9 C 105.2 115.4 105.4 115.6 104.5 114.5 C 103.5 113.1 101.9 112 99.8 112 C 96.8 112 97.6 111.8 95.3 110.3 C 93.9 109.3 92.5 108.4 91.2 107.4 C 88.7 105.5 85.8 103.5 83.2 101.8 C 80.9 100.3 68.2 91 66.9 90.7 z M 67.9 92.6 L 72.7 95.7 L 72.8 103 L 67.9 99.9 L 67.9 92.6 z M 77.8 99.3 L 82.6 102.6 L 82.6 110 L 77.8 106.6 L 77.8 99.3 z M 87.4 106.2 L 92.5 109.5 L 92.4 116.9 L 87.4 113.5 L 87.4 106.2 z"
	    },
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      stroke: false,
	      d: "M 117.4 73.1 L 117.4 74.8 L 128.7 74.8 L 128.7 73.1 L 117.4 73.1 z M 126.4 85.6 L 112.6 106.2 L 112.6 110.6 L 128.1 110.6 L 128.1 106.2 L 116.4 106.2 C 117.5 104.1 129.6 85.6 130.4 85.6 L 126.4 85.6 z M 67.9 92.6 L 67.9 99.9 L 72.8 103 L 72.7 95.7 L 67.9 92.6 z M 77.8 99.3 L 77.8 106.6 L 82.6 110 L 82.6 102.6 L 77.8 99.3 z M 87.4 106.2 L 87.4 113.5 L 92.4 116.9 L 92.5 109.5 L 87.4 106.2 z "
	    }
	  ];
	  icn["GR.IC.FF.BROADCAST TRANSMITTER ANTENNA"] = {
	    type: "path",
	    fill: false,
	    d: "m 80,60 20,20 20,-20 m -20,0 0,80"
	  };
	  icn["GR.IC.FF.CORPS SUPPORT"] = {
	    Unknown: { type: "path", d: "M160,75 l-15,25 15,25", fill: false },
	    Friend: { type: "path", d: "M175,50 l-30,50 30,50", fill: false },
	    Neutral: { type: "path", d: "M155,50 l-20,50 20,50", fill: false },
	    Hostile: { type: "path", d: "M150,80 l-15,20 15,20", fill: false }
	  }[affiliation];
	  icn["GR.IC.FF.CUSTOMS SERVICE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 115.5 69.8 C 115.8 70.4 116.9 72.9 117.5 72.9 L 128.3 72.9 L 128.3 69.8 L 115.5 69.8 z M 117.3 74.7 C 116.8 74.7 116 75.7 115.8 76.1 L 117.2 76.1 L 117.2 76.8 C 117.2 79.6 119.8 81.8 122.8 81.8 C 126.5 81.8 128.3 78.6 128.3 74.7 L 117.3 74.7 z M 111.3 83.6 C 110.5 83.6 99.4 91.8 97.8 92.9 C 95.6 94.4 93 96.1 91 97.7 C 89.1 99.2 85.4 100.5 85.4 103.6 L 85.4 104 C 85.4 104.7 87.1 106.7 88.2 106.7 L 88.8 106.7 C 90.2 106.7 108 93.4 111.3 91.7 L 111.3 105.3 L 126 83.6 L 111.3 83.6 z M 75.3 83.6 C 74.5 83.6 73.4 84.4 73.4 85 L 73.4 108.9 C 73.4 109.8 73.9 110.2 74.4 110.5 L 78.5 110.5 L 78.5 83.6 L 75.3 83.6 z M 78.5 110.5 L 78.5 135.2 L 105.6 135.2 L 105.6 110.5 L 78.5 110.5 z M 130.5 83.6 C 129.6 83.6 123.8 92.9 122.9 94.2 C 121.9 95.7 115.7 104.5 115.5 105.3 L 127.6 105.3 L 127.6 110.3 L 111.5 110.3 L 111.5 134.8 L 119.6 134.8 C 120.6 134.8 121.1 127.9 121.3 126.6 C 121.7 123.9 122.4 120.4 122.6 117.8 L 122.9 117.8 L 125.4 134.8 L 133.9 134.8 L 133.9 86.7 C 133.9 85.6 131.9 83.6 130.7 83.6 L 130.5 83.6"
	    },
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      stroke: false,
	      d: "M 117.5 72.9 L 117.3 74.7 L 128.3 74.7 L 128.3 72.9 L 117.5 72.9 z M 126 83.7 L 111.3 105.3 L 111.5 110.3 L 127.7 110.3 L 127.7 105.3 L 115.5 105.3 C 115.7 104.5 121.9 95.7 122.9 94.3 C 123.8 92.9 129.6 83.7 130.5 83.7 L 126 83.7 z "
	    }
	  ];
	  icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"] = {
	    type: "path",
	    stroke: false,
	    d: "M 100.2 62.3 C 100.1 63.2 99 66.3 98.7 67.4 C 97.8 69.9 99.4 70 99.4 72.3 L 99.4 73 C 99.4 73.7 98.9 73.5 98.3 73.8 C 96.6 72.4 94.2 71 91.3 71 L 90 71 C 84.2 71 80 75.5 74.6 75.5 L 73.9 75.5 C 72.3 75.5 71.5 74.1 71.3 75.8 L 74.3 77.2 C 71.8 82.4 69.9 89.7 67.5 95.5 C 66.3 98.6 65.3 101.6 64.1 104.7 C 63.5 106.3 63.1 107.7 62.5 109.3 C 62 110.5 61.8 113.1 60.2 113.2 C 62.4 116.4 68 120.5 73.3 120.5 L 76 120.5 C 81.6 120.5 87.3 116.6 89.5 113.2 L 88.2 113.2 L 75.4 77.2 L 74.5 77.2 L 74.5 77 L 75.4 77.2 L 78.6 77.7 L 79.3 77.7 L 89.3 76.2 L 90.4 76.3 C 93.7 76.3 93.8 80.2 94.7 80.2 L 97.7 80.2 L 97.7 129.2 L 86.1 129.2 L 86.1 131.5 L 81.4 131.5 L 81.4 134.1 L 77.5 134.1 L 77.5 138.2 L 123.3 138.2 L 123.3 133.9 L 119.3 133.9 L 119.3 131.6 L 114.5 131.6 L 114.5 129.2 L 102.6 129.2 L 102.6 80.2 L 106 80.2 C 107 80.2 106.6 76.4 110.7 76.4 L 111.3 76.4 L 121.2 77.7 L 122.2 77.7 L 125.4 77.3 C 124.3 79.7 123.1 83.8 122.1 86.4 C 120.9 89.6 119.9 92.6 118.7 95.8 C 117.5 98.9 116.6 101.9 115.4 105 C 114.9 106.4 114.2 108.1 113.7 109.6 C 113.4 110.4 113.1 111.1 112.9 111.9 C 112.5 113.2 112.8 113.2 111.2 113.2 C 113.3 116.4 119.2 120.5 124.6 120.5 L 127.2 120.5 C 132.6 120.5 138.8 116.4 140.9 113.2 L 139.8 113.2 L 126.4 77.1 C 127.4 76.9 129.3 76.2 129.3 75.3 C 129.3 74.5 127.8 75.5 126.7 75.5 L 126.3 75.5 C 120.8 75.5 116.6 71 110.9 71 L 109.6 71 C 106.7 71 104.2 72.4 102.6 73.8 C 101.8 73.4 101.3 73.6 101.3 72.3 C 101.3 71.9 102.4 68.8 102.5 68.5 L 100.6 62.3 L 100.2 62.3 z M 126.1 80.8 L 137.8 113.2 L 114.1 113.2 L 126.1 80.8 z M 74.8 80.8 L 86.5 113.2 L 63.1 113.1 L 74.8 80.8 z"
	  };
	  icn["GR.IC.FF.DIRECTION FINDING"] = {
	    type: "path",
	    d: "M 100,140 V 55  M 78,67 100,54.9 122,67",
	    fill: false
	  };
	  icn["GR.IC.FF.DIVISION AND BELOW SUPPORT"] = {
	    Unknown: { type: "path", d: "M40,75 l15,25 -15,25", fill: false },
	    Friend: { type: "path", d: "M25,50 l30,50 -30,50", fill: false },
	    Neutral: { type: "path", d: "M45,50 l20,50 -20,50", fill: false },
	    Hostile: { type: "path", d: "M50,80 l15,20 -15,20", fill: false }
	  }[affiliation];
	  icn["GR.IC.FF.EMERGENCY OPERATION"] = [
	    {
	      type: "path",
	      d: "M 100 65 L 115.2 91.3 L 130.3 117.5 C 133.3 112.4 135 106.4 135 100 C 135 80.7 119.3 65 100 65 z M 100 65 C 80.7 65 65 80.7 65 100 C 65 106.4 66.7 112.4 69.7 117.5 L 84.8 91.3 L 100 65 z M 69.7 117.5 C 75.7 128 87 135 100 135 C 113 135 124.3 128 130.3 117.5 L 100 117.5 L 69.7 117.5 z"
	    },
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      stroke: false,
	      d: "M 69.7,117.5 100,65 l 30.3,52.5 z"
	    }
	  ];
	  icn["GR.IC.FF.FIELD ARTILLERY ROCKET"] = {
	    type: "path",
	    d: "M100,150 l0,-97 M85,130 l0,-50 M115,130 l0,-50 M85,73 l15,-20 15,20",
	    fill: false
	  };
	  icn["GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT"] = {
	    Unknown: { type: "path", d: "M35,80 l130,0 ", fill: false },
	    Friend: { type: "path", d: "M25,80 l150,0 ", fill: false },
	    Neutral: { type: "path", d: "M45,80 l110,0 ", fill: false },
	    Hostile: { type: "path", d: "M50,80 l100,0 ", fill: false }
	  }[affiliation];
	  icn["GR.IC.FF.HORSE"] = {
	    type: "path",
	    d: "m 129,72.8 c 0,0 -6.3,2 -9,2.6 -3.4,0.7 -4.9,1.8 -7.7,3.1 -4.2,1.9 -6.8,3.6 -11.3,4.3 -3.3,0.5 -7.7,1.7 -11,1 -3.9,-0.9 -6.1,-2.9 -10.1,-2.9 -3.7,-0 -7.4,-0.6 -10.6,1.3 -2.6,1.6 -4.7,4.2 -5.8,7.1 -2.3,5.4 -0.8,12.5 -1.2,18.4 -0.2,3.1 -0.4,9.3 -0.6,10.2 0,0 1.6,-0 3.4,-2.5 0.9,-1.2 1.7,-3.4 1.9,-4.9 0.5,-3.1 -0.7,-7.5 -0.4,-10 1.1,-0.3 2.4,2.8 2.6,4.7 0.2,2 -1,3.3 -1.4,5.2 -0.5,3 0.3,5 0.6,8.3 0.1,1.6 0.8,3.9 0.5,6 -0.2,2 -0.2,4.3 -0.2,4.3 l 6.9,0 -0.4,-3.8 c 0,0 -1.8,-2.5 -2.1,-4.3 -0.5,-2.7 -0.5,-5.4 0.2,-8 0.5,-2 3.1,-4.3 4.1,-6.1 1.8,-3.1 3.1,-7.1 3.1,-7.1 0,0 5.1,3.4 9.1,4.2 3.8,0.8 11.6,1.4 11.6,1.4 0,0 -0.2,7.3 0.1,12.4 -0,0.1 0.3,3.9 0.3,3.1 -1.4,3.2 -0,8.2 -0,8.2 0,0 2.9,0 6.3,-0 l -0.3,-3.4 c 0,0 -1.5,-3.5 -1.5,-5.3 0,-3.1 0.1,-5.9 0.9,-8.9 0.4,-1.2 0.7,-2.9 1.3,-4 1.4,-2.2 3.1,-3.8 4.2,-6.1 1.1,-2.6 2.3,-5.3 3.6,-7.9 1.6,-3.3 7.8,-7.3 7.8,-7.3 0,0 5,2.9 8.4,4.9 1.2,0.7 3,0.1 3.7,-1 0.7,-1.1 0.8,-2.2 0.3,-3.3 -3.2,-6.7 -7.8,-9.4 -7.8,-9.4 z",
	    stroke: false
	  };
	  icn["GR.IC.FF.INFANTRY"] = {
	    Unknown: { type: "path", d: "M50,65L150,135M50,135L150,65" },
	    Friend: { type: "path", d: "M25,50 L175,150 M25,150 L175,50" },
	    Neutral: { type: "path", d: "M45,45L155,155M45,155L155,45" },
	    Hostile: { type: "path", d: "M60,70L140,130M60,130L140,70" }
	  }[affiliation];
	  icn["GR.IC.FF.INFANTRY DISMOUNTED"] = {
	    Unknown: { type: "path", d: "M50,65L150,135M50,135L150,65" },
	    Friend: { type: "path", d: "m 45,70 110,60 M 45,130 155,70" },
	    Neutral: { type: "path", d: "M45,45L155,155M45,155L155,45" },
	    Hostile: { type: "path", d: "M60,70L140,130M60,130L140,70" }
	  }[affiliation];
	  icn["GR.IC.FF.INTERCEPT"] = {
	    type: "path",
	    d: "m 100,125 0,-70  m 0,90 -25,-20 h 50 z"
	  };
	  icn["GR.IC.FF.JAMMING"] = {
	    Unknown: {
	      type: "path",

	      d: "M 63.889,55.047 C 64.229,55.016 64.598,55 65,55 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 2.75,0 3.99,-0.755 4.54,-1.85  M 45.785,68.023 C 54.462,68.546 45.277,78 55,78 c 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 4.88,0 5,-2.381 5,-4.82",
	      fill: false
	    },
	    Friend: {
	      type: "path",

	      d: "m 25,55 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10  M 25,68 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10",
	      fill: false
	    },
	    Neutral: {
	      type: "path",

	      d: "m 45,55 v 0 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10  M 45,68 v 0 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10",
	      fill: false
	    },
	    Hostile: {
	      type: "path",

	      d: "M 69.912,58.091 C 70.339,61.028 68.698,65 75,65 c 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 0.94,0 1.7,0.09 2.32,0.247  M 51.052,76.935 C 51.769,77.59 52.974,78 55,78 c 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 7.97,0 3.23,-6.358 6.05,-8.935",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.LAW ENFORCEMENT"] = {
	    type: "path",
	    stroke: false,
	    d: "m 99.79,81.61 c -1.05,0 -1.87,0.87 -1.87,1.98 0,0.79 0.45,1.46 1.05,1.76 l -3.59,6.44 -6.83,0.1 c 0,-1.05 -0.86,-1.91 -1.87,-1.91 -1.04,0 -1.86,0.86 -1.86,1.96 0,1.09 0.82,2.02 1.86,2.02 0.26,0 0.53,-0.11 0.75,-0.16 l 3.44,6.3 -3.51,6.4 c -0.23,-0.1 -0.45,-0.1 -0.68,-0.1 -1.04,0 -1.86,0.8 -1.86,1.9 0,1.1 0.82,2 1.86,2 1.05,0 1.87,-0.8 1.87,-2 0,0 0,0 0,-0.1 l 6.83,0.1 3.55,6.4 c -0.6,0.3 -1.01,0.9 -1.01,1.7 0,1 0.86,2 1.87,2 1.11,0 1.91,-0.9 1.91,-2 0,-0.8 -0.4,-1.4 -0.9,-1.7 l 3.6,-6.4 7,-0.1 c 0,0.1 0,0.1 0,0.1 0,1.1 0.9,2 1.8,2 1.1,0 2,-0.8 2,-2 0,-1.1 -0.9,-1.9 -2,-1.9 -0.2,0 -0.5,0 -0.7,0.1 l -3.6,-6.57 3.6,-6.4 c 0.2,0.1 0.5,0.21 0.7,0.21 1.1,0 2,-0.92 2,-2.02 0,-1.06 -0.9,-1.96 -2,-1.96 -1,0 -1.8,0.86 -1.8,1.96 0,0.1 0,0.11 0,0.11 h -7 l -3.6,-6.52 c 0.5,-0.33 0.9,-0.97 0.9,-1.68 0,-1.08 -0.8,-1.98 -1.91,-1.98 z"
	  };
	  icn["GR.IC.FF.MAIN GUN SYSTEM"] = {
	    Unknown: { type: "path", d: "M55,65L55,135" },
	    Friend: { type: "path", d: "M55,50L55,150" },
	    Neutral: { type: "path", d: "M55,45L55,155" },
	    Hostile: { type: "path", d: "M55,72L55,128" }
	  }[affiliation];
	  icn["GR.IC.FF.MEDICAL"] = {
	    type: "path",
	    d:
	      "M100," +
	      baseGeometry.bbox.y1 +
	      "L100," +
	      baseGeometry.bbox.y2 +
	      "M" +
	      baseGeometry.bbox.x1 +
	      ",100L" +
	      baseGeometry.bbox.x2 +
	      ",100"
	  };
	  /*icn["GR.IC.FF.MEDICAL DISMOUNTED"] = {
	    Unknown: { type: "path", d: "m 47.9,100 104,0 M 100,49.1 100,162" },
	    Friend: { type: "path", d: "m 45,100 110,0 m -55,-55 0,110" },
	    Neutral: { type: "path", d: "m 45,100 110,0 m -55,-55 0,110" },
	    Hostile: { type: "path", d: "m 48.1,100 103.7,0 M 100,37.8 100,150.5" }
	  }[affiliation];*/
	  icn["GR.IC.FF.MEDICAL THEATER"] = {
	    Unknown: {
	      type: "path",
	      d: "M100,170 l0,-140 M40,75 l15,25 -15,25 M160,75 l-15,25 15,25 M55,100 l90,0",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M100,150 l0,-100 M25,50 l30,50 -30,50 M175,50 l-30,50 30,50 M55,100 l90,0",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "M100,155 l0,-110  M45,50 l20,50 -20,50 M155,50 l-20,50 20,50 M65,100 l70,0",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M100,172 l0,-144 M50,80 l15,20 -15,20 M150,80 l-15,20 15,20 M65,100 l70,0",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.MEDICAL CORPS"] = {
	    Unknown: {
	      type: "path",
	      d: "M100,170 l0,-140 M160,75 l-15,25 15,25 M30,100 l115,0",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M100,150 l0,-100  M175,50 l-30,50 30,50 M25,100 l120,0",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "M100,155 l0,-110 M155,50 l-20,50 20,50 M45,100 l90,0",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M100,172 l0,-144  M150,80 l-15,20 15,20 M28,100 l110,0",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"] = [
	    icn["GR.IC.FF.MEDICAL"],
	    { type: "path", fill: false, d: "M70,90 l0,20  M130,90 l0,20" }
	  ];
	  icn["GR.IC.FF.MILITARY POLICE"] = {
	    type: "path",
	    d: "m 65.31,70.62 c 11.56,13.49 23.13,13.49 34.69,0  m 0,0 c 11.6,13.49 23.1,13.49 34.7,0  m 0,0 C 128.9,95.67 146.3,122.7 100,140 53.75,122.7 71.09,95.67 65.31,70.62",
	    fill: false
	  };
	  icn["GR.IC.FF.MOTORIZED"] = {
	    type: "path",
	    d: "M100," + baseGeometry.bbox.y1 + "L100," + baseGeometry.bbox.y2
	  };
	  icn["GR.IC.FF.NAVAL"] = [
	    { type: "path", d: "M 100,145 100,65", fill: false },
	    { type: "path", d: "m 70,70 60,0", fill: false },
	    {
	      type: "path",
	      d: "m 57.8,105.5 c -2.2,0.1 1.3,20.6 2.8,22.1 0.8,0.8 3.5,-3.8 4.6,-2.6 17.4,20.2 33,19.7 34.7,19.6 0,0 0.2,-0 0.3,0 1.7,0.1 17.3,0.5 34.7,-19.6 1,-1.2 3.7,3.4 4.6,2.6 1.4,-1.5 4.9,-21.9 2.8,-22.1 -2.2,-0.1 -4,4.2 -6.7,6.4 -3,2.4 -7.5,3.4 -7.7,4.5 -0.1,0.8 4.9,3.5 3.9,4.9 -5.1,6.3 -15.1,16.6 -31.3,17 l -0.3,4.3 -0.3,-4.3 c -16.2,-0.4 -26.3,-10.7 -31.3,-17 -1.1,-1.3 4,-4.1 3.9,-4.9 -0.2,-1 -4.7,-2 -7.7,-4.5 -2.7,-2.3 -4.5,-6.6 -6.7,-6.4 z",
	      stroke: false
	    },
	    { type: "circle", cx: 100, cy: 60, r: 5, fill: false }
	  ];
	  icn["GR.IC.FF.PRISON"] = {
	    type: "path",
	    stroke: false,
	    d: "M 62.5 67.9 L 62.5 73.4 L 69.9 73.4 L 69.9 106 C 66.8 106.7 64.4 109.6 64.4 113.4 C 64.4 116 65.8 116.9 65.9 118.4 C 66 120.4 65.6 122.5 65.6 124.7 L 65.6 126.6 L 62.5 126.6 L 62.5 132.1 L 137.5 132.1 L 137.5 126.6 L 136 126.6 L 135.6 117.5 C 138.3 113.4 135.8 107 131.5 106 L 131.5 73.4 L 137.5 73.4 L 137.5 67.9 L 62.5 67.9 z M 74.5 73.4 L 87.2 73.4 L 87.2 108.4 C 87.2 109.2 84.8 109.7 83.9 110.6 C 83.1 111.3 82.2 112.7 81.6 113.6 C 80.5 115.2 78.6 118.7 78.6 121.1 L 76.1 117 C 76.5 116.4 76.9 114.6 76.9 113.7 L 76.9 112.2 C 76.9 109.5 74.5 107.9 74.5 106.5 L 74.5 73.4 z M 91.5 73.4 L 110.2 73.4 L 110.2 90.9 C 109 89.6 108.8 87.8 106.8 85.7 C 105.4 84.3 103.5 83 100.8 83 L 100.3 83 C 98.2 83 96.1 83.6 94.9 84.5 C 94.3 85 93.6 85.4 93.1 86 C 92.4 86.6 92.2 87.3 91.5 87.8 L 91.5 73.4 z M 114.3 73.4 L 127.2 73.4 L 127.2 106.5 C 127.2 106.9 124.8 109.2 124.4 111.1 C 123.7 114.2 124.5 114.6 125 117 L 123.3 120.2 C 122.7 118.3 120.7 115 119.7 113.5 C 118.3 111.4 117.3 109.1 114.3 108.9 L 114.3 73.4 z M 99.7 84.9 L 100.6 84.9 C 104.8 84.9 108.5 90.4 108.5 94.7 L 108.5 96.4 C 108.5 100.4 105 106.2 101.3 106.2 L 99.4 106.2 C 94.9 106.2 91.4 100.2 91.6 95.5 C 91.8 90.7 94.9 84.9 99.7 84.9 z M 110.3 100.5 L 110.2 106.9 L 106.7 106.3 L 110.3 100.5 z M 91.5 103.6 L 94.3 106.8 L 91.5 107.4 L 91.5 103.6 z M 70.7 107.9 C 72.9 107.9 74.7 110.4 74.7 112.7 L 74.7 113.4 C 74.7 117.9 70 120.2 67.6 116.7 C 65.7 113.8 66.9 107.9 70.7 107.9 z M 130.6 107.9 C 132.8 107.9 134.4 110.8 134.4 113.2 L 134.4 113.4 C 134.4 116.7 133 116.7 132 118.2 L 128.9 118.3 L 126.7 115.4 L 126.5 113.2 C 126.1 111 128.2 107.9 130.6 107.9 z M 105.9 108.2 C 107.2 108.2 108.9 109 110.2 109.3 L 110.2 126.6 L 91.5 126.6 L 91.5 110.1 C 91.5 108.6 96.6 108.9 98.4 108.9 C 101.1 108.9 104 108.2 105.9 108.2 z M 114.3 110.8 C 117.2 112.3 117.4 113.4 119 116.4 C 120.1 118.5 121.7 120.9 121.7 124 C 121.9 124.2 122.3 124.9 122.7 124.9 C 124 124.9 125.5 119.8 126.7 118.9 L 126.7 119.4 L 127.2 119.4 L 127.2 126.6 L 114.3 126.6 L 114.3 110.8 z M 87.2 111.3 L 87.2 126.6 L 74.5 126.6 L 74.5 118.9 C 75.8 119.4 77.4 125.4 78.6 125.4 C 80.6 125.4 80.7 119.6 81.9 117.5 C 83.2 115.3 84.4 111.9 87.2 111.3 z M 133.6 119.7 L 133.9 126.6 L 131.5 126.6 L 131.5 120.4 L 133.6 119.7 z M 68.1 119.9 C 68.6 120.1 69.9 120.3 69.9 121.1 L 69.9 126.6 L 67.7 126.6 L 68.1 119.9 z"
	  };
	  icn["GR.IC.FF.JAIL BREAK"] = [
	    icn["GR.IC.FF.PRISON"],
	    { type: "path", strokewidth: 5, d: "m 70,130 L130,70", fill: false }
	  ];
	  icn["GR.IC.FF.RECONNAISSANCE"] = {
	    Unknown: { type: "path", d: "M50,135L150,65" },
	    Friend: { type: "path", d: "M25,150L175,50" },
	    Neutral: { type: "path", d: "M45,155L155,45" },
	    Hostile: { type: "path", d: "M60,130L140,70" }
	  }[affiliation];
	  icn["GR.IC.FF.RECONNAISSANCE DISMOUNTED"] = {
	    Unknown: { type: "path", d: "M50,135L150,65" },
	    Friend: { type: "path", d: "M 45,130 155,70" },
	    Neutral: { type: "path", d: "M45,155L155,45" },
	    Hostile: { type: "path", d: "M60,130L140,70" }
	  }[affiliation];
	  icn["GR.IC.FF.RECONNAISSANCE EQUPIMENT"] = {
	    Unknown: { type: "path", d: "M50,135L150,65" },
	    Friend: { type: "path", d: "M 50.6 132.9 L 149.3 67" },
	    Neutral: { type: "path", d: "M45,155L155,45" },
	    Hostile: { type: "path", d: "M60,130L140,70" }
	  }[affiliation];
	  icn["GR.IC.FF.SEARCH"] = {
	    type: "path",
	    d: "M 100,54.3 V 139  m -22,-12 22,12 22,-12",
	    fill: false
	  };
	  icn["GR.IC.FF.SENSOR"] = [
	    {
	      type: "path",
	      d:
	        "M" +
	        baseGeometry.bbox.x1 +
	        ",100 L75,100 M" +
	        (200 - baseGeometry.bbox.x1) +
	        ",100 L125,100"
	    },
	    {
	      type: "path",
	      d: "M65,85 l70,0 -15,30 -40,0 z",
	      fill: STD2525 ? iconFillColor : false
	    }
	  ];
	  icn["GR.IC.FF.SIGNAL"] = {
	    Unknown: { type: "path", fill: false, d: "M50,65 100,110 100,90 150,135" },
	    Friend: { type: "path", fill: false, d: "M25,50 100,110 100,90 175,150" },
	    Neutral: { type: "path", fill: false, d: "M45,45 100,110 100,90 155,155" },
	    Hostile: { type: "path", fill: false, d: "M57,70 100,110 100,90 143,130" }
	  }[affiliation];
	  icn["GR.IC.FF.SIGNAL DISMOUNTED"] = {
	    Unknown: { type: "path", fill: false, d: "M50,65 100,110 100,90 150,135" },
	    Friend: {
	      type: "path",
	      fill: false,
	      d: "M 52,66.8 100,110 l 0,-20 47.9,43.1"
	    },
	    Neutral: { type: "path", fill: false, d: "M45,45 100,110 100,90 155,155" },
	    Hostile: { type: "path", fill: false, d: "M57,70 100,110 100,90 143,130" }
	  }[affiliation];
	  icn["GR.IC.FF.SOUND"] = [
	    {
	      type: "path",
	      d:
	        "M" +
	        baseGeometry.bbox.x1 +
	        ",100 L75,100 M" +
	        (200 - baseGeometry.bbox.x1) +
	        ",100 L125,100"
	    },
	    {
	      type: "path",
	      d: "M65,85 l70,0 -15,30 -40,0 z",
	      fill: STD2525 ? iconFillColor : false
	    },
	    { type: "text", stroke: false, x: 100, y: 110, fontsize: 25, text: "S" }
	  ];
	  icn["GR.IC.FF.SUPPLY"] = {
	    Unknown: { type: "path", d: "M35,120 l130,0 ", fill: false },
	    Friend: { type: "path", d: "M25,120 l150,0", fill: false },
	    Neutral: { type: "path", d: "M45,120 l110,0", fill: false },
	    Hostile: { type: "path", d: "M50,120 l100,0 ", fill: false }
	  }[affiliation];
	  icn["GR.IC.FF.SUPPLY CORPS"] = {
	    Unknown: {
	      type: "path",
	      d: "M160,75 l-15,25 15,25 M35,120 l120,0",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M175,50 l-30,50 30,50 M25,120 l135,0",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "M155,50 l-20,50 20,50 M45,120 l100,0",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M150,80 l-15,20 15,20 M50,120 l100,0",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.SUPPLY DIVISION AND BELOW"] = {
	    Unknown: {
	      type: "path",
	      d: "m 45,120 120,0 M 40,75 55,100 40,125",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "m 45,120 130,0 M 25,50 55,100 25,150",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "m 57,120 98,0 M 45,50 65,100 45,150",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "m 50,120 100,0 M 50,80 65,100 50,120",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.SUPPLY THEATER"] = {
	    Unknown: {
	      type: "path",
	      d: "M40,75 l15,25 -15,25 M160,75 l-15,25 15,25 M45,120 l110,0 ",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M25,50 l30,50 -30,50 M175,50 l-30,50 30,50 M40,120 l120,0 ",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: " M45,50 l20,50 -20,50 M155,50 l-20,50 20,50 M55,120 l90,0 ",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M50,80 l15,20 -15,20 M150,80 l-15,20 15,20 M50,120 l100,0",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.CLASS ALL"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "ALL"
	  };
	  icn["GR.IC.FF.CLASS MULTIPLE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 100,
	    fontsize: 30,
	    text: "MULT"
	  };
	  icn["GR.IC.FF.CLASS I"] = {
	    type: "path",

	    d: "M 111,115 C 96.3,110 96.3,89.5 111,84 100,79.7 87.5,86.3 87.5,99.5 87.5,113 100,119 111,115 Z",
	    fill: false
	  };
	  icn["GR.IC.FF.NATO SUPPLY CLASS I"] = text("I");
	  icn["GR.IC.FF.CLASS II"] = icn["GR.IC.QUARTERMASTER"];
	  icn["GR.IC.FF.NATO SUPPLY CLASS II"] = text("II");
	  icn["GR.IC.FF.CLASS III"] = {
	    type: "path",

	    d: "m 100,120 0,-20 -15,-20 30,0 -15,20 ",
	    fill: false
	  };
	  icn["GR.IC.FF.CLASS IV"] = icn["GR.IC.ENGINEER"];
	  icn["GR.IC.FF.NATO SUPPLY CLASS IV"] = text("IV");
	  icn["GR.IC.FF.CLASS V"] = {
	    type: "path",

	    d: "m 90,115 0,-25 c 0,-10 20,-10 20,0 l 0,25 m -25,0 30,0",
	    fill: false
	  };
	  icn["GR.IC.INTERPRETER/TRANSLATOR"] = [
	    {
	      type: "path",

	      d: "m 65,90 15,0 0,-10 20,20 -20,20 0,-10 -15,0 z",
	      fill: iconFillColor
	    },
	    {
	      type: "path",

	      d: "m 135,90 -15,0 0,-10 -20,20 20,20 0,-10 15,0 z"
	    }
	  ];
	  icn["GR.IC.FF.NATO SUPPLY CLASS ALL"] = text("ALL");
	  icn["GR.IC.FF.CLASS VI"] = [
	    { type: "circle", cx: 100, cy: 85, r: 5, fill: false },
	    {
	      type: "path",
	      d: "m 85,95 30,0 m -15,15 0,-20 m -10,30 10,-10 10,10",
	      fill: false
	    }
	  ];
	  icn["GR.IC.FF.CLASS VII"] = [
	    { type: "circle", cx: 75, cy: 100, r: 7 },
	    { type: "circle", cx: 125, cy: 100, r: 7 },
	    { type: "path", d: "M75,100 c0,-20 50,-20 50,0", fill: false }
	  ];
	  icn["GR.IC.FF.CLASS VIII"] = {
	    Unknown: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-90 M165,80 l-130,0"
	    },
	    Friend: { type: "path", fill: false, d: "M100,120 l0,-70 M175,80 l-150,0" },
	    Neutral: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-75 M155,80 l-110,0"
	    },
	    Hostile: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-92 M153,80 l-106,0"
	    }
	  }[affiliation];
	  icn["GR.IC.FF.CLASS VIII.THEATER"] = {
	    Unknown: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-90 M155,80 l-110,0"
	    },
	    Friend: { type: "path", fill: false, d: "M100,120 l0,-70 M155,80 l-110,0" },
	    Neutral: { type: "path", fill: false, d: "M100,120 l0,-75 M145,80 l-90,0" },
	    Hostile: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-92 M153,80 l-106,0"
	    }
	  }[affiliation];
	  icn["GR.IC.FF.CLASS VIII.CORPS"] = {
	    Unknown: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-90 M155,80 l-120,0"
	    },
	    Friend: { type: "path", fill: false, d: "M100,120 l0,-70 M155,80 l-130,0" },
	    Neutral: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-75 M145,80 l-100,0"
	    },
	    Hostile: {
	      type: "path",
	      fill: false,
	      d: "M100,120 l0,-92 M153,80 l-106,0"
	    }
	  }[affiliation];
	  icn["GR.IC.FF.CLASS IX"] = [
	    { type: "circle", cx: 100, cy: 100, r: 10, fill: false },
	    {
	      type: "path",
	      d: "m 100,110 0,10 m 0,-30 0,-10 m 8.7,14.2 8.4,-4.8 m -8.4,15.9 8,5.4 m -25.4,-5.4 -8.2,5.4 m 8.2,-16.3 -8,-5.4",
	      fill: false
	    }
	  ];
	  icn["GR.IC.EQUIPMENT MANUFACTURE"] = [
	    { type: "circle", cx: 100, cy: 100, r: 20, fill: false },
	    {
	      type: "path",
	      d: "m 100,120 0,20 m 0,-60 0,-20 m 18.1,28.4 16,-9.6 m -16,31.2 16,12 M 82.5,110 66.1,122 M 82.5,88.8 66.5,78",
	      fill: false
	    }
	  ];
	  icn["GR.IC.FF.CLASS X"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 100,
	    fontsize: 30,
	    text: "CA"
	  };
	  icn["GR.IC.FF.THEATRE SUPPORT"] = {
	    Unknown: {
	      type: "path",
	      d: "M40,75 l15,25 -15,25 M160,75 l-15,25 15,25",
	      fill: false
	    },
	    Friend: {
	      type: "path",
	      d: "M25,50 l30,50 -30,50 M175,50 l-30,50 30,50",
	      fill: false
	    },
	    Neutral: {
	      type: "path",
	      d: "M45,50 l20,50 -20,50 M155,50 l-20,50 20,50",
	      fill: false
	    },
	    Hostile: {
	      type: "path",
	      d: "M50,80 l15,20 -15,20 M150,80 l-15,20 15,20",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.IC.FF.US MARSHALS SERVICE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100,84.25 3.7,10.66 11.3,0.21 -8.9,6.88 3.2,10.8 -9.3,-6.5 -9.24,6.5 3.26,-10.8 -8.98,-6.88 11.23,-0.21 z  m 0,-2.62 c -10.13,0 -18.37,8.24 -18.37,18.37 0,10.2 8.24,18.4 18.37,18.4 10.2,0 18.4,-8.2 18.4,-18.4 0,-10.13 -8.2,-18.37 -18.4,-18.37 z  m 0,2.62 c 8.8,0 15.7,7.04 15.7,15.75 0,8.8 -6.9,15.7 -15.7,15.7 -8.71,0 -15.75,-6.9 -15.75,-15.7 0,-8.71 7.04,-15.75 15.75,-15.75 z"
	  };
	  icn["GR.M1.ACCIDENT"] = textm1("ACC");
	  icn["GR.M1.AIRMOBILE/AIR ASSAULT"] = {
	    type: "path",
	    fill: false,
	    d: "M85,55 L100,75 115,55"
	  };
	  icn["GR.M1.ARMORED"] = {
	    type: "path",
	    fill: false,
	    d: "m 90,60 20,0 c 10,0 10,15 0,15 L 90,75 C 80,75 80,60 90,60"
	  };
	  icn["GR.M1.CARGO"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,60 0,15 -15,0 0,-15 30,0 0,15 -15,0"
	  };
	  icn["GR.M1.AMMUNITION"] = {
	    type: "path",
	    d: "M95,75 L95,60 C95,55 105,55 105,60 L105,75 M90,75 L110,75",
	    fill: false
	  };
	  icn["GR.M1.AMPHIBIOUS WARFARE SHIP "] = {
	    type: "path",

	    d: "M 113,75 100,75 90,64.3 95,65 l 0,-8 10,0 0,8 5.5,-0.6 L 100,75"
	  };
	  icn["GR.M1.ANTISUBMARINE WARFARE"] = textm1("P");
	  icn["GR.M1.AREA"] = textm1("AREA");
	  icn["GR.M1.ARMY"] = {
	    type: "path",
	    fill: false,
	    d: "m 132,64.9 -13,12.7  m 0,-12.7 13,12.7  M 115,64.9 102,77.6  m 0,-12.7 13,12.7  M 97.9,64.9 85.2,77.6  m 0,-12.7 12.7,12.7  M 80.9,64.9 68.2,77.6  m 0,-12.7 12.7,12.7"
	  };
	  icn["GR.M1.ATTACK"] = textm1("A");
	  icn["GR.M1.AVIATION"] = { type: "path", d: "m 75,60 0,15 50,-15 0,15 z" };
	  icn["GR.M1.BATTALION"] = {
	    type: "path",
	    fill: false,
	    d: "m 105,60 v 18 0  M 95,60 v 18"
	  };
	  icn["GR.M1.BIOLOGICAL"] = textm1("B");
	  icn["GR.M1.BORDER"] = textm1("BOR");
	  icn["GR.M1.BRIDGING"] = {
	    type: "path",
	    fill: false,
	    d: "m 80,80 5,-5 30,0 5,5 m -40,-20 5,5 30,0 5,-5"
	  };
	  icn["GR.M1.BRIGADE"] = {
	    type: "path",
	    fill: false,
	    d: "m 107.5,62.5 -15,15  m 0,-15 15,15"
	  };
	  icn["GR.M1.CHEMICAL"] = textm1("C");
	  icn["GR.M1.INTRUSION"] = textm1("I");
	  icn["GR.M1.CHEMICAL SURVEILLANCE"] = textm1("RS");
	  icn["GR.M1.CIVILIAN"] = textm1("CIV");
	  icn["GR.M1.CLOSE PROTECTION"] = textm1("CLP");
	  icn["GR.M1.COMBAT"] = textm1("CBT");
	  icn["GR.M1.COMMAND AND CONTROL"] = textm1("C2");
	  icn["GR.M1.COMMAND AND CONTROL ROTARY WING"] = STD2525
	    ? textm1("Y")
	    : textm1("C2");
	  icn["GR.M1.TILT-ROTOR"] = textm1("TR");
	  icn["GR.M1.COMMANDER"] = textm1("CDR");
	  icn["GR.M1.COMMAND POST NODE"] = textm1("CPN");
	  icn["GR.M1.COMMUNICATIONS CONTINGENCY PACKAGE"] = textm1("CCP");
	  icn["GR.M1.CONSTRUCTION"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 70,
	    fontsize: 20,
	    text: "CONST"
	  };
	  icn["GR.M1.COMPANY"] = {
	    type: "path",
	    fill: false,
	    d: "M 100,59.6 V 78"
	  };
	  icn["GR.M1.CORPS"] = {
	    type: "path",
	    fill: false,
	    d: "m 127.5,62.5 -15,15  m 0,-15 15,15  m -20,-15 -15,15  m 0,-15 15,15  m -20,-15 -15,15  m 0,-15 15,15"
	  };
	  icn["GR.M1.CROSS CULTURAL COMMUNICATION"] = textm1("CCC");
	  icn["GR.M1.CROWD AND RIOT CONTROL"] = textm1("CRC");
	  icn["GR.M1.DECONTAMINATION"] = textm1("D");
	  icn["GR.M1.DEMOLITION"] = textm1("DEM");
	  icn["GR.M1.DETENTION"] = textm1("DET");
	  icn["GR.M1.DEPUTY"] = textm1("DEP");
	  icn["GR.M1.DIRECT COMMUNICATIONS"] = {
	    type: "path",
	    fill: false,
	    d: "m 95,65 -5,5 5,5 m 10,-10 5,5 -5,5 M 90,70 c 20,0 20,0 20,0 m 15,0 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m -40,0 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z"
	  };
	  icn["GR.M1.DIVING"] = {
	    type: "path",

	    fill: false,
	    d: "m 104.6,64.8 c 0,2.7 -2.1,4.8 -4.6,4.8 -2.5,0 -4.6,-2.2 -4.6,-4.8 0,-2.7 2.1,-4.8 4.6,-4.8 2.5,0 4.6,2.2 4.6,4.8 z m 0,8.7 4.6,4.8 -18.3,0 4.6,-4.8 M 108.3,60 l 4.6,0 0,9.6 -4.6,0 m -16.5,0 -4.6,0 0,-9.6 4.6,0 m 17.4,4.8 c 0,5.3 -4.1,9.6 -9.2,9.6 -5.1,0 -9.2,-4.3 -9.2,-9.6 0,-5.3 4.1,-9.6 9.2,-9.6 5.1,0 9.2,4.3 9.2,9.6 z"
	  };
	  icn["GR.M1.DIVISION"] = {
	    type: "path",

	    fill: false,
	    d: "m 117.5,62.5 -15,15  m 0,-15 15,15  m -20,-15 -15,15  m 0,-15 15,15"
	  };
	  icn["GR.M1.MARINE DIVISION"] = textm1("D");
	  icn["GR.M1.DESIGNATED MARKSMAN"] = textm1("DM");
	  icn["GR.M1.DOG"] = textm1("DOG");
	  icn["GR.M1.DRILLING"] = { type: "path", d: "m 90,60 5,15 10,0 5,-15 z" };
	  icn["GR.M1.ELECTRO-OPTICAL"] = textm1("EO");
	  icn["GR.M1.ENHANCED"] = textm1("ENH");
	  icn["GR.M1.EXPLOSIVE ORDNANCE DISPOSAL"] = textm1("EOD");
	  icn["GR.M1.EARLY WARNING RADAR"] = textm1("EWR");
	  icn["GR.M1.FIELD ARTILLERY OBSERVER"] = [
	    { type: "circle", cx: 100, cy: 68, r: 3 },
	    {
	      type: "path",
	      d: "M 100,53.1 85.8,75.9 H 114 Z",
	      fill: false
	    }
	  ];
	  icn["GR.M1.FIRE DIRECTION CENTRE"] = textm1("FDC");
	  icn["GR.M1.FORCE"] = textm1("F");
	  icn["GR.M1.FORWARD"] = textm1("FWD");
	  icn["GR.M1.GROUND STATION MODULE"] = textm1("GSM");
	  icn["GR.M1.HIJACKING"] = textm1("H");
	  icn["GR.M1.INDIVIDUAL"] = {
	    type: "path",
	    fill: false,
	    d: "M85,65 l30,0"
	  };
	  icn["GR.M1.INFANTRY"] = textm1("IN");
	  icn["GR.M1.INTRUSION"] = textm1("I");
	  icn["GR.M1.J1"] = textm1("J1");
	  icn["GR.M1.J2"] = textm1("J2");
	  icn["GR.M1.J3"] = textm1("J3");
	  icn["GR.M1.J4"] = textm1("J4");
	  icn["GR.M1.J5"] = textm1("J5");
	  icn["GR.M1.J6"] = textm1("J6");
	  icn["GR.M1.J7"] = textm1("J7");
	  icn["GR.M1.J8"] = textm1("J8");
	  icn["GR.M1.J9"] = textm1("J9");
	  icn["GR.M1.JOINT FIRE SUPPORT"] = textm1("JFS");
	  icn["GR.M1.JOINT NETWORK NODE"] = textm1("JNN");
	  icn["GR.M1.LANDING SUPPORT"] = textm1("LS");
	  icn["GR.M1.LARGE COMMUNICATIONS CONTINGENCY PACKAGE"] = textm1("LCCP");
	  icn["GR.M1.LARGE EXTENSION NODE"] = textm1("LEN");
	  icn["GR.M1.LIAISON"] = textm1("LO");
	  icn["GR.M1.LOAD HANDLING SYSTEM"] = textm1("LHS");
	  icn["GR.M1.MAINTENANCE"] = {
	    type: "path",
	    fill: false,
	    d: "m 83,70 h 34  m 8,-7 c -10,0 -10,14 0,14  M 75,63 c 10,0 10,14 0,14"
	  };
	  icn["GR.M1.MEDEVAC"] = {
	    type: "path",
	    stroke: false,
	    d: "M95.5,80 l9,0 0,-9 9,0 0,-9 -9,0 0,-9 -9,0 0,9 -9,0 0,9 9,0 Z"
	  };
	  icn["GR.M1.MESSENGER"] = textm1("MSG");
	  icn["GR.M1.METEOROLOGICAL"] = textm1("MET");
	  icn["GR.M1.MILITARY POLICE"] = textm1("MP");
	  icn["GR.M1.MINE COUNTERMEASURE"] = textm1("MCM");
	  icn["GR.M1.MISSILE"] = {
	    type: "path",

	    d: "M 95,78 V 58 c 0,-5 10,-5 10,0 v 20",
	    fill: false
	  };
	  icn["GR.M1.(MOBILE) ADVISOR AND SUPPORT"] = {
	    type: "path",

	    d: "m 105,65 5,5 -5,5 M 90,70 c 20,0 20,0 20,0 m 15,0 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m -40,0 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z",
	    fill: false
	  };
	  icn["GR.M1.MOBILE SUBSCRIBER EQUIPMENT"] = textm1("MSE");
	  icn["GR.M1.MOBILITY ASSAULT"] = textm1("MA");
	  icn["GR.M1.MOBILITY SUPPORT"] = textm1("MS");
	  icn["GR.M1.MOVEMENT CONTROL CENTRE"] = textm1("MCC");
	  icn["GR.M1.MULTI-DOMAIN"] = {
	    type: "path",

	    d: "m 85.9,65.6 v -4.7 h 4.9  M 100,75 85.9,60.9  m -2.2,10.7 -3.4,3.4 3.4,4.1  M 100,75 H 80.3  m 35.7,-3.4 3,3.4 -3,4.1  M 100,75 h 19  M 109,60.9 h 5 v 4.8  M 100,75 114,60.9  m -17.4,-2.6 3.4,-3.4 3,3.4  M 100,75 V 54.9",
	    fill: false
	  };
	  icn["GR.M1.MULTINATIONAL"] = textm1("MN");
	  icn["GR.M1.MULTINATIONAL SPECIALIZED UNIT"] = textm1("MSU");
	  icn["GR.M1.MULTIPLE ROCKET LAUNCHER"] = {
	    type: "path",

	    d: "M85,75 l15,-15 15,15 M85,67 l15,-15 15,15",
	    fill: false
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 1"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "1"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 2"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "2"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 2 BASIC"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "2B"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 2 ENHANCED"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "2E"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 2 FORWARD"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "2E"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 3"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "3"
	  };
	  icn["GR.M1.NATO MEDICAL ROLE 4"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 120,
	    y: 72,
	    fontsize: 25,
	    text: "4"
	  };
	  icn["GR.M1.NAVAL"] = ms._translate(
	    0,
	    -35,
	    ms._scale(0.6, icn["GR.IC.NAVAL"], true)
	  );
	  icn["GR.M1.NODE CENTRE"] = textm1("NC");
	  icn["GR.M1.NUCLEAR"] = textm1("N");
	  icn["GR.M1.OBSERVER"] = [
	    {
	      type: "path",
	      d: "M 100,53.1 85.8,75.9 H 114 Z",
	      fill: false
	    }
	  ];
	  icn["GR.M1.OF-1"] = !STD2525 ? textm1("O-1/O-2") : textm1("OF-1");
	  icn["GR.M1.OF-2"] = STD2525 ? textm1("O-3") : textm1("OF-2");
	  icn["GR.M1.OF-3"] = STD2525 ? textm1("O-4") : textm1("OF-3");
	  icn["GR.M1.OF-4"] = STD2525 ? textm1("O-5") : textm1("OF-4");
	  icn["GR.M1.OF-5"] = STD2525 ? textm1("O-6") : textm1("OF-5");
	  icn["GR.M1.OF-6"] = STD2525 ? textm1("O-7") : textm1("OF-6");
	  icn["GR.M1.OF-7"] = STD2525 ? textm1("O-8") : textm1("OF-7");
	  icn["GR.M1.OF-8"] = STD2525 ? textm1("O-9") : textm1("OF-8");
	  icn["GR.M1.OF-9"] = STD2525 ? textm1("O-10") : textm1("OF-9");
	  icn["GR.M1.OF-10"] = STD2525 ? textm1("O-11") : textm1("OF-10");
	  icn["GR.M1.OF-D"] = STD2525 ? textm1("") : textm1("OF-D");
	  icn["GR.M1.OPERATIONS"] = textm1("OPS");
	  icn["GR.M1.OPTICAL"] = textm1("OPT");
	  icn["GR.M1.OR-1"] = STD2525 ? textm1("E-1") : textm1("OR-1");
	  icn["GR.M1.OR-2"] = STD2525 ? textm1("E-2") : textm1("OR-2");
	  icn["GR.M1.OR-3"] = STD2525 ? textm1("E-3") : textm1("OR-3");
	  icn["GR.M1.OR-4"] = STD2525 ? textm1("E-4") : textm1("OR-4");
	  icn["GR.M1.OR-5"] = STD2525 ? textm1("E-5") : textm1("OR-5");
	  icn["GR.M1.OR-6"] = STD2525 ? textm1("E-6") : textm1("OR-6");
	  icn["GR.M1.OR-7"] = STD2525 ? textm1("E-7") : textm1("OR-7");
	  icn["GR.M1.OR-8"] = STD2525 ? textm1("E-8") : textm1("OR-8");
	  icn["GR.M1.OR-9"] = STD2525 ? textm1("E-9") : textm1("OR-9");
	  icn["GR.M1.OTHER"] = textm1("OTH");
	  icn["GR.M1.PALLETIZED LOAD SYSTEM"] = textm1("PLS");
	  icn["GR.M1.PERSONNEL RECOVERY"] = textm1("H");
	  icn["GR.M1.PLATOON"] = [
	    { type: "circle", stroke: false, cx: 80, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 100, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 120, cy: 68, r: 8 }
	  ];
	  icn["GR.M1.POLICE"] = {
	    type: "path",
	    fill: false,
	    d: "m 90.3,57.8 c 1.6,7 -3.4,14.7 9.7,19.6 13,-4.9 8,-12.6 10,-19.6  m 0,0 c -3,3.8 -7,3.8 -10,0  m 0,0 c -3.2,3.8 -6.5,3.8 -9.7,0"
	  };
	  icn["GR.M1.RADAR"] = {
	    type: "path",

	    fill: false,
	    d: "m 85,55 c 0.1,21.4 11.7,24.6 25,25 M 116,55 101,67.5 101,55 86.6,66.9"
	  };
	  icn["GR.M1.RADIO FREQUENCY IDENTIFICATION (RFID) INTERROGATOR/ SENSOR"] =
	    textm1("RF");
	  icn["GR.M1.RAILROAD"] = ms._translate(0, -50, [
	    { type: "path", d: "M60,120 l80,0", fill: false },
	    { type: "circle", fill: false, cx: 65, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 75, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 125, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 135, cy: 125, r: 5 }
	  ]);
	  icn["GR.M1.RADIOLOGICAL"] = textm1("RAD");
	  icn["GR.M1.RANGER"] = textm1("RGR");
	  icn["GR.M1.RECON"] = textm1("R");
	  icn["GR.M1.RECONNAISSANCE"] = textm1("REC");
	  icn["GR.M1.REGIMENT"] = {
	    type: "path",
	    fill: false,
	    d: "m 110,60 v 18 0  M 90,60 v 18  m 10,-18 v 18"
	  };
	  icn["GR.M1.RETRANSMISSION SITE"] = textm1("RTNS");
	  icn["GR.M1.ROBOTIC"] = {
	    type: "path",
	    d: "m 100,52.7 14.9,14.8 c 0.4,-0.3 0.9,-0.4 1.4,-0.4 1.5,0 2.7,1.2 2.7,2.7 0,1.4 -1.2,2.7 -2.7,2.7 -1.5,0 -2.7,-1.3 -2.7,-2.7 0,-0.4 0.1,-0.7 0.2,-1 l -10.4,-5.2 -2.5,8.6 c 0.2,0.1 0.4,0.2 0.6,0.3 0.7,0.5 1.2,1.3 1.2,2.3 0,1.5 -1.2,2.7 -2.7,2.7 -0.55,0 -1.06,-0.2 -1.49,-0.5 -0.73,-0.4 -1.22,-1.3 -1.22,-2.2 0,-1.2 0.77,-2.2 1.85,-2.6 l -2.53,-8.6 -10.42,5.2 c 0.12,0.3 0.18,0.6 0.18,1 0,1.5 -1.21,2.7 -2.7,2.7 -1.49,0 -2.7,-1.2 -2.7,-2.7 0,-1.5 1.21,-2.7 2.7,-2.7 0.52,0 1.01,0.1 1.42,0.4 l 14.9,-14.8 0,0 0,0 z",
	    stroke: false
	  };
	  icn["GR.M1.SECOND IN COMMAND"] = textm1("SIC");
	  icn["GR.M1.SIGNALER"] = textm1("SIG");
	  icn["GR.M1.ASSAULT"] = textm1("ASLT");
	  icn["GR.M1.WEAPON"] = textm1("WPN");
	  icn["GR.M1.WEAPONS"] = textm1("W");
	  icn["GR.M1.CRIMINAL INVESTIGATION DIVISION"] = textm1("CID");
	  icn["GR.M1.DIGITAL"] = textm1("DIG");
	  icn["GR.M1.NETWORK OR NETWORK OPERATIONS"] = textm1("NET");
	  icn[
	    "GR.M1.AIRFIELD, AERIAL PORT OF DEBARKATION, OR AERIAL PORT OF EMBARKATION"
	  ] = {
	    type: "path",

	    d: "m 80,70 40,0 M 80,80 111,55",
	    fill: false
	  };
	  icn["GR.M1.PIPELINE"] = {
	    type: "path",

	    d: "m 92,66 -12,0 m 12,8 -12,0 m 28,0 12,0 m -12,-8 12,0 m -20,-11 0,7 m -5,-7 10,0 m -13,7 0,16 16,0 0,-16 -16,0",
	    fill: false
	  };
	  icn["GR.M1.POSTAL"] = {
	    type: "path",

	    d: "m 90,60 15,0 c 0,5 0,10 10,15 -15,0 -20,0 -25,-15",
	    fill: false
	  };
	  icn["GR.M1.WATER"] = {
	    type: "path",
	    d: "m 92,59 h 16  m -8,9.7 V 59  M 75,69 h 40 c 10,0 15,5 15,10",
	    fill: false
	  };
	  icn["GR.M1.INDEPENDENT COMMAND"] = {
	    type: "path",
	    d: "m 110,59 v 16  m -8,-8 h 16  M 90,59 v 16  m 8,-8 H 82",
	    fill: false
	  };
	  icn["GR.M1.MULTI-PURPOSE BLADE"] = {
	    type: "path",
	    d: "m 80,65 20,-10 20,10 m -20,15 0,-25",
	    fill: false
	  };
	  icn["GR.M1.TANK-WIDTH MINE PLOW"] = {
	    type: "path",
	    d: "m 80,65 5,-2.5 m 5,-2.5 5,-2.5 m 10,0 5,2.5 m 5,2.5 5,2.5 m -20,15 0,-20",
	    fill: false
	  };
	  icn["GR.M1.ROUTE, RECONNAISSANCE, AND CLEARANCE"] = textm1("RRC");
	  icn["GR.M1.SEARCH AND RESCUE"] = textm1("SAR");
	  icn["GR.M1.SECTION"] = [
	    { type: "circle", stroke: false, cx: 90, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 110, cy: 68, r: 8 }
	  ];
	  icn["GR.M1.SECURITY"] = textm1("SEC");
	  icn["GR.M1.SENSOR"] = {
	    type: "path",
	    d: "m 100,55 c -2,5 -5,8 -10,10 5,2 8,5 10,10 2,-5 5,-8 10,-10 -5,-2 -8,-5 -10,-10 z"
	  };
	  icn["GR.M1.SENSOR CONTROL MODULE"] = textm1("SCM");
	  icn["GR.M1.SIGNALS INTELLIGENCE"] = {
	    type: "path",

	    fill: false,
	    d: "m 100,55 0,23 m -15,-18 5,-5 5,5 5,-5 5,5 5,-5 5,5"
	  };
	  icn["GR.M1.SIGNAL SUPPORT"] = textm1("SPT");
	  icn["GR.M1.SINGLE SHELTER SWITCH"] = textm1("SSS");
	  icn["GR.M1.SINGLE ROCKET LAUNCHER"] = {
	    type: "path",

	    d: "M85,75 l15,-15 15,15",
	    fill: false
	  };
	  icn["GR.M1.SMALL EXTENSION NODE"] = textm1("SEN");
	  icn["GR.M1.SMOKE"] = textm1("S");
	  icn["GR.M1.SMOKE/DECON"] = textm1("SD");
	  icn["GR.M1.SNIPER"] = {
	    type: "path",
	    d: "m 75,62 h 20  m 5,16 V 62.1  M 125,62 h -20",
	    fill: false
	  };
	  icn["GR.M1.SOUND RANGING"] = textm1("SDR");
	  icn["GR.M1.SPECIAL OPERATIONS FORCES (SOF)"] = textm1("SOF");
	  icn["GR.M1.SPECIAL WEAPONS AND TACTICS"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 77,
	    fontsize: 23,
	    text: "SWAT"
	  };
	  icn["GR.M1.SQUAD"] = { type: "circle", stroke: false, cx: 100, cy: 68, r: 8 };
	  icn["GR.M1.SUPPORT"] = textm1("SPT");
	  icn["GR.M1.SURVEY"] = {
	    type: "path",

	    d: "m 108,78 -8,-8 m 0,0 -8,8 m 8,-8 0,-15 15,8 z"
	  };
	  icn["GR.M1.TACTICAL EXPLOITATION"] = textm1("TE");
	  icn["GR.M1.TARGET ACQUISITION"] = textm1("TA");
	  icn["GR.M1.TEAM"] = [
	    { type: "circle", fill: false, cx: 100, cy: 65, r: 10 },
	    { type: "path", d: "m 90,75 l20,-20" }
	  ];
	  icn["GR.M1.THEATRE"] = {
	    type: "path",
	    fill: false,
	    d: "m 135,66.6 -11,11  m 0,-11 11,11  m -15,-11 -12,11  m 0,-11 12,11  m -15,-11 -10.7,11  m 0,-11 10.7,11  m -14.3,-11 -11.1,11  m 0,-11 11.1,11  m -14.9,-11 -11.1,11  m 0,-11 11.1,11"
	  };
	  icn["GR.M1.TOPOGRAPHIC"] = {
	    type: "path",
	    fill: false,
	    d: "m 92,65 c 6,3 10,3 16,0 m -18,13 10,-23 10,23"
	  };
	  icn["GR.M1.TRAINING CAMP"] = textm1("TNG");
	  icn["GR.M1.HIJACKER"] = textm1("HJ");
	  icn["GR.M1.UNMANNED AERIAL VEHICLE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 80,65 20,13 20,-13 0,-5 -20,10 -20,-10 z"
	  };
	  icn["GR.M1.UPGRADED EARLY WARNING RADAR"] = textm1("UEW");
	  icn["GR.M1.UTILITY"] = textm1("U");
	  icn["GR.M1.VIDEO IMAGERY"] = {
	    type: "path",

	    fill: false,
	    d: "m 120,65 -11,0 m 11,10 -14,0 m 4,-14 -30,0 0,18 25,0 z m 10,2 0,14"
	  };
	  icn["GR.M1.WO-1"] = textm1("WO-1");
	  icn["GR.M1.WO-2"] = textm1("WO-2");
	  icn["GR.M1.WO-3"] = textm1("WO-3");
	  icn["GR.M1.WO-4"] = textm1("WO-4");
	  icn["GR.M1.WO-5"] = textm1("WO-5");
	  icn["GR.M1.YARD"] = textm1("YRD");
	  icn["GR.M2.AIRBORNE"] = {
	    type: "path",
	    d: "M75,140 C75,125 100,125 100,140 C100,125 125,125 125,140",
	    fill: false
	  };
	  icn["GR.M2.ARCTIC"] = {
	    type: "path",

	    d: "M115,125 C125,125 125,135 115,135 L85,135 C75,135 75,125 85,125",
	    fill: false
	  };
	  icn["GR.M2.ATTACK"] = textm2("A");
	  icn["GR.M2.BLOOD"] = {
	    type: "path",
	    d: "m 120,121 c -2,7 -6,10 -6,13 0,3 2,6 6,6 4,0 6,-3 6,-6 0,-3 -4,-6 -6,-13 z",
	    stroke: false
	  };
	  icn["GR.M2.COMBAT AND OPERATIONAL STRESS CONTROL"] = {
	    type: "path",
	    d: "m 118.5,132.9 v -8 q 0,-1.1 -0.4,-1.6 -0.5,-0.5 -2,-0.5 v -0.5 h 7.7 v 0.5 q -1.5,0 -2.1,0.5 -0.4,0.5 -0.4,1.6 v 8 q 2.4,-0.1 3.2,-1 0.8,-0.9 0.8,-3.4 v -2.2 q 0,-2.3 0.8,-3.2 0.7,-1 2.6,-1 0.4,0 0.7,0.1 0.3,0 0.6,0 v 0.6 h -0.5 q -0.8,0 -1.1,0.5 -0.2,0.5 -0.2,2.2 v 2.7 q 0,2.7 -1.7,4 -1.8,1.4 -5.1,1.6 v 2.4 q 0,1.2 0.4,1.7 0.6,0.6 2.1,0.6 v 0.5 h -7.7 v -0.5 q 1.5,0 2,-0.6 0.4,-0.4 0.4,-1.7 v -2.4 q -3.4,-0.2 -5.1,-1.6 -1.7,-1.3 -1.7,-4 v -2.7 q 0,-1.7 -0.2,-2.2 -0.3,-0.5 -1.2,-0.5 h -0.5 v -0.6 q 0.3,0 0.6,0 0.5,-0.1 0.7,-0.1 1.8,0 2.5,1 0.9,0.9 0.9,3.2 v 2.2 q 0,2.5 0.8,3.4 0.9,0.9 3.1,1 z",
	    stroke: false
	  };
	  icn["GR.M2.LANDING CRAFT"] = textm2("LC");
	  icn["GR.M2.LANDING SHIP"] = textm2("LS");
	  icn["GR.M2.SERVICE CRAFT/YARD"] = textm2("YY");
	  icn["GR.M2.TUG HARBOR"] = textm2("YT");
	  icn["GR.M2.OCEAN GOING TUG BOAT"] = textm2("AT");
	  icn["GR.M2.SURFACE DEPLOYMENT AND DISTRIBUTION COMMAND"] = textm2("SDDC");
	  icn["GR.M2.COMPOSITE"] = textm2("COMP");
	  icn["GR.M2.LIGHT AND MEDIUM"] = textm2("L/M");
	  icn["GR.M2.BATTLE DAMAGE REPAIR"] = textm2("BDR");
	  icn["GR.M2.BICYCLE EQUIPPED"] = {
	    type: "circle",
	    cx: 100,
	    cy: 132,
	    r: 11,
	    fill: false
	  };
	  icn["GR.M2.CASUALTY STAGING"] = {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 122,
	    y: 133,
	    fontsize: 18,
	    text: "CS"
	  };
	  icn["GR.M2.CLEARING"] = textm2("CLR");
	  icn["GR.M2.CLOSE RANGE"] = textm2("CR");
	  icn["GR.M2.COMBAT SEARCH AND RESCUE"] = textm2("CSAR");
	  icn["GR.M2.CONTROL"] = {
	    type: "path",

	    d: "m 98,130 2,-4 2,4 m -8,8 -4,-2 4,-2 m 8,8 -2,4 -2,-4 m 8,-8 4,2 -4,2 m -14,-2 16,0 m -8,-8 0,16",
	    fill: false
	  };
	  icn["GR.M2.NONCOMBATANT GENERIC VESSEL"] = {
	    type: "path",
	    d: "m 95,135 0,-10 10,0 0,10 5,0 0,10 -20,0 0,-10 z",
	    stroke: false
	  };
	  icn["GR.M2.SHELTER"] = {
	    type: "path",
	    d: "m 85,140 30,0 -5,-15 -10,-5 -10,5 z",
	    stroke: false
	  };
	  icn["GR.M2.SELF-PROPELLED"] = {
	    type: "path",
	    d: "m 85,125 30,0 c 10,0 10,15 0,15 l -30,0 c -10,0 -10,-15 0,-15",
	    fill: false
	  };
	  icn["GR.M2.SURGICAL"] = {
	    type: "path",

	    d: "m 114,126 21,6 -21,6  m 0,-12 a 3.89,3.89 0 0 1 -3,3 3.89,3.89 0 0 1 -4,-3 3.89,3.89 0 0 1 4,-4 3.89,3.89 0 0 1 3,4 z  m 0,12 a 3.89,3.89 0 0 1 -3,4 3.89,3.89 0 0 1 -4,-4 3.89,3.89 0 0 1 4,-4 3.89,3.89 0 0 1 3,4 z",
	    fill: false
	  };
	  icn["GR.M2.CROSS-COUNTRY TRUCK"] = [
	    { type: "path", d: "M60,120 l80,0", fill: false },
	    { type: "circle", fill: false, cx: 65, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 100, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 135, cy: 125, r: 5 }
	  ];
	  icn["GR.M2.CAVALRY"] = {
	    type: "text",
	    stroke: false,
	    x: 110,
	    y: 140,
	    fontsize: 25,
	    text: "CAV"
	  };
	  icn["GR.M2.DECONTAMINATION"] = textm2("D");
	  icn["GR.M2.DEMOLITION"] = textm2("DEM");
	  icn["GR.M2.DENTAL"] =
	    metadata.edition == "E"
	      ? {
	          type: "path",
	          d: "m 108.8,142 c -0.1,0 -0.2,0 -0.2,0 0,0 0,0 0,0 -0.3,-0.1 -0.5,-0.3 -0.6,-0.6 0,-0.1 -0.2,-0.1 -0.2,-0.2 -0.5,-1.2 -0.8,-2.5 -1,-3.9 -0.1,-1.1 -0.1,-2.2 -0.2,-3.3 0,-1 -0.1,-2 -0.1,-3 0,-0.3 -0.1,-0.5 -0.2,-0.7 -0.1,-0.3 -0.2,-0.5 -0.3,-0.7 -0.4,-1 -0.8,-2 -0.9,-3.1 -0.1,-1 0,-2 0.5,-2.8 0.4,-0.7 0.9,-1.3 1.6,-1.6 0.3,-0.1 0.5,-0.2 0.8,-0.3 0.2,0 0.4,0 0.5,0 0.2,0 0.2,0 0.3,0 0.6,0.1 1.2,0.2 1.8,0.3 0.7,0.2 1.4,0.2 2.2,0.1 0.6,-0.1 1.2,-0.2 1.8,-0.3 0.4,-0.1 0.8,-0.1 1.3,0 0.6,0.1 1.1,0.4 1.6,0.9 0.8,0.8 1.1,1.9 1.2,3 0,0.6 -0.1,1.2 -0.2,1.7 -0.3,0.9 -0.6,1.7 -0.9,2.5 -0.2,0.4 -0.3,0.8 -0.3,1.3 0,0.6 -0.1,1.3 -0.1,2 0,0.9 -0.1,1.9 -0.2,2.9 0,0.5 -0.1,1 -0.1,1.4 -0.1,1 -0.4,2 -0.7,2.9 -0.1,0.4 -0.3,0.7 -0.5,1.1 -0.1,0.2 -0.3,0.4 -0.5,0.4 0,0 -0.1,0 -0.1,0 0,0 -0.1,0 -0.1,0 0,0 -0.1,0 -0.1,0 -0.3,-0.1 -0.4,-0.2 -0.5,-0.4 0,-0.2 0,-0.2 0,-0.3 -0.1,-0.7 -0.1,-1.3 -0.2,-2 -0.1,-1 -0.3,-2 -0.5,-2.9 -0.2,-0.7 -0.4,-1.3 -0.7,-1.8 -0.2,-0.4 -0.5,-0.7 -0.8,-0.9 -0.3,-0.2 -0.4,-0.2 -0.6,0 -0.3,0.1 -0.4,0.3 -0.6,0.6 -0.3,0.4 -0.6,0.9 -0.7,1.4 -0.5,1.5 -0.7,2.9 -0.8,4.4 0,0.4 -0.1,0.8 -0.1,1.2 0,0.4 -0.2,0.6 -0.6,0.7 z",
	          stroke: false
	        }
	      : {
	          type: "text",
	          stroke: false,
	          textanchor: "middle",
	          alignmentBaseline: "middle",
	          x: 122,
	          y: 133,
	          fontsize: 18,
	          text: "D"
	        };
	  icn["GR.M2.DIGITAL"] = textm2("DIG");
	  icn["GR.M2.ENHANCED POSITION LOCATION REPORTING SYSTEM"] = {
	    type: "path",

	    d: "m 87,142 13,-12 13,12 m -13,-20 0,20 0,0",
	    fill: false
	  };
	  icn["GR.M2.EQUIPMENT"] = textm2("E");
	  icn["GR.M2.EQUIMENT/TROOP"] = textm2("E/T");
	  icn["GR.M2.HEAVY"] = textm2("H");
	  icn["GR.M2.HIGH ALTITUDE"] = textm2("HA");
	  icn["GR.M2.HIGH TO MEDIUM ALTITUDE"] = textm2("HMA");
	  icn["GR.M2.HIGH TO LOW ALTITUDE"] = textm2("HLA");
	  icn["GR.M2.JAMMING"] = {
	    Unknown: {
	      type: "path",

	      d: "M 40.019,126.84 C 40.121,124.78 40.776,123 45,123 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 9.16,0 1.54,8.38 7.87,9.8  m -91.625,4.1 c 0.734,-0.56 1.901,-0.9 3.755,-0.9 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 0.29,0 0.56,-0 0.81,-0",
	      fill: false
	    },
	    Friend: {
	      type: "path",

	      d: "m 25,123 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10  m -150,3 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10",
	      fill: false
	    },
	    Neutral: {
	      type: "path",

	      d: "m 45,123 v 0 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10  m -110,3 v 0 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10",
	      fill: false
	    },
	    Hostile: {
	      type: "path",

	      d: "M 59.401,131.4 C 61.215,128.57 57.535,123 65,123 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 1.55,0 2.62,0.24 3.36,0.65  m -74.484,22.3 c 0.343,0 0.717,0.1 1.124,0.1 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 5.66,0 4.91,3.21 5.01,5.99",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.M1.CYBERSPACE"] = textm1("CYB");
	  icn["GR.M2.AIR ASSAULT"] = {
	    type: "path",

	    fill: false,
	    d: "m 85,125 15,20 15,-20"
	  };
	  icn["GR.M2.VERY HEAVY"] = textm2("VH");
	  icn["GR.M2.CYBERSPACE"] = textm2("CYB");
	  icn["GR.M2.NAVY BARGE, SELF-PROPELLED"] = textm2("YS");
	  icn["GR.M2.NAVY BARGE, NOT SELF-PROPELLED"] = textm2("YB");
	  icn["GR.M2.LAUNCH"] = textm2("YFT");
	  icn["GR.M1.TACTICAL SATELLITE COMMUNICATIONS"] = [
	    {
	      type: "path",
	      d: "m 105,65 10,0 m -30,0 10,0 M 85,77 c 10,-7 20,-7 30,0",
	      fill: false
	    },
	    {
	      type: "path",
	      d: "m 75.4,60.9 0,9.1 13.1,0 0,-9.1 z m 36,0 0,9.1 13.1,0 0,-9.1 z m -18,0 0,9.1 13.1,0 0,-9.1 z",
	      stroke: false
	    }
	  ];
	  icn["GR.M2.INTERMODAL"] = {
	    type: "path",

	    d: "m 80,125 40,0 0,-4 8,9 -8,9 0,-4 -40,0 0,4 -8,-9 8,-9 z",
	    fill: false
	  };
	  icn["GR.M2.INTENSIVE CARE"] = {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 122,
	    y: 133,
	    fontsize: 18,
	    text: "IC"
	  };
	  icn["GR.M2.J1"] = textm2("J1");
	  icn["GR.M2.J2"] = textm2("J2");
	  icn["GR.M2.J3"] = textm2("J3");
	  icn["GR.M2.J4"] = textm2("J4");
	  icn["GR.M2.J5"] = textm2("J5");
	  icn["GR.M2.J6"] = textm2("J6");
	  icn["GR.M2.J7"] = textm2("J7");
	  icn["GR.M2.J8"] = textm2("J8");
	  icn["GR.M2.J9"] = textm2("J9");
	  icn["GR.M2.LIGHT"] = textm2("L");
	  icn["GR.M2.LABORATORY"] = textm2("LAB");
	  icn["GR.M2.LAUNCHER"] = {
	    type: "path",

	    fill: false,
	    d: "M80,140 L115,120 120,140"
	  };
	  icn["GR.M2.LONG RANGE"] = textm2("LR");
	  icn["GR.M2.LONG RANGE SURVEILLANCE"] = {
	    type: "text",
	    stroke: false,
	    x: 110,
	    y: 140,
	    fontsize: 25,
	    text: "LRS"
	  };
	  icn["GR.M2.LOW ALTITUDE"] = textm2("LA");
	  icn["GR.M2.MEDIUM"] = textm2("M");
	  icn["GR.M2.MEDIUM ALTITUDE"] = textm2("MA");
	  icn["GR.M2.MEDIUM TO LOW ALTITUDE"] = textm2("MLA");
	  icn["GR.M2.MEDIUM RANGE"] = textm2("MR");
	  icn["GR.M2.MOUNTAIN"] = {
	    type: "path",
	    stroke: false,
	    d: "m 87,142 10,-20 5,10 3,-5 8,15"
	  };
	  icn["GR.M2.MULTIPLE ALTITUDES"] = textm2("H/MA");
	  icn["GR.M2.MULTI-CHANNEL"] = textm2("MC");
	  icn["GR.M2.OF-1"] = STD2525 ? textm2("O-1/O-2") : textm2("OF-1");
	  icn["GR.M2.OF-2"] = STD2525 ? textm2("O-3") : textm2("OF-2");
	  icn["GR.M2.OF-3"] = STD2525 ? textm2("O-4") : textm2("OF-3");
	  icn["GR.M2.OF-4"] = STD2525 ? textm2("O-5") : textm2("OF-4");
	  icn["GR.M2.OF-5"] = STD2525 ? textm2("O-6") : textm2("OF-5");
	  icn["GR.M2.OF-6"] = STD2525 ? textm2("O-7") : textm2("OF-6");
	  icn["GR.M2.OF-7"] = STD2525 ? textm2("O-8") : textm2("OF-7");
	  icn["GR.M2.OF-8"] = STD2525 ? textm2("O-9") : textm2("OF-8");
	  icn["GR.M2.OF-9"] = STD2525 ? textm2("O-10") : textm2("OF-9");
	  icn["GR.M2.OF-10"] = STD2525 ? textm2("O-11") : textm2("OF-10");
	  icn["GR.M2.OF-D"] = textm2("OF-D");
	  icn["GR.M2.OPTICAL"] = textm2("OPT");
	  icn["GR.M2.OPTOMETRY"] = [
	    {
	      type: "path",
	      d: "m 135,129 c -1.68,-1.82 -7.72,-7.76 -15.11,-7.83 h -0.15 c -7.32,0 -13.42,5.74 -15.12,7.52 -0.44,0.45 -0.45,1.18 0,1.65 1.67,1.82 7.72,7.76 15.11,7.84 h 0.15 c 7.32,0 13.42,-5.75 15.12,-7.52 0.44,-0.46 0.45,-1.19 0,-1.66 z  m -15.14,7.92 h -0.14 c -6.89,-0.1 -12.61,-5.71 -14.2,-7.36 1.62,-1.68 7.39,-7.14 14.22,-7.14 h 0.14 c 6.84,0.1 12.53,5.64 14.16,7.4 -1.65,1.72 -7.39,7.1 -14.18,7.1 z",
	      strokewidth: 2
	    },
	    {
	      type: "path",
	      d: "m 123.71,130.25 a 3.908,3.908 0 0 1 -3.91,3.91 3.908,3.908 0 0 1 -3.91,-3.91 3.908,3.908 0 0 1 3.91,-3.91 3.908,3.908 0 0 1 3.91,3.91 z",
	      stroke: false
	    }
	  ];
	  icn["GR.M2.OR-1"] = STD2525 ? textm2("E-1") : textm2("OR-1");
	  icn["GR.M2.OR-2"] = STD2525 ? textm2("E-2") : textm2("OR-2");
	  icn["GR.M2.OR-3"] = STD2525 ? textm2("E-3") : textm2("OR-3");
	  icn["GR.M2.OR-4"] = STD2525 ? textm2("E-4") : textm2("OR-4");
	  icn["GR.M2.OR-5"] = STD2525 ? textm2("E-5") : textm2("OR-5");
	  icn["GR.M2.OR-6"] = STD2525 ? textm2("E-6") : textm2("OR-6");
	  icn["GR.M2.OR-7"] = STD2525 ? textm2("E-7") : textm2("OR-7");
	  icn["GR.M2.OR-8"] = STD2525 ? textm2("E-8") : textm2("OR-8");
	  icn["GR.M2.OR-9"] = STD2525 ? textm2("E-9") : textm2("OR-9");
	  icn["GR.M2.GUERILLA"] = textm2("G");
	  icn["GR.M2.AMPHIBIOUS"] = {
	    Unknown: {
	      type: "path",

	      d: "M 64 144.9 C 80.4 143.9 63.1 125 81.4 125 C 100.2 125 81.4 145 100.2 145 C 119 145 100.2 125 119 125 C 137.1 125 120.2 143.6 135.9 144.9",
	      fill: false
	    },
	    Friend: {
	      type: "path",

	      d: "m 25,145 c 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 18.8,20 18.8,0 0,-20 18.8,-20 18.8,0 0,20 20,20",
	      fill: false
	    },
	    Neutral: {
	      type: "path",

	      d: "M 45 125 C 61.7 125.9 44.2 145 62.6 145 C 81.4 145 62.6 125 81.4 125 C 100.2 125 81.4 145 100.2 145 C 119 145 100.2 125 119 125 C 137.8 125 119 145 137.8 145 C 155.9 145 138.9 126.2 154.8 125 ",
	      fill: false
	    },
	    Hostile: {
	      type: "path",

	      d: "M 70.4 142.4 C 74.8 137 66.8 125 81.4 125 C 100.2 125 81.4 145 100.2 145 C 119 145 100.2 125 119 125 C 133.3 125 125.7 136.6 129.7 142.1 ",
	      fill: false
	    }
	  }[affiliation];
	  icn["GR.M2.PACK ANIMAL"] = {
	    type: "path",

	    d: "m 84,140 9,-15 7,15 7,-15 9,15",
	    fill: false
	  };
	  icn["GR.M2.PATIENT EVACUATION COORDINATION"] = {
	    type: "text",
	    stroke: false,
	    x: 122,
	    y: 135,
	    fontsize: 16,
	    text: "PEC"
	  };
	  icn["GR.M2.PREVENTIVE MEDICIN"] = {
	    type: "path",
	    d: "m 116.6,121.74 -6.47,9.88 h 4.51 l 1.23,-4.5 2.93,6.75 0.9,-2.21 h 3.32 z  m -0.45,9.11 -0.56,2.04 h -6.27 l -3.54,5.4 h 21.44 l -3.4,-5.29 h -3.29 l -1.68,4.15 z",
	    stroke: false
	  };
	  icn["GR.M2.PREVENTIVE MAINTENANCE"] = textm2("PM");
	  icn["GR.M2.PSYCHOLOGICAL"] = {
	    type: "text",
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 115,
	    y: 135,
	    fontsize: 28,
	    text: "P"
	  };
	  icn["GR.M2.RADIO RELAY LINE OF SIGHT"] = [
	    { type: "circle", cx: 100, cy: 132, r: 11, fill: false, strokewidth: 3 },
	    {
	      type: "path",

	      d: "M 90.8 128.2 C 90.3 129.3 90 130.6 90 132 C 90 133.4 90.3 134.7 90.8 135.8 L 100 132 L 90.8 128.2 z M 100 132 L 109.3 135.8 C 109.7 134.7 110 133.4 110 132 C 110 130.6 109.7 129.3 109.3 128.2 L 100 132 z"
	    }
	  ];
	  icn["GR.M2.RAILROAD"] = [
	    { type: "path", d: "M65,125 l70,0", fill: false },
	    { type: "circle", fill: false, cx: 70, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 80, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 120, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 130, cy: 130, r: 5 }
	  ];
	  icn["GR.M2.TRACTOR TRAILER"] = [
	    { type: "path", d: "M60,120 l80,0", fill: false },
	    { type: "circle", fill: false, cx: 65, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 75, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 135, cy: 125, r: 5 }
	  ];
	  icn["GR.M2.RECOVERY (UNMANNED SYSTEMS)"] = {
	    type: "path",

	    d: "m 70,125 c0,20 60,20 60,0",
	    fill: false
	  };
	  icn["GR.M2.RECOVERY (MAINTENANCE)"] = {
	    type: "path",

	    fill: false,
	    d: "M75,125 c8,0 8,16 0,16 m8,-8 l35,0 m8,-8 c-8,0 -8,16 0,16"
	  };
	  icn["GR.M2.REFUEL"] = textm2("K");
	  icn["GR.M2.RESCUE COORDINATION CENTRE"] = {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 122,
	    y: 132,
	    fontsize: 16,
	    text: "RCC"
	  };
	  icn["GR.M2.RIVERINE"] = {
	    type: "path",

	    d: "m 70.1,123 c 0,17 59.9,17 59.9,0 z",
	    fill: false
	  };
	  icn["GR.M2.ROBOTIC"] = {
	    type: "path",
	    d: "M100,121.68L114.895,136.459C115.309,136.201 115.798,136.052 116.321,136.052C117.812,136.052 119.022,137.262 119.022,138.753C119.022,140.243 117.812,141.454 116.321,141.454C114.831,141.454 113.62,140.243 113.62,138.753C113.62,138.407 113.686,138.076 113.805,137.772L103.378,132.6L100.851,141.224C101.072,141.298 101.28,141.4 101.471,141.526C102.211,142.008 102.701,142.843 102.701,143.791C102.701,145.281 101.491,146.492 100,146.492C99.451,146.492 98.939,146.327 98.512,146.045C97.776,145.562 97.29,144.73 97.29,143.785C97.29,142.592 98.064,141.579 99.138,141.222L96.613,132.606L86.186,137.778C86.305,138.082 86.37,138.413 86.37,138.759C86.37,140.25 85.16,141.46 83.669,141.46C82.179,141.46 80.969,140.25 80.969,138.759C80.969,137.268 82.179,136.058 83.669,136.058C84.193,136.058 84.681,136.207 85.095,136.465L99.991,121.671L100,121.662L100,121.68Z",
	    stroke: false
	  };
	  icn["GR.M2.SECURITY FORCE ASSISTANCE"] = textm2("SFA");
	  icn["GR.M2.SINGLE CHANNEL"] = textm2("SC");
	  icn["GR.M2.SKI"] = {
	    type: "path",
	    d: "m 95,145 -9,-8 m 28,0 -9,8 m -15,-24 20,20 m 0,-20 -20,20",
	    fill: false
	  };
	  icn["GR.M2.SHORT RANGE"] = textm2("SR");
	  icn["GR.M2.STRATEGIC"] = textm2("STR");
	  icn["GR.M2.STRATEGIC MISSILE"] = textm2("S");
	  icn["GR.M2.SUPPORT"] = textm2("SPT");
	  icn["GR.M2.TACTICAL"] = textm2("TAC");
	  icn["GR.M2.TACTICAL MISSILE"] = textm2("T");
	  icn["GR.M2.TARGET ACQUISITION"] = textm2("TA");
	  icn["GR.M2.TOWED"] = [
	    { type: "path", d: "M82,130 l36,0", fill: false },
	    { type: "circle", fill: false, cx: 75, cy: 130, r: 7 },
	    { type: "circle", fill: false, cx: 125, cy: 130, r: 7 }
	  ];
	  icn["GR.M2.TROOP"] = textm2("TR");
	  icn["GR.M2.TRACKED"] = {
	    type: "path",
	    d: "m 90,125 h 20 c 10,0 10,15 0,15 H 90 c -10,0 -10,-15 0,-15",
	    fill: false
	  };
	  icn["GR.M2.TRUCK"] = [
	    { type: "path", d: "M60,120 l80,0", fill: false },
	    { type: "circle", fill: false, cx: 65, cy: 125, r: 5 },
	    { type: "circle", fill: false, cx: 135, cy: 125, r: 5 }
	  ];
	  icn["GR.M2.UTILITY"] = textm2("U");
	  icn["GR.M2.VIDEO IMAGERY"] = {
	    type: "path",
	    fill: false,
	    d: "m 120,126 h -11  m 11,10 h -14  m 4,-14 H 80 v 18 h 25 z  m 10,2 v 14"
	  };
	  icn["GR.M2.VERTICAL OR SHORT TAKE-OFF AND LANDING "] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 130,
	    fontsize: 20,
	    text: "VTOL"
	  };
	  icn["GR.M2.VETERINARY"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 115,
	    y: 137,
	    fontsize: 28,
	    text: "V"
	  };
	  icn["GR.M2.WHEELED"] = [
	    { type: "circle", cx: 75, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 100, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 125, cy: 130, r: 7, fill: false }
	  ];
	  icn["GR.M2.WHEELED LIMITED"] = [
	    { type: "circle", cx: 80, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 120, cy: 130, r: 7, fill: false }
	  ];
	  icn["GR.M2.WO-1"] = textm2("WO-1");
	  icn["GR.M2.WO-2"] = textm2("WO-2");
	  icn["GR.M2.WO-3"] = textm2("WO-3");
	  icn["GR.M2.WO-4"] = textm2("WO-4");
	  icn["GR.M2.WO-5"] = textm2("WO-5");
	  // Ground Equipment --------------------------------------------------------------
	  icn["GR.EQ.SHORT RANGE"] = { type: "path", d: "m 85,100 30,0", fill: false };
	  icn["GR.EQ.INTERMEDIATE RANGE"] = {
	    type: "path",
	    d: "m 85,105 30,0 m -30,-10 30,0",
	    fill: false
	  };
	  icn["GR.EQ.LONG RANGE"] = {
	    type: "path",
	    d: "m 85,110 30,0 m -30,-20 30,0 m -30,10 30,0",
	    fill: false
	  };
	  icn["GR.EQ.WEAPON"] = { type: "path", d: "m 100,60 0,80", fill: false };
	  icn["GR.EQ.RIFLE"] = {
	    type: "path",
	    d: "m 100,60 0,80 M 85,75 100,60 115,75",
	    fill: false
	  };
	  icn["GR.EQ.RIFLE DISMOUNTED1"] = {
	    type: "path",
	    d: "m 90,90 10,-10 10,10 m -10,-10 0,40",
	    fill: false
	  };
	  icn["GR.EQ.MACHINE GUN"] = {
	    type: "path",
	    d: "m 100,60 0,80 M 85,75 100,60 115,75 M 80,140 120,140",
	    fill: false
	  };
	  icn["GR.EQ.GRENADE LAUNCHER"] = [
	    icn["GR.EQ.RIFLE"],
	    { type: "circle", cx: 100, cy: 90, r: 10, fill: false }
	  ];
	  icn["GR.EQ.FLAME THROWER"] = {
	    type: "path",
	    fill: false,
	    d: "m 90,135 0,-70 c 0,-15 20,-15 20,0"
	  };
	  icn["GR.EQ.AIR DEFENCE GUN"] = [
	    {
	      type: "path",
	      d: "m 85,140 30,0 c 0,-20 -30,-20 -30,0 z m 15,-80 0,65 m 15,-45 0,40 m -30,-40 0,40",
	      fill: false
	    }
	  ];
	  if (!STD2525 && !numberSIDC) {
	    icn["GR.EQ.AIR DEFENCE GUN"].push({
	      type: "path",
	      d: "M 85,75 100,60 115,75",
	      fill: false
	    });
	  }
	  icn["GR.EQ.ANTITANK GUN"] = {
	    type: "path",
	    d: "m 85,140 15,-15 15,15 m -15,-80 0,65 m -15,-45 0,40 m 30,-40 0,40",
	    fill: false
	  };
	  icn["GR.EQ.DIRECT FIRE GUN"] = {
	    type: "path",
	    d: "m 100,60 0,80 m 15,-60 0,40 m -30,-40 0,40",
	    fill: false
	  };
	  icn["GR.EQ.RECOILLESS GUN"] = {
	    type: "path",
	    d: "m 85,75 15,-15 15,15 m 0,5 0,40 m -30,-40 0,40 m 15,-60 0,80",
	    fill: false
	  };
	  icn["GR.EQ.HOWITZER"] = [
	    { type: "circle", cx: 100, cy: 130, r: 10, fill: false },
	    {
	      type: "path",
	      d: "m 115,80 0,40 m -30,-40 0,40 m 15,-60 0,60",
	      fill: false
	    }
	  ];
	  icn["GR.EQ.HOWITZER TRACKED"] = {
	    type: "path",
	    d: "M 70,120 l 60,0 c10,0 10,10 0,10 l -60,0 c-10,0 -10,-10 0,-10",
	    fill: false
	  };
	  icn["GR.EQ.MISSILE LAUNCHER"] = {
	    type: "path",
	    d: "m 100,140 0,-80 m -15,80 0,-65 c 0,-20 30,-20 30,0 l 0,65",
	    fill: false
	  };
	  icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"] = {
	    type: "path",
	    d: "m 85,140 30,0 c 0,-20 -30,-20 -30,0 z m 15,-15 0,-65 m -15,80 0,-65 c 0,-20 30,-20 30,0 l 0,65",
	    fill: false
	  };
	  icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 132,
	    y: 100,
	    fontsize: 25,
	    text: "R"
	  };
	  icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 68,
	      y: 100,
	      fontsize: 25,
	      text: "E"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 132,
	      y: 100,
	      fontsize: 25,
	      text: "R"
	    }
	  ];
	  icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR THEATRE"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 145,
	    fontsize: 30,
	    text: "T"
	  };
	  icn["GR.EQ.ANTITANK MISSILE LAUNCHER"] = {
	    type: "path",
	    d: "m 85,140 15,-15 15,15 M 85,120 85,75 c 0,-20 30,-20 30,0 l 0,45 m -15,5 0,-65",
	    fill: false
	  };
	  icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"] = [
	    icn["GR.EQ.MISSILE LAUNCHER"]
	  ];
	  icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"].push({
	    type: "path",
	    d: "m 85,140 30,0",
	    fill: false
	  });
	  icn["GR.EQ.MORTAR"] = [
	    { type: "path", d: "m 100,60 0,60 M 85,75 100,60 115,75", fill: false },
	    { type: "circle", cx: 100, cy: 130, r: 10, fill: false }
	  ];
	  icn["GR.EQ.SINGLE ROCKET LAUNCHER"] = {
	    type: "path",
	    d: "m 85,75 15,-15 15,15 m -15,-5 0,70 M 85,85 100,70 115,85",
	    fill: false
	  };
	  icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"] = {
	    type: "path",
	    d: "m 115,90 0,40 m -30,-40 0,40 m 0,-55 15,-15 15,15 m -15,-5 0,70 M 85,85 100,70 115,85",
	    fill: false
	  };
	  icn["GR.EQ.ANTITANK ROCKET LAUNCHER"] = {
	    type: "path",
	    d: "m 85,140 15,-15 15,15 M 85,85 100,70 115,85 m -15,-15 0,55 M 85,75 100,60 115,75",
	    fill: false
	  };
	  icn["GR.EQ.NON-LETHAL WEAPON"] = {
	    type: "path",
	    d: "m 100,60 0,80 M 80,60 l40,0",
	    fill: false
	  };
	  icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"] = [
	    icn["GR.EQ.NON-LETHAL WEAPON"],
	    { type: "circle", cx: 100, cy: 90, r: 15, fill: false }
	  ];
	  icn["GR.EQ.TASER"] = [icn["GR.EQ.NON-LETHAL WEAPON"], text("Z")];
	  icn["GR.EQ.WATER CANNON"] = [icn["GR.EQ.NON-LETHAL WEAPON"], text("W")];
	  icn["GR.EQ.LIMITED CROSS-COUNTRY"] = [
	    { type: "path", d: "m 70,130 60,0", fill: false },
	    { type: "circle", cx: 75, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 125, cy: 135, r: 5, fill: false }
	  ];
	  icn["GR.EQ.CROSS-COUNTRY"] = [
	    { type: "path", d: "m 70,130 60,0", fill: false },
	    { type: "circle", cx: 75, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 100, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 125, cy: 135, r: 5, fill: false }
	  ];
	  icn["GR.EQ.ARMOURED FIGHTING VEHICLE"] = {
	    type: "path",
	    d: "m 70,100 30,-30 30,30 -30,30 z m 60,-30 0,60 m -60,-60 0,60 0,0",
	    fill: false
	  };
	  icn["GR.EQ.ARMOURED FIGHTING VEHICLE (AFV) COMMAND AND CONTROL"] = [
	    icn["GR.EQ.ARMOURED FIGHTING VEHICLE"]
	  ];
	  if (numberSIDC) {
	    icn["GR.EQ.ARMOURED FIGHTING VEHICLE (AFV) COMMAND AND CONTROL"].push({
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "C2"
	    });
	  } else {
	    icn["GR.EQ.ARMOURED FIGHTING VEHICLE (AFV) COMMAND AND CONTROL"].push({
	      type: "path",
	      d: "m 80,90 20,15 0,-10 20,15",
	      fill: false
	    });
	  }
	  icn["GR.EQ.ARMOURED PERSONNEL CARRIER"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,80 30,-10 30,10 m -60,-10 0,60 60,0 0,-60"
	  };
	  icn["GR.EQ.ARMOURED PERSONNEL CARRIER COMBAT SERVICE SUPPORT VEHICLE"] = [
	    icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	    { type: "path", d: "m 70,120 60,0", fill: false }
	  ];
	  icn["GR.EQ.ARMOURED PERSONNEL CARRIER ENGINEER RECON VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "M 130,80 70,130"
	  };
	  icn["GR.EQ.COMBAT SERVICE SUPPORT VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "M 70,120 130,120"
	  };
	  icn["GR.EQ.DESIGNATED MARKSMAN"] = text("DM");
	  icn["GR.EQ.ARMOURED MEDICAL PERSONNEL CARRIER"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,100 60,0 m -30,-30 0,60"
	  };
	  icn["GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"] =
	    [
	      {
	        type: "path",
	        d: "m 60,120 80,0 M 120,80 c 25,0.2 25,40 0,40 l -40,0 C 55,120 55,80 80,80 Z",
	        fill: false
	      },
	      icn["GR.M2.WHEELED LIMITED"]
	    ];
	  icn["GR.EQ.ARMOURED VEHICLE"] = text("A");
	  icn["GR.EQ.CLOSE PROTECTION"] = text("CLP");
	  icn["GR.EQ.CROWD AND RIOT CONTROL"] = text("CRC");
	  icn["GR.EQ.SPECIAL WEAPONS AND TACTICS (SWAT)"] = text("SWAT");
	  icn["GR.EQ.DEMOLITION"] = text("DEM");
	  icn["GR.EQ.COMMANDER (CDR)"] = text("CDR");
	  icn["GR.EQ.SECOND IN COMMAND (SIC)"] = text("SIC");
	  icn["GR.EQ.ARMORED CARRIER WITH VOLCANO"] = text("V");
	  icn["GR.EQ.TANK"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,80 60,0 m -60,40 60,0 m -60,-50 0,60 0,0 m 60,-60 0,60"
	  };
	  icn["GR.EQ.ASSAULT BREACHER VEHICLE (ABV) WITH COMBAT DOZER BLADE"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,95 30,25 m -30,-60 0,35 -30,25 m 10,-60 40,0 m -50,20 60,0 m -60,40 60,0 m -60,-50 0,60 0,0 m 60,-60 0,60"
	  };
	  icn["GR.EQ.LIGHT TANK"] = { type: "path", fill: false, d: "m 100,80 0,40" };
	  icn["GR.EQ.MEDIC"] = {
	    type: "path",

	    d: "M93,83 l14,0 0,10 10,0 0,14 -10,0 0,10 -14,0 0,-10 -10,0 0,-14 10,0 Z"
	  };
	  icn["GR.EQ.MEDIUM TANK"] = {
	    type: "path",
	    fill: false,
	    d: "m 105,80 0,40 m -10,-40 0,40"
	  };
	  icn["GR.EQ.HEAVY TANK"] = {
	    type: "path",
	    fill: false,
	    d: "m 110,80 0,40 m -20,-40 0,40 m 10,-40 0,40"
	  };
	  icn["GR.EQ.TANK RECOVERY VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "m 85,100 30,0 m 10,-10 c -13.1,0 -12.4,20 0,20 M 75,90 c 12.7,0.3 12.7,20.3 0,20"
	  };
	  icn["GR.EQ.BRIDGE"] = {
	    type: "path",
	    d: "m 115,75 -10,10 0,30 10,10 m -30,-50 10,10 0,30 -10,10 m -15,-55 60,0 0,60 -60,0 0,-60",
	    fill: false
	  };
	  icn["GR.EQ.FIXED BRIDGE"] = {
	    type: "path",
	    d: "M 100,70 100,130",
	    fill: false
	  };
	  icn["GR.EQ.FOLDING GIRDER BRIDGE"] = {
	    type: "path",
	    d: "M 110, 80 90,80 90,120 110,120",
	    fill: false
	  };
	  icn["GR.EQ.HOLLOW DECK BRIDGE"] = {
	    type: "path",
	    d: "M 110, 80 90,80 90,120 110,120 z",
	    fill: false
	  };
	  icn["GR.EQ.DRILL"] = icn["GR.IC.DRILLING"];
	  icn["GR.EQ.DOZER"] = {
	    type: "path",
	    d: "m 90,60 20,0 m -10,0 0,20 m -30,0 60,0 m -60,-10 0,60 0,0 m 60,-60 0,60 m -60,-10 60,0",
	    fill: false
	  };
	  icn["GR.EQ.DOZER ARMORED"] = {
	    type: "path",
	    d: "m 70,130 60,0 m -30,-70 0,10 m -30,10 30,-10 30,10 m 0,-10 0,60 m -60,-60 0,60 0,0 m 20,-70 20,0",
	    fill: false
	  };
	  icn["GR.EQ.EARTHMOVER"] = {
	    type: "path",
	    d: "m 100,60 0,20 m -25,-15 5,-5 40,0 5,5 m -55,15 60,0 m -60,40 60,0 m 0,-50 0,60 m -60,-60 0,60 0,0",
	    fill: false
	  };
	  icn["GR.EQ.MULTIFUNCTIONAL EARTHMOVER/DIGGER"] = [
	    icn["GR.EQ.EARTHMOVER"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 100,
	      fontsize: 30,
	      text: "MF"
	    }
	  ];
	  icn["GR.EQ.MINE CLEARING EQUIPMENT"] = {
	    type: "path",
	    d: "m 100,80 0,15 -30,25 60,0 -30,-25",
	    fill: false
	  };
	  icn["GR.EQ.MINE LAYING VEHICLE"] = [
	    {
	      type: "path",
	      d: "m 90,85 20,30 m 0,-30 -20,30 m 10,-30 0,30",
	      fill: false
	    },
	    { type: "circle", cx: 100, cy: 100, r: 10 }
	  ];
	  icn["GR.EQ.MINE SCATTERABLE"] = [
	    text("S"),
	    { type: "circle", cx: 85, cy: 115, r: 5, fill: false },
	    { type: "circle", cx: 100, cy: 115, r: 5, fill: false },
	    { type: "circle", cx: 115, cy: 115, r: 5, fill: false }
	  ];
	  icn["GR.EQ.UTILITY VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,65 c 0,15 60,15 60,0 l 0,65 -60,0 z"
	  };
	  icn["GR.EQ.UTILITY VEHICLE BACKHOE"] = [
	    { type: "path", fill: false, d: "M 130,130 100,80 75,95 75,95" },
	    { type: "path", d: "M 75,105 85,95 75,95 z" }
	  ];
	  icn["GR.EQ.UTILITY VEHICLE FERRY TRANSPORTER"] = {
	    type: "path",
	    fill: false,
	    d: "m 75,100 c 15,15 35,15 50,0 z"
	  };
	  icn["GR.EQ.UTILITY VEHICLE LIGHT"] = {
	    type: "path",
	    fill: false,
	    d: "M 100,78.3 100,130"
	  };
	  icn["GR.EQ.UTILITY VEHICLE MEDIUM"] = {
	    type: "path",
	    fill: false,
	    d: "m 105,130 0,-52 M 95,130 l0,-52"
	  };
	  icn["GR.EQ.UTILITY VEHICLE HEAVY"] = {
	    type: "path",
	    fill: false,
	    d: "m 110,130 0,-53 m -20,50 0,-53 m 10,1.3 0,52"
	  };
	  icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"] = {
	    type: "path",
	    fill: false,
	    d: "m 130,130 -40,-40 0,25 c 0,5 -10,5 -10,0"
	  };
	  icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.LIGHT"] = {
	    type: "path",
	    fill: false,
	    d: "m 105,115 10,-10"
	  };
	  icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.HEAVY"] = {
	    type: "path",
	    fill: false,
	    d: "m 120,110 -10,10 m -10,-10 10,-10 m -5,15 10,-10"
	  };
	  icn["GR.EQ.MEDICAL VEHICLE"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,100 l 60,0 M 100,78.3 100,130"
	  };
	  icn["GR.EQ.MEDICAL EVACUATION"] = {
	    type: "path",
	    d: "m 95,85 10,0 0,10 10,0 0,10 -10,0 0,10 -10,0 0,-10 -10,0 0,-10 10,0 z"
	  };
	  icn["GR.EQ.MOBILE EMERGENCY PHYSICIAN"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,100 l 60,0 M 100,78.3 100,130 M 85,85 115,85"
	  };
	  icn["GR.EQ.BUS"] = [icn["GR.EQ.UTILITY VEHICLE"], text("B")];
	  icn["GR.EQ.SEMI-TRAILER TRUCK"] = [
	    icn["GR.EQ.UTILITY VEHICLE"],
	    { type: "path", fill: false, d: "m 140,90 0,20 m -10,-10 10,0" },
	    { type: "circle", cx: 75, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 85, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 125, cy: 135, r: 5, fill: false }
	  ];
	  icn["GR.EQ.WATER VEHICLE"] = [
	    icn["GR.EQ.UTILITY VEHICLE"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 70,95 c 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10 10,0 0,10 10,10 10,0 0,-10 10,-10"
	    },
	    { type: "circle", cx: 75, cy: 135, r: 5, fill: false },
	    { type: "circle", cx: 125, cy: 135, r: 5, fill: false }
	  ];
	  icn["GR.EQ.TRAIN LOCOMOTIVE"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,70 0,60 60,0 0,-30 -30,0 0,-30 z"
	  };
	  icn["GR.EQ.RAILCAR"] = [
	    icn["GR.EQ.UTILITY VEHICLE"],
	    { type: "circle", fill: false, cx: 75, cy: 135, r: 5 },
	    { type: "circle", fill: false, cx: 85, cy: 135, r: 5 },
	    { type: "circle", fill: false, cx: 115, cy: 135, r: 5 },
	    { type: "circle", fill: false, cx: 125, cy: 135, r: 5 }
	  ];
	  icn["GR.EQ.CBRN EQUIPMENT"] = [
	    {
	      type: "path",
	      d: "M80,140 c0,-20 10,-60 50,-63 m-10,63 c0,-20 -10,-60 -50,-63 ",
	      fill: false
	    },
	    { type: "circle", cx: 70, cy: 85, r: 8 },
	    { type: "circle", cx: 130, cy: 85, r: 8 }
	  ];
	  icn["GR.EQ.COMPUTER SYSTEM"] = {
	    type: "path",
	    d: "m 100,132 0,-10 -35,0 0,-50 70,0 0,50 -35,0 m -25,10 50,0",
	    fill: false
	  };
	  icn["GR.EQ.COMMAND LAUNCH EQUIPMENT (CLE)"] = text("CLE");
	  icn["GR.EQ.GENERATOR SET"] = text("G");
	  icn["GR.EQ.GROUND-BASED MIDCOURSE DEFENSE (GMD) FIRE CONTROL (GFC) CENTER"] =
	    text("GFC");
	  icn[
	    "GR.EQ.IN-FLIGHT INTERCEPTOR COMMUNICATIONS SYSTEM (IFICS) DATA TERMINAL (IDT)"
	  ] = {
	    type: "path",
	    fill: false,
	    d: "m 80,82.4 45,-2 -4,37 m -6,-1 0,-35 -34,9 m 12,21 0,8 M 80,82.4 c 0,25 16,35 41,35"
	  };
	  icn["GR.EQ.LASER"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,55 0,25 10,5 -20,5 20,5 -20,5 10,5 0,15 10,5 -20,5 20,5 -20,5 20,5 M 90,65 100,55 110,65"
	  };
	  icn["GR.EQ.TENT"] = {
	    type: "path",
	    fill: false,
	    d: "m 65,124.4 10,-37 25,-10 25,10 10,37 z"
	  };
	  icn["GR.EQ.TENT CIVILIAN"] = {
	    type: "path",
	    fill: false,
	    d: "m 75,120 10,-30 15,-10 15,10 10,30 z"
	  };
	  icn["GR.EQ.TENT MILITARY"] = {
	    type: "path",
	    d: "m 75,120 10,-30 15,-10 15,10 10,30 z"
	  };
	  icn["GR.EQ.UNIT DEPLOYMENT SHIPMENTS"] = text("DPLY");
	  icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,125 0,-20"
	  };
	  icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"] = {
	    type: "path",
	    fill: false,
	    d: "m 103,105 0,20 m -6,-20 0,20"
	  };
	  icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"] = {
	    type: "path",
	    fill: false,
	    d: "m 106,105 0,20 m -12,-20 0,20 m 6,-20 0,20"
	  };
	  icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"] = {
	    type: "path",
	    fill: false,
	    d: "m 140,105 0,20 m -10,-10 10,0"
	  };
	  icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 90,125 20,0 m -20,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 35,0 5,0 0,-20 -20,0 0,-20 -20,0 0,20 -20,0 0,20 5,0 m 50,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z"
	    },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 2,
	      d: "m 95,90 0,15 10,0 0,-15 z"
	    }
	  ];
	  icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 90,125 20,0 m -20,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 35,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 0,0 5,0 0,-20 -20,0 -20,0 0,-20 -20,0 0,20 0,20 5,0"
	    },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 2,
	      d: "m 75,90 0,15 10,0 0,-15 z"
	    }
	  ];
	  icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 90,125 20,0 m -20,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 35,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 0,0 5,0 0,-20 0,-20 -20,0 -20,0 -20,0 0,20 0,20 5,0"
	    },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 2,
	      d: "m 115,90 0,15 10,0 0,-15 z m -20,0 0,15 10,0 0,-15 z m -20,0 0,15 10,0 0,-15 z"
	    }
	  ];
	  icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 90,125 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 35,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m -35,0 20,0 m 15,0 5,0 0,-20 0,-20 -20,0 -20,0 0,20 -20,0 0,20 5,0"
	    },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 2,
	      d: "m 95,90 0,15 10,0 0,-15 z"
	    }
	  ];
	  icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : false,
	    d: "m 90,125 20,0 m -20,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 35,0 c 0,-4.1 -3.4,-7.5 -7.5,-7.5 -4.1,0 -7.5,3.4 -7.5,7.5 0,4.1 3.4,7.5 7.5,7.5 4.1,0 7.5,-3.4 7.5,-7.5 z m 0,0 5,0 0,-20 -60,0 0,20 5,0 m 15,-20 5,-15"
	  };
	  icn["GR.EQ.PACK ANIMAL"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,125 15,-50 15,50 15,-50 15,50 "
	  };
	  icn["GR.EQ.MISSILE SUPPORT"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 93,
	      fontsize: 20,
	      text: "MSL"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 110,
	      fontsize: 20,
	      text: "SPT"
	    }
	  ];
	  icn["GR.EQ.MISSILE TRANSLOADER"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 100,
	      fontsize: 30,
	      text: "MSL"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,70 50,0 m -25,10 c 0,-5 0,-10 0,-10"
	    }
	  ];
	  icn["GR.EQ.MISSILE TRANSPORTER"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 100,
	      fontsize: 30,
	      text: "MSL"
	    }
	    //{ type: "path", fill: false, d: "m 55,85 90,0" }
	  ];
	  icn["GR.EQ.MISSILE CRANE/LOADING DEVICE"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 100,
	      fontsize: 30,
	      text: "MSL"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,80 25,-20 c 0,0 0,15 0,15 l 5,0 0,-5"
	    }
	  ];
	  icn["GR.EQ.MISSILE PROPELLANT TRANSPORTER"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 90,
	      y: 100,
	      fontsize: 20,
	      text: "MSL"
	    },
	    { type: "path", fill: false, d: "m 120,115 0,-15 -10,-10 20,0 -10,10" }
	  ];
	  icn["GR.EQ.MISSILE WARHEAD TRANSPORTER"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 93,
	      fontsize: 20,
	      text: "MSL"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 110,
	      fontsize: 20,
	      text: "WHD"
	    }
	  ];
	  icn["GR.EQ.LAND MINE"] = numberSIDC
	    ? { type: "circle", cx: 100, cy: 100, r: 22, fill: false }
	    : [
	        { type: "path", fill: false, d: "m 70,65 60,0 -30,65 z" },
	        {
	          type: "text",
	          stroke: false,
	          x: 100,
	          y: 90,
	          fontfamily: "Arial",
	          fontsize: 30,
	          text: "M"
	        }
	      ];
	  icn["GR.EQ.ANTIPERSONNEL LAND MINE"] = [
	    { type: "circle", cx: 100, cy: 100, r: 22 },
	    {
	      type: "path",
	      d: "M117,82 l20,-18 -18,25z M83,82 l-20,-18 18,25z",
	      stroke: false
	    }
	  ];
	  icn["GR.EQ.ANTIPERSONNEL LAND MINE LESS THAN LETHAL"] = [
	    { type: "circle", cx: 100, cy: 100, r: 22, fill: false },
	    {
	      type: "path",
	      d: "M117,82 l20,-18 -18,25z M83,82 l-20,-18 18,25z",
	      stroke: false
	    }
	  ];
	  icn["GR.EQ.ANTITANK MINE"] = { type: "circle", cx: 100, cy: 100, r: 22 };
	  icn["GR.EQ.IMPROVISED EXPLOSIVE DEVICE"] = text("IED");
	  icn["GR.EQ.LAND MINES"] = [
	    { type: "text", stroke: false, x: 100, y: 110, fontsize: 30, text: "M" },
	    {
	      type: "path",
	      fill: false,
	      d: STD2525 ? "m 135,70 -70,0 35,70 z" : "m 65,130 70,0 -35,-70 z"
	    }
	  ];
	  icn["GR.EQ.SENSOR"] = {
	    type: "path",
	    d: "m 100,60 c 0,15 25,40 40,40 -15,0 -40,25 -40,40 0,-15 -25,-40 -40,-40 15,0 40,-25 40,-40 z"
	  };
	  icn["GR.EQ.SENSOR EMPLACED"] = [
	    ms._scale(0.75, icn["GR.EQ.SENSOR"], true),
	    {
	      type: "path",
	      fill: false,
	      d: "m 70,75 10,-15 10,15 10,-15 10,15 10,-15 10,15"
	    }
	  ];
	  icn["GR.EQ.RADAR"] = {
	    type: "path",
	    d: "M72,95 l30,-25 0,25 30,-25 M70,70 c0,35 15,50 50,50",
	    fill: false
	  };
	  icn["GR.EQ.ANTENNAE"] = [];
	  icn["GR.EQ.PSYCHOLOGICAL OPERATIONS EQUIPMENT"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : false,
	    stroke: black,
	    d: "m 110,95 10,0 m -10,10 10,0 m -10,10 10,0 m -10,-30 10,0 m -10,-5 -10,10 -30,0 0,20 30,0 10,10 z"
	  };
	  // Installation
	  icn["GR.IN.IC.ELDER CARE"] = {
	    type: "path",
	    d: "m 120.1,119.1 c 0,-6.3 2.3,-8.2 3.9,-12.6 1,-2.6 1.6,-3.3 1.8,-6.5 0.2,-2.4 0.9,-4.7 0.9,-7.2 v -2.6 c 0,-2.6 -2.2,-8.9 -3.3,-10.5 -1.3,-2 -4.8,-5.4 -6.7,-6.9 -2.2,-1.8 -5.4,-4.6 -8.2,-5.6 -1.6,-0.5 -9.8,-2.4 -11.4,-2.3 l -5.7,0.6 v 0.8 c 0,0.8 2,2.7 2.4,3.3 0,3.3 0.8,6.8 -1.3,8.4 -2.2,1.6 -2.8,3.4 -3.8,6.3 -0.4,1 -0.9,3.1 -1,4 -0.2,1 -0.2,4 -0.4,4.6 -1.1,2.4 -2.6,4.2 -3.8,6.4 l -5.1,0.5 c -2.1,3.2 -4.6,4.1 -4.6,9.6 v 26.4 c 0.6,0.2 0.4,0.2 0.9,0.2 0.5,0 0.3,-0.1 0.9,-0.2 v -27.5 c 0,-0.7 0.8,-3 1.1,-3.5 0.4,0.2 0.8,0.6 1.3,0.6 0.3,0 1.1,-0.3 1.3,-0.4 l 2.6,0.9 0.8,-0.6 0.6,2.5 c 0.4,0.3 0.4,0.5 0.8,0.5 h 0.4 c 0.5,0 0.6,-0.2 0.6,-0.6 v -0.4 c 0,-1 -1.2,-3 -1.5,-3.7 1.2,-2.5 6.3,-2.6 8.2,-5.8 0.9,-1.6 1.8,-3 2.6,-4.5 0.4,-0.9 2.3,-4.1 2.4,-4.4 h 4.4 c 2.3,0 2.1,2.5 2.6,4.2 0.6,2 2,2 2,4.6 0,2.8 -2.9,7 -4,9 -0.3,0.7 -3.9,8.8 -3.9,8.9 v 2 c 0,3 2.6,9.1 2.6,11.2 v 2.2 c -1.2,0.3 -6.8,2.4 -6.8,3.5 0,0.3 0.4,0.6 0.9,0.6 h 6.8 c 2.3,0 4.5,-1 6.6,-1.1 v -3 c 0,-0.6 -1.1,-2.2 -1.1,-3.7 -0.9,-1.3 -1.8,-6 -1.8,-8.2 0,-3.2 1.2,-5.4 2.5,-7.4 2.5,-4 0.4,-2.3 4.6,-5.1 l 1.8,1.7 c -1,1.8 -2.3,3.7 -2.3,6.4 v 5.9 h 0.4 v 0.6 c 0,0.9 5,9 5.7,10.3 -1.5,2.3 -6.7,1.6 -6.8,5 h 7.5 c 1.2,0 3.3,-1 4.5,-1.4 1.6,-0.5 2.9,-1.1 2.9,-3 0,-0.7 -2.9,-4.6 -3.6,-5.7 -0.3,-0.4 -2.4,-6 -2.4,-6.6 v -0.4 z m -45.3,-47.9 v 0.6 c 0,4.3 3.7,7.9 8.1,7.9 h 0.2 c 3.7,0 7.7,-3.6 7.7,-7 v -2.2 c 0,-3.2 -3.9,-6.8 -7.5,-6.8 h -1.2 c -3.4,0 -7.3,4 -7.3,7.5 z",
	    stroke: false
	  };
	  icn["GR.IN.IC.RAW MATERIAL PRODUCTION/STORAGE"] = [
	    { type: "text", stroke: false, x: 100, y: 90, fontsize: 30, text: "PS" },
	    { type: "text", stroke: false, x: 100, y: 120, fontsize: 30, text: "RM" }
	  ];
	  icn["GR.IN.IC.MINE"] = {
	    type: "path",
	    d: "m 105,85 10,10 5,-5 c -5,-5 -10,-5 -15,-5 z M 95,85 85,95 80,90 c 5,-5 10,-5 15,-5 z m -5,5 30,30 m -40,0 30,-30"
	  };
	  icn["GR.IN.IC.PROCESSING FACILITY"] = [
	    { type: "text", stroke: false, x: 100, y: 90, fontsize: 30, text: "PROC" },
	    { type: "text", stroke: false, x: 100, y: 120, fontsize: 30, text: "FAC" }
	  ];
	  icn["GR.IN.IC.UTILITY FACILITY"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "UTIL"
	  };
	  icn["GR.IN.IC.RESEARCH"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "R&D"
	  };
	  icn["GR.IN.IC.TELECOMMUNICATIONS"] = {
	    type: "path",
	    d: "m 95,80 10,20 -10,0 10,20",
	    fill: false
	  };
	  icn["GR.IN.IC.ELECTRIC POWER"] = {
	    type: "path",
	    d: "m 100,60.5 c -16.4,0 -29.6,13.2 -29.6,29.6 0,12.8 8.3,23.9 19.7,27.8 l 0,19.7 c 3.2,1.2 6.3,1.8 9.9,1.8 3.6,0 6.7,-0.6 9.9,-1.8 l 0,-19.8 c 11.5,-3.9 19.8,-15 19.7,-27.8 0,-16.4 -13.2,-29.6 -29.6,-29.6 z",
	    fill: false
	  };
	  icn["GR.IN.IC.ELECTRIC POWER NUCLEAR"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 100,
	    fontsize: 40,
	    text: "N"
	  };
	  icn["GR.IN.IC.ELECTRIC POWER DAM"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 105,
	    fontsize: 40,
	    text: "H"
	  };
	  icn["GR.IN.IC.ELECTRIC POWER FOSSIL"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 105,
	    fontsize: 40,
	    text: "F"
	  };
	  icn["GR.IN.MC.HOME"] = {
	    type: "path",
	    d: "m 100,82 18,15 h -4 v 22 h -10 v -15 h -8 v 15 H 86 V 97 h -4 z",
	    stroke: false
	  };
	  icn["GR.IN.IC.ATOMIC ENERGY"] = {
	    type: "path",
	    d: STD2525
	      ? "M 90.4,119 C 84.2,115 80,109 80,101 l 20,0 -9.6,18 z m 19.6,0 -10,-18 20,0 c 0,8 -4,14 -10,18 z M 100,101 89.7,83.8 c 3,-2 6.5,-3 10.3,-3 4,0 7,1 10,3 L 100,101 Z"
	      : "M 89.9,82.5 110,82.7 89.7,117.1 80,99.9 120.1,100 110,117.3 z",
	    fill: false
	  };
	  icn["GR.IN.IC.ATOMIC ENERGY WEAPONS GRADE"] = {
	    type: "path",
	    d: STD2525
	      ? "M 90.4,119 C 84.2,115 80,109 80,101 l 20,0 -9.6,18 z m 19.6,0 -10,-18 20,0 c 0,8 -4,14 -10,18 z M 100,101 89.7,83.8 c 3,-2 6.5,-3 10.3,-3 4,0 7,1 10,3 L 100,101 Z"
	      : "M 89.9,82.5 110,82.7 89.7,117.1 80,99.9 120.1,100 110,117.3 z"
	  };
	  icn["GR.IN.IC.AIRCRAFT PRODUCTION & ASSEMBLY"] = {
	    type: "path",
	    stroke: false,
	    d: "m 95.1,109.3 c 0,0 -20.8,4.9 -30.1,6.7 -2.2,0.4 -5.7,0.2 -6.5,-2 -0.4,-1.1 3.3,-6.6 6.5,-7.3 8.7,-1.9 25.7,-5.5 25.7,-5.5 l 3.1,-16.1 4,-0.8 0.3,15.9 25.6,-5.8 6.5,-13.2 5.3,-1.4 -3.3,16.1 14,4.8 -4.3,1.2 -13.7,-2.8 -23.6,6.7 31.6,11.8 -5.5,2.5 z"
	  };
	  icn["GR.IN.IC.AIRPORT"] = {
	    type: "path",
	    fill: false,
	    d: "m 74,118 52,-36  m -53,22 h 54"
	  };
	  icn["GR.IN.IC.BRIDGE"] = {
	    type: "path",
	    d: "m 70,115 10,-10 40,0 10,10 m -60,-30 10,10 40,0 10,-10",
	    fill: false
	  };
	  icn["GR.IN.IC.BASE"] = {
	    type: "path",
	    d: "m 75,85 50,30 m -50,0 50,-30",
	    fill: false
	  };
	  icn["GR.IN.IC.SEA SURFACE INSTALLATION, OIL RIG/PLATFORM"] = [
	    {
	      type: "path",
	      d: "m 85,105 0,-40 m 25,40 0,15 m -35,0 0,-15 50,0 0,15",
	      fill: false
	    },
	    { type: "path", d: "m 85,90 15,0 0,15 -15,0 0,-15" }
	  ];
	  icn["GR.IN.IC.MILITARY/CIVILIAN.MATERIEL"] = text("MAT");
	  icn["GR.IN.IC.MILITARY/CIVILIAN.PRINTED MEDIA"] = [
	    { type: "circle", cx: 100, cy: 90, r: 10, fill: false },
	    { type: "circle", cx: 100, cy: 110, r: 10, fill: false },
	    { type: "path", d: "m 65,100 75,0", fill: false }
	  ];
	  icn[
	    "GR.IN.IC.INFRASTRUCTURE.BANKING FINANCE AND INSURANCE  INFRASTRUCTURE.ECONOMIC INFRASTRUCTURE ASSET"
	  ] = text("ECON");
	  icn[
	    "GR.IN.IC.INFRASTRUCTURE.TELECOMMUNICATIONS INFRASTRUCTURE.TELECOMMUNICATIONS"
	  ] = {
	    type: "path",
	    d: "m 90,105 20,0 0,0 m -25,15 15,-30 15,30 m -55,-40 25,10 0,-10 15,10 15,-10 0,10 25,-10",
	    fill: false
	  };
	  icn["GR.IN.M1.RADIOLOGICAL"] = textm1("R");
	  icn["GR.IN.M1.COAL"] = textm1("CO");
	  icn["GR.IN.M1.GEOTHERMAL"] = textm1("GT");
	  icn["GR.IN.M1.HYDROELECTRIC"] = textm1("HY");
	  icn["GR.IN.M1.NATURAL GAS"] = textm1("NG");
	  icn["GR.IN.M1.PETROLEUM"] = {
	    type: "path",
	    d: "M 100,79 V 69 L 91,57 h 18 l -9,12",
	    fill: false
	  };
	  icn["GR.IN.M1.CIVILIAN"] = textm1("CIV");
	  icn["GR.IN.M1.CIVILIAN TELEPHONE"] = textm1("T");
	  icn["GR.IN.M1.CIVILIAN TELEVISION"] = textm1("TV");
	  icn["GR.IN.M2.CHEMICAL WARFARE PRODUCTION"] = textm2("C");
	  icn["GR.IN.M2.NUCLEAR WARFARE PRODUCTION"] = textm2("N");
	  icn["GR.IN.M2.RADIOLOGICAL WARFARE PRODUCTION"] = textm2("R");
	  icn["GR.IN.M2.TRANSPORTATION"] = {
	    type: "path",

	    d: "M 112,134 A 12.3,12.2 0 0 1 99.7,146 12.3,12.2 0 0 1 87.6,134 12.3,12.2 0 0 1 99.7,122 12.3,12.2 0 0 1 112,134 Z  m -12,-12 v 24  M 88.7,128 111,139  m -22.3,0 22.3,-11",
	    fill: false
	  };
	  icn["GR.IN.M2.ATOMIC ENERGY REACTOR"] = textm2("A");
	  icn["GR.IN.M2.NUCLEAR MATERIAL PRODUCTION"] = textm2("P");
	  icn["GR.IN.M2.NUCLEAR MATERIAL STORAGE"] = textm2("S");
	  icn["GR.IN.M2.CHEMICAL & BIOLOGICAL WARFARE"] = textm2("B");
	  icn["GR.IN.M2.SHIP CONSTRUCTION"] = textm2("YRD");
	  icn["GR.IN.M2.WEAPONS GRADE PRODUCTION"] = textm2("WPN");

	  // SUBSURFACE

	  icn["SOF.IC.UNDERWATER DEMOLITION TEAM"] = text("UD");
	  icn["SOF.M2.ATTACK"] = textm2("A");
	  icn["SOF.M2.REFUEL"] = textm2("K");
	  icn["SOF.M2.UTILITY"] = textm2("U");
	  icn["SOF.M2.VSTOL"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 135,
	    fontsize: 20,
	    text: "VSTOL"
	  };
	  icn["SOF.M2.COMBAT SEARCH AND RESCUE"] = STD2525
	    ? textm2("CSAR")
	    : textm2("H");

	  // STABILITY OPERATIONS ==========================================================
	  icn["ST.IC.ARREST"] = {
	    type: "path",
	    d: "m 92.5,100 15,0 m -2.5,-10 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m -5,5 0,20 m 20,-15 c 0,11 -9,20 -20,20 -11,0 -20,-9 -20,-20 0,-11 9,-20 20,-20 11,0 20,9 20,20 z",
	    fill: false
	  };
	  icn["ST.IC.ARSON/FIRE"] = STD2525
	    ? [
	        {
	          type: "path",
	          d: "m 84.6,101.6 c 1.3,23.1 31,23.2 30.7,-1.9 -1.5,2.1 -4.6,6.5 -8.1,7.3 1.9,-2.4 2.6,-8.5 2.4,-12.9 -1.7,3.4 -4,7.9 -7,7.8 1.7,-4.3 2.7,-9.4 -0.5,-13.7 -0.2,3 0.8,7.1 -1.9,7 -2.7,-0.1 -2.9,-4.4 -1.1,-10.8 -4,4.1 -6.2,9.8 -3.8,17.5 -1.9,-0.2 -4.4,-1.9 -7,-7.8 -1.5,4.9 1.2,9.6 3.2,13.7 -2.4,-1.1 -6,-3 -7,-6.2 z",
	          stroke: false
	        },
	        {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          x: 100,
	          y: 70,
	          fontsize: 25,
	          text: "ASN"
	        }
	      ]
	    : {
	        type: "text",
	        alignmentBaseline: "middle",
	        stroke: false,
	        x: 100,
	        y: 103,
	        fontsize: 35,
	        text: "FIRE"
	      };
	  icn["ST.IC.ATTEMPTED CRIMINAL ACTIVITY"] = {
	    type: "path",
	    d: "m 127,114.4 5,2.7  m -15,-8.1 5,2.7  m -15,-8.1 5,2.7  m -15,-8.16 5,2.76  m -15,-8.19 5,2.72  M 77,87.29 82,90  m -15,-8.14 5,2.71",
	    fill: false
	  };
	  icn["ST.IC.BLACK LIST LOCATION"] = text("BLK");
	  icn["ST.IC.BLACK MARKETING"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 93,
	      fontsize: 22,
	      text: "BLK"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 110,
	      fontsize: 22,
	      text: "MKT"
	    }
	  ];
	  icn["ST.IC.BOMB"] = text("BOMB");
	  icn["ST.IC.BOOBY TRAP"] = {
	    type: "path",
	    d: "m 85,105 15,-25 15,25 m -35,5 c 0,-10 40,-10 40,0 0,10 -40,10 -40,0 z",
	    fill: false
	  };
	  icn["ST.IC.COMPOSITE LOSS"] = {
	    type: "path",
	    d: "m 100,85 0,30 m -35,-15 45,0 m 20,0 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z",
	    fill: false
	  };
	  icn["ST.IC.DEMONSTRATION"] = text("MASS");
	  icn["ST.IC.DRIVE-BY SHOOTING"] = {
	    type: "path",
	    d: "m 95,85 5,-5 5,5 m -5,-5 0,30 m -15,0 30,0 m 5,5 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z m -30,0 c 0,2.8 -2.2,5 -5,5 -2.8,0 -5,-2.2 -5,-5 0,-2.8 2.2,-5 5,-5 2.8,0 5,2.2 5,5 z",
	    fill: false
	  };
	  icn["ST.IC.DRUG RELATED ACTIVITIES"] = text("DRUG");
	  icn["ST.IC.EXPLOSION"] = {
	    type: "path",
	    d: "m 110,55 5,20 15,-10 0,15 15,5 -15,10 15,10 -15,5 5,15 -20,-5 -5,20 -10,-15 -10,20 -5,-25 -20,10 5,-15 L 55,105 70,95 60,85 70,80 70,65 85,75 90,55 100,70 z",
	    fill: false
	  };
	  icn["ST.IC.EXTORTION"] = {
	    type: "text",
	    stroke: false,
	    textanchor: "middle",
	    alignmentBaseline: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 80,
	    text: "$"
	  };
	  icn["ST.IC.FOOD DISTRIBUTION"] = [
	    {
	      type: "path",
	      d: "M 111,115 C 96.3,110 96.3,89.5 111,84 100,79.7 87.5,86.3 87.5,99.5 87.5,113 100,119 111,115 Z",
	      fill: false
	    },
	    {
	      Unknown: { type: "path", d: "M35,120 l130,0 ", fill: false },
	      Friend: { type: "path", d: "M25,120 l150,0 ", fill: false },
	      Neutral: { type: "path", d: "M45,120 l110,0 ", fill: false },
	      Hostile: { type: "path", d: "M50,120 l100,0 ", fill: false }
	    }[affiliation]
	  ];
	  icn["ST.IC.GRAFFITI"] = {
	    type: "path",
	    d: "m 110,80 c -10,0 -10,10 0,10 10,0 10,10 0,10 -10,0 -10,10 0,10 10,0 10,10 0,10 M 90,80 c -10,0 -10,10 0,10 10,0 10,10 0,10 -10,0 -10,10 0,10 10,0 10,10 0,10",
	    fill: false
	  };
	  icn["ST.IC.GROUP"] = {
	    type: "path",
	    d: "m 133,90 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0 m -52,-12.3 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0 m 23,-7.3 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0",
	    fill: false
	  };
	  icn["ST.IC.HIJACKING (AIRPLANE)"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : false,
	    d: "m 70,95 0,10 65,0 0,-10 z m 55,10 0,10 5,0 0,-10 z m 0,-10 0,-10 5,0 0,10 z m -45,10 0,15 10,0 0,-15 z m 0,-10 0,-15 10,0 0,15 z"
	  };
	  icn["ST.IC.HIJACKING (BOAT)"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 105,80 0,20 20,0 z m -5,25 0,-25 m -30,25 10,15 40,0 10,-15 z"
	  };
	  icn["ST.IC.GRAY LIST LOCATION"] = text("GRAY");
	  icn["ST.IC.IED"] = text("IED");
	  icn["ST.IC.INDIVIDUAL"] = {
	    type: "path",
	    d: "m 108,90 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0",
	    fill: false
	  };
	  icn["ST.IC.INTERNAL SECURITY FORCE"] = text("ISF");
	  icn["ST.IC.KILLING VICTIM"] = [
	    {
	      type: "path",
	      d: "m 108,90 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0",
	      fill: false
	    },
	    {
	      Unknown: { type: "path", fill: false, d: "M50,65 150,135" },
	      Friend: { type: "path", fill: false, d: "M25,50 175,150" },
	      Neutral: { type: "path", fill: false, d: "M45,45 155,155" },
	      Hostile: { type: "path", fill: false, d: "M57,70 143,130" }
	    }[affiliation]
	  ];
	  icn["ST.IC.KILLING VICTIMS"] = [
	    {
	      type: "path",
	      d: "m 133,90 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0 m -52,-12.3 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0 m 23,-7.3 c 0,10 -15,10 -15,0 0,-10 15,-10 15,0 z m -8,7.3 0,25 m -10,-20 20,0",
	      fill: false
	    },
	    {
	      Unknown: { type: "path", fill: false, d: "M50,65 150,135" },
	      Friend: { type: "path", fill: false, d: "M25,50 175,150" },
	      Neutral: { type: "path", fill: false, d: "M45,45 155,155" },
	      Hostile: { type: "path", fill: false, d: "M57,70 143,130" }
	    }[affiliation]
	  ];
	  icn["ST.IC.KNOWN INSURGENT VEHICLE"] = {
	    type: "path",
	    d: "m 65,95 70,0 m 0,10 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z m -50,0 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z",
	    fill: false
	  };
	  icn["ST.IC.MASS GRAVE LOCATION"] = {
	    type: "path",
	    d: "m 77.5,90 10,0 m -5,-5 0,15 m 7.5,-20 0,30 -15,0 0,-30 z m 22.5,10 10,0 m -5,-5 0,15 m -7.5,-20 0,30 15,0 0,-30 z m -15,20 10,0 m -5,-5 0,20 m -7.5,-25 15,0 0,30 -15,0 z",
	    fill: false
	  };
	  icn["ST.IC.MINE LAYING"] = [
	    { type: "path", d: "m 60,85 80,0 0,30 -80,0 z", fill: false },
	    {
	      type: "path",
	      d: "m 135,100 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z m -25,0 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z m -25,0 c 0,5.5 -4.5,10 -10,10 -5.5,0 -10,-4.5 -10,-10 0,-5.5 4.5,-10 10,-10 5.5,0 10,4.5 10,10 z",
	      stroke: false
	    }
	  ];
	  icn["ST.IC.PATROLLING"] = {
	    type: "path",
	    d: "m 131,97 0,-14 5,0 c 4,0 4,7 0,7 l -5,0 m -71,15 15,10 M 60,105 75,95 m -15,10 40,0 -15,-15 40,0",
	    fill: false
	  };
	  icn["ST.IC.POISONING"] = {
	    type: "path",
	    d: "m 85,95 c 0,-20 30,-20 30,0 0,20 -30,20 -30,0 z m -15,10 60,15 m -60,0 60,-15",
	    fill: false
	  };
	  icn["ST.IC.PSYCHOLOGICAL OPERATIONS"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : false,
	    stroke: black,
	    d: "m 110,95 10,0 m -10,10 10,0 m -10,10 10,0 m -10,-30 10,0 m -10,-5 -10,10 -30,0 0,20 30,0 10,10 z"
	  };
	  icn["ST.IC.RADIO AND TELEVISION PSYCHOLOGICAL OPERATIONS"] = [
	    icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	    {
	      Unknown: {
	        type: "path",
	        fill: false,
	        d: "M50,65 100,110 100,90 150,135"
	      },
	      Friend: { type: "path", fill: false, d: "M25,50 100,110 100,90 175,150" },
	      Neutral: {
	        type: "path",
	        fill: false,
	        d: "M45,45 100,110 100,90 155,155"
	      },
	      Hostile: {
	        type: "path",
	        fill: false,
	        d: "M57,70 100,110 100,90 143,130"
	      }
	    }[affiliation]
	  ];
	  icn["ST.IC.RIOT"] = text("RIOT");
	  icn["ST.IC.SAFE HOUSE"] = text("SAFE");
	  icn["ST.IC.SEARCHING"] = {
	    type: "path",
	    d: "m 140,105 c -10,0 -5,0 -10,0 -15,0 -5,-15 -20,-15 -15,0 -5,20 -20,20 -15,0 -5,-20 -20,-20 -10,0 -10,10 -10,10 m 70,0 10,5 -10,5",
	    fill: false
	  };
	  icn["ST.IC.SPY"] = text("SPY");
	  icn["ST.IC.SNIPING"] = [
	    { type: "path", d: "m 95,85 5,-5 5,5 m -5,-5 0,40", fill: false },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 65,
	      fontsize: 25,
	      text: "S"
	    }
	  ];
	  icn["ST.IC.VANDALISM/LOOT/RANSACK/PLUNDER/SACK"] = {
	    type: "path",
	    d: "m 115,100 c 0,-5 5,-10 10,-10 M 85,100 C 85,95 80,90 75,90 m 5,25 c -0.5,-29.5 40,-30 40,0 z",
	    fill: false
	  };
	  icn["ST.IC.WHITE LIST LOCATION"] = text("WHT");
	  icn["ST.IC.ROBBERY"] = text("ROB");
	  icn["ST.IC.THEFT"] = text("THF");
	  icn["ST.IC.BURGLARY"] = text("BUR");
	  icn["ST.IC.SMUGGLING"] = text("SMGL");
	  icn["ST.IC.SABOTAGE"] = text("SAB");
	  icn["ST.IC.ILLEGAL DRUG OPERATION"] = text("DRUG");
	  icn["ST.IC.SPY"] = text("SPY");
	  icn["ST.IC.WARRANT SERVED"] = text("WNT");
	  icn["ST.IC.POLLING PLACE/ELECTION"] = text("VOTE");
	  icn["ST.IC.NATURAL EVENT"] = text("NAT");
	  icn["ST.IC.GEOLOGIC"] = text("GEOL");
	  icn["ST.IC.HYDRO-METEOROLOGICAL"] = text("HYDR");
	  icn["ST.IC.INFESTATION"] = text("INFS");
	  icn["ST.IC.GRENADE"] = text("G");
	  icn["ST.IC.INCENDIARY"] = text("I");
	  icn["ST.IC.MINE"] = text("M");
	  icn["ST.IC.HOUSE"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : false,
	    d: "m 70,100 60,0 m -30,-20 -30,20 0,35 60,0 0,-35 -30,-20 z"
	  };
	  icn["ST.IC.ROCK THROWING"] = {
	    type: "path",
	    d: "m 90,60 25,25 M 70,65 95,90 M 60,80 80,100 m 45,-5 5,15 -5,15 -20,10 -20,-5 -5,-20 5,-5 10,0 5,-10 10,-5 15,5 z"
	  };
	  icn["ST.M1.ACCIDENT"] = textm1("ACC");
	  icn["ST.M1.ASSASSINATION"] = textm1("AS");
	  icn["ST.M1.CIVILIAN"] = textm1("CIV");
	  icn["ST.M1.COERCED/IMPRESSED"] = textm1("UR");
	  icn["ST.M1.COMBAT"] = textm1("CBT");
	  icn["ST.M1.DEAD BODY"] = textm1("DB");
	  icn["ST.M1.DISPLACED PERSONS, REFUGEES, AND EVACUEES"] = textm1("DPRE");
	  icn["ST.M1.DRUG"] = textm1("DRUG");
	  icn["ST.M1.EVICTION"] = textm1("EV");
	  icn["ST.M1.EXECUTION (WRONGFUL KILLING)"] = textm1("EX");
	  icn["ST.M1.EXFILTRATION"] = textm1("EXFL");
	  icn["ST.M1.FOREIGN FIGHTERS"] = textm1("FF");
	  icn["ST.M1.GANG"] = textm1("GANG");
	  icn["ST.M1.GOVERNMENT ORGANIZATION"] = textm1("GO");
	  icn["ST.M1.HIJACKING/HIJACKED"] = textm1("H");
	  icn["ST.M1.HOUSE-TO-HOUSE"] = {
	    type: "path",

	    fill: STD2525 ? iconFillColor : false,
	    d: "m 110,65 -20,0 0,15 20,0 z m -10,-10 -10,10 20,0 z"
	  };
	  icn["ST.M1.IED"] = textm1("IED");
	  icn["ST.M1.INCIDENT"] = textm1("INC");
	  icn["ST.M1.INFILTRATION"] = textm1("INFL");
	  icn["ST.M1.KIDNAPPING"] = textm1("K");
	  icn["ST.M1.LABRATORY"] = textm1("LAB");
	  icn["ST.M1.LEADER"] = textm1("LDR");
	  icn["ST.M1.LOOT"] = textm1("LOOT");
	  icn["ST.M1.MEETING"] = textm1("MTG");
	  icn["ST.M1.MURDER"] = textm1("MU");
	  icn["ST.M1.NONGOVERNMENTAL ORGANIZATION (NGO)"] = textm1("NGO");
	  icn["ST.M1.OTHER"] = textm1("OTH");
	  icn["ST.M1.PIRACY"] = textm1("PI");
	  icn["ST.M1.PREMATURE"] = textm1("P");
	  icn["ST.M1.RAID"] = textm1("RAID");
	  icn["ST.M1.RAPE"] = textm1("RA");
	  icn["ST.M1.RELIGIOUS"] = textm1("REL");
	  icn["ST.M1.SPEAKER"] = textm1("SPK");
	  icn["ST.M1.TARGETED"] = textm1("TGT");
	  icn["ST.M1.TERRORIST"] = textm1("TER");
	  icn["ST.M1.TRAFFICKING"] = textm1("TFK");
	  icn["ST.M1.WILLING RECRUIT"] = textm1("WR");
	  icn["ST.M1.WRITTEN PSYCHOLOGICAL OPERATIONS"] = icn["ST.M1.WILLING"] =
	    textm1("W");
	  icn["ST.M1.FALSE"] = textm1("FAL");
	  icn["ST.M1.FIND"] = textm1("FND");
	  icn["ST.M1.FOUND AND CLEARED"] = textm1("CLR");
	  icn["ST.M1.HOAX (DECOY)"] = {
	    type: "path",
	    d: "M 90,75 80,67.5 90,60 90,75 Z m 15,0 -10,-7.5 10,-7.5 0,15 z m 15,0 -10,-7.5 10,-7.5 0,15 z"
	  };
	  icn["ST.M1.ATTEMPTED"] = textm1("ATT");
	  icn["ST.M1.ACCIDENT"] = textm1("ACC");
	  icn["ST.M1.INCIDENT"] = textm1("INC");
	  icn["ST.M1.THEFT"] = textm1("THF");
	  icn["ST.M1.PIRATE"] = [
	    { type: "circle", cx: 100, cy: 60, r: 7, fill: false },
	    {
	      type: "path",
	      fill: false,
	      d: "m 82.5,75 35,-15 m 0,15 -35,-15 m 3,7 5,10 m 27,-10 -10,10"
	    }
	  ];
	  icn["ST.M2.LEADER OR LEADERSHIP"] = textm2("LDR");
	  icn["ST.M2.RELIGIOUS"] = textm2("REL");
	  icn["AC.IC.CRIMINAL.ACTIVITY.INCIDENT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 98.7,66.7 c -3.2,0.7 -6.3,3.7 -6.4,7 0.3,3.6 5.3,2.8 7,0.6 2,-1.2 1.7,-4.5 4.5,-3.7 2.6,-0.6 3.2,3.2 5.9,3.2 1.6,1.5 4.4,-0.6 5.4,1.2 0.7,1.1 1.5,2.2 2.2,3.3 -2,3.1 -1.3,7.9 1.9,10 3.5,1.1 4.8,-3.5 4.1,-6.2 -0.2,-3 -2.5,-5 -5.1,-5.4 -1.5,-1.9 -2.7,-3.4 -1.6,-5.6 -1,-3.3 -5.1,-4.5 -8.2,-4.3 -2.2,0.3 -2.9,2.6 -5.3,1.9 -1.9,0.4 -1.9,-2.8 -4.3,-2 z m 0.2,1.3 c 2.7,0.5 0.9,0.6 -0.6,1.3 -0.5,2.2 3.8,0.4 1.4,2.9 -0.9,1.9 -5.8,4.7 -5.9,1.1 0.1,-2.5 2.7,-4.8 5.1,-5.2 z m 10.3,0.1 c 2.4,-0.5 7.1,2.3 5.6,3.7 -0.8,-2.1 -3,0 -1.2,1.2 -1.7,0.9 -7.4,-1.6 -5.7,-2.4 2.5,0.8 2.8,-2.7 -0,-1.9 -1.4,0.2 1.1,-0.8 1.3,-0.6 z M 81.9,71.6 c -1.8,1.9 -3.6,3.9 -5.5,5.8 -7.5,-0.1 -14,6.2 -15.7,13.2 -0.6,4.2 0.5,8.5 2.8,12 0.7,3.9 -3.2,6.7 -3,10.7 -0.8,7.4 4.8,14.5 11.7,16.8 2.3,-0.4 1.3,1.3 1.4,2 1.5,-0.4 3,-0.8 4.6,-1.2 -0.2,1.5 -0.1,2.7 1.4,1.2 0.9,-0.3 2.3,-2.2 2.9,-1.5 0.2,2.2 1.2,0.1 2,-0.7 0.8,-1.2 1.6,-2.3 2.4,-0.5 1.2,-2.4 4.1,-7.2 -0.8,-7.3 -3.4,2.3 -7.5,4.6 -11.8,3.5 -6.3,-1.5 -10.9,-8.8 -8.2,-14.9 0.4,-3.9 6.8,-3.4 5,-8.2 -1.8,-2.6 -5.7,-2.9 -5.7,-7 -1.5,-7.3 5.6,-14.7 13,-13.7 4.7,0.5 7.4,4.9 10.8,7.6 1.9,1.9 4.1,5.1 5.9,1.4 2.8,-2 4.3,-4.7 1.8,-7.6 C 94.8,79.7 90.9,77.3 88,74.4 86.3,72.9 83.9,72.6 81.9,71.6 z m 3.3,3.8 c 1.6,1.1 2.9,2.1 0.3,3.3 -0.9,3.7 -5.1,-0.5 -1.5,-1.5 0.4,-0.6 0.9,-1.1 1.2,-1.8 z m 34.2,3.1 c 3,1.4 3.9,6.4 1.4,8.8 -2.9,0.1 -3.6,-4.3 -3.1,-6.6 0.1,-2.9 2.5,2.7 2.5,-0.7 -0.2,-0.5 -0.5,-1 -0.8,-1.4 z M 127.3,90.2 c -4.3,0.4 -8.8,-0 -13.1,1 -2.1,1.1 -5.7,1.5 -4.6,4.5 0.1,1.8 0.2,3.6 0.4,5.4 -4.9,4.9 -5.5,13.3 -2.2,19.2 2.4,4.3 7,7 11.8,7.8 3.3,4.9 7.3,-1.3 11.2,-1.7 5.5,-2.5 8.9,-8.5 8.5,-14.5 0.2,-5 -2.4,-10.1 -6.7,-12.8 -0.1,-2.3 -0.2,-4.6 -0.3,-6.9 -1.6,-0.8 -3.4,-1.4 -5.1,-2.1 z M 127.8,92.5 c -0.9,1.7 0.6,3.8 -0.9,4.9 -2.3,0.7 -1.7,-2.4 -1.9,-3.8 -0.6,-1.7 1.9,-0.7 2.8,-1 z m -2.9,8.3 c 4.1,0.9 8,3.7 9.3,7.9 0.9,3.7 0.5,8 -2.3,10.9 -1.7,2 -5.3,4.3 -7.7,3.1 -3.1,-0.8 -5.8,2.1 -8.6,-0.5 -6.9,-4.2 -7.2,-16 0.2,-19.8 2.7,-1.6 6,-1.6 9.1,-1.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 85.1 75.3 C 85 75.8 84.2 76.7 83.9 77.1 C 83.6 77.6 82.4 77.9 82.4 78.6 L 82.4 79 C 82.4 79.4 83.3 80.1 83.6 80.1 L 83.8 80.1 C 84.8 80.1 85 79.1 85.4 78.6 C 85.7 78.2 86.7 77.4 87.2 77 L 85.1 75.3 z M 127.8 92.5 L 125 92.7 L 125.2 96.5 C 125.3 97.5 125.9 97.3 126.5 97.6 C 127.1 97.3 127.8 97.1 127.8 96.3 C 127.8 95.8 127.7 95.6 127.5 95.3 L 127.8 92.5 z"
	    }
	  ];
	  icn["AC.IC.CRIMINAL.CIVIL DISTURBANCE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 110.6,142.4 0,-28.6 -7.1,0 0,28.6 z m -21.2,0 7.1,0 0,-28.6 -7.1,0 z m 7.1,-28.6 h 7.1 v -11.8 h 24.4 V 77.2 h -6.3 v 18.6 h -18 v -10.7 c 0,-0.9 2.1,-1.2 3,-1.7 0.8,-0.4 2.1,-1.4 2.7,-2 1.5,-1.4 3.2,-3.6 3.8,-5.9 1.6,-6.3 -0.2,-10.6 -3.8,-14.1 -3,-3.1 -9.2,-4.9 -14.3,-2.7 -3.6,1.6 -8.4,6.2 -8.4,11 v 3.2 c 0,2.8 1.9,6.2 3.3,7.7 1,1 1.8,1.7 3,2.5 1,0.6 3.6,1.3 3.6,2.2 v 10.7 H 78.4 v -18.6 h -6.3 v 24.9 h 24.4 v 11.8 h -0 z"
	  };
	  icn["AC.IC.SHOOTING"] = {
	    type: "path",
	    stroke: false,
	    d: "m 93.2,89.7 h 16.8 v 9.3 c -2.6,0 -7.3,1.6 -9,1 -2.3,-0.8 -5.4,-2 -7.8,-2.6 v -7.8 l 0,0 z m -30,0 h 26.1 v 9.6 c 0,0.9 4.1,2 5,2.3 1.9,0.6 3.6,1.4 5.5,2 2,0.7 3.4,0.4 6,-0.1 1.6,-0.3 5.7,-0.4 6.6,-0.9 0.6,2.7 4.6,14 4.6,15.2 0,1.6 -1.2,4 -1.3,5.7 l 21.5,0 -8.2,-25.9 7.8,-7.7 c -0.8,-1.6 -4.1,-13.4 -5.2,-13.4 h -68.4 v 13.2 l 0,0 z"
	  };
	  icn["AC.IC.FIRE EVENT"] = {
	    type: "path",
	    stroke: false,
	    d: "m 96.5,78.5 c 0,-5.1 4.1,-9.7 4.1,-13 v -0.4 c 0,-1.3 -0,-3.8 -1.1,-4.1 -1,4.5 -3.5,8 -5.9,11.2 -1.2,1.6 -2.4,3.3 -3.6,5 -1,1.4 -3.1,3.5 -3.1,5.5 0,1.4 6.1,17.7 3,17.7 -0.1,0 -3.8,-2.5 -4.2,-2.9 -1.4,-1 -2.4,-2.3 -3.3,-3.7 -3.1,-4.6 -2.4,-4.4 -3.8,-10.3 -1.5,0.4 -2.6,5 -2.9,6.9 -0.4,2.4 -0.3,6.6 0.2,9 0.6,2.8 1.4,5 2.5,7.3 0.6,1.2 3,5.5 3.1,6.5 -2.2,-0.5 -7,-4.6 -8.6,-6.2 -1.5,-1.5 -5.5,-8.3 -5.9,-8.6 0,9.9 5,22.8 9.8,27.6 3.1,3.1 6.3,6.4 10.2,8.6 2.4,1.5 10.5,4.3 14.3,4.3 h 2.4 c 2.8,0 10.8,-3 12.9,-4.2 3.4,-1.9 6.9,-4.7 9,-7.9 4.4,-6.5 8,-15 8,-25.8 v -1.3 l -0.4,-5.8 c -0.7,0.4 -2.2,4.4 -2.5,5.2 -0.5,1.3 -2,3.4 -2.9,4.6 -1.4,2.1 -5.2,6.3 -7.8,6.9 v -1.1 c 0,-4.4 2.8,-8.8 2.8,-12.4 v -1.9 l -1.3,-12.2 h -0.6 c -0.3,3.9 -1.6,7.9 -3.4,10.5 -1.3,2 -5.3,5.6 -7.7,6.2 -0.2,-0.4 -0.4,-0.6 -0.4,-1.3 v -2.3 c 0,-5.1 3,-8.9 3,-12.8 v -0.8 c 0,-1.5 -2.1,-3.9 -2.9,-5.2 -0.7,-1.1 -2.4,-4.3 -3.5,-4.6 v 1.3 c 0,6.2 -1.4,10.6 -5.6,12.6 -1.1,-1.7 -3.6,-3.2 -3.6,-6.2 v -1.9 l 0,0 z"
	  };
	  icn["AC.IC.NON-REsIdENTIAL FIRE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 121.2,122.3 -6.2,0 0,5.9 6.2,0 z m -12.1,0 -6.1,0 0,5.9 6.1,0 z m -12.2,0 -5.9,0 0,5.9 5.9,0 z m -12.3,0 -5.7,0 0,5.9 5.7,0 z m 30.4,-4.8 h 6.1 v -6.2 h -2.5 c -1.2,0 -2.5,1.5 -3.6,1.8 v 4.4 z m -5.9,-6.2 -6.1,0 0,6.2 6.1,0 z m -12.2,0 -5.9,0 0,6.2 5.9,0 z m -12.3,0 -5.7,0 0,6.2 5.7,0 z m 25,-33.4 c 0,-3.4 3.4,-7.4 3.4,-9.1 0,-1.4 -0.8,-4.2 -1.8,-4.6 0,7.1 -8.6,12.8 -8.6,15.7 v 0.4 c 0,0.7 1.9,5.2 2.3,6.6 0.4,1.7 1.4,5.6 1.6,7.3 -6.2,-0.1 -7.3,-9.8 -10.3,-11.8 l -0.3,3 0,4.6 c 0,4.7 3.4,11.4 5.6,13.9 1,1.1 4.2,3.7 5.5,4.3 0.8,0.4 6.3,3 6.6,3 1.4,0 9.2,-7.2 10.5,-8.6 2.5,-2.5 4,-9.6 4,-14.8 v -0.7 l -0.7,-5.7 c -1,0.6 -2.1,5.6 -2.8,7 -1.5,3.2 -1.8,3.1 -5.4,4 -0.3,-12.2 6.7,-8.3 -2.7,-19.1 0,4.9 -0.9,7.9 -4.1,9.6 -1.4,-0.7 -3,-2.7 -3,-4.8 z m -14.8,26.4 h 3.6 c -0.1,-0.6 -0.3,-1.4 -1.1,-1.4 h -1.2 v -2.7 c 0,-0.9 -0.9,-2.4 -1.4,-3 v 7 z m -16.4,-28.6 h 3.9 v 28.6 h 8.9 v -28.6 h 3.6 v 5.4 c 0.3,-0.2 1.4,-1.4 1.4,-1.8 v -5 h -6.4 v 28.6 h -6.4 v -28.6 h -6.1 v 28.6 h -5.2 v 32.7 h 54.8 v -30.7 c -0.4,0.2 -1.1,1 -1.1,1.6 v 27.5 h -52.5 v -29.8 h 5.2 v -28.6 h -0 z"
	  };
	  icn["AC.IC.REsIdENTIAL FIRE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 91.5,88.3 -0.7,-3 -30.1,25.2 15.6,0.1 v 25.6 h 50.5 v -25.6 h 12.4 c -0.4,-0.5 -7.6,-5.9 -8,-5.9 -0.3,0 -1.2,1.6 -1.4,1.9 l 1.4,1.4 h -2.4 c -0.7,0.5 -4.9,3.1 -4.9,3.8 v 22.3 h -18.3 v -12.9 h -8.7 v 12.9 h -18.1 v -23.5 h 22.6 l -2.2,-2.7 -30.7,-0.1 L 91.5,88.3 z m 27.6,28 -8.2,0 0,8.5 8.2,0 z m -27,0.2 -8.7,0 0,8.2 8.7,0 z m 11,-36.4 c 0,0.9 2.1,5.3 2.5,6.9 0.4,1.8 1.5,6.1 1.5,7.8 -7.1,-1.6 -6.9,-9.9 -10.3,-12.2 -1.7,7.5 0.8,15.1 3.7,19.5 2.4,3.6 2.6,3.4 6,6 0.4,0.4 7.9,4.3 7.9,4.3 2,0 9.6,-7.1 11.1,-8.6 1.8,-1.8 5.6,-10.8 5.6,-14.4 V 83.5 c 0,-1.9 -0.3,-3.2 -1.4,-4 0,2 -1.8,7 -2.6,8.4 -0.8,1.8 -4.3,4.2 -6.3,4.7 v -1.7 c 0,-4.4 2.4,-6.8 2.4,-10.1 0,-2 -4,-7.2 -5.2,-8 0,5.4 -0.7,8 -4.2,9.8 -1.2,-0.7 -3.1,-2.6 -3.1,-4.4 v -1 c 0,-1.5 1.8,-5.4 2.5,-6.6 2,-3.9 0.5,-3.8 -0.4,-7 h -0.4 c -1.3,5.5 -0.8,4.8 -3.8,8.9 -1,1.4 -5.4,5.9 -5.4,7.5 z"
	  };
	  icn["AC.IC.SCHOOL FIRE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 131.3,73 c -4,-1 -17,-7.2 -19.8,-7.2 h -2.4 V 96 h -0.7 c 0,5.6 -3.8,15.3 -6.2,18.6 -2,2.7 -3.7,4.1 -6.2,6.2 -0.8,0.6 -7,4.9 -7,5.4 v 8 h 44.1 V 96 h -20.4 l 0,-14.8 18.8,-8.2 z m -49.2,11.8 c 0,-3 3.6,-8 3.6,-10 0,-1.8 -0.8,-3.9 -2,-4.6 -0.4,0.8 -0.4,3.6 -0.9,5 -0.3,0.7 -1.8,2.7 -2.3,3.5 -1.6,2.3 -3.4,4.2 -5.1,6.4 -2.2,2.8 0,5 1.1,8.2 0.8,2.2 1.4,7.9 2.1,9.4 C 71.9,102.4 70.6,91.8 67.6,89.9 l -0.6,7.6 0.1,0.2 c 0,5 3.6,12.3 5.9,15 1.1,1.3 4.3,3.6 5.9,4.6 1.1,0.7 2.5,1 3.7,1.6 0.4,0.2 3.2,1.9 3.2,1.9 2.1,0 9.9,-7.4 11.5,-9 1.8,-1.8 5.8,-11 5.8,-14.4 v -6.3 c 0,-2.1 -0.4,-2.6 -0.7,-4.2 h -0.8 c -0.2,1.9 -2.2,7.1 -3,8.7 -0.7,1.3 -6.3,5.7 -6.3,3.7 v -1.2 c 0,-3.8 2.4,-7.2 2.4,-10 v -0.8 c 0,-1.5 -4.3,-6.8 -5.4,-7.6 0,2.5 0.1,4.8 -0.8,6.5 -0.5,0.9 -2.5,3.5 -3.6,3.5 -1.1,0 -3.2,-3.4 -3.2,-5.1 z"
	  };
	  icn["AC.IC.HOT SPOT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 96.3,78.5 c 0,-5.1 4.1,-9.7 4.1,-13 v -0.4 c 0,-1.3 -0,-3.8 -1.1,-4.1 -1,4.5 -3.5,8 -5.9,11.2 -1.3,1.6 -2.3,3.3 -3.6,4.9 -1,1.3 -3.1,3.4 -3.1,5.5 0,1.4 6.1,17.7 3,17.7 -0.1,0 -3.7,-2.5 -4.2,-2.9 -1.4,-1 -2.4,-2.3 -3.3,-3.7 -3.1,-4.6 -2.4,-4.4 -3.8,-10.3 -1.5,0.4 -2.6,5 -2.9,6.9 -0.4,2.4 -0.3,6.7 0.3,9 0.6,2.8 1.3,5 2.5,7.3 0.6,1.2 3.1,5.5 3.1,6.5 -2.2,-0.5 -7.1,-4.6 -8.6,-6.1 -1.5,-1.5 -5.5,-8.3 -5.9,-8.6 0,9.9 5,22.8 9.8,27.6 3.1,3.1 6.3,6.4 10.1,8.7 2.5,1.5 10.5,4.3 14.3,4.3 h 2.4 c 2.9,0 10.8,-3 12.9,-4.2 3.4,-1.9 6.9,-4.7 9,-7.9 4.4,-6.5 8,-15 8,-25.7 V 99.9 l -0.4,-5.8 c -0.7,0.4 -2.2,4.4 -2.5,5.2 -0.5,1.3 -2,3.4 -2.8,4.6 -1.4,2.1 -5.2,6.3 -7.9,6.9 v -1.1 c 0,-4.4 2.8,-8.8 2.8,-12.4 v -1.9 l -1.3,-12.2 -0.7,8e-4 c -0.3,3.9 -1.7,7.9 -3.4,10.5 -1.3,2 -5.3,5.6 -7.7,6.2 -0.2,-0.4 -0.4,-0.6 -0.4,-1.3 v -2.4 c 0,-5.1 3,-8.9 3,-12.8 V 82.6 c 0,-1.5 -2.1,-3.9 -2.9,-5.2 -0.7,-1.1 -2.4,-4.3 -3.5,-4.6 v 1.3 c 0,6.2 -1.4,10.6 -5.6,12.6 -1.1,-1.7 -3.6,-3.1 -3.6,-6.2 v -1.9 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 113,126.9 c 0,6.3 -5.1,11.4 -11.4,11.4 -6.3,0 -11.4,-5.1 -11.4,-11.4 0,-6.3 5.1,-11.4 11.4,-11.4 6.3,0 11.4,5.1 11.4,11.4 z"
	    }
	  ];
	  icn["AC.IC.FIRE ORIGIN"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 96.3,78.5 c 0,-5.1 4.1,-9.7 4.1,-13 v -0.4 c 0,-1.3 -0,-3.8 -1.1,-4.1 -1,4.5 -3.5,8 -5.9,11.2 -1.3,1.6 -2.3,3.3 -3.6,4.9 -1,1.3 -3.1,3.4 -3.1,5.5 0,1.4 6.1,17.7 3,17.7 -0.1,0 -3.7,-2.5 -4.2,-2.9 -1.4,-1 -2.4,-2.3 -3.3,-3.7 -3.1,-4.6 -2.4,-4.4 -3.8,-10.3 -1.5,0.4 -2.6,5 -2.9,6.9 -0.4,2.4 -0.3,6.7 0.3,9 0.6,2.8 1.3,5 2.5,7.3 0.6,1.2 3.1,5.5 3.1,6.5 -2.2,-0.5 -7.1,-4.6 -8.6,-6.1 -1.5,-1.5 -5.5,-8.3 -5.9,-8.6 0,9.9 5,22.8 9.8,27.6 3.1,3.1 6.3,6.4 10.1,8.7 2.5,1.5 10.5,4.3 14.3,4.3 h 2.4 c 2.9,0 10.8,-3 12.9,-4.2 3.4,-1.9 6.9,-4.7 9,-7.9 4.4,-6.5 8,-15 8,-25.7 V 99.9 l -0.4,-5.8 c -0.7,0.4 -2.2,4.4 -2.5,5.2 -0.5,1.3 -2,3.4 -2.8,4.6 -1.4,2.1 -5.2,6.3 -7.9,6.9 v -1.1 c 0,-4.4 2.8,-8.8 2.8,-12.4 v -1.9 l -1.3,-12.2 -0.7,8e-4 c -0.3,3.9 -1.7,7.9 -3.4,10.5 -1.3,2 -5.3,5.6 -7.7,6.2 -0.2,-0.4 -0.4,-0.6 -0.4,-1.3 v -2.4 c 0,-5.1 3,-8.9 3,-12.8 V 82.6 c 0,-1.5 -2.1,-3.9 -2.9,-5.2 -0.7,-1.1 -2.4,-4.3 -3.5,-4.6 v 1.3 c 0,6.2 -1.4,10.6 -5.6,12.6 -1.1,-1.7 -3.6,-3.1 -3.6,-6.2 v -1.9 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 99.6 105.9 C 93.3 105.9 88.2 111 88.2 117.3 C 88.2 123.6 93.3 128.7 99.6 128.7 C 105.9 128.7 111 123.6 111 117.3 C 111 111 105.9 105.9 99.6 105.9 z M 105 109.4 L 106.8 111 L 101.2 117.1 L 107.3 123.2 L 105.6 124.9 L 99.5 118.8 L 93.7 125.3 L 91.9 123.6 L 97.8 117.2 L 92.1 111.4 L 93.8 109.8 L 99.5 115.4 L 105 109.4 z"
	    }
	  ];
	  icn["AC.IC.SMOKE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 99.3,69.2 c 0.2,-2.6 4.4,-5.5 7.2,-6 4.2,-0.8 6.9,1.2 9.1,3.3 1.1,1.1 1.9,2.7 2.4,4.3 0.6,2.2 1.9,1.3 4,2.5 2.4,1.4 4.9,4.4 5.6,7.4 5.3,0 10.3,4.8 10.3,9.9 v 1.3 c 0,3 -1.2,4.9 -2.8,6.5 -1.1,1.1 -1.2,1.2 -2.6,2.1 -1.3,0.8 -2.5,0.6 -2.7,2 -0.6,4.6 -4.2,9 -9.4,9 3.3,5 2.3,8.7 -0.6,13 0,4.8 -0.2,6.2 -2.8,8.8 -2.4,2.5 -4.5,2.4 -8.6,2.4 0.7,-1 1.2,-1 2,-2.4 0.6,-1.1 0.8,-1.7 1.4,-2.9 1,-2.2 1.8,-3.7 1.8,-6.8 v -2.1 c 0,-1.4 -0.2,-2.4 -0.8,-3.2 -1.2,5.2 -1.4,6.4 -5.7,8.6 0,-8.3 3.8,-6.8 -1.9,-13.4 0,3.8 -0.2,5.6 -2.7,6.9 -0.8,-0.5 -2.1,-1.7 -2.1,-2.9 v -0.4 c 0,-2 2.5,-5.2 2.5,-6.7 v -0.4 c 0,-1.1 -0.4,-2.1 -1,-2.5 0,2.9 -3.4,7.6 -4.9,9.2 -1.6,1.7 -1.1,2.8 -0.2,5 0.7,1.7 1.1,3.5 1.1,5.8 v 1 c -3.2,-0.3 -4.4,-6.2 -6.1,-8.2 0,3.4 -0.8,6.3 0.4,9.4 0.8,1.9 2.4,5.6 4.4,6.1 v 0.4 l -3.4,0.6 -0.2,-0.1 c -3.4,0 -6.4,-2.4 -7.8,-4.4 -0.8,-1.1 -1.5,-2.7 -1.7,-4.4 -0.3,-2.3 0.6,-3.6 0.6,-5 0,0 -5.1,-4.7 -4.4,-9 l 0.2,-1.7 c -0.4,-0.5 -1.4,-1.4 -2,-2.2 -0.6,-0.8 -1.1,-1.8 -1.6,-2.6 -1.4,0 -2,0.6 -3.2,0.6 h -0.6 c -5.4,0 -10.5,-5.2 -10.5,-10.5 v -0.8 c 0,-4.9 4.1,-9.2 9,-9.2 h 2.1 c 0.8,-3.2 5.7,-6.9 10.1,-5.9 -0.4,-1.5 -1,-2.7 -1,-4.8 v -0.4 c 0,-3.8 3.2,-7.8 6.1,-8.8 1.9,-0.7 3.9,-1 6.1,-0.4 2.3,0.6 3.7,2.2 4.8,2.5 l 0,0 z m -0.4,-1.9 c -1.3,-0.1 -2.9,-2.1 -5.9,-2.1 h -1.9 c -5,0 -10.6,5.8 -10,11.4 l 0.5,3.4 h -0.6 c -4.3,0 -7.1,3.2 -8.6,6.1 -2.3,-1.1 -6.8,1.2 -7.9,2.4 -1.6,1.6 -3.6,4.2 -3.6,7.3 v 1.5 c 0,3.6 2.4,7.3 4.5,8.9 1.8,1.3 2,1.6 4.4,2.4 2.7,0.9 3.7,0.1 5.9,0.2 l 3.1,3.7 c -0.6,1.3 0.4,4.9 0.9,6 0.5,1.2 0.7,1.4 1.4,2.4 0.2,0.4 1.7,2 1.7,2 0,1.1 -0.4,1.4 -0.4,2.7 v 0.2 c 0,6.3 4.8,12 10.7,12 2.1,0 3.6,-0.4 5,-1 2.6,1.4 7.1,3 9.2,-0.1 l 3.4,0.5 c 2.7,0.4 6.8,-2.2 7.9,-3.6 1,-1.4 3.7,-6 2.4,-8.8 1.1,-0.7 2.6,-3.7 2.7,-5.5 0.1,-1.7 0.2,-1.8 -0.1,-3.6 -0.2,-1.4 -0.9,-2.2 -1,-3.2 4,-0.3 8.4,-5.2 8.4,-9.7 2.5,-1.6 3.4,-1.2 5.6,-3.8 1.3,-1.4 2.6,-4.4 2.6,-7 0,-6.3 -4.7,-12 -10.7,-12 -0.9,-4 -4.8,-8.3 -9.2,-8.6 -0.4,-4.4 -5.7,-9.4 -10.7,-9.4 -4.1,-0 -8.9,2.7 -9.6,5.6 l 0,0 z m 15.8,38.4 c 0.5,0 1,0.1 1,-0.4 0,-3.1 -4.1,-6.7 -7.6,-6.7 h -1.9 c -0.6,0 -1,0.8 -0.6,1 0.4,0.2 1.6,0.1 2,0.1 1.2,0 2.6,0.5 3.4,1 2.1,1.6 2.8,2.1 3.5,5.1 z m -34.5,-12.6 v 1.7 c 0,1.4 0.6,2.2 0.6,3.2 0,0 -3.6,3.4 -3.8,5.4 l 0.6,0.2 c 1,-0.6 1.6,-2.6 3,-4 1,-0.9 3.1,-2.2 4.8,-2.2 h 0.6 c 1.3,0 3.6,1 3.6,-0.2 0,-0.9 -2.6,-1 -3.6,-1 h -0.2 c -1.6,0 -3,0.6 -4,1.3 -0.1,-1 -0.6,-1.9 -0.6,-3.2 0,-4.6 3.7,-8.6 8.4,-8.6 h 1 c 1,0 1.5,0.2 2.3,0.4 0.1,-0.2 0.4,-0.6 0.4,-0.7 0,-0.7 -1.8,-1 -2.5,-1 h -1.5 c -4.5,-8e-4 -9.2,4.4 -9.2,8.6 z m 19.1,-15.8 0.6,0.6 c 1.6,-0.9 3.4,-2.3 5.9,-2.3 h 1 c 5.5,0 10.1,4.4 10.1,9.7 v 0.6 c -1.5,-0 -2.6,-0.8 -4.6,-0.8 h -1 c -1.5,0 -4.1,0.3 -4.2,1.7 0.6,0.1 0.4,0.2 0.8,0.2 0.9,0 1.4,-0.6 3,-0.6 h 2.3 c 2.2,0 5.6,1.8 6.6,3.1 2,2.6 1.8,3.7 2.6,7.2 0.5,0 1,0.1 1,-0.4 0,-4 -2.6,-8.1 -5.2,-9.4 0,-6.9 -4.5,-12.4 -11.1,-12.4 h -1.3 c -2.3,0 -5.6,1.6 -6.5,2.9 z"
	    }
	  ];
	  icn["AC.IC.SPECIAL NEEDS FIRE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 75.3,133.9 h 49.4 v -28.9 c -0.6,0.4 -2.4,1.2 -2.4,2 v 24.8 H 77.4 v -30 h -2.2 v 32.1 l 0,0 z M 93,129.1 h 2 c 4.2,0 7.6,-2.4 9.3,-5 l -1.3,-3.5 c -1.2,0.3 -2.1,5.2 -8.6,5.2 h -0.8 c -3.4,0 -6.3,-3.3 -7.2,-6 -0.6,-1.7 -0.6,-3.6 0,-5.4 0.8,-2.5 1.6,-2.4 2.6,-4 l -0.4,-3.4 c -3.2,0.8 -7.1,8 -5.7,12.8 1.2,4.1 5.4,9.2 10.2,9.2 z M 88.9,97.9 v 0.4 c 0,0.8 0.5,1.4 0.8,2 l 1.4,14.7 11.3,0 4.3,10.2 6.2,-2 -1,-3 -3.5,1 C 108,119.9 104.8,111.7 104,111.7 H 94.1 C 94,111 93.8,110.9 93.8,110.1 v -1.1 h 7.6 v -2.4 h -8 l -0.2,-3.7 v -2.2 c 3.4,-0.8 2.7,-6.2 -1.1,-6.2 -1.8,0 -3.2,1.4 -3.2,3.2 z m 19.9,-7.4 v 1 l -0.4,0.3 C 105.1,89.7 101,86.1 101,80.8 99.6,81.7 98.8,84.8 98.8,87.1 v 1.1 c 0,4.5 3,10.7 5,13.3 2.8,3.7 7.4,4.8 11.6,7 1.6,-0.8 9.3,-5.4 10,-6.3 1.3,-1.7 4.2,-9.8 4.2,-12.4 0,-1.9 -0.3,-8.2 -1.3,-8.8 -0.7,2.7 -0.8,4.7 -2.3,6.8 -1,1.4 -3.3,3.5 -5,4 l -0.2,-2.4 v -0.2 c 0,-3 2,-5.4 2,-8.8 0,-1 -3.4,-6.1 -4.1,-6.2 0,1.8 -0.2,4.1 -0.6,5.4 -0.3,1 -1.9,3.4 -2.9,3.4 h -0.6 c -0.4,-1.4 -1.9,-1.7 -1.9,-4.8 V 76.9 c 0,-2.3 2.6,-5.5 2.6,-7.8 l 0,-0.6 -0.3,-2.4 c -1,0.2 -1,1.9 -1.4,2.9 -0.4,1 -1,2 -1.6,2.9 -1.3,1.7 -2.6,3.4 -3.9,5.1 -2,2.8 -2.1,2.7 -1,6.1 0.6,2 1.7,4.8 1.7,7.4 z m 24.3,10.2 -3.3,-2 -1.2,1.9 3.5,2 z m -66.2,0 1,1.9 c 5,-2.7 11,-6.9 16,-10.1 2.7,-1.7 5.2,-3.4 7.8,-5.1 1.4,-0.9 2.6,-1.6 3.9,-2.6 1.8,-1.2 1.9,-1.9 2.4,-4.3 l -31.2,20.2 z"
	    }
	  ];
	  icn["AC.IC.WILD FIRE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 110.8,139.5 c 0.2,-0.5 6.5,-6.2 7.4,-7 2.6,-2.6 5.6,-5.2 7.8,-8.1 3.9,-5.2 8,-15 8,-24 v -6.9 c 0,-1 0,-2.2 -0.8,-2.4 -0.8,3.4 -3.3,7.7 -5.1,10.1 -0.5,0.6 -7.9,8.7 -7.9,6.2 0,-4.7 2.5,-8.4 2.9,-13.4 0.2,-2.9 -0.8,-11.4 -1.4,-14.3 -0.9,0.7 -1.2,4.2 -1.7,5.7 -0.6,1.7 -1.2,3.6 -2.1,5 -0.7,1.1 -6.1,7.2 -7,7.2 -0.7,0 -1.6,-2.9 -1.6,-4.1 0,-4.7 3.3,-9.7 3.3,-13.4 v -0.6 c 0,-2.4 -1.9,-3.6 -3,-5.6 -0.6,-1 -2.7,-4.7 -3.7,-4.8 v 2.9 c 0,2.2 -0.5,5.6 -1.3,7.1 -0.4,0.8 -3.2,4.1 -4,4.1 -1,0 -3.9,-3.9 -3.9,-5.7 v -3.5 c 0,-4.1 4.1,-8.6 4.1,-12.6 v -0.2 c 0,-1.5 -0,-4 -1.4,-4.1 -0.7,8 -12.6,18.7 -12.6,21.8 0,4.4 3.9,9.2 3.9,15.9 v 2.2 c 0,0.7 -0.2,0.8 -0.2,1.4 -0.8,-0.2 -1.4,-1.3 -1.9,-2 -0.7,-0.8 -1.4,-1.1 -2.2,-1.7 -1.5,-1 -2.7,-2.3 -3.8,-3.7 -1.9,-2.5 -4.1,-6.7 -4.1,-10.9 -1.8,0.5 -3.3,6.3 -3.3,8.8 v 3.5 c 0,8.3 5.9,15.1 5.9,18.1 -3.2,-1.7 -6,-3.9 -8.5,-6.4 -1.2,-1.2 -5.5,-8.5 -6.2,-8.7 0,5.7 1.7,10.3 2.6,15.1 0.5,2.3 1.2,5.1 1.9,7.1 1,2.7 1.9,3.3 3.4,5.3 3,4 4.9,6 8.3,9.4 1.5,1.5 2.9,2.9 4.4,4.4 l 4.7,3.4 5.9,2.8 V 129.9 h -13 l 9.9,-11.5 -7.4,-0.1 9.8,-11.1 -6.6,-0.1 10.9,-17.3 0.1,-0.2 11.2,17.5 -6.1,-0 9.4,11 -7.6,0 10.1,11.7 -13.1,0.1 v 13 l 6,-3.4 z"
	    }
	  ];
	  icn["AC.IC.HAZARDOUS MATERIALS INCIDENT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 60.7,100.6 78.5,-0 -39.3,39.2 -39.2,-39.2 z M 127.6,87.8 c 0.6,0.4 6.1,5.9 6.1,6.2 V 100 h -6.1 V 87.8 z M 115.3,75.5 c 0.6,0.4 6.1,5.9 6.1,6.2 V 100 h -6.1 V 75.5 z M 90.8,69.5 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 100 H 90.8 V 69.5 z m -12.2,12.2 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 100 H 78.6 V 81.7 z m -6.3,6 0,12.2 H 66.4 V 94.2 c 0,-0.3 -0,-0.3 -0.1,-0.4 l 6,-6 z m 30.8,-24.5 6.2,6.1 c -0.2,0.4 -0.1,-0.1 -0.1,0.4 V 100 h -6.1 V 63.3 z M 56.7,100 100,143.3 143.3,100 100,56.7 56.7,100 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 103.1,63.3 6.2,6.1 c -0.2,0.4 -0.1,-0.1 -0.1,0.4 V 100 h -6.1 V 63.3 z m -30.8,24.5 0,12.2 H 66.4 V 94.2 c 0,-0.3 -0,-0.3 -0.1,-0.4 l 6,-6 z m 6.3,-6 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 100 H 78.6 V 81.7 z m 12.2,-12.2 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 100 H 90.8 V 69.5 z m 24.5,6 c 0.6,0.4 6.1,5.9 6.1,6.2 V 100 h -6.1 V 75.5 z m 12.3,12.3 c 0.6,0.4 6.1,5.9 6.1,6.2 V 100 h -6.1 V 87.8 z m -66.9,12.8 78.5,-0 -39.3,39.2 -39.2,-39.2 z"
	    }
	  ];
	  icn["AC.IC.CHEMICAL AGENT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100.7,107.7 c -3.2,2e-5 -5.8,1 -7.6,3 -1.9,2 -2.8,4.7 -2.8,8.1 -2e-6,3.4 0.9,6.1 2.8,8.1 1.9,2 4.4,3 7.6,3 1.3,0 2.4,-0.2 3.6,-0.5 1.1,-0.3 2.2,-0.9 3.2,-1.5 l 0.1,-0.1 0,-0.1 0,-3 0,-0.5 -0.3,0.3 c -0.9,0.9 -1.9,1.5 -3,1.9 -1.1,0.4 -2.2,0.7 -3.4,0.7 -2.4,0 -4.1,-0.7 -5.3,-2.1 -1.2,-1.4 -1.9,-3.5 -1.9,-6.2 -4e-6,-2.7 0.6,-4.8 1.9,-6.2 1.2,-1.4 3,-2.1 5.3,-2.1 1.2,2e-5 2.3,0.2 3.4,0.6 1.1,0.4 2.1,1.1 3,1.9 l 0.3,0.3 0,-0.5 0,-3 -0.2,0 0.1,-0.2 c -1,-0.7 -2.1,-1.2 -3.2,-1.5 -1.1,-0.3 -2.3,-0.5 -3.6,-0.5 z M 92.7,64.2 h 14.7 v 33 c 0,8.2 12.9,9.6 12.4,21.8 -0.3,6.8 -7,18.6 -14.3,18.6 h -11 c -6.8,0 -14.6,-13.1 -14.3,-20 0.6,-10.6 12.4,-12.8 12.4,-20.4 v -33 z m -14.7,55 c 0,6.8 7.9,20.2 14.7,20.2 h 14.7 c 8.1,0 14.7,-13 14.7,-22 0,-11.8 -12.8,-13.6 -12.8,-22 V 60.6 H 90.8 V 95.4 c 0,7.8 -12.8,8.7 -12.8,23.9 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: colors.fillColor.Unknown,
	      d: "m 92.7,64.2 0,33 c 0,7.6 -11.9,9.8 -12.4,20.4 C 79.9,124.5 87.7,137.6 94.5,137.6 l 11,0 c 7.2,0 14,-11.8 14.3,-18.6 0.5,-12.2 -12.4,-13.6 -12.4,-21.8 l 0,-33 -14.7,0 z M 100.7,107.7 c 1.3,2e-5 2.5,0.2 3.6,0.5 1.1,0.3 2.2,0.8 3.2,1.5 l -0.1,0.2 0.2,0 0,3 0,0.5 -0.3,-0.3 c -0.9,-0.9 -1.9,-1.5 -3,-1.9 -1.1,-0.4 -2.2,-0.6 -3.4,-0.6 -2.4,2e-5 -4.1,0.7 -5.3,2.1 -1.2,1.4 -1.9,3.5 -1.9,6.2 -4e-6,2.7 0.6,4.8 1.9,6.2 1.2,1.4 3,2.1 5.3,2.1 1.2,0 2.3,-0.2 3.4,-0.7 1.1,-0.4 2.1,-1.1 3,-1.9 l 0.3,-0.3 0,0.5 0,3 0,0.1 -0.1,0.1 c -1,0.7 -2.1,1.2 -3.2,1.5 -1.1,0.3 -2.3,0.5 -3.6,0.5 -3.2,0 -5.8,-1 -7.6,-3 -1.9,-2 -2.8,-4.7 -2.8,-8.1 -2e-6,-3.4 0.9,-6.1 2.8,-8.1 1.9,-2 4.4,-3 7.6,-3 z"
	    }
	  ];
	  icn["AC.IC.CORROSIVE MATERIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 102.9,135.4 c 0.8,0 1.4,-0.8 1.4,-1.5 0,-0.7 -0.6,-1.5 -1.2,-1.5 H 102.3 c -0.5,0 -1.2,0.7 -1.2,1.4 v 0.3 c 0,0.8 0.6,1.4 1.4,1.4 H 102.9 z M 96.9,132.5 c 0,0.7 0.6,1.5 1.2,1.5 h 0.6 c 0.8,0 1.4,-0.8 1.4,-1.5 v -0.2 c 0,-0.7 -0.6,-1.5 -1.2,-1.5 H 98.1 c -0.6,0 -1.2,0.9 -1.2,1.5 v 0.2 z m 8.5,-0.9 c 1.3,0 2.2,-1.8 1.1,-2.8 -1,-1 -2.8,-0.2 -2.8,1.1 0,0.8 0.9,1.7 1.7,1.7 z m -6.2,-4.4 c 0,0.6 0.6,1.5 1.2,1.5 h 0.6 c 0.8,0 1.4,-0.6 1.4,-1.4 v -0.6 c 0,-0.5 -0.7,-1.2 -1.4,-1.2 h -0.3 c -0.8,0 -1.5,0.8 -1.5,1.6 z m -0.6,-4.1 c 0.6,0 1.2,-0.8 1.2,-1.5 0,-1 -0.7,-1.7 -1.7,-1.7 -0.6,0 -1.5,0.6 -1.5,1.2 v 0.6 c 0,0.7 0.7,1.4 1.2,1.4 h 0.8 V 123.1 z m 2.4,-2.7 c 0,0.6 0.7,1.5 1.2,1.5 h 0.8 c 0.4,0 1.2,-0.8 1.2,-1.2 v -0.8 c 0,-0.6 -0.8,-1.2 -1.5,-1.2 h -0.1 c -0.8,0 -1.5,0.8 -1.5,1.5 v 0.1 z m -2.7,-3.5 c 0.6,0 1.4,-0.8 1.4,-1.5 v -0.2 c 0,-2.2 -3.2,-1.8 -3.2,-0.3 v 0.8 c 0,0.7 1.1,1.2 1.8,1.2 z m 4.1,-3.6 c 0,2 3.3,1.9 3.2,-0.1 -0.1,-2.3 -3.2,-1.8 -3.2,-0.3 v 0.4 z m 4.7,-16.2 0,2.9 -3,-0.2 0.9,2.8 -1.1,0.1 -1.6,-0.9 -0.4,3 -1,-1.5 -3.3,1 -0.6,-3.2 -2,1.3 -0.6,-1.6 -2.5,0.4 1.5,-2.7 -0.6,-1.5 -22.2,0 0,12.4 59.2,0 0,-12.4 z M 94.3,85.2 v 1.4 c 0,4.4 2.1,8.7 5.7,9.4 3.7,0.8 7,-4.5 7,-8 v -1.5 c 0,-3 -2.1,-8.6 -3,-11.3 -0.5,-1.4 -3.1,-10.6 -3.9,-10.6 -0.8,0 -0.9,4.5 -1.1,5.4 -0.6,2.1 -0.9,3.2 -1.6,5.1 -0.8,2.3 -3.2,7.6 -3.2,10.1 l 0,0 z"
	    }
	  ];
	  icn["AC.IC.HAZARDOUS WHEN WET"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 60.6,100.5 78.8,-0 -39.4,39.4 L 60.6,100.5 z M 127.6,87.8 c 0.6,0.4 6.1,5.9 6.1,6.2 v 5.8 H 127.6 V 87.8 z M 115.3,75.5 c 0.6,0.4 6.1,5.9 6.1,6.2 v 18.1 h -6.1 V 75.5 z M 90.8,69.5 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 99.8 H 90.8 V 69.5 z M 78.6,81.7 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 99.8 H 78.6 V 81.7 z m -6.3,6 0,12.1 H 66.4 V 94.2 c 0,-0.3 -0,-0.3 -0.1,-0.4 l 6,-6 z m 30.8,-24.5 6.2,6.1 c -0.2,0.4 -0.1,-0.2 -0.1,0.4 v 30 h -6.1 V 63.3 z M 56.7,100 100,143.3 143.3,100 100,56.7 56.7,100 z m 41.2,25.3 c 0.2,1 0.6,1.6 1.6,1.8 l -0.8,0.6 c -1.3,-0.6 -1.3,-0.1 -1.7,-1.9 l 0.9,-0.4 z m -2.4,-1 c 0,2.9 1.3,4.9 4.2,4.9 h 0.9 c 1.9,0 3,-1 3.6,-2.3 0.9,-1.8 0.6,-3.1 -0.2,-4.6 -0.8,-1.4 -1.6,-2.3 -2.2,-3.8 -0.5,-1.2 -0.8,-3.8 -1.7,-4.4 C 99.6,118.1 95.5,122.5 95.5,124.2 z m -12.6,-9.4 c 0.4,0.9 0.4,1.4 1.5,1.7 l -0.6,0.6 C 82.2,116.7 82.6,116.5 82,115.3 l 0.9,-0.5 z m 1.6,3.8 H 86 c 2.3,0 3.7,-2.2 3.7,-4.6 0,-1.2 -1.9,-3.9 -2.6,-4.9 -0.9,-1.4 -1.2,-4.7 -2.2,-5.4 -0.2,3 -2.3,5.9 -3.6,8 -1.9,2.9 -0.4,6.9 3.1,6.9 z m 28.4,-3.8 c 0.2,1.6 0.9,1.1 1.5,2 l -0.8,0.3 c -1,-0.2 -1.7,-0.8 -1.8,-1.9 L 112.9,114.8 z m 2,-11.1 c -0.3,3.6 -2.2,5.6 -3.6,8.1 -1.7,3.1 -0.3,6.8 3.2,6.8 h 1.3 c 2.2,0 3.7,-1.7 3.7,-3.9 v -0.9 c 0,-1.4 -1.9,-3.8 -2.6,-4.9 -0.9,-1.4 -0.7,-4.4 -2,-5.2 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 112.9,114.8 c 0.2,1.6 0.9,1.1 1.5,2 l -0.8,0.3 c -1,-0.2 -1.7,-0.8 -1.8,-1.9 L 112.9,114.8 z m -30,0 c 0.4,0.9 0.4,1.4 1.5,1.7 l -0.6,0.6 C 82.2,116.7 82.6,116.5 82,115.3 l 0.9,-0.5 z m 15,10.4 c 0.2,1 0.6,1.6 1.6,1.8 l -0.8,0.6 c -1.3,-0.6 -1.3,-0.1 -1.7,-1.9 l 0.9,-0.4 z m 5.2,-62 6.2,6.1 c -0.2,0.4 -0.1,-0.2 -0.1,0.4 v 30 h -6.1 V 63.3 z m -30.8,24.5 0,12.1 H 66.4 V 94.2 c 0,-0.3 -0,-0.3 -0.1,-0.4 l 6,-6 z m 6.3,-6 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 99.8 H 78.6 V 81.7 z m 12.2,-12.2 c 0,-0.4 5.5,-5.8 6.1,-6.2 V 99.8 H 90.8 V 69.5 z m 24.5,6 c 0.6,0.4 6.1,5.9 6.1,6.2 v 18.1 h -6.1 V 75.5 z m 12.4,12.3 c 0.6,0.4 6.1,5.9 6.1,6.2 v 5.8 H 127.6 V 87.8 z m 11.7,12.6 -78.8,0 39.4,39.4 L 139.4,100.4 z M 85,103.7 c 1,0.7 1.3,4 2.2,5.4 0.6,1 2.6,3.6 2.6,4.9 0,2.4 -1.4,4.6 -3.7,4.6 l -1.5,0 c -3.5,0 -5,-4 -3.1,-6.9 1.3,-2.1 3.4,-5 3.6,-8 z m 29.8,0 c 1.3,0.9 1.2,3.8 2,5.2 0.7,1.1 2.6,3.5 2.6,4.9 l 0,0.9 c 0,2.2 -1.6,3.9 -3.7,3.9 l -1.3,0 c -3.5,0 -4.9,-3.7 -3.2,-6.8 1.4,-2.5 3.4,-4.5 3.7,-8.1 z M 100,114.1 c 0.8,0.6 1.2,3.1 1.7,4.3 0.6,1.5 1.5,2.4 2.2,3.8 0.8,1.5 1.2,2.7 0.3,4.6 -0.6,1.3 -1.7,2.3 -3.6,2.3 l -0.9,0 c -2.8,0 -4.2,-2 -4.2,-4.9 0,-1.7 4.1,-6.1 4.5,-10.1 z"
	    }
	  ];
	  icn["AC.IC.EXPLOSIVE MATERIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 96.5,104.6 0,0.2 -0.2,0 0,4 0,0.2 0.2,0 3.2,0 0.2,0 0,-0.2 0,-4 0,-0.2 -0.2,0 -3.2,0 z m 2.3,-20 c -1.1,2.4e-5 -2.2,0.1 -3.2,0.5 -1,0.3 -2,0.8 -3,1.4 l -0.1,0.1 0,0.1 0,3 0,0.4 0.3,-0.2 c 1,-0.7 2,-1.2 2.9,-1.6 0.9,-0.4 1.8,-0.5 2.6,-0.5 1.1,2.1e-5 2,0.3 2.6,0.8 0.7,0.5 1,1.2 1,2.1 -10e-6,0.5 -0.1,1 -0.4,1.4 -0.2,0.5 -0.7,1 -1.3,1.5 l -0,0 -1.4,1.4 c -1,0.9 -1.6,1.7 -1.9,2.5 -0.3,0.7 -0.5,1.6 -0.5,2.7 l 0,2.4 0,0.2 0.2,0 3,0 0,-0.2 0.2,0 0,-1.9 c -8e-6,-0.5 0,-1 0,-1.3 0,-0.3 0.1,-0.6 0.1,-0.8 0.1,-0.2 0.2,-0.5 0.4,-0.8 0.2,-0.3 0.5,-0.7 1,-1.1 l 1.4,-1.4 c 1,-0.9 1.6,-1.7 2,-2.5 0.4,-0.8 0.6,-1.6 0.6,-2.4 -2e-5,-1.7 -0.6,-3.1 -1.8,-4.2 -1.2,-1.1 -2.8,-1.6 -4.8,-1.6 z m 4.8,-31.1 -1.5,4.5 -4.3,12.9 -4.5,-7 -1.6,-2.5 -0.3,2.9 -1.3,14.4 -9.5,-10.7 -2.8,-3.2 1.1,4.1 3.4,12.9 -13.1,-0.7 -0.7,-0 -0.3,0.6 -0.1,0.2 -0.4,0.8 0.7,0.5 11.3,8.1 -20.1,1.4 -5.6,0.4 5.4,1.6 18,5.3 -12.3,7.1 -0.8,0.4 0.3,0.8 0.1,0.2 0.3,0.7 0.8,-0.1 16.1,-2 -4.8,8.3 -1.5,2.6 2.7,-1.1 8.8,-3.7 -3.4,14.5 -1.1,4.5 2.8,-3.7 8.9,-11.6 5,19.2 0.2,0.8 0.8,0 0.4,0 0.9,0 0.1,-1 0.9,-18.7 9.2,11.2 2.6,3.2 -0.9,-4 -3.3,-15.2 10.6,5.9 4.7,2.6 -3.4,-4.1 -5.5,-6.6 15.6,4.4 4,1.2 -3.1,-2.9 -10.7,-9.9 13.7,-2.1 4.6,-0.7 -4.5,-1.2 -15.5,-4.3 18.9,-9.6 4.7,-2.4 -5.2,0.5 -17.1,1.6 6.7,-10.8 2,-3.2 -3.3,1.8 -14.6,7.9 5.2,-16.5 1.7,-5.5 -3.5,4.5 -10.6,14 -1.7,-18.8 -0.4,-4.8 z m -1.1,9.7 1.5,16.6 0.2,2.6 1.6,-2 8.7,-11.5 -4.2,13.4 -0.8,2.4 2.2,-1.2 13.4,-7.3 -5.8,9.3 -1.1,1.7 2,-0.2 13.9,-1.3 -16.5,8.4 -2.3,1.2 2.5,0.7 13.5,3.7 -11.2,1.7 -2,0.3 1.5,1.4 9.1,8.4 -14.6,-4.2 -3.1,-0.9 2.1,2.5 4.2,5 -7.8,-4.3 -1.9,-1.1 0.5,2.2 2.9,13.3 -8.2,-10 -1.6,-2 -0.1,2.6 -0.8,16.1 -4.2,-16.3 -0.5,-2 -1.2,1.6 -7.3,9.5 2.8,-11.9 0.4,-1.9 -1.8,0.7 -7.9,3.3 4.3,-7.4 1,-1.7 -2,0.2 -13.9,1.7 10.3,-6 0.5,-0.3 0,-0.6 0,-0.3 0,-0.8 -0.7,-0.2 -14.5,-4.2 17.3,-1.2 2.8,-0.2 -2.3,-1.6 -11,-8 11.5,0.6 1.4,0.1 -0.3,-1.3 -2.7,-10.1 8.2,9.3 1.5,1.8 0.2,-2.3 1.3,-13.8 4,6.3 1.1,1.8 0.7,-2 3.4,-10.3 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 102.5 63.2 L 99 73.5 L 98.4 75.5 L 97.3 73.7 L 93.2 67.4 L 91.9 81.3 L 91.7 83.6 L 90.2 81.8 L 82 72.5 L 84.7 82.7 L 85.1 84 L 83.7 83.9 L 72.2 83.4 L 83.2 91.3 L 85.5 93 L 82.7 93.2 L 65.4 94.3 L 79.9 98.5 L 80.7 98.8 L 80.7 99.5 L 80.7 99.8 L 80.7 100.3 L 80.2 100.7 L 69.8 106.6 L 83.8 104.9 L 85.8 104.7 L 84.8 106.4 L 80.4 113.8 L 88.3 110.6 L 90.1 109.8 L 89.7 111.7 L 86.9 123.6 L 94.2 114.1 L 95.5 112.5 L 96 114.4 L 100.2 130.8 L 101 114.6 L 101.2 112 L 102.8 114 L 111 124 L 108.1 110.7 L 107.6 108.5 L 109.6 109.6 L 117.3 113.9 L 113.2 108.9 L 111.1 106.4 L 114.3 107.3 L 128.9 111.5 L 119.7 103.1 L 118.2 101.7 L 120.3 101.3 L 131.4 99.6 L 117.9 95.9 L 115.4 95.2 L 117.8 94 L 134.3 85.6 L 120.3 86.9 L 118.3 87.1 L 119.4 85.4 L 125.2 76.1 L 111.8 83.3 L 109.6 84.5 L 110.3 82.2 L 114.5 68.8 L 105.8 80.3 L 104.3 82.3 L 104 79.8 L 102.5 63.2 z M 98.8 84.5 C 100.8 84.5 102.4 85.1 103.6 86.1 C 104.8 87.2 105.5 88.6 105.5 90.3 C 105.5 91.2 105.3 92 104.9 92.7 C 104.5 93.5 103.8 94.3 102.8 95.2 L 101.5 96.6 C 101 97.1 100.6 97.4 100.4 97.7 C 100.2 98 100.1 98.2 100 98.5 C 100 98.7 99.9 98.9 99.9 99.2 C 99.8 99.5 99.8 100 99.8 100.5 L 99.8 102.4 L 99.7 102.4 L 99.7 102.7 L 96.6 102.7 L 96.4 102.7 L 96.4 102.4 L 96.4 100 C 96.4 98.9 96.6 98 96.9 97.3 C 97.2 96.6 97.9 95.8 98.8 94.8 L 100.2 93.4 C 100.8 92.9 101.2 92.4 101.5 91.9 C 101.7 91.4 101.9 91 101.9 90.5 C 101.9 89.6 101.5 88.9 100.9 88.3 C 100.2 87.8 99.4 87.5 98.3 87.5 C 97.5 87.5 96.6 87.7 95.7 88.1 C 94.8 88.5 93.8 89 92.8 89.7 L 92.5 89.9 L 92.5 89.5 L 92.5 86.5 L 92.5 86.4 L 92.6 86.3 C 93.6 85.7 94.6 85.3 95.6 85 C 96.7 84.7 97.7 84.5 98.8 84.5 z M 96.5 104.6 L 99.8 104.6 L 99.9 104.6 L 99.9 104.8 L 99.9 108.8 L 99.9 109 L 99.8 109 L 96.5 109 L 96.3 109 L 96.3 108.8 L 96.3 104.8 L 96.5 104.8 L 96.5 104.6 z"
	    }
	  ];
	  icn["AC.IC.FLAMMABLE GAS"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 93.3,82.5 c 0,-4.3 13.8,-4.3 13.8,0 v 55.6 c 0,1.3 -4.4,1.2 -5.9,1.2 h -2 c -1.5,0 -5.9,0.1 -5.9,-1.2 V 82.5 l 4e-4,0 z m 5.3,-20.6 h -6.5 v 2.9 h 6.3 v 3.2 h -3.7 v 2 h 3.7 v 5.3 h -4.6 v 4.5 c -1.1,0.3 -2,1.6 -2,3 v 54.8 c 0,3.3 3.7,3.2 7.1,3.2 h 2.4 c 3.4,0 7.1,0.2 7.1,-3.2 V 83.1 c 0,-2.8 -1.8,-2.8 -1.8,-3.7 v -4.1 h -4.7 v -10.4 h 6.3 v -3 h -6.7 v -2.5 h -2.9 v 2.5 l 0,0 z m 21.8,32.3 v 0.6 c 0,2.2 2.3,5.1 1.6,8.1 -1.3,-0.3 -3.1,-2 -3.8,-3 -0.3,-0.4 -0.9,-1.7 -1.2,-2.2 -0.4,-0.9 -0.4,-2.3 -0.7,-2.8 -1.1,0.8 -1.6,3.5 -1.6,5.5 v 0.2 c 0,3.2 2.4,7.5 3.8,9.6 2,3 6.3,3.3 8.4,5.1 1.6,-0.9 6.9,-3.7 7.7,-4.9 0.9,-1.2 3.2,-7.4 3,-9.6 l -0.7,-5.9 h -0.4 c -0,3.2 -2.7,7.6 -5.5,7.9 v -2 c 0,-1.7 1.4,-4 1.4,-6.1 v -0.2 c 0,-0.9 -2.4,-4.4 -3.2,-4.7 0,3.4 -0.3,5.5 -2.5,6.7 -0.8,-0.7 -1.8,-1.6 -1.8,-3.1 v -1.2 c 0,-2.1 2,-4.1 2,-6.1 0,-0.9 -0.1,-1.6 -0.6,-2 -0.9,3.8 -5.9,8.9 -5.9,10.2 z m -52.7,0 v 0.4 c 0,1.2 1.8,4.3 1.8,6.1 v 2.2 c -2.4,-0.2 -5.7,-5 -5.7,-8.1 -1.7,1.1 -1.5,4.3 -1.4,6.7 0.1,2.4 1.3,4.7 2.2,6.3 1.3,2.6 1.6,2.9 4,4.5 0.6,0.4 5.3,2.8 5.9,2.8 1.2,0 6.8,-3.9 7.5,-4.7 0.9,-1 3.3,-7.3 3.1,-9.1 l -0.6,-6.5 h -0.4 c -0.5,2.3 -0.3,3.3 -1.6,5 -0.6,0.8 -2.7,2.7 -3.8,2.8 0,-0.9 -0.2,-0.7 -0.2,-1.4 0,-1.8 1.4,-4.3 1.7,-6.6 0.1,-1 -2.6,-4.6 -3.3,-5 0.4,2 -0.8,6.5 -2.4,6.5 h -0.2 c -0.9,0 -1.8,-2.2 -1.8,-3.4 0,-3.9 2.6,-4.5 1.6,-8.8 -0,0 -2.2,4.5 -2.9,5.4 -0.6,0.6 -3.5,4.3 -3.5,4.9 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 93.3,82.5 c 0,-4.3 13.8,-4.3 13.8,0 v 55.6 c 0,1.3 -4.4,1.2 -5.9,1.2 h -2 c -1.5,0 -5.9,0.1 -5.9,-1.2 V 82.5 l 4e-4,0 z"
	    }
	  ];
	  icn["AC.IC.FLAMMABLE LIQUID"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100.1,135.4 c -7.4,0 -11.3,-5.4 -13.1,-11.1 -2.1,-6.7 -2.4,-14.4 0.8,-20.2 5.9,-10.6 10.7,-21.6 11.9,-36.7 4,4.6 3.6,17.4 6.3,23.9 2.6,6.5 8.9,13.4 8.9,21 v 1.7 c 0,10 -4.5,21.3 -14.2,21.3 h -0.7 v 0 z m -0.6,1.7 h 1.9 c 10.1,0 15.4,-11.7 15.4,-21.9 v -3 c 0,-9.5 -7.7,-15.8 -9.9,-24.1 -2.4,-8.9 -1.7,-21.2 -9.1,-25.1 0,8.6 -1.3,16 -3.6,22.4 -1.2,3.3 -2.4,6.2 -3.6,9.5 -1.2,2.7 -3.1,5.8 -4.5,8.6 -1.4,2.7 -3,6.1 -2.6,10.5 0.4,4.4 0.6,7.6 1.8,11.3 2,5.9 6.7,11.9 14.3,11.9 z M 122,87 v 0.2 c 0,2.3 2.4,5.5 1.7,8.6 -1.3,-0.1 -3.5,-2.2 -4.1,-3.2 -0.5,-0.9 -0.9,-1.3 -1.2,-2.4 -0.3,-0.7 -0.6,-2.6 -0.8,-3 -1.2,0.9 -1.7,4 -1.7,6.1 0,3.2 2.6,8.4 4,10.4 1,1.3 2.5,2.3 4.1,3.1 0.6,0.3 4.8,2.4 5,2.4 0.9,0 7.6,-4.4 8.2,-5.1 0.9,-1.1 3.5,-8 3.3,-10.1 l -0.7,-6.8 h -0.4 c -0.1,3.5 -2.8,8.2 -5.9,8.4 0,0 0.3,-3.5 0.5,-4.4 0.3,-1.3 1,-2.9 1,-4.3 V 86.8 c 0,-1 -2.7,-4.6 -3.4,-5.1 0,3.7 -0.2,6 -2.7,7.2 -0.7,-0.6 -1.9,-1.7 -1.9,-3 v -1.4 c 0,-2.3 2.1,-4.7 2.1,-6.5 l 0,-0.2 -0.3,-1.9 c -1,0.2 -1.1,2 -1.5,2.9 -0.5,0.9 -1.2,1.9 -1.8,2.6 -0.9,1.2 -3.5,4.1 -3.5,5.7 z m -56.6,0 c 0,1.3 1.9,4.7 1.9,7 v 1.9 c -2.6,-0.2 -6.1,-5.2 -6.1,-8.6 -3.4,2.4 -0.7,11.4 0.9,14.1 1.5,2.6 1.8,3 4.4,4.7 0.4,0.3 6.1,3.1 6.2,3.1 1.3,0 4.1,-2.5 5.3,-3.2 2.5,-1.2 2.9,-1.7 4.2,-4.3 0.4,-0.9 1.6,-5.4 1.9,-6.6 0.4,-2.1 -0.5,-5.8 -0.5,-7.9 h -0.5 c -0.3,3.5 -2.9,8.4 -5.9,8.4 -0,-0.9 -0.2,-0.5 -0.2,-1.2 0,-2 1.5,-4.9 1.8,-7.1 0.2,-1.2 -2.7,-5.2 -3.5,-5.4 1,2.1 -1.1,6.1 -2.7,7 -0.9,-0.6 -1.9,-2.2 -1.9,-3.6 v -0.4 c 0,-3.7 2.7,-4.6 1.7,-9.1 -0.5,0.4 -0.8,2 -1.4,3 -0.7,1 -1,1.7 -1.8,2.7 -0.8,1 -3.6,4.2 -3.6,5.5 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 100.1,135.4 c -7.4,0 -11.3,-5.4 -13.1,-11.1 -2.1,-6.7 -2.4,-14.4 0.8,-20.2 5.9,-10.6 10.7,-21.6 11.9,-36.7 4,4.6 3.6,17.4 6.3,23.9 2.6,6.5 8.9,13.4 8.9,21 v 1.7 c 0,10 -4.5,21.3 -14.2,21.3 h -0.7 v 0 z"
	    }
	  ];
	  icn["AC.IC.FLAMMABLE SOLID"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 68.6,102 c 0,-2 1.9,-4.2 1.9,-6.3 v -1.5 c 0,-0.6 -0.1,-0.4 -0.4,-0.7 -0.8,3.7 -6.1,9.1 -6.1,10.4 0,1.6 1.9,4.6 1.9,8.2 -2.6,-0.2 -5.9,-4.9 -5.9,-8 -0.8,0.9 -1.5,2.6 -1.5,4.3 0,4.4 1.7,8.1 3.5,10.6 0.8,1.2 7,5.2 8.7,5.2 1.1,0 6.7,-3.7 7.3,-4.4 0.9,-1.2 3.2,-6.8 3.2,-8.6 0,-1.6 -0,-6.6 -0.9,-7.2 -1.1,4.8 -1.5,5.9 -5.4,8.1 0,-4.3 1.3,-5.7 1.3,-8.2 v -0.4 c 0,-0.1 -2.8,-4.4 -3,-4.6 0,2.4 -0.7,6.7 -2.6,6.7 -1,8e-4 -2,-2.4 -2,-3.7 z m 60.3,-0.4 c 0,-1.7 2.2,-4.5 2.2,-6.3 0,-0.7 -0.2,-1.6 -0.7,-1.9 -0.9,3.7 -5.9,8.9 -5.9,10.2 v 0.4 c 0,1.9 1.5,3.7 1.5,6.1 v 2.2 c -2.3,-0.6 -5.6,-4.9 -5.7,-8 -1,0.7 -1.5,3 -1.5,4.8 v 1.1 c 0,2.8 2.5,7.7 3.8,9.5 2,2.7 6.4,3.1 8.4,4.8 2.1,-1.1 3.1,-1.8 5.1,-2.9 2.6,-1.6 2.2,-1.5 3.5,-4.3 0.7,-1.4 1.7,-4.5 1.8,-6.2 0.1,-1.5 -0.1,-6.4 -0.9,-7 -0.8,3.5 -2.1,7.1 -5.4,8 -0,-0.7 -0.2,-0.7 -0.2,-1.5 v -0.2 c 0,-1.8 1.7,-4.9 1.5,-6.4 -0.1,-0.8 -2.5,-4.8 -3,-5.1 0,2.8 -0.5,6.7 -3,6.7 -0.4,-1.3 -1.5,-1 -1.5,-3.9 z m -35.6,1.9 v -20 l 20,-0.4 v 19.4 l -20,1 z m -13.9,-7.6 0,-16.8 10.8,4 v 19.8 c -1.2,-0.7 -10.9,-6.2 -10.9,-7 z m 1.5,-18.4 c 5.7,0 11.4,0 17.2,0 2.1,0 12.1,3.1 13.2,3.9 l -3.7,0.3 H 92.6 c -0.9,0 -11.1,-3.7 -11.7,-4.1 z m -3.5,-1.5 0,14.7 -0.3,6.7 c 2.2,1.2 5.3,3 7.5,4.5 1.9,1.2 5.5,4 8.1,4 7.6,0 15.3,-1.1 23.1,-1.1 l -0,-23.6 c -1,-0.5 -14.8,-5.4 -15.2,-5.4 l -3.9,-0.1 -19.3,0.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 80.9,77.5 c 5.7,0 11.4,0 17.2,0 2.1,0 12.1,3.1 13.2,3.9 l -3.7,0.3 H 92.6 c -0.9,0 -11.1,-3.7 -11.7,-4.1 z m -1.5,18.4 0,-16.8 10.8,4 v 19.8 c -1.2,-0.7 -10.9,-6.2 -10.9,-7 z m 13.9,7.6 v -20 l 20,-0.4 v 19.4 l -20,1 z"
	    }
	  ];
	  icn["AC.IC.NON-FLAMMABLE GAS"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 92.7,81.3 c 0,-4.6 14.7,-4.6 14.7,0 v 59.4 c 0,1.4 -4.7,1.3 -6.3,1.3 h -2.1 c -1.6,0 -6.3,0.1 -6.3,-1.3 V 81.3 z m 5.7,-22 h -7 v 3.2 h 6.7 v 3.3 h -4 v 2.1 h 4 v 5.7 h -4.8 v 4.8 c -1.1,0.3 -2.1,1.7 -2.1,3.1 v 58.6 c 0,3.5 4,3.3 7.6,3.3 h 2.5 c 3.6,0 7.6,0.2 7.6,-3.3 V 81.9 c 0,-3 -1.9,-3 -1.9,-4 v -4.4 h -5 v -11.1 h 6.7 v -3.1 h -7.2 v -2.7 h -3.1 v 2.7 l -4e-4,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 92.7,81.3 c 0,-4.6 14.7,-4.6 14.7,0 v 59.4 c 0,1.4 -4.7,1.3 -6.3,1.3 h -2.1 c -1.6,0 -6.3,0.1 -6.3,-1.3 V 81.3 z"
	    }
	  ];
	  icn["AC.IC.ORGANIC PEROXIDE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 132.1,128.2 v 6.2 l -36.6,2.2 v -6.7 l 0.6,0.1 36,-1.7 z m -63.8,-11.1 c 2.6,1.7 26.1,12.1 26.1,13.2 v 5.9 l -0.1,0.2 -26,-14.7 v -4.6 z m 61.1,10 c -4.7,0 -33,2.1 -34.6,1.5 -1.8,-0.7 -23.8,-11.4 -24.4,-12 3.8,0 7.5,0 11.3,0 2.9,0 8.8,-0.8 10,1.1 l -9,0.6 2.1,0.7 v 0.4 h -1.2 l -1.8,0.2 c 2,1.3 18.3,5.2 22.4,5.2 h 1.9 c 4.8,0 9.2,-1.3 13,-1.4 0.7,0 9.9,3.3 10.4,3.7 z m -25.4,-23.2 1.1,9.4 5.4,-6.8 -2.5,8.2 7.7,-4.3 -3.7,5.9 8.4,-0.8 -9.2,4.7 8.1,2.6 -14.4,1.7 c -3.3,0.2 -19,-3.7 -20.5,-4.8 l 10.3,-0.6 -6.2,-4.5 6.8,0.1 -1.7,-5.9 5.1,5.2 0.7,-7.5 2.6,3.9 2.1,-6.6 z m 0.7,-2.2 -0.1,-0.6 h -0.3 l -1.8,6.2 -0.4,-0 -2.4,-3.7 -0,2.1 -0.7,-1.1 -0.6,6.2 -4.9,-5.4 0.6,2.6 -1.5,-1.2 1.8,6.2 -2.5,0 -4,-0.2 1.5,1.1 -2.4,-0.1 1.5,1.4 h -21.3 c -0.1,0.5 -0.2,0.5 -0.2,1.1 v 5 c 0,1.6 4.8,3.7 6.2,4.4 2.3,1.3 4.6,2.4 6.9,3.8 4.4,2.7 9.2,5 13.7,7.6 1.8,1.1 6.8,0.5 9.6,0.2 2.8,-0.3 7.2,-0.2 9.9,-0.7 2.8,-0.5 7,-0.4 9.9,-0.7 2.7,-0.4 7.4,-0.6 10,-0.7 v -7.9 c 0,-0.9 -5.3,-2.4 -6.4,-2.8 -1.6,-0.5 -5.7,-1.9 -6.8,-2.6 l 2.9,-0.3 -8.4,-2.2 0,-0.4 9.2,-4.7 -1.5,0.2 1.7,-1.1 -10,1 3.9,-6.6 -8.1,4.7 2.9,-10 -6.4,8.4 -1.1,-11.1 -0.6,1.9 z m 1.1,-6.2 c -5.6,0 -9.6,-3.4 -9.6,-9 v -1.1 c 0,-4.8 9,-12.5 9,-21.1 2.8,3.2 2.2,7.6 4.3,11 1.2,1.9 5.3,7.8 5.3,9.9 v 1.1 c 0,5.3 -3.7,9.2 -9,9.2 z m -10.9,-10 v 1.1 c 0,13.7 21.1,13.2 21.1,0.8 v -2.1 c 0,-3.5 -4.5,-8.3 -5.9,-11.7 -2.2,-5.1 -1.1,-8.8 -6.2,-11.6 0,11.2 -9,17.6 -9,23.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 105.7,95.5 c -5.6,0 -9.6,-3.4 -9.6,-9 v -1.1 c 0,-4.8 9,-12.5 9,-21.1 2.8,3.2 2.2,7.6 4.3,11 1.2,1.9 5.3,7.8 5.3,9.9 v 1.1 c 0,5.3 -3.7,9.2 -9,9.2 z m -1.8,8.4 1.1,9.4 5.4,-6.8 -2.5,8.2 7.7,-4.3 -3.7,5.9 8.4,-0.8 -9.2,4.7 8.1,2.6 -14.4,1.7 c -3.3,0.2 -19,-3.7 -20.5,-4.8 l 10.3,-0.6 -6.2,-4.5 6.8,0.1 -1.7,-5.9 5.1,5.2 0.7,-7.5 2.6,3.9 2.1,-6.6 z m -35.6,13.2 c 2.6,1.7 26.1,12.1 26.1,13.2 v 5.9 l -0.1,0.2 -26,-14.7 v -4.6 z m 63.8,11.1 v 6.2 l -36.6,2.2 v -6.7 l 0.6,0.1 36,-1.7 z m -2.7,-1.1 c -4.7,0 -33,2.1 -34.6,1.5 -1.8,-0.7 -23.8,-11.4 -24.4,-12 3.8,0 7.5,0 11.3,0 2.9,0 8.8,-0.8 10,1.1 l -9,0.6 2.1,0.7 v 0.4 h -1.2 l -1.8,0.2 c 2,1.3 18.3,5.2 22.4,5.2 h 1.9 c 4.8,0 9.2,-1.3 13,-1.4 0.7,0 9.9,3.3 10.4,3.7 z"
	    }
	  ];
	  icn["AC.IC.OXIDIZER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 80.9,135.3 0,0.2 0,4.2 0,0.2 0.2,0 40.7,0 0.2,0 0,-0.2 0,-4.2 0,-0.2 -0.2,0 -40.7,0 -0.2,0 z m 6.5,-20.7 c 0,-7.4 6.1,-14 13.4,-14 h 1.1 c 7.5,0 13.6,6.6 13.6,14 0,7.1 -6.2,13.9 -13.2,13.9 h -1.9 c -6.8,-0 -13,-6.8 -13,-13.9 z m 12.8,-35.9 c -0.7,0 -2.1,-2.1 -2.3,-2.9 -0.3,-1.2 -0.4,-3 0,-4.4 0.5,-2.1 2.8,-5.9 2.8,-7.5 0,-1.1 -0.1,-3 -1.3,-3.1 -1,4.4 -2.1,4.9 -4.1,8 -1,1.5 -4.7,5.8 -4.7,7.3 v 0.4 c 0,2.4 3.1,8.1 2.7,10.5 l -0.2,1.7 c -3.5,-0.8 -8.1,-7.3 -8.1,-12 -1.4,0.1 -2.5,4.4 -2.5,6.1 v 2.9 c 0,5.7 3.3,8.3 4.2,12 -2.7,-1.4 -4,-2.2 -5.9,-4.4 -1.1,-1.2 -3.7,-5.6 -4.1,-5.9 -1.1,2.4 1.7,10.3 2.4,12.1 0.7,1.7 1.4,3.5 2.3,5 1.1,1.8 2.2,2.6 3.2,4.1 0,1.7 -0.5,2.4 -0.6,4.7 -0,1.8 -0,2.6 0.2,4.6 0.2,2.1 2.1,6.1 3.2,7.3 2.4,2.6 2.4,2.8 5.6,4.8 2,1.3 4.9,2.2 8.1,2.2 h 0.6 c 6.4,0 11.4,-3.5 14.2,-7.2 3.8,-5.2 3.8,-9.9 2.2,-16.7 3.5,-6.6 5.9,-9.3 5.9,-19.7 v -0.4 l -0.4,-4 c -0.1,0 -3.3,6.2 -3.8,7 -1,1.5 -3.7,4.8 -5.7,5 0.1,-3.2 2.1,-6.2 2.1,-9.4 v -2.2 l -1.1,-8 c -1,0.7 -1.5,5.9 -3,7.7 -0.4,0.5 -5.6,5.5 -5.6,3.6 v -1.7 c 0,-3.1 2.1,-6.3 2.1,-9 v -1.3 c 0,-0.8 -3.9,-6.5 -4.6,-6.9 0,2.3 -0.2,4.4 -0.7,6.2 -0.3,1.1 -2,3.7 -3,3.7 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 87.4,114.5 c 0,-7.4 6.1,-14 13.4,-14 h 1.1 c 7.5,0 13.6,6.6 13.6,14 0,7.1 -6.2,13.9 -13.2,13.9 h -1.9 c -6.8,-0 -13,-6.8 -13,-13.9 z"
	    }
	  ];
	  icn["AC.IC.RADIOACTIVE MATERIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 83.7,130.4 c -10.1,-5.6 -16.6,-17 -16.4,-28.5 l 17.8,-0 c -0.2,5 3.1,10.7 7.5,13.1 l -9,15.4 z m 49.1,-28.2 c 0.2,11.5 -6.4,22.9 -16.4,28.5 l -9,-15.4 c 4.4,-2.4 7.7,-8.1 7.6,-13.1 l 17.8,0 z M 83.5,73.8 c 9.9,-5.9 23,-5.9 32.9,0 l -8.9,15.5 c -4.3,-2.6 -10.9,-2.6 -15.1,0 l -8.9,-15.5 z m 26.5,28.5 c 0,5.5 -4.4,9.9 -9.9,9.9 -5.5,0 -9.9,-4.4 -9.9,-9.9 0,-5.5 4.4,-9.9 9.9,-9.9 5.5,0 9.9,4.4 9.9,9.9 z"
	    }
	  ];
	  icn["AC.IC.SPONTANEOUSLY COMBUSTIBLE MATERIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 101.2,128.4 -2.1,0 0,12.6 2.1,0 z m 26.5,0.6 -8.7,-8.6 -1.2,1.2 8.7,8.7 z m -45,-7.5 -1.3,-1.3 -8.8,8.8 1.3,1.4 z m 55.5,-19.7 -12.2,0 0,1.9 12.2,0 z m -63.3,0 -13.1,0 0,1.9 12.8,0 z m 52.8,-25.3 -1.3,-1.2 -9,8.7 1.5,1.5 z m -46.1,9.1 1.4,-1.5 -9.3,-9.2 -0,0.2 -1.2,1.3 z m 19.5,-26.5 -2.1,0 0,9.7 2.1,0 z M 91.7,88 v 0.6 c 0,0.5 1.4,4.3 1.7,5.1 0.7,2.2 0.7,3.4 0.7,5.7 -1.2,-0.1 -4.4,-3 -5.1,-4 -1.7,-2.5 -1.7,-3.4 -2.5,-6.7 -0.9,0.7 -1.9,3.8 -1.9,5.5 v 2.3 c 0,5.6 3.6,8.4 3.8,11.1 -0.9,-0.2 -4.8,-3.2 -5.4,-3.8 -0.7,-0.8 -3.3,-5.3 -3.8,-5.4 0,3.9 1.1,6.9 2.1,9.7 0.6,1.5 1.2,2.9 1.7,4.2 0.8,2.2 1.4,2 2.6,3.5 2.9,3.6 9.4,8.3 15.7,8.3 h 0.8 c 2.2,0 6.4,-1.7 7.9,-2.6 2.4,-1.3 4.5,-2.7 6,-4.8 2.8,-3.8 5.3,-9.3 5.3,-16 v -2.7 l -0.2,-2.3 h -0.4 c -1.1,4.7 -4.2,8.4 -8,10.5 0,-3.6 1.3,-5.3 1.9,-8.4 0.4,-2.4 -1,-6.9 -1,-9.2 -0.4,0.3 -1.2,5.4 -2.5,7 -0.3,0.4 -5.1,5.2 -5.1,3.1 v -2.1 c 0,-3 1.9,-4.8 1.9,-8.2 0,-0.8 -3.5,-6 -4.1,-6.3 l 0.1,0.9 c 0,1.2 -0.4,4.1 -0.7,5 -0.2,0.5 -2.3,3 -2.6,3 -1.2,0 -2.5,-2.9 -2.5,-4.4 v -1.1 c 0,-2.9 2.8,-6.1 2.6,-8 l -0.5,-2.9 c -0.5,0.4 -1.2,3 -1.6,3.9 -0.6,1.3 -1.4,2.2 -2.2,3.2 C 95.4,82.4 91.7,87.1 91.7,88 z"
	    }
	  ];
	  icn["AC.IC.UNEXPLODED ORDNANCE"] = text("UXO");
	  icn["AC.IC.TOXIC INFECTIOUS MATERIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 104.6,116.2 c 0,-3.6 0.9,-4.6 1.5,-7.3 l -2.5,-1.2 c -2.4,2.1 -4.4,1.6 -6.8,0 l -2.5,1.4 c 0.2,2.6 2,3.9 1.5,8.7 -0.4,3.1 -1.1,5.8 -2.6,7.8 -2.9,3.9 -7,7.4 -13.7,7.4 h -1 c -4.7,0 -10.2,-3.2 -12,-6 l -1.2,0.6 c 3.3,4.9 11.4,10 19.8,10 h 0.2 c 6.4,0 10.9,-2.7 14.8,-5.3 3.7,2.5 7.6,5 13.8,5 h 3 c 3.8,0 8.2,-1.6 10.6,-3.2 1.8,-1.2 6.7,-4.5 7.2,-6.6 -1.1,-0.3 -0.5,-0.5 -1.3,-0.5 -0.5,0 -1.7,1.9 -2.2,2.3 -0.8,0.6 -1.8,1.1 -2.6,1.6 -1.4,0.9 -4.7,1.8 -7,1.8 h -1.8 c -7.9,0 -15.3,-7.7 -15.3,-15.8 v -0.8 z m 2.3,3.5 2.5,4.3 c 3.2,-0.8 7.7,-5.2 9.3,-7.8 2.2,-3.7 3.5,-7.8 3.5,-13.8 h -5.5 c 0.1,5.2 -0.1,7.2 -2.5,10.8 -1.2,1.8 -1.7,2.1 -3.2,3.6 -1,1 -3.6,2.2 -4.1,2.9 z m -28.6,-13.8 c 0,7.4 6.8,16.7 12.5,18 l 2.3,-4.5 c -6.5,-3.4 -9.5,-8 -9.5,-17.1 h -5.3 v 3.5 z m -2.5,-17 v 1 c 0,0.5 -5,3.2 -5.8,3.8 -1.6,1.1 -3.5,3.2 -4.7,4.8 -2.8,3.6 -4.8,8.1 -4.8,14.2 0,4.4 1,6 1.8,9.4 l 1.2,-0.6 c -0.1,-1.5 -0.8,-2.3 -0.8,-4 v -2 c 0,-7.8 7.9,-15.6 16,-15.6 h 1.8 c 2.6,0 5.9,1.3 7.5,2.2 2.2,1.3 3.6,3.6 5.3,4.8 l 2.3,-1 v -1.8 c 0,-2 1.6,-3.9 3.3,-4.3 v -3 c -7.6,-0.2 -15.3,-7.8 -15.3,-15.5 v -1.5 c 0,-4.1 2.1,-8.6 4.2,-10.6 1.3,-1.2 2.5,-2.3 4,-3.2 0.8,-0.5 5.1,-1.5 5.1,-2.5 v -1 c -6.6,1.6 -11.7,3.8 -15.4,8.5 -4.3,5.5 -5.7,9 -5.7,17.9 l 0,0 z m 27.6,-25.4 c 0,0.6 4.2,2.1 5,2.5 1.2,0.6 3.5,2.4 4.2,3.5 2.1,2.9 4.3,6 4.3,11 0,8.2 -7.4,16.3 -15.6,16.3 v 3 c 2.3,0.2 4.4,3.4 3.3,5.8 0.6,0.2 2.5,1.2 2.5,1.2 0.7,0 5,-7 14.3,-7 h 0.2 c 4.5,0 9,2.6 11.1,5 1.7,1.9 5.3,7.6 4.8,11.4 l -0.8,5.5 1.2,0.6 c 0.1,-0.9 0.8,-2.3 1.1,-3.6 0.3,-1.2 0.4,-3 0.4,-4.4 v -3.3 c 0,-8.4 -8.3,-18.8 -15,-20.3 0,-5 0.4,-6.4 -0.9,-10.9 -0.9,-2.8 -2.6,-6.4 -4.3,-8.3 -5.1,-5.3 -7.5,-7 -15.9,-9 v 1 l -4e-4,0 z m -15.8,22.6 2.8,4.8 c 3,-1.6 4.8,-3.3 9.5,-3.3 h 0.5 c 5.8,0 6.9,2.6 9.7,3.2 l 2.6,-4.7 c -9.5,-5 -15.7,-5 -25.1,0 z"
	    }
	  ];
	  icn["AC.IC.TOXIC GAS"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 90.2,102.3 c 0.6,-1.9 5.7,-1.9 11.3,-0 5.6,1.9 9.6,4.9 9,6.8 -0.6,1.9 -5.7,1.9 -11.3,0 -5.6,-1.9 -9.6,-4.9 -9,-6.8 z m 7.7,-22.2 c 10e-7,3.7 -1.7,6.7 -3.8,6.7 -2.1,-2e-6 -3.8,-3 -3.8,-6.7 2e-6,-3.7 1.7,-6.7 3.8,-6.7 2.1,0 3.8,3 3.8,6.7 z m 17,2.2 c 0,4.1 -2.8,7.3 -6.3,7.3 -3.5,2e-6 -6.3,-3.3 -6.3,-7.3 0,-4.1 2.8,-7.3 6.3,-7.3 3.5,0 6.3,3.3 6.3,7.3 z m -7.9,49.6 c -1,2.9 -8.5,2.9 -16.6,0 -8.2,-2.9 -13.9,-7.6 -12.9,-10.5 1,-2.9 8.5,-2.9 16.6,-0 8.2,2.9 13.9,7.6 12.9,10.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      d: "M 107.5 64.3 C 102.2 64.2 96.9 67.1 92.8 71.6 C 90.6 73.6 89.2 76.8 89.2 80.4 C 89.2 83 90 85.4 91.2 87.3 C 92.1 89.9 92.7 91.8 92.7 94.5 L 92.4 96.7 L 90.7 101.6 C 92.3 100.5 96.7 100.7 101.5 102.3 C 106.6 104 110.4 106.7 110.5 108.6 L 112 104.2 C 115.9 104 120.5 96.9 122.7 87.6 C 124.9 77.9 123.5 69.3 119.8 67.9 C 118.4 66.6 116.1 65.5 112.8 65.3 C 111.1 64.6 109.3 64.3 107.5 64.3 z M 94.1 73.4 C 94.4 73.4 94.6 73.4 94.8 73.5 C 95.1 73.6 95.3 73.8 95.6 73.9 C 96.2 74.4 96.8 75.3 97.2 76.3 C 97.5 77.1 97.7 77.9 97.8 78.7 C 97.9 79.2 97.9 79.6 97.9 80.1 C 97.9 80.5 97.9 81 97.8 81.4 C 97.7 82.3 97.5 83.1 97.2 83.8 C 96.9 84.7 96.4 85.4 95.9 85.9 C 95.6 86.2 95.2 86.5 94.8 86.6 C 94.7 86.6 94.6 86.7 94.5 86.7 C 94.3 86.7 94.2 86.7 94.1 86.7 C 93.8 86.7 93.6 86.7 93.3 86.6 C 93 86.5 92.6 86.2 92.3 85.9 C 92.2 85.8 92.1 85.7 92 85.6 C 91.6 85.1 91.2 84.5 91 83.8 C 90.8 83.4 90.7 83.1 90.6 82.7 C 90.4 81.9 90.3 81 90.3 80.1 C 90.3 79.1 90.4 78.3 90.6 77.5 C 90.7 77.1 90.8 76.7 91 76.3 C 91.2 75.6 91.6 75 92 74.5 C 92.2 74.3 92.4 74.1 92.6 73.9 C 92.9 73.8 93.1 73.6 93.3 73.5 C 93.6 73.4 93.8 73.4 94.1 73.4 z M 108.6 75 C 110.4 75 112.1 75.9 113.3 77.3 C 113.3 77.4 113.4 77.5 113.5 77.6 C 113.5 77.6 113.5 77.6 113.5 77.7 C 113.6 77.8 113.7 78 113.8 78.2 C 113.8 78.3 113.9 78.3 113.9 78.4 C 114 78.5 114 78.5 114 78.6 C 114.1 78.7 114.2 78.8 114.2 79 C 114.3 79.1 114.3 79.3 114.4 79.4 C 114.4 79.5 114.5 79.5 114.5 79.6 C 114.5 79.7 114.6 79.9 114.6 80 C 114.6 80.1 114.6 80.2 114.7 80.3 C 114.7 80.4 114.7 80.6 114.8 80.8 C 114.9 81.3 114.9 81.8 114.9 82.3 C 114.9 84.6 114 86.6 112.6 88 C 112 88.6 111.3 89 110.5 89.3 C 110.3 89.4 110.1 89.5 109.9 89.5 C 109.5 89.6 109 89.7 108.6 89.7 C 108.2 89.7 107.7 89.6 107.3 89.5 C 107.3 89.5 107.3 89.5 107.3 89.5 C 107.1 89.5 106.9 89.4 106.7 89.3 C 105.9 89 105.2 88.6 104.6 88 C 104 87.4 103.5 86.6 103.1 85.8 C 102.9 85.4 102.7 85 102.6 84.5 C 102.5 84.3 102.5 84 102.4 83.8 C 102.4 83.5 102.4 83.3 102.3 83.1 C 102.3 82.8 102.3 82.6 102.3 82.3 C 102.3 82 102.3 81.8 102.3 81.5 C 102.3 81.5 102.4 81.5 102.4 81.4 C 102.4 81 102.5 80.5 102.6 80.1 C 102.6 80.1 102.6 80.1 102.6 80 C 103.4 77.1 105.8 75 108.6 75 z M 88.8 104 C 86.6 104 84.8 104.4 83.9 105.2 L 83.8 105.2 L 83.7 105.3 C 83.4 105.6 83.2 105.9 83.1 106.2 C 83 106.5 83 106.8 83 107.2 L 78.1 120.5 C 80.2 118.5 86.9 118.7 94.2 121.3 C 101.2 123.8 106.4 127.7 107.1 130.6 L 111.8 117.8 C 112.2 117.5 112.5 117.2 112.7 116.8 C 113.7 113.8 107.9 109.1 99.8 106.2 C 95.7 104.8 91.8 104 88.8 104 z M 82 120.8 C 79 120.8 76.9 121.5 76.4 123 C 75.4 125.9 81.1 130.7 89.3 133.6 C 97.4 136.5 104.9 136.5 105.9 133.6 C 107 130.6 101.2 125.9 93 123 C 89 121.5 85 120.8 82 120.8 z M 86.1 125.6 C 87.4 125.5 89.4 125.9 91.5 126.6 C 94.8 127.8 97.2 129.6 96.9 130.6 C 96.5 131.6 93.5 131.5 90.1 130.3 C 86.8 129.1 84.4 127.3 84.7 126.3 C 84.9 125.9 85.4 125.7 86.1 125.6 z "
	    }
	  ];
	  icn["AC.IC.AFTERSHOCK"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 99,62.5 -0,0 -0,0 -0.9,0 -0,0 -0,0 -0.9,0.1 -0,0 -0,0 -0.9,0.1 -0,0 -0,0 -0.9,0.1 -0,0 -0,0 -0.9,0.1 -0,0 -0,0 -0.9,0.1 -0,0 -0,0 -0.9,0.2 -0,0 -0,0 -0.7,0.1 0.6,2.7 0.7,-0.1 0,-0 0.8,-0.1 0,-0 0.8,-0.1 0,0 0.8,-0.1 0,0 0.9,-0.1 0,0 0.9,-0.1 0,0 0.9,-0.1 0,0 0.9,-0 0,0 0.9,-0 0,0 0,0 0.9,0 0,0 0.9,0 0,0 0.1,0 0.2,-2.8 -0.1,-0 -0,0 -0,0 -0.9,-0 -0,0 -0,0 -1,-0 -0,0 -0,0 z m 8.8,3.6 0.2,0 0,0 0.8,0.2 0,0 0.8,0.2 0,0 0.8,0.2 0,0 0.8,0.3 0,0 0,0 0.8,0.3 0,0 0.8,0.3 0,0 0.8,0.3 0,0 0.8,0.3 0,0 0.8,0.3 0,0 0.8,0.4 0,0 0,0 0.7,0.4 0,0 0.1,0 1.3,-2.5 -0.1,-0.1 -0,-0 -0,0 -0.8,-0.4 -0,-0 -0,0 -0.8,-0.4 -0,0 -0,-0 -0.8,-0.4 -0,-0 -0,0 -0.8,-0.4 -0,0 -0,-0 -0.8,-0.3 -0,-0 -0,0 -0.8,-0.3 -0,-0 -0,0 -0.8,-0.3 -0,0 -0,-0 -0.9,-0.3 -0,0 -0,0 -0.9,-0.3 -0,0 -0,0 -0.9,-0.2 -0,0 -0,-0 -0.9,-0.2 -0,0 -0,0 -0.2,-0.1 z m -22.7,-0.7 -0,0 -0,0 -0.8,0.4 -0,0 -0,0 -0.8,0.4 -0,0 -0,0 -0.8,0.4 -0,0 -0,0 -0.8,0.4 -0,0 -0,0 -0.8,0.4 -0,0 -0,0 -0.8,0.5 -0,0 -0,0 -0.8,0.5 -0,0 -0,0 -0.7,0.5 -0,0 -0,0 -0.7,0.5 -0,0 -0,0 -0.7,0.5 -0,0 -0,0 -0.7,0.5 -0,0 -0,0 -0.1,0.1 1.7,2.2 0.1,-0.1 0,-0 0.7,-0.5 0,-0 0.7,-0.5 0,-0 0.7,-0.5 0,-0 0.7,-0.5 0,-0 0.7,-0.4 0,-0 0.7,-0.4 0,-0 0.7,-0.4 0,-0 0.7,-0.4 0,-0 0,0 0.8,-0.4 0,-0 0.8,-0.3 0,-0 0.8,-0.3 0,-0 0.3,-0.1 -1,-2.6 z m 36.9,7.3 0.6,0.5 0,0 0.6,0.5 0,0 0.6,0.5 0,0 0.6,0.5 0,0 0.6,0.6 0,0 0,0 0.6,0.6 0,0 0.6,0.6 0,0 0.5,0.6 0,0 0.5,0.6 0,0 0.5,0.6 0,0 0.5,0.6 0,0 0.4,0.5 2.3,-1.7 -0.4,-0.6 -0,-0 0,-0 -0.6,-0.7 -0,-0 0,-0 -0.6,-0.7 -0,-0 -0,-0 -0.6,-0.7 -0,-0 -0,-0 -0.6,-0.7 -0,-0 -0,-0 -0.6,-0.6 -0,-0 -0,-0 -0.6,-0.6 -0,-0 -0,-0 -0.6,-0.6 -0,-0 -0,0 -0.7,-0.6 -0,-0 -0,0 -0.7,-0.6 -0,-0 -0,-0 -0.7,-0.6 -0,-0 -0,-0 -0.6,-0.5 z m -51,2.7 -0,0 -0,0 -0.6,0.7 -0,0 -0,0 -0.6,0.7 0,0 -0,0 -0.6,0.7 0,0 -0,0 -0.5,0.7 -0,0 -0,0 -0.5,0.7 -0,0 -0,0 -0.5,0.7 -0,0 0,0 -0.5,0.7 -0,0 0,0 -0.5,0.8 0,0 -0,0 -0.4,0.8 -0,0 0,0 -0.4,0.8 0,0 -0,0 -0.3,0.6 2.5,1.3 0.3,-0.6 0,-0 0.4,-0.7 0,-0 0.4,-0.7 0,-0 0.4,-0.7 0,-0 0.4,-0.7 0,-0 0.5,-0.7 0,-0 0.5,-0.7 0,-0 0.5,-0.7 0,-0 0.5,-0.6 0,-0 0.5,-0.6 0,-0 0.5,-0.6 0,-0 0.5,-0.5 -2.1,-1.9 z m 60.9,9.4 0.1,0.1 0,0 0,0 0.3,0.7 0,0 0.3,0.7 0,0 0.3,0.8 0,0 0.3,0.8 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0.2,0.8 0,0 0.2,0.8 0,0 0.2,0.8 0,0 0.2,0.8 0,0 0.2,0.8 0,0 0,0.2 2.8,-0.5 -0,-0.3 -0,-0 0,-0 -0.2,-0.9 0,-0 0,-0 -0.2,-0.9 0,-0 -0,-0 -0.2,-0.9 0,-0 -0,-0 -0.2,-0.9 0,-0 -0,-0 -0.3,-0.8 -0,-0 0,-0 -0.3,-0.8 0,-0 -0,-0 -0.3,-0.8 0,-0 -0,-0 -0.3,-0.8 -0,-0 0,-0 -0.3,-0.8 0,-0 -0,-0 -0.3,-0.8 -0,-0 -0,-0 -0.4,-0.8 -0,-0 0,-0 -0.1,-0.2 z m -68.8,4.9 -0,0 0,0 -0.2,0.9 -0,0 0,0 -0.2,0.9 -0,0 0,0 -0.2,0.9 0,0 0,0 -0.2,0.9 0,0 -0,0 -0.1,0.9 0,0 0,0 -0.1,0.9 -0,0 0,0 -0.1,0.9 0,0 -0,0 -0.1,0.9 0,0 0,0 -0.1,0.9 0,0 0,0 -0,0.9 0,0 0,0 -0,0.9 0,0 0,0 0,0 1.4,-0 0.3,0 1.1,0 0,-0 0,-0.9 0,-0 0,-0.9 -0,0 0.1,-0.8 0,-0 0.1,-0.9 -0,0 0.1,-0.9 0.1,-0.9 -0,0 0.1,-0.8 0,-0 0.2,-0.8 0,-0 0.2,-0.8 0,-0 0.2,-0.8 0,-0 0.2,-0.8 0,-0 0.1,-0.2 -2.7,-0.8 z m 73,10.3 -0.6,0 0,0 0,0 -0,0.9 0,0 -0,0.9 0,0 -0.1,0.8 0,0 -0.1,0.9 0,0 -0.1,0.9 -0.1,0.9 0,0 -0.1,0.8 0,0 -0.2,0.8 -0,0 -0.2,0.8 -0,0 -0.2,0.8 0,0 -0.2,0.8 -0,0 -0.1,0.2 2.7,0.8 0.1,-0.2 0,-0 0,-0 0.2,-0.9 0,-0 0,-0 0.2,-0.9 0,-0 0,-0 0.2,-0.9 0,-0 0,-0 0.2,-0.9 0,-0 0,-0 0.1,-0.9 0,-0 0,-0 0.1,-0.9 0,-0 0,-0 0.1,-0.9 0,-0 0,-0 0.1,-0.9 0,-0 0,-0 0.1,-0.9 0,-0 0,-0 0,-0.9 0,-0 0,-0 0,-0.9 -1.4,-0 1.4,-0 0,-0 z m -73.9,6.4 0,0.3 0,0 0,0 0.2,0.9 0,0 0,0 0.2,0.9 0,0 0,0 0.2,0.9 0,0 0,0 0.2,0.9 0,0 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0,0 0.3,0.8 0,0 0,0 0.4,0.8 0,0 0,0 0.1,0.2 2.5,-1.3 -0.1,-0.1 -0,-0 -0.3,-0.7 -0,-0 -0.3,-0.7 -0,-0 -0.3,-0.8 -0,-0 -0.3,-0.8 -0,-0 -0.3,-0.8 -0,-0 0,-0 -0.3,-0.8 -0,-0 -0.2,-0.8 -0,-0 -0.2,-0.8 0,-0 -0.2,-0.8 -0,-0 -0.2,-0.8 -0,-0 -0.2,-0.8 0,-0 -0,-0.2 z m 69.4,9.4 -0,0 -0.4,0.7 -0,0 -0.4,0.7 -0,0 -0.4,0.7 -0,0 -0.4,0.7 -0,0 -0.5,0.7 -0,0 -0.5,0.7 -0,0 -0.5,0.7 -0,0 -0.5,0.6 -0,0 -0.5,0.6 -0,0 -0.5,0.6 -0,0 -0.5,0.6 2.1,1.9 0.5,-0.6 0,-0 0,-0 0.6,-0.7 0,-0 0,-0 0.6,-0.7 0,-0 0,-0 0.6,-0.7 0,-0 0,-0 0.5,-0.7 0,-0 0,-0 0.5,-0.7 0,-0 0,-0 0.5,-0.7 0,-0 0,-0 0.5,-0.7 0,-0 0,-0 0.5,-0.8 0,-0 0,-0 0.4,-0.8 0,-0 0,-0 0.4,-0.8 0,-0 0,-0 0.3,-0.6 -2.5,-1.3 z m -62.8,6.1 0.4,0.6 0,0 0,0 0.6,0.7 0,0 0,0 0.6,0.7 0,0 0,0 0.6,0.7 0,0 0,0 0.6,0.7 0,0 0,0 0.6,0.6 0,0 0,0 0.6,0.6 0,0 0,0 0.6,0.6 0,0 0,0 0.7,0.6 0,0 0,0 0.7,0.6 0,0 0,0 0.7,0.6 0,0 0,0 0.6,0.5 1.7,-2.2 -0.6,-0.5 -0,-0 -0.6,-0.5 -0,-0 -0.6,-0.5 -0,-0 -0.6,-0.5 -0,-0 -0.6,-0.6 -0,-0 -0,-0 -0.6,-0.6 -0,-0 -0.6,-0.6 -0,-0 -0.5,-0.6 -0,-0 -0.5,-0.6 -0,-0 -0.5,-0.6 -0,-0 -0.5,-0.6 -0,-0 -0.4,-0.5 z m 53.1,5.4 -0,0 -0.7,0.5 -0,0 -0.7,0.5 -0,0 -0.7,0.5 -0,0 -0.7,0.5 -0,0 -0.7,0.4 -0,0 -0.7,0.4 -0,0 -0.7,0.4 -0,0 -0.7,0.4 -0,0 -0,0 -0.8,0.4 -0,0 -0.8,0.3 -0,0 -0.8,0.3 -0,0 -0.3,0.1 1,2.6 0.4,-0.1 0,-0 0,0 0.8,-0.4 0,0 0,-0 0.8,-0.4 0,-0 0,0 0.8,-0.4 0,0 0,-0 0.8,-0.4 0,0 0,-0 0.8,-0.4 0,-0 0,0 0.8,-0.5 0,0 0,-0 0.8,-0.5 0,-0 0,0 0.7,-0.5 0,0 0,-0 0.7,-0.5 0,-0 0,0 0.7,-0.5 0,-0 0,-0 0.7,-0.5 0,-0 0,-0 0.1,-0.1 -1.7,-2.2 z m -40.4,5.6 0.1,0.1 0,0 0,0 0.8,0.4 0,0 0,0 0.8,0.4 0,0 0,0 0.8,0.4 0,0 0,0 0.8,0.4 0,0 0,0 0.8,0.3 0,0 0,0 0.8,0.3 0,0 0,0 0.8,0.3 0,0 0,0 0.9,0.3 0,0 0,0 0.9,0.3 0,0 0,0 0.9,0.2 0,0 0,0 0.9,0.2 0,0 0,0 0.2,0.1 0.6,-2.7 -0.2,-0 -0,-0 -0.8,-0.2 -0,-0 -0.8,-0.2 -0,-0 -0.8,-0.2 -0,-0 -0.8,-0.3 -0,-0 -0,0 -0.8,-0.3 0,-0 -0.8,-0.3 -0,-0 -0.8,-0.3 -0,-0 -0.8,-0.3 -0,-0 -0.8,-0.3 -0,-0 -0.8,-0.4 -0,0 -0,-0 -0.7,-0.4 -0,-0 -0.1,-0 z m 25.6,1.1 -0,0 -0.8,0.1 -0,0 -0.8,0.1 -0,0 -0.8,0.1 0,-0 -0.9,0.1 0,-0 -0.9,0.1 -0,0 -0.9,0.1 -0,0 -0.9,0 -0,0 -0.9,0 -0,0 -0,0 -0.9,-0 -0,0 -0.9,-0 -0,0 -0.1,0 -0.2,2.8 0.1,0 0,0 0,0 0.9,0 0,0 0,0 1,0 0,0 0,0 1,-0 0,0 0,0 0.9,-0 0,0 0,0 0.9,-0.1 0,0 0,0 0.9,-0.1 0,-0 0,0 0.9,-0.1 0,0 0,0 0.9,-0.1 0,-0 0,0 0.9,-0.1 0,0 0,0 0.9,-0.2 0,0 0,0 0.7,-0.1 -0.6,-2.7 z m -7.2,-58.9 -0,1.2 0.1,0 0,0 1.3,0 0,-0 1.3,0.1 1.1,0.1 0.1,0 0,0 1.1,0.2 0.1,0 0.7,0.1 0.7,-3.1 -0.7,-0.2 -0,0 -0,-0 -1.3,-0.2 -0,0 -0,-0 -1.3,-0.2 -0,0 -0,0 -1.3,-0.1 -0,0 -0.1,0 -1.3,-0 -0,0 -0,0 -0,0 z m -5.5,-1.4 -0,0 -0,0 -1.3,0.3 -0,0 -0,0 -1.2,0.3 -0,0 -0,0 -1.2,0.4 -0,0 -0,0 -0.9,0.3 1.1,3 0.8,-0.3 0.1,-0 0,0 1.1,-0.4 0,-0 1.1,-0.3 1.2,-0.3 0.1,-0 1.1,-0.2 -0.6,-3.1 z m 14.8,4.4 0.2,0.1 0.1,0 1.1,0.5 1,0.5 0.1,0 1,0.5 0,0 0,0 0.9,0.6 0.1,0 0.5,0.4 1.8,-2.6 -0.6,-0.4 -0,-0 -0,-0 -1.1,-0.7 -0,-0 -0,-0 -1.1,-0.6 -0,-0 -0,-0 -1.1,-0.6 -0,-0 -0,-0 -1.1,-0.5 -0,-0 -0,-0 -0.3,-0.1 z m -23.6,-1.1 -0,0 -0,0 -1.1,0.7 -0,0 -0,0 -1,0.7 -0,0 -0,0 -1,0.8 -0,0 -0,0 -0.9,0.8 -0,0 -0,0 -0.8,0.7 2.2,2.4 0.7,-0.7 0.1,-0.1 0.8,-0.7 0,-0 0,-0 0.9,-0.7 0.1,-0 0.9,-0.6 0.1,-0 0.9,-0.6 0,-0 0,-0 -0.4,-0.6 -1.2,-2.2 z m 31.5,6.2 0.1,0.1 0,0 0,0 0.8,0.8 0.1,0.1 0.7,0.8 0.1,0.1 0.7,0.8 0,0 0,0.1 0.6,0.9 0,0.1 0,0 0.5,0.7 2.7,-1.8 -0.5,-0.8 -0,-0 -0,-0 -0.7,-1 -0,-0 -0,-0 -0.8,-0.9 -0,-0 -0,-0 -0.8,-0.9 -0,-0 -0,-0 -0.9,-0.9 -0,-0 -0,-0 -0.1,-0.1 z m -40.1,1.8 -0,0 -0,0 -0.7,1 -0,0 -0,0 -0.6,1.1 -0,0 -0,0 -0.6,1.1 -0,0 -0,0 -0.5,1.1 -0,0 -0,0 -0,0.1 2.4,1 0.5,0.3 0,-0 0.5,-1 0,-0.1 0,-0 0.5,-0.9 0,-0.1 0.6,-0.9 0.6,-1 0,-0 0,-0.1 0.6,-0.8 -2.6,-1.9 z m 45.4,5.9 0.4,1.1 0,0.1 0.3,1 0,0.1 0.3,1.1 0.3,1.1 0.2,1 3.1,-0.6 -0.2,-1.1 0,-0 -0,-0 -0.3,-1.2 -0,-0 -0,-0.1 -0.3,-1.2 -0,-0 -0,-0 -0.4,-1.2 -0,-0 -0,-0 -0.5,-1.1 z m -49.6,3.8 -0,0 0,0 -0.2,1.3 0,0 -0,0 -0.2,1.3 -0,0 0,0 -0.1,1.3 0,0 0,0.1 -0,1.3 0,0 0,0 0,0 1.9,-0 1.3,0 0,-0.1 0,-0 0,-1.2 0.1,-1.1 0,0 0.1,-1.2 0,-0.1 0,-0 0.2,-1.1 0.2,-0.9 -3.1,-0.7 z m 52.8,5.5 -1.2,-0 0,0.1 0,0 -0,1.2 -0.1,1.1 -0,0 -0.1,1.2 0,0 -0,0.1 -0.2,1.1 -0.2,0.9 3.1,0.8 0.2,-0.9 0,-0 0,-0 0.2,-1.3 0,-0 0,-0 0.2,-1.3 0,-0 0,-0 0.1,-1.3 0,-0 0,-0.1 0,-1.3 -1.6,-0 1.6,-0 0,-0 z m -53,4.3 0.2,1.1 0,0 0,0 0.3,1.2 0,0 0,0.1 0.3,1.2 0,0 0,0 0.4,1.2 0,0 0,0 0.5,1.1 3,-1.2 -0.4,-1 -0,-0.1 -0.3,-1 -0,-0.1 -0.3,-1.1 -0.3,-1.1 -0.2,-1 z m 49.9,4.9 -0.5,1 -0,0.1 -0,0 -0.5,1 -0,0.1 -0.6,0.9 -0.6,1 -0,0 -0,0.1 -0.6,0.8 2.6,1.9 0.6,-0.9 0,-0 0,-0 0.7,-1 0,-0 0,-0 0.6,-1.1 0,-0 0,-0 0.6,-1.1 0,-0 0,-0 0.5,-1.1 0,-0 0,-0 0,-0 -2.2,-0.9 -0.8,-0.3 z m -46,5 0.5,0.8 0,0 0,0 0.7,1 0,0 0,0 0.8,0.9 0,0 0,0 0.8,0.9 0,0 0,0 0.9,0.9 0,0 0,0 0.1,0.1 2.2,-2.3 -0.1,-0.1 -0,-0 -0,-0 -0.8,-0.8 -0.1,-0.1 -0.7,-0.8 -0.1,-0.1 -0.7,-0.8 -0,-0 -0,-0.1 -0.6,-0.9 -0.1,-0.1 -0.5,-0.7 z m 40,3.3 -0.1,0.1 -0.8,0.7 -0,0 -0,0 -0.9,0.7 -0.1,0 -0.9,0.6 -0.1,0 -0.9,0.6 0,-0 -0.1,0 0,0 -0,0 0.3,0.4 1.3,2.4 0,-0 0,-0 0,-0 1.1,-0.7 0,-0 0,-0 1,-0.7 0,-0 0,-0 1,-0.8 0,-0 0,-0 0.9,-0.8 0,-0 0,-0 0.8,-0.7 -2.2,-2.4 z m -32.6,4.4 0.6,0.4 0,0 0,0 1.1,0.7 0,0 0,0 1.1,0.6 0,0 0,0 1.1,0.6 0,0 0,0 1.1,0.5 0,0 0,0 0.3,0.1 1.1,-3 -0.2,-0.1 -0.1,-0 -1.1,-0.5 -1,-0.5 -0.1,-0 -1,-0.6 0,0 -0.9,-0.6 -0.1,-0 -0.5,-0.4 z m 24.5,0.3 -0.1,0 -1.1,0.3 -0.1,0 -1.1,0.3 -1.2,0.3 -0.1,0 -1.1,0.2 0.6,3.1 1.2,-0.2 0,0 0,-0 1.3,-0.3 0,0 0,-0 1.2,-0.3 0,-0 0,-0 1.2,-0.4 0,-0 0,-0 0.9,-0.3 -1.1,-3 z m -14.8,3.9 0.7,0.2 0,0 0,0 1.3,0.2 0,0 0,0 1.3,0.2 0,0 0,0 1.3,0.1 0,0 0.1,0 1.3,0 0,0 0,0 0,0 -0.1,-1.6 0,-0.1 0,-1.5 -0.1,0 -1.3,-0 0,0 -1.3,-0.1 -1.1,-0.1 -0.1,-0 -0,0 -1.1,-0.2 -0.1,-0 -0.7,-0.1 z m 6.3,-43.1 -0.4,0 0.1,4 0.3,-0 0.1,0 0.1,0 0.6,0 0.1,0 0.6,0 0.1,0 0.6,0.1 0.1,0 0.6,0.1 0.7,0.1 0.1,0 0.1,0 0.6,0.2 0.5,0.2 0.1,0 0.5,0.2 0.1,0 0,0 0.5,0.2 0.1,0 0.4,0.2 1.8,-3.6 -0.5,-0.3 -0,-0 -0.1,-0 -0.7,-0.3 -0.1,-0 -0.1,-0 -0.7,-0.3 -0,-0 -0.1,-0 -0.7,-0.2 -0.1,-0 -0,-0 -0.7,-0.2 -0.1,-0 -0.1,-0 -0.7,-0.2 -0.1,-0 -0.1,-0 -0.8,-0.1 -0,-0 -0.1,-0 -0.8,-0.1 -0.1,-0 -0.1,0 -0.8,-0.1 -0.1,0 -0.1,0 -0.8,-0 -0.1,-0 z m -5.1,0.7 -0.1,0 -0,0 -0.7,0.2 -0.1,0 -0.1,0 -0.7,0.3 -0,0 -0.1,0 -0.7,0.3 -0.1,0 -0,0 -0.7,0.3 -0,0 -0,0 -0.7,0.4 -0,0 -0.1,0 -0.6,0.4 -0,0 -0,0 -0.6,0.4 -0,0 -0,0 -0.6,0.4 -0,0 -0,0 -0.6,0.5 -0,0 -0,0 -0.5,0.5 -0,0 -0,0 -0.2,0.2 2.9,2.8 0.1,-0.1 0.1,-0.1 0.4,-0.4 0.1,-0.1 0.4,-0.3 0,-0 0.1,-0.1 0.4,-0.3 0.5,-0.4 0.1,-0.1 0.6,-0.3 0,-0 0.5,-0.3 0.1,-0 0.5,-0.3 0.1,-0 0.5,-0.2 0,0 0.1,-0 0.6,-0.2 0,-0 0.5,-0.2 0.1,-0 0.1,-0 -1.1,-3.9 z m 14.2,6.7 0.4,0.3 0.5,0.5 0.1,0.1 0.3,0.4 0.1,0.1 0.3,0.4 0.1,0.1 0.3,0.4 0,0 0,0.1 0.3,0.4 0.1,0.1 0.3,0.5 0,0 0,0.1 0.3,0.5 0,0.1 0.2,0.5 0,0.1 0.2,0.5 0,0.1 0,0 0.2,0.6 3.8,-1.3 -0.2,-0.7 -0,-0.1 -0,-0.1 -0.3,-0.7 -0,-0.1 -0,-0 -0.3,-0.7 -0,-0.1 -0,-0 -0.3,-0.7 -0,-0.1 -0,-0 -0.4,-0.6 -0,-0 -0,-0.1 -0.4,-0.6 -0,-0 -0,-0.1 -0.4,-0.6 -0,-0.1 -0,-0 -0.5,-0.6 -0,-0 -0,-0 -0.5,-0.5 -0,-0 -0,-0 -0.5,-0.5 -0,-0 -0,-0 -0.5,-0.4 z m -24.4,1.4 -0,0 -0,0.1 -0.3,0.7 -0,0 -0,0.1 -0.3,0.7 -0,0 -0,0.1 -0.3,0.7 -0,0.1 -0,0.1 -0.2,0.7 -0,0.1 -0,0.1 -0.2,0.7 -0,0.1 0,0.1 -0.2,0.7 -0,0.1 -0,0.1 -0.1,0.7 -0,0.1 0,0.1 -0.1,0.8 0,0.1 -0,0.1 -0.1,0.8 0,0.1 0,0.1 -0,0.8 0,0.1 0,0.1 0,0.3 4,-0.1 -0,-0.2 0,-0.1 0,-0 0,-0.7 0,-0.6 0,-0.1 0,-0 0.1,-0.5 0.1,-0.6 0,-0.1 0.1,-0.5 0,-0 0,-0.1 0.1,-0.5 0.2,-0.6 0,-0.1 0,-0 0.2,-0.5 0.3,-0.6 0.1,-0.1 0.3,-0.5 0,-0.1 0,-0 0,-0 -3.5,-2 z m 28.7,7.6 0,0.5 0,0.1 0,0 -0,0.6 -0.1,0.7 -0,0.1 0,0.1 -0.1,0.6 -0.1,0.5 -0,0.1 -0.1,0.5 0,0 -0,0.1 -0.1,0.5 -0,0.1 -0.2,0.5 -0,0 -0,0.1 -0.2,0.5 -0,0 -0,0.1 -0.2,0.5 -0,0.1 -0.3,0.5 -0,0.1 -0,0 -0.2,0.3 3.5,2 0.2,-0.4 0,-0.1 0,-0 0.3,-0.7 0,-0 0,-0.1 0.3,-0.7 0,-0 0,-0.1 0.3,-0.7 0,-0.1 0,-0.1 0.2,-0.7 0,-0 0,-0.1 0.2,-0.7 0,-0.1 0,-0.1 0.2,-0.7 0,-0.1 0,-0.1 0.1,-0.7 0,-0.1 0,-0.1 0.1,-0.8 0,-0.1 0,-0.1 0.1,-0.8 0,-0.1 0,-0.1 0,-0.8 -2,-0.1 2,-0.1 -0,-0.6 z m -30.1,5.3 0.1,0.3 0,0.1 0,0 0.2,0.7 0,0.1 0,0.1 0.3,0.7 0,0.1 0,0 0.3,0.7 0,0.1 0,0 0.3,0.7 0,0 0,0.1 0.4,0.6 0,0 0,0.1 0.4,0.6 0,0 0,0 0.4,0.6 0,0 0,0 0.5,0.6 0,0 0,0 0.5,0.5 0,0 0,0 0.5,0.5 0,0 0,0 0.2,0.2 2.7,-2.9 -0.2,-0.1 -0.1,-0.1 -0,-0 -0.4,-0.4 -0.1,-0.1 -0.4,-0.4 -0,-0.1 -0,-0 -0.3,-0.4 -0.1,-0.1 -0.4,-0.5 -0.3,-0.4 -0.1,-0.1 -0.3,-0.5 -0,-0 -0,-0.1 -0.3,-0.5 -0.1,-0.1 -0.2,-0.5 -0,-0.1 -0,-0 -0.2,-0.5 -0,-0.1 -0,-0.1 -0.2,-0.6 -0,-0.1 z m 25.8,4.8 -0.1,0.1 -0.4,0.3 -0,0 -0.1,0.1 -0.4,0.3 -0.1,0.1 -0.5,0.3 -0,0 -0.1,0 -0.5,0.3 -0.1,0 -0,0 -0.6,0.3 -0.5,0.3 -0.1,0 -0.5,0.2 -0,0 -0.1,0 -0.5,0.2 -0.1,0 -0.5,0.2 -0.5,0.1 1.1,3.9 0.5,-0.1 0,-0 0.1,-0 0.7,-0.2 0.1,-0 0,-0 0.7,-0.3 0.1,-0 0.1,-0 0.7,-0.3 0.1,-0 0,-0 0.7,-0.3 0.1,-0 0,-0 0.7,-0.4 0,-0 0,-0 0.6,-0.4 0,-0 0.1,-0 0.6,-0.4 0,-0 0,-0 0.6,-0.5 0,-0 0,-0 0.6,-0.5 0,-0 0,-0 0.5,-0.5 -2.7,-2.9 z m -15.5,1.8 -1.9,3.5 0.1,0.1 0,0 0,0 0.7,0.3 0,0 0.1,0 0.7,0.3 0.1,0 0,0 0.7,0.3 0.1,0 0.1,0 0.7,0.2 0,0 0.1,0 0.7,0.2 0,0 0.1,0 0.8,0.2 0.1,0 0.1,0 0.8,0.1 0.1,0 0.1,0 0.8,0.1 0.1,0 0.1,0 0.8,0.1 0.1,0 0.1,0 0.8,0 0.1,0 0.1,0 0.1,0 -0.1,-4 -0.1,0 -0.1,0 -0.6,-0 -0.1,0 -0.6,-0 0,-0 -0.7,-0.1 -0,0 -0.1,-0 -0.6,-0.1 -0.1,-0 -0.6,-0.1 0,-0 -0.7,-0.2 -0.5,-0.2 0,-0 -0.6,-0.2 -0.1,-0 -0,0 -0.5,-0.2 -0.1,-0 -0.5,-0.3 -0.1,-0.1 z M 100,93.2 c -3.5,-4e-4 -6.7,2.9 -6.7,6.5 l 0,0.4 c 0,3.5 3,6.5 6.5,6.5 l 0.4,0 c 3.4,0 6.5,-3 6.5,-6.3 l 0,-0.9 c 0,-3.4 -3.3,-6.3 -6.8,-6.3 z"
	    }
	  ];
	  icn["AC.IC.AVALANCHE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 115.7,87.3 -3.6,0.9 11,38 -4.6,1.5 9.6,9.2 3.1,-13 -4.6,1.4 z m 3,46.4 -8.5,-10 4.3,-1.2 -11.2,-40.6 -34.5,51.9 z m -12.1,-59.8 0,8.4 1.6,0 0,-8.3 7.1,4.3 0.8,-1.3 -7.4,-4.1 7.5,-4.4 -1,-1.2 -7,4 0,-8.2 -1.6,0 0,8.2 -7.4,-4 -0.6,1.1 7.2,4.4 -7.2,4.1 0.6,1.4 z"
	    }
	  ];
	  icn["AC.IC.EARTHQUAKE EPICENTER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 62.8,99.8 c 0,-10.8 4.9,-20.2 10.3,-25.7 5.1,-5.1 14.8,-11.3 24.7,-11.3 h 4.1 c 4.9,0 10.5,1.9 13.9,3.6 5,2.5 6.4,4 10.4,7 4.6,3.6 11.1,15.4 11.1,23.8 v 5.3 c 0,17.4 -17.5,34.6 -35.1,34.6 h -4.6 c -10.3,0 -19.4,-6.2 -24.6,-11.4 -5.5,-5.4 -10.3,-15 -10.3,-25.8 z m 39.4,38.5 c 10.7,0 20,-6.3 25.5,-11.8 6.7,-6.7 9.9,-13.9 10.7,-26.5 1.3,-19.2 -17.7,-38.1 -36.2,-38.1 h -4.8 c -10.3,0 -20.1,6.6 -25.2,12.1 -3,3.2 -5.6,6.7 -7.5,11.1 -1.1,2.8 -3.5,11.3 -3,15.3 0.7,6.4 0.9,10.4 3.4,15.3 2.2,4.4 4,7.6 7.3,11 5,5.3 15.2,11.7 25.3,11.7 h 4.6 z m -3.9,-11.6 c -13.6,0 -24.7,-13.1 -25.2,-26.8 -0.5,-13.2 12.5,-26.4 25.4,-26.4 h 2.9 c 12.8,0 25.2,12.4 25.2,25.2 v 2.4 c 0,12.8 -12.4,25.7 -25.2,25.7 h -3.1 v -0 z m -27.1,-26.9 c 0,8.8 3.7,16 8.1,20.5 2.3,2.4 5.2,4.4 8.3,5.9 4.2,2.2 6.3,1.9 11.5,2.8 2.9,0.5 10,-1.3 12,-2.2 4.6,-2.2 5,-2.9 8.6,-5.6 4.3,-3.1 9.1,-12.3 9.1,-19.7 v -3.4 c 0,-13.7 -13.6,-26.8 -27.3,-26.8 h -3.2 c -14.5,-4e-4 -27.1,13.6 -27.1,28.5 z m 28.5,14.8 c -8.4,0 -13.5,-6.5 -14.4,-14.4 -0.7,-7.3 6.8,-14.6 13.9,-14.6 h 1.7 c 7.3,0 13.6,6.9 13.6,14.5 0,7.7 -6.2,14.5 -13.8,14.5 h -1 z m -18.6,-14.8 c 0,11.5 8,18.1 18.4,19.3 6.2,0.8 10.3,-2.9 13.6,-5.3 2.8,-2 5.8,-8.3 5.8,-13.3 V 99.8 c 0,-10.4 -8.3,-18.6 -18.6,-18.6 h -0.7 c -9.9,0 -18.4,8.6 -18.4,18.6 z m 10.9,0 v 0.2 c 0,3.7 3.5,7.7 7,7.7 h 1.7 c 3.9,0 7.3,-3.9 7.3,-7.7 0,-4 -3.5,-8 -7,-8 h -1.7 c -3.5,0 -7.3,4 -7.3,7.7 z"
	    }
	  ];
	  icn["AC.IC.LANDSLIDE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 129.4,110.8 c -2.7,0 -6.2,4.1 -4.3,5.1 -1,1.5 -3.6,2 -3.6,4 0,1.8 2.6,4.7 3.4,6.2 1.1,2 3.2,3.2 6.2,3.2 h 1.8 c 2.7,0 4.6,-2.6 4.6,-5.3 v -1 c 0,-3.4 -1,-5 -2.1,-7.5 -1,-2.4 -1.6,-4.6 -4.9,-4.6 h -1 z m -22.2,-35 -5.3,-5.2 -39.3,58.3 55.8,0.1 v -1.2 c 0,-0.7 -1,-1.5 -1.5,-1.8 0,-2 -0.6,-1.6 -0.9,-2.9 -0.2,-0.9 -0.1,-2.7 -0.1,-3.7 0,-2.8 -0.1,-4.3 -1.7,-5.6 -2.2,-1.9 -1.3,-1.5 -4.3,-3.1 -2,-1 -1.5,-2.1 -5.2,-2.2 v -1.5 c 0,-1.9 -2,-3.6 -2.8,-4.8 0,-2.3 -0.5,-4.7 -0.5,-6.8 0,-1.6 -0.2,-2 -0.2,-3.3 -0.1,-1.7 -0.8,-1.5 -0.8,-2.8 v -0.2 c 0,-3 0.5,-4.5 2.1,-6 2.2,-2.1 0.9,-2.2 3.8,-3.9 l 0.8,-3.3 0,0 z m 9.7,34 c 0,3.6 6.1,2.8 6.1,-0.8 0,-4.2 -6.1,-1.9 -6.1,0.8 z m 2.8,-16.4 c -2.2,0 -7,6.4 -4,8.6 1.7,1.2 2.6,1.6 5.3,0.6 2,-0.8 2.8,-1.6 2.8,-4.3 4e-4,-2.4 -2,-4.8 -4,-4.8 z m -8.4,5.3 c 0.8,0 1,-0.7 1.3,-1.3 -0.6,-1.4 -0.5,-2.5 -2.6,-2.5 h -0.2 c -1,0 -2,0.6 -2,1.5 0,0.7 1.6,2.3 2.8,2.3 h 0.8 z m -3.3,-13.7 c -0.1,1 -0.3,0.6 -0.3,1.5 0,1 0.8,3 1.8,3 h 0.2 c 3.1,0 3.1,-0.2 4.8,-1.5 -1,-2.3 -0.4,-3.6 -4.2,-3.6 -1.1,0 -1.4,0.3 -2.3,0.5 z"
	    }
	  ];
	  icn["AC.IC.SUBSIDENCE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 56.8,75.6 0,2 14.4,0 3.8,7.9 c -0.1,0.3 -0.3,0.7 -0.3,1.6 l 0,0.6 c 0,0.7 0.3,1.1 0.7,1.5 0.3,0.4 0.7,0.8 1.1,1.3 0.7,0.8 1.5,1.5 1.8,2 l -0.3,4.1 c -0.1,1 0.4,2 1,2.6 0.6,0.6 1.3,1.1 2,1.5 0.7,0.4 1.3,0.8 1.7,1.2 0.4,0.4 0.6,0.6 0.6,1 0,1.3 -0.5,2.2 -0.5,4.2 0,0.9 0.5,1.7 1.1,2.1 0.6,0.4 1.2,0.7 1.8,0.9 0.6,0.2 1.1,0.4 1.4,0.6 0.3,0.2 0.3,0.2 0.3,0.3 0,0.6 -0.1,0.8 -0.3,1.2 -0.2,0.3 -0.5,0.7 -0.5,1.5 l 0,0.6 c 0,1.8 1,2.9 1.9,3.5 0.8,0.6 1.3,0.8 1.5,1.3 0,0 0,0 0,0 0.2,0.8 0.3,2 0.7,3.1 0.2,0.6 0.5,1.2 1,1.6 0.5,0.5 1.2,0.7 2,0.7 l 0.3,0 c 1.1,0 1.9,-0 2.6,-0.2 0.7,-0.1 1.3,-0.4 1.7,-0.9 0.4,-0.5 0.5,-1.1 0.7,-1.7 0.1,-0.6 0.2,-1.3 0.3,-2.1 7.6e-4,-0 -7.6e-4,-0 0,-0 0.2,-1.4 0.7,-2.1 1.3,-2.8 0.5,-0.7 1.2,-1.7 1.2,-3.1 0,-0.6 -0.2,-1 -0.5,-1.3 -0.2,-0.3 -0.5,-0.7 -0.7,-1 -0.5,-0.7 -0.8,-1.5 -0.8,-2.4 l 0,-0.9 c 0,-0 -0,-0 0.1,-0.2 0.2,-0.2 0.5,-0.4 0.8,-0.6 0.4,-0.3 0.8,-0.5 1.1,-1 0.4,-0.4 0.7,-1.1 0.7,-1.8 0,-1.2 -0.5,-2.4 -0.9,-3.5 -0.4,-1.1 -0.8,-2.2 -0.8,-2.5 0,-0.5 0.2,-1 0.6,-1.6 0.4,-0.6 1,-1.3 1.5,-2.2 0.5,-0.8 0.9,-1.8 0.9,-3 -0,-1.1 -0.5,-2.4 -1.6,-3.6 l -0,-0 -0,0 c -0.3,-0.3 -0.7,-1.3 -0.8,-2.2 -0.1,-0.9 0.1,-1.9 0.4,-2.3 0.3,-0.5 0.9,-0.9 1.7,-1.4 0.7,-0.6 1.5,-1.6 1.5,-3 l 0,-1.4 38.1,0 0,-2 -40.1,0 -30.6,0 -0.6,0 -15,0 z"
	    }
	  ];
	  icn["AC.IC.VOLCANIC ERUPTION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 122.2,66 -10.4,17.9 1.7,1 10.4,-17.9 -1.7,-1 z m -23.2,0.5 0,17.9 2,0 0,-17.9 -2,0 z m -19.5,-0.4 -1.8,0.8 8,17.9 1.8,-0.8 -8,-17.9 z M 99.3,120.8 c -1.7,-0 -3.3,0.8 -4.5,2 -1.2,1.2 -2,2.9 -2,4.5 l 0,1.9 c 0,1.7 0.8,3.3 2,4.5 1.2,1.2 2.8,2 4.5,2 l 1.3,0 c 1.7,0 3.3,-0.8 4.5,-2 1.2,-1.2 2,-2.8 2,-4.5 l 0,-1.9 c 0,-1.7 -0.8,-3.3 -2,-4.5 -1.2,-1.2 -2.8,-2 -4.5,-2 l -1.2,0 -0,0 z M 80.3,86.5 c -0.5,0 -0.9,0.3 -1.4,0.8 -0.4,0.5 -0.8,1.2 -1.3,2 -0.8,1.7 -1.6,3.9 -2.4,6.3 -1.5,4.7 -2.8,9.8 -3.4,11.4 l -0,0 c -2,7 -5.8,15.2 -7,21.6 l -0.1,0.2 0.2,0 20.9,0.6 0.2,0 0,-0.2 0,-1.9 0,-0.2 -0.2,-0 -17.6,-0.7 L 80.5,89.4 l 39.1,0 11.9,37.1 -17.5,0.7 -0.2,0 0,0.2 0,1.9 0,0.2 0.2,-0 20.9,-0.6 0.2,0 -0.1,-0.2 c -1.3,-6.4 -5.1,-14.7 -7,-21.6 L 128.1,107 c -0.6,-1.6 -1.9,-6.7 -3.4,-11.4 -0.8,-2.3 -1.6,-4.6 -2.4,-6.3 -0.4,-0.8 -0.8,-1.5 -1.3,-2 -0.4,-0.5 -0.9,-0.8 -1.4,-0.8 l -39.4,0 z"
	    }
	  ];
	  icn["AC.IC.VOLCANIC THREAT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 80.3,85.6 c -0.5,0 -0.9,0.3 -1.4,0.8 -0.4,0.5 -0.8,1.2 -1.3,2 -0.8,1.7 -1.6,3.9 -2.4,6.3 -1.5,4.7 -2.8,9.8 -3.4,11.3 l 0,0 -0,0 c -2,7 -5.8,15.2 -7,21.6 l -0.1,0.2 0.2,0 20.9,0.6 0.2,0 0,-0.2 0,-1.9 0,-0.2 -0.2,-0 -17.6,-0.7 12,-37.1 39.1,0 11.9,37.1 -17.5,0.7 -0.2,0 0,0.2 0,1.9 0,0.2 0.2,0 20.9,-0.6 0.2,-0 -0.1,-0.2 c -1.3,-6.4 -5.1,-14.7 -7,-21.6 l -0,0 0,-0 c -0.6,-1.6 -1.9,-6.7 -3.4,-11.3 -0.8,-2.3 -1.6,-4.6 -2.4,-6.3 -0.4,-0.8 -0.8,-1.5 -1.3,-2 -0.4,-0.5 -0.9,-0.8 -1.4,-0.8 l -39.4,0 z M 99.3,120 c -1.7,-0 -3.3,0.8 -4.5,2 -1.2,1.2 -2,2.9 -2,4.5 l 0,1.9 c 0,1.7 0.8,3.3 2,4.5 1.2,1.2 2.8,2 4.5,2 l 1.3,0 c 1.7,0 3.3,-0.8 4.5,-2 1.2,-1.2 2,-2.8 2,-4.5 l 0,-1.9 c 0,-1.7 -0.8,-3.3 -2,-4.5 -1.2,-1.2 -2.8,-2 -4.5,-2 l -1.2,0 -0,0 z m -2.7,-42.1 0,0.2 -0.2,0 0,4.2 0,0.2 0.2,0 3.3,0 0.2,0 0,-0.2 0,-4.2 0,-0.2 -0.2,0 -3.3,0 z M 99,57.1 c -1.1,2.5e-5 -2.3,0.2 -3.3,0.5 -1.1,0.3 -2.1,0.8 -3.2,1.4 l -0.1,0.1 0,0.1 0,3.1 0,0.4 0.3,-0.2 c 1.1,-0.7 2,-1.3 3,-1.6 1,-0.4 1.9,-0.6 2.7,-0.6 1.1,2.2e-5 2,0.3 2.7,0.8 0.7,0.6 1,1.3 1,2.2 -1e-5,0.5 -0.1,1 -0.4,1.5 -0.3,0.5 -0.7,1 -1.3,1.6 l 0,0 -1.5,1.5 c -1,0.9 -1.7,1.8 -2,2.5 -0.3,0.7 -0.5,1.7 -0.5,2.8 l 0,2.5 0,0.2 0.2,0 3.1,0 0,-0.2 0.2,0 0,-2 c -10e-6,-0.6 0,-1 0.1,-1.3 0,-0.3 0.1,-0.6 0.1,-0.8 0.1,-0.2 0.2,-0.5 0.4,-0.8 0.2,-0.3 0.6,-0.7 1.1,-1.2 l 1.4,-1.4 c 1,-0.9 1.7,-1.8 2.1,-2.6 l 0,-0 c 0.4,-0.8 0.6,-1.6 0.6,-2.5 -2e-5,-1.8 -0.6,-3.3 -1.9,-4.3 -1.3,-1.1 -2.9,-1.6 -5,-1.6 z"
	    }
	  ];
	  icn["AC.IC.CAVE ENTRANCE"] = [
	    { type: "path", fill: false, d: "m 55,100 55,0 30,-20 0,40 -30,-20" }
	  ];
	  icn["AC.IC.DROUGHT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 87.6,127.4 c 1.3,0.6 4.5,0 6.1,0 h 4.2 l -2,-5.9 -4.9,-0.3 c -5.7,10.8 -2.4,4.3 -3.4,6.2 z m -24.1,-7 c -0.6,1.9 17.6,6.9 20.5,7.4 2.7,-1.8 4.5,-2.4 4.8,-6.7 -4,0 -11.4,-0.8 -14.8,-1.7 -2.2,-0.6 -4.2,-1.2 -6.4,-1.7 -3.5,-0.9 -4.2,-1.5 -4.2,2.6 z m 35.9,6.1 6.7,-0.3 18.6,-1.7 c 1.5,-0.4 4.5,-0.4 6,-1.4 -1.3,-2.6 -2.4,-4.1 -3.7,-6.6 -1.4,-2.6 -1.9,-4.9 -3,-7.2 -3.7,0.8 -4.7,3.5 -6.3,4 -3.5,1.1 -4.8,0.4 -6.7,3.8 -1.7,3 -2.5,3.3 -5.3,5.2 -2.4,1.7 -3.6,2.8 -6.3,4.2 z m -2.8,-9 c 0,3.7 0.5,4.2 2.2,7.3 l 8.5,-7.1 -0.2,-0.2 c -1.7,-0.4 -2.4,-1.5 -4.8,-2.2 -1.6,-0.4 -4.1,-1.3 -5.8,-1.4 v 3.6 h 0.1 z m 37.6,0.5 c -0.9,0 -1,-0.2 -1.9,-0.2 l 1,2.4 2.7,-2.8 c -0.9,0.2 -0.8,0.5 -1.8,0.5 z m -51.3,-0.3 c -0.1,1.9 7.7,1.5 9.3,1.5 h 2.8 c 0,-1.7 -0.7,-2.8 -0.8,-4.4 -0.1,-2.5 -0.4,-1.8 -3.1,-2.1 -4,-0.4 -4.6,-2 -7.7,-2.8 l -0.6,7.7 z m -25.5,-12.6 3,12.1 c 0.7,-3 2.2,-4.5 2.8,-7.3 0.3,-1.8 0.1,-2.6 0.9,-4 0.4,-0.7 1.3,-2.8 1.5,-3.6 -1.4,-0.3 -6.9,-1.6 -8.6,-1.6 l 0.4,4.4 z m 69.9,-2.2 c -1,4.1 -0.7,3.5 1,7 1.2,2.4 2,4.4 3.1,6.6 5.8,-0.5 6.2,-0.5 9.4,-3.6 1.6,-1.6 1,-6.8 2,-8.3 -2.5,-1.2 -1.7,-0.6 -4.6,-1.3 -4.5,-1 -6.6,-0.4 -10.9,-0.3 z m -30.9,1.1 v 0.8 c 0,2.2 -0.1,3.3 0,5.4 0.1,3.3 -0.3,2.5 3.1,2.8 1.2,0.1 3.5,1 4.5,1.4 0.7,0.4 1.5,0.5 2,0.8 0.8,0.4 0.3,0.6 1.7,1.4 l -0.2,-0.2 5.6,-4.7 c 3.1,0 4.2,0.4 5.8,-1.3 2.4,-2.5 0.8,-1.4 4,-3.1 l 0.6,-3.1 c -2.5,0.6 -5.5,2.2 -8.2,1.1 -2.6,-1.1 -3.8,-2.8 -7.4,-2.8 l -1.6,-0.3 -9.9,1.8 z m -32.1,11.2 c 1.3,0 5.8,0.7 6.9,1 1.4,0.4 4.7,2.3 5.6,2.3 h 2.8 c 1,0 0.9,-0.3 1.7,-0.5 l 1.7,-8.3 -5.2,-4.5 -9,-2 c -0.4,1.7 -2.4,3 -3.1,5.1 -0.3,0.7 -1.5,6.3 -1.5,7 z m 41,-35.1 c 1,1.2 1.4,2.8 2.2,4.2 0.4,0.6 2.9,3.3 2.9,3.5 0,0.8 -0.9,2.3 -1.3,2.3 -2.7,0 -3.8,-6.7 -3.8,-10 z m -1.8,-1.2 c -0.3,1 -1.9,4.5 -2.5,5.6 -0.9,1.8 -1.9,3.5 -4.4,3.5 -0.5,0 -1,-0.4 -1,-0.8 0,-3.1 3.8,-5.8 5.2,-7.6 l 2.8,-0.8 z m 9.5,8.6 h -0.8 c -2.3,0 -6.9,-8 -6.9,-9.7 0,-0.1 0.3,-0.5 0.3,-0.5 1.7,0.5 7.9,6 7.9,8.7 -4e-4,0.5 -0.4,0.8 -0.5,1.5 z m 0.6,-6 c -0.7,-0.3 -1.7,-1 -2.4,-1.3 -1.4,-0.8 -3.5,-2.9 -4.7,-3.3 l 1.1,-1.3 c 3.1,1.5 10.1,1.3 10.1,5.7 0,0.3 -0.8,0.8 -1,1 -0.8,-0.3 -2,-0.4 -3.1,-0.8 z m -24.9,1.3 h -1 c 1,-2 -2.2,-6.7 -4.4,-7.2 -2.2,1.2 -4.2,0.6 -5.5,3.3 -0.4,1 -0.7,2.2 -1.5,2.8 -0.8,0.6 -2.4,0.8 -2.4,1.9 0,1.5 4.3,0.4 4.9,-0.2 1.2,-1.1 2.4,-2.1 4.5,-2.1 2,0 2.9,5.8 3.1,8.2 0.2,3.2 -2.3,7.7 -2.2,9.5 l 0.9,6.8 -4.4,-0.3 c 2.1,3.1 8.5,6 13.4,6.4 l -0.4,-7.7 -5.6,1.3 c 0,-4.4 -2,-5.5 -0.5,-9.5 0.6,-1.7 1,-2.2 1,-4.7 0,-1.1 0.2,-4.6 0.6,-5.3 1.5,-2.5 1.9,-5.6 3.1,-8.4 1.2,-2.8 5,-2.6 8.3,-3.5 l 1.2,1.3 -1,0.3 0.8,1.8 c -1.7,2 -2.9,2.9 -4.5,5 -0.8,1 -3.8,6.3 -0.6,6.3 h 1 c 3.9,0 5.1,-7.1 6.9,-9.2 0.4,4.4 1.2,9.5 4.4,11.2 1.7,-0.4 2.2,-1.1 2.6,-2.8 0.7,0.2 0.5,0.3 1,0.3 1.3,0 2,-1.1 2,-2.3 V 85.8 c 0,-2.1 -1.2,-2.4 -1.5,-3.8 0.8,0.4 2.2,1 3.3,1 h 0.5 c 1.2,0 1.3,-0.6 1.8,-1.3 -0.2,-2.5 -1.5,-3.9 -3.5,-4.6 -1.3,-0.4 -5.2,-1.7 -6.7,-1.7 l 0.5,-1 h -0.7 l 0.8,-1.6 -4.9,1 c -0.9,-0.6 -1.2,-1.5 -2.6,-1.5 h -1.8 C 92.3,72.2 88.7,75.8 88.7,82.9 l 0,0 z"
	    }
	  ];
	  icn["AC.IC.FLOOD"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M77.2,92.9L77.3,92.8L99.3,72.5L99.7,72.1L100,72.1L100.4,72.5L122.4,92.8L123.5,93.9L122.4,93.9L122.4,115.902C123.023,115.106 123.657,114.5 124.4,114.5C125.454,114.199 124.857,116.712 125.5,117.6C125.988,118.273 126.805,118.721 127.609,118.928C130.146,119.58 132.747,117.303 134.5,116.2C135.043,115.859 136.356,115.26 136.4,115.9C136.652,119.558 136.526,123.235 136.4,126.9L63.7,126.9L63.7,114.9C64.819,117.943 66.835,120.948 70.637,119.05C72.357,118.192 73.209,115.745 75.1,115.4C75.464,115.334 76.266,116.335 77.1,117.278L77.1,93.9L76.2,93.9L77.1,93L77.1,92.9L77.2,92.9ZM121.2,117.544L121.2,94.1L78.3,94.1L78.3,118.49C78.521,118.667 78.727,118.795 78.911,118.845C83.407,120.084 82.345,116.009 86.9,115.5C87.588,115.423 90.549,119.114 91.583,119.536C95.694,121.215 95.826,116.694 98.9,115.9C100.074,115.597 100.538,118.237 100.9,118.5C101.86,119.198 103.028,119.651 104.2,119.837C109.33,120.655 108.685,117.216 111.9,114.9C112.848,114.217 113.556,116.602 113.563,116.613C115.1,119.229 115.092,120.273 118.659,119.606C119.666,119.418 120.465,118.529 121.2,117.544ZM99.75,73.846L99.8,73.8L99.7,73.8L99.75,73.846L79.3,92.7L120.2,92.7L99.75,73.846Z"
	    }
	  ];
	  icn["AC.IC.INVERSION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 69.5,87.9 C 69.5,86.7 73.6,83.9 75.5,83.9 h 0.3 c 3.3,0 9,9.1 15.2,9.1 h 1.8 c 5.4,0 11.3,-9.1 14.9,-9.1 3.5,0 8.8,9.1 15.2,9.1 h 0.9 c 8.5,0 10.5,-4.4 15.5,-7 l -5.3,-6.4 c -3.4,1.8 -4.1,4.6 -9.5,5.3 -2.2,0.3 -6.6,-3.9 -8.3,-5.5 -8,-6.8 -13,-3 -19.4,2 -3.9,3.1 -3.9,5.3 -8.5,1.3 -2.2,-1.8 -5.6,-4.8 -8.2,-6 -3.8,-1.8 -8.6,-0.7 -11.4,1.2 -1.6,1 -7.3,5.2 -7.3,6.9 v 52.2 h 8.2 V 87.9 z m -9.4,-16.4 79.9,0 0,-8.5 -79.9,0 z"
	    }
	  ];
	  icn["AC.IC.TSUNAMI"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 63,122 39.5,-0.1 30.8,0.3 c -7.1,0 -12.8,-1.7 -16.9,-4.8 -3.7,-2.9 -7.7,-8 -7.7,-14.4 0,-9.1 6.9,-16.5 15.8,-16.5 h 0.7 c 6.5,0 8.2,2.8 11.8,5.3 -2,-8.6 -10.6,-14.2 -21.4,-14.2 h -0.2 c -18.2,0 -44.9,33 -52.4,44.3 l 0,0 0,0 z"
	    }
	  ];
	  icn["AC.IC.BIRD"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 81.6,92.5 -18.4,2.9 v 0.3 l 6.6,0.5 c -0.7,0.5 -3.3,1.1 -4.5,1.5 -2.6,0.9 -2,0.3 -3.5,2.4 l 3.4,0.1 -1,1 c 1.8,0 3.3,0.1 4.8,0.2 1.4,0.1 1.9,-1.3 3.5,-1.4 3,-0.2 5.7,0.2 9.3,0.3 l -0.8,0.5 c 0.6,0.1 0.7,0.2 1.4,0.2 h 1.6 l 0.1,0.9 2.9,1.2 1.6,-0.1 c 1.6,1.1 1.9,2.3 5.2,2.4 0.2,2.7 0.6,3.8 3,4.4 v 0.8 c 0,2.2 0.2,4.8 2.1,5 l 1.2,5.3 h -0.4 v 0.4 c -0.3,-0.3 -1.4,-1.2 -1.8,-1.2 h -0.2 c -0.5,0 -0.5,0.1 -1,0.2 0.6,0.8 2.7,1.7 3.1,2.7 0.5,1.6 0.1,3.8 0.2,5.3 l 0.9,0.6 0.8,-0.1 0.1,-0.8 -0.1,-2.7 c 0.7,0.5 2.7,3 3.3,3 h 1 c -0.5,-2 -1.8,-2.4 -2.7,-3.9 l 3.7,1.1 c -1,-1.5 -0.9,-1.8 -2.9,-2.3 -3.1,-0.8 -1.8,-1.9 -3.1,-2.2 l -1,-5.4 c 1,-0.2 1.4,-1 1.4,-2.2 l 0.1,-1.6 -0.3,-2.6 h 1 c 0.7,0 0.7,-0.2 1.4,-0.4 0.1,1.6 1.2,3.3 2.7,3.4 l 3.1,6.3 c -0.3,0.3 -0.4,0.3 -0.4,0.8 v 0.7 l -4.4,-0.9 v 0.2 c 0.8,0.7 3.7,1.7 5.1,2.8 1.1,0.8 1.2,0.6 2,1.9 0.3,0.5 1.3,2.2 1.9,2.2 h 0.8 l 0.2,-0.1 -1.7,-3.2 4.3,1.9 c -0.1,-2.1 -2.1,-1.5 -3.6,-2.8 h 3 c -1.3,-1.1 -1.6,-0.9 -3.5,-1.2 -1.6,-0.2 -1.7,-1.2 -2.7,-2.1 -1.1,-1.2 -2,-4.9 -2.9,-6.6 1.2,-1.8 1,-1.4 1,-4.4 4.8,-2.3 5.6,-2.1 9.3,-5.9 2.7,-2.7 3.9,-6.1 5.8,-9.7 0.9,-1.8 1.5,-3.3 2.2,-5.2 0.7,-1.8 0.7,-4.7 1.4,-6.3 2.3,-4.6 9,-3.2 10.3,-5.2 l -4.4,0.2 v -0.2 l 5,-0.6 c -2.2,-1.9 -4.8,-1.4 -8.3,-1.8 -2.1,-0.3 -2.9,0.7 -4.4,-0.3 -1.4,-1 -1.6,-1.2 -3.7,-1.5 -3.1,-0.5 -5.6,1.2 -7.4,2.5 -1.7,1.3 -3.2,5.2 -4.2,6.1 -0.3,0.2 -6.1,2.7 -7.1,3.2 -2.9,1.5 -3.5,2.5 -7.3,3.1 -6.3,1 -9.9,3.4 -14.2,6.3 l 0,0 z"
	    }
	  ];
	  icn["AC.IC.INSECT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 77.4,88.8 0.1,-0.3 6.1,4.9 -0.1,0.2 c -2.2,1.5 -7.7,9 -10,9 l -1.6,-0.1 5.6,-13.7 z m 7.1,3.3 c -0.4,-1.7 -5,-6.4 -6.7,-7.2 -0.4,0.3 -1.8,1 -1.8,1.6 0,0.8 0.3,1 0.5,1.5 l -5.6,14.7 h -1 c 0.2,0.9 0.5,0.7 0.5,1 0,0.3 -3,7.8 -3.3,8.7 -0.6,1.4 -1,2.7 -1.6,4.2 -0.3,0.8 -0.6,1.6 -0.9,2.2 -0.5,1.1 -0.6,0.3 -1.4,1.7 l -1.3,0.3 c 0.3,0.5 1.8,0.5 2.5,0.4 1.2,-0.2 0.4,-1 0.8,-2.2 0.7,-1.8 1.4,-3.5 2.1,-5.4 0.5,-1.2 3.7,-10.3 4.6,-10.3 h 1.3 c 0.8,0 1,0.3 1.5,0.5 l 2.3,-2.8 c 2.7,1.8 8.5,4.6 12.8,4.6 h 0.7 l 0.2,-0.1 -3.5,-5 -9.9,-0.1 6.5,-6.3 c 4.3,2.9 11.7,16.9 14.9,16.9 h 0.3 c 1.4,0 1.3,-0.6 1.8,-1.6 -0.9,-3.7 -4.8,-6.3 -7.3,-8.5 -2.4,-2 -6.1,-6.5 -8.3,-7.9 1.2,-1.7 10.3,-10.8 12.2,-11.3 l 0.9,7.7 0.1,2.9 -1.2,7.4 h -1.8 l 5.2,4.4 7.2,-3.9 c -0.5,2.1 -0.3,2.5 -2.2,3.4 -0.6,0.3 -3.7,1.9 -3.7,2.3 0,0.5 0.7,1.7 0.7,3.1 0,2.9 -3.1,4.4 -5.8,3.3 -2.1,-1 -4.9,-5.1 -5.5,-5.1 h -1 c -4.6,0 -6.7,1.6 -10.5,1.6 h -0.5 c -1.9,0 -2.5,-0.7 -4.1,-0.7 h -0.5 c -0.6,0 -1,0.4 -1,1 0,3.2 12.3,4.7 16.9,4.6 l 13.1,-0.3 v 0.3 c -0.9,1.3 -5.8,4.8 -8,4.8 -0.1,0.2 -0.5,0.7 -0.5,0.8 0,0.7 0.1,0.7 0.3,1.3 0.7,0.1 0.5,0.3 1,0.3 0.5,0 0.5,-0.2 1,-0.5 v -1.3 l 7.7,-5.4 -1.6,6.1 c -0.9,0.1 -1.3,0.4 -1.3,1.3 0,0.9 0.5,0.7 1.4,1.2 l 1.2,-1.4 c 0,-0.2 -0.7,-1.3 -0.7,-1.4 0,-1.3 2.4,-7.6 2.8,-9.5 l 15.6,-0.5 1.2,8.4 -0.4,0.1 c 0.3,0.5 0.3,1 1,1 1,0 1.1,-0.3 1.6,-0.7 -0.5,-1 -0.5,-1.9 -1.7,-1.3 l -0.8,-6.7 4.8,5.5 -0.7,0.8 1.4,1.2 c 0.5,-0.3 1,-0.2 1,-1 v -0.5 c 0,-0.9 -0.9,-1 -1.6,-1.2 l -4.5,-5 0.3,-1 h -8.5 c 0,-5 2,-8.2 2.3,-12.4 l -9.2,0.4 -0.8,2.5 h -4.6 c -1.8,0 -2.8,-8 -2.9,-10.3 0,-2.4 -0.3,-4.1 -0.2,-6.4 0.1,-1.4 1,-5.1 -1,-5.1 h -0.7 c -1,0 -1.3,1 -1.6,1.8 -0.3,1 -1,1.4 -1.6,2 -1.2,1.3 -2.3,2.4 -3.5,3.6 -1.2,1.2 -6.2,6.7 -7.4,7 l 0,0 z m 37.9,8 c 0,-0.3 0.3,-0.5 0.7,-0.5 h 0.7 l 0.1,0.5 -0.3,1 h -1 c -0.1,-0.7 -0.3,-0.4 -0.3,-1 z m 3.6,-1.8 c -0.2,0 -1.6,-1.8 -3.3,-1.8 h -0.5 c -2,0 -2,2.2 -2.5,3.9 -0.5,1.4 -1.4,3.7 -1.4,5.4 0,0.6 0.4,1 1,1 2.4,0 6.4,-5.2 6.9,-7.4 3.9,0 11.1,-1.1 11.8,-3.9 -2.6,0.7 -2.9,2.4 -8,2.8 1.8,-1.6 5.6,-4.3 5.9,-7.2 h -0.5 c -0.8,3.1 -5.6,7.2 -9.5,7.2 z"
	    }
	  ];
	  icn["AC.IC.MICROBIAL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 83.9,93.3 c -3.3,0 -6,2.7 -6,6 0,3.3 2.7,6 6,6 3.3,0 6,-2.7 6,-6 0,-3.3 -2.7,-6 -6,-6 z M 100,85.5 c -11.1,0 -21.2,1.5 -28.6,4.1 -3.7,1.3 -6.7,2.8 -8.8,4.5 -2.1,1.7 -3.4,3.7 -3.4,5.9 0,2.2 1.3,4.2 3.4,5.9 2.1,1.7 5.1,3.2 8.8,4.5 7.4,2.5 17.5,4.1 28.6,4.1 11.1,0 21.2,-1.5 28.6,-4.1 3.7,-1.3 6.7,-2.8 8.8,-4.5 2.1,-1.7 3.4,-3.7 3.4,-5.9 0,-2.2 -1.3,-4.2 -3.4,-5.9 -2.1,-1.7 -5.1,-3.2 -8.8,-4.5 C 121.2,87.1 111.1,85.5 100,85.5 z m 0,1.4 c 11,0 21,1.5 28.2,4 3.6,1.2 6.5,2.7 8.4,4.3 1.9,1.6 2.9,3.2 2.9,4.8 0,1.6 -1,3.3 -2.9,4.8 -1.9,1.6 -4.8,3 -8.4,4.3 -7.2,2.5 -17.1,4 -28.2,4 -11,0 -21,-1.5 -28.2,-4 -3.6,-1.2 -6.5,-2.7 -8.4,-4.3 -1.9,-1.6 -2.9,-3.2 -2.9,-4.8 0,-1.6 1,-3.3 2.9,-4.8 1.9,-1.6 4.8,-3 8.4,-4.3 7.2,-2.5 17.1,-4 28.2,-4 z"
	    }
	  ];
	  icn["AC.IC.REPTILE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 93.5,82.3 c 0,-2 1.8,-2.7 1.8,-4.3 0,-1 -0.6,-1.5 -1.2,-2 -2.8,0.3 -6.5,0.6 -7.4,2.7 -0.5,1.2 -0.5,2.4 -1.2,3.9 -0.5,1 -1.2,2.4 -1.2,3.8 0,0.8 0.4,0.7 0.4,1.6 v 0.8 c 0,2.2 -2.4,3.5 -0.6,6.1 -0.2,0.3 -2,1.5 -2.4,1.7 -1.7,1 -1.8,-0.6 -2.6,-0.6 h -0.8 l -0.3,-1.2 c -0.5,-0.3 -1,-0.8 -1.7,-0.8 -0.8,0 -0.8,0.5 -0.6,1 l -2.1,0.4 -0.8,2.3 h 1 c 0.9,0 1.4,0.4 1.6,1.2 l -1.5,1.2 -0.1,0.4 c 2.8,0.3 4.6,-0.6 7.2,-1.2 1.5,-0.4 6.8,-0.6 7.3,-1 l 0.1,-2.2 c 1,0.3 2,1.3 3.1,1.7 1.2,0.4 1.7,0.8 3.1,1.2 2.4,0.6 4.5,1.2 7.7,1.2 h 0.6 l 6.1,-0.6 c 0,2.6 2.3,2.5 2.8,4.5 -1.3,-0.3 -2.3,-2 -3.5,-2 -0.1,0 -0.4,0.1 -0.6,0.2 l 0.3,1.2 -1.6,0.3 v 0.8 l 0.6,0.4 -0.9,0.6 1,1 c -0.2,0.8 -0.7,0.6 -0.7,1.3 0,0.4 0.1,0.6 0.6,0.6 0.6,0 1.6,-1 2.8,-1 1.9,0 8.3,0.8 8.3,-0.8 v -0.2 c 0,-1.5 -3.5,-1.6 -3.3,-5.5 5,2.6 9.3,7.4 4.5,13.6 -1.5,2 -4.1,3.6 -6.7,4.5 -1.4,0.5 -7.4,1.9 -9.3,1.5 -4.2,-0.8 -5.4,-0.8 -8.8,-2.4 -2.6,-1.2 -4.7,-2.5 -7,-4 -3.9,-2.4 -10,-6.1 -16.1,-6.1 -5,0 -11.4,3.1 -11.4,7.9 1.2,-0.6 1.3,-1.3 2.1,-2.2 0.5,-0.6 1.7,-1.3 2.4,-1.7 1.5,-1 3.9,-1.8 6.5,-1.8 h 1 c 4.4,0 11.6,4.7 14.5,6.7 4.5,3.1 8.1,5.5 14.7,6.7 7,1.2 12.7,-0.1 17.4,-2.8 1.9,-1.1 4.3,-3.3 5.5,-5.1 1,-1.6 2.9,-5.4 2.7,-8 l -0.3,-2.6 c 0.3,0.1 2.8,3.7 3.6,4.5 0.8,0.8 3.8,2.5 5.3,2.5 1,0 4.4,-2.2 4.7,-2.9 l -1.3,-0.6 1.2,-1 c -1.5,-1 -0.8,-0.6 -2.4,-0.6 h -1 c 0,-1.4 -0.3,-1.8 -1.3,-1.6 l 0.2,0.1 -1.7,3.4 c -1.4,0 -2.9,-0.9 -3.6,-1.8 0,-0.1 -1.3,-3.8 -1.3,-3.9 -0.6,-2 -0.6,-2.2 -1.8,-3.6 -1.2,-1.3 -1.9,-1.2 -3.4,-1.9 l -0.1,0.6 c -0.6,-1.8 -6.2,-6.5 -8.1,-7.4 -2.2,-1.2 -3.2,-1.2 -6,-1.7 -2.1,-0.3 -5.4,0.3 -7,-0.5 0.4,-1.5 1.6,-0.6 1.6,-2.2 0,-0.5 -0.7,-0.4 -1.2,-0.4 0.6,-1.2 -0.3,-1 -1.3,-1 0.1,-0.3 0.4,-0.6 0.4,-1 0,-0.3 -0.3,-0.4 -0.6,-0.4 -0.4,0 0,0.6 -1.3,0.6 -0.3,-1 -0.3,-1.3 -1.5,-1.4 v 1.6 h -1.3 v 0.6 c 0,0.8 0.6,1.5 1,2.2 -0.4,0.7 -0.3,2 -1.4,2 -0.6,0 -1.8,-1.5 -3.1,-1.9 -1.3,-0.4 -3,0.5 -3,-1.5 -0,-0.9 2.1,-2.5 2.8,-3.5 l 0,0 z"
	    }
	  ];
	  icn["AC.IC.RODENT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 117.2,80.3 c 0.6,1.2 0.6,1.7 1.5,2.6 0.6,0.7 1.8,1.2 1.9,2.2 -2,-0.1 -4.2,-3.3 -4.4,-5.3 -2.1,-0.5 -8.4,-3.6 -10.9,-4.7 -3.1,-1.3 -8.3,-2.7 -12.7,-2.7 h -2.2 c -4,0 -9,2.5 -11.3,4.2 -3,2.2 -5.2,5.2 -5.2,10.4 v 0.7 c -4.6,1.1 -11.7,8.4 -11.7,13.9 v 2.4 c 0,6.2 7.7,10 11.8,12.7 2.5,1.7 4.7,3.3 7,5.1 2.2,1.7 4.7,4.2 6.7,5.5 -2.1,-9 -22.4,-12.7 -22.4,-25.1 0,-4.5 4.9,-9.3 8.5,-10.2 -0.1,0.6 -0.3,0.6 -0.3,1.3 v 0.5 c 0,4.5 7.8,4.1 11.5,3 5.1,-1.5 8.1,-2.2 13.6,-1.2 5.4,1.1 8.3,1.5 12.7,3.6 3.7,1.9 2,1.2 4.2,3.8 1.1,1.3 1,1.1 2.9,1.3 0.8,0.1 1.8,1 2.4,1.5 h 1.7 c -1.3,-2.6 -4.9,-2.9 -5.6,-5.8 0.8,-1.5 1.7,-1.7 3.9,-1.7 0.8,0 1,0.2 1.7,0.3 -0.3,-0.6 -0.6,-1.7 0.5,-1.7 h 1.9 c 4.5,0 9,2.5 12.7,0 0,-3 0.4,-2.2 -0.9,-4.9 -0.5,-0.8 -2.1,-2.7 -2.8,-3.4 -1.6,-1.5 -5.7,-4.1 -6.7,-5.5 0,-2.8 -0.4,-3.4 -2.7,-3.9 l -0.5,1 0.5,2.7 -1,0.3 v 0.9 h -0.8 c -0.2,-2.4 -1.2,-5.8 -3.6,-5.8 h -0.2 c -1.8,-4e-4 -1.5,1 -2,1.9 z m 9.5,24.6 h 1.2 c -0.2,-2.6 -5.1,-2.8 -5.4,-5.4 l -2.2,0.3 c 0.2,1.5 1.1,2.9 2.4,3.5 0.9,0.3 1.5,0 2.3,0.6 0.4,0.3 1.1,1 1.7,1 z m -45.1,-6.1 c 1.2,1.8 5.9,4.2 8.8,4.2 1,0 1.6,-0.8 1.9,-1.5 -0.9,-1.3 -2.9,-2.8 -4.7,-3.1 -3.7,-0.8 -2.9,0.1 -6,0.4 l 0,0 z m 9.5,-1.9 c 1.3,2 5,2.9 8.3,2.9 0.8,0 1.4,-0.4 1.9,-0.7 -2,-2.9 -6.1,-2.6 -10.2,-2.2 z"
	    }
	  ];
	  icn["AC.IC.PHARMACY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 83.3,74.5 h 13.2 c 3,0 6.2,3.8 6,7.3 -0.1,3.6 -2.9,6.6 -6.5,6.6 H 83.3 V 74.5 z m -8.7,45.9 h 8.7 V 98 h 2.4 c 0.6,0 13.6,16.1 13.6,17.2 0,0.6 -13.6,16.6 -15,19.3 l 10.5,-0.1 10.3,-12.2 9.6,12.3 10.9,-0 -15.2,-19.3 14.4,-17.8 -10.2,-0.1 -9.7,10.8 -7.4,-10 c 8.5,-2 14.1,-6.8 14.1,-17.2 0,-8.1 -7,-15.3 -15,-15.3 H 74.6 v 54.8 z"
	    }
	  ];
	  icn["GR.IN.IC.EDUCATIONAL FACILITIES INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 99.6,107.1 h -14.8 v 31.7 h 32 v -31.7 h -14.8 V 95.2 c 0,-0.6 6.5,-3 7.5,-3.4 1.3,-0.5 6.9,-3 7.9,-3 -0.3,-0.4 -14.7,-6.3 -15.7,-6.3 h -2.3 v 24.5 z m -3.1,-45 -5.6,14.8 1.7,0 1.3,-3.8 0.1,-0.1 0.1,0 6.8,0 0.1,0 0.1,0.1 1.3,3.8 1.7,0 -5.6,-14.8 -2.1,0 z m 0.8,1.8 0.2,0.1 0.2,-0.1 2.8,7.5 0.1,0.3 -0.3,0 -5.6,0 -0.3,0 0.1,-0.3 2.8,-7.5 z m -14.8,-1.8 8.3,0 0,1.3 -6.5,0 -0.2,0 0,0.2 0,4.5 0,0.2 0.2,0 5.8,0 0,1.3 -5.8,0 -0.2,0 0,0.2 0,7 -1.6,0 0,-14.8 z m 30.3,-0.3 c 0.9,1.5e-5 1.7,0.1 2.5,0.4 l 0,0 c 0.8,0.2 1.4,0.6 2.1,1 l 0,1.6 c -0.6,-0.5 -1.3,-0.9 -1.9,-1.2 -0.8,-0.3 -1.7,-0.5 -2.6,-0.5 -1.8,1.4e-5 -3.2,0.6 -4.1,1.7 -1,1.1 -1.4,2.7 -1.4,4.7 -1e-5,2 0.5,3.6 1.4,4.7 1,1.1 2.4,1.7 4.1,1.6 0.9,2e-6 1.8,-0.2 2.6,-0.5 0.7,-0.3 1.3,-0.7 1.9,-1.2 l 0,1.6 c -0.7,0.4 -1.4,0.8 -2.1,1 -0.8,0.2 -1.6,0.4 -2.5,0.4 -2.3,0 -4,-0.7 -5.3,-2 -1.3,-1.4 -1.9,-3.2 -1.9,-5.6 0,-2.4 0.6,-4.3 1.9,-5.6 1.3,-1.4 3,-2 5.3,-2 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.DRIZZLE.INTERMITTENT LIGHT"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(0, 128, 0)",
	      d: "m 100,82.7 c -5.5,0 -10,4.5 -10,10 0,5.5 4.5,10 10,10 0.1,0 0.1,0 0.2,0 l -0.2,0.2 c 0.9,5 -8.4,14.4 -8.4,14.4 12.8,0.1 18.4,-13.4 18.3,-23.4 l -0,0 c 0,-0.4 0.1,-0.8 0.1,-1.2 0,-5.5 -4.5,-10 -10,-10 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.FOG.SKY OBSCURED"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(255, 247, 0)",
	      d: "m 49.6,59.7 0,8 100.9,0 0,-8 -100.9,0 z m 0,71.6 0,8 100.9,0 0,-8 -100.9,0 z m 0,-35.6 0,8 100.9,0 0,-8 -100.9,0 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.HAIL.LIGHT NOT ASSOCIATED WITH THUNDER"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(198, 16, 33)",
	      d: "m 100,45.5 -0.9,2.1 -16,36 -0.6,1.4 1.5,0 32,0 1.5,0 -0.6,-1.4 -16,-36 L 100,45.5 z m -21.4,46.7 0.4,1.3 20,60 0.9,2.9 0.9,-2.9 20,-60 0.4,-1.3 -1.4,0 -40,0 -1.4,0 z m 2.8,2 37.2,0 L 100,150 81.4,94.1 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.RAIN.INTERMITTENT LIGHT"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(0, 128, 0)",
	      d: "m 100,79.8 c -11.2,0 -20.2,9 -20.2,20.2 0,11.2 9,20.2 20.2,20.2 11.2,0 20.2,-9 20.2,-20.2 0,-11.2 -9,-20.2 -20.2,-20.2 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.DUST OR SAND.LIGHT TO MODERATE"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(173, 105, 75)",
	      d: "m 140.7,85 -2,2 13,13 -13,13 2,2 14,-14 1,-1 -1,-1 L 140.7,85 z m -93.5,13.6 0,2.8 106.5,0 0,-2.8 -106.5,0 z M 98.5,62.3 c -3.2,0 -6.4,0.8 -9.2,2.2 -3.7,1.8 -6.9,4.4 -9.3,7.3 -2.3,2.9 -3.9,6.1 -3.9,9.3 0,5.6 2.9,9.9 6.9,13.2 4,3.3 9,5.8 13.9,8.3 4.9,2.5 9.7,4.9 13.1,7.7 3.4,2.8 5.4,5.8 5.4,10.1 0,3.6 -4,9 -10,11.6 -6,2.6 -13.6,2.7 -20.9,-3.4 l -2.7,3.2 c 8.4,7.1 18,7.2 25.3,4 7.2,-3.1 12.5,-9.2 12.5,-15.4 0,-5.6 -2.9,-10 -6.9,-13.3 -4,-3.3 -9,-5.8 -13.9,-8.2 -4.9,-2.5 -9.7,-4.9 -13.1,-7.7 -3.4,-2.8 -5.4,-5.8 -5.4,-10 0,-1.7 1,-4.3 2.9,-6.7 1.9,-2.4 4.7,-4.7 7.8,-6.2 6.2,-3 13.5,-3.1 19.9,4.4 l 3.2,-2.7 C 109.5,64.4 103.9,62.3 98.5,62.3 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.SNOW.INTERMITTENT LIGHT"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(0, 128, 0)",
	      d: "m 111.5,78.9 -26.4,40 3.3,2.2 26.4,-40 -3.3,-2.2 z m -23.1,0 -3.3,2.2 26.4,40 3.3,-2.2 -26.4,-40 z M 80,98 l 0,4 40,0 0,-4 -40,0 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.STORMS.THUNDERSTORM LIGHT TO MODERATE - WITH HAIL"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(198, 16, 33)",
	      d: "M 101 51.9 L 99.7 54.4 L 85.8 82.3 L 84.8 84.3 L 87 84.3 L 114.9 84.3 L 117.2 84.3 L 116.2 82.3 L 102.2 54.4 L 101 51.9 z M 101 58.1 L 112.7 81.5 L 89.3 81.5 L 101 58.1 z M 78.3 87.7 L 78.3 90.5 L 83.9 90.5 L 83.9 145 L 86.7 145 L 86.7 90.5 L 117.8 90.5 L 102.8 116.4 L 102.4 117.1 L 102.9 117.8 L 117.8 140.9 L 111.2 136.8 L 109.8 139.2 L 120.9 146.2 L 123.3 147.7 L 123 144.9 L 121.7 130.9 L 118.9 131.2 L 119.6 138.6 L 105.7 117 L 121.5 89.8 L 122.7 87.7 L 120.3 87.7 L 78.3 87.7 z "
	    }
	  ];
	  icn["ATMOSPHERIC.IC.STORMS.FUNNEL CLOUD (TORNADO/WATERSPOUT)"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(198, 16, 33)",
	      d: "M 125.7,59.1 112.4,72.4 112,72.8 l 0,0.6 0,53.3 0,0.6 0.4,0.4 13.3,13.3 1.9,-1.9 -12.9,-12.9 0,-52.2 12.9,-12.9 -1.9,-1.9 z m -51.5,0 -1.9,1.9 12.9,12.9 0,52.2 L 72.4,139.1 74.3,140.9 87.6,127.6 88,127.2 l 0,-0.6 0,-53.3 0,-0.6 L 87.6,72.4 74.3,59.1 z"
	    }
	  ];
	  icn["ATMOSPHERIC.IC.TROPICAL STORM SYSTEMS.TROPICAL STORM"] = [
	    {
	      type: "path",
	      stroke: false,
	      fill: "rgb(198, 16, 33)",
	      d: "M 112.1 55 C 96.9 59.9 76.7 81.8 82.2 101.4 C 82.9 110.6 90.6 117.9 100 117.9 C 100 117.9 100 117.9 100.1 117.9 C 99.3 128.2 87.9 145 87.9 145 C 103.1 140.1 123.3 118.2 117.8 98.6 C 117.1 89.4 109.4 82.1 100 82.1 C 100 82.1 100 82.1 99.9 82.1 C 100.7 71.8 112.1 55 112.1 55 z M 100 84.5 C 106.8 84.5 112.5 88.8 114.6 94.8 C 114.8 95.2 114.9 95.6 115 96 C 115 96.1 115 96.1 115 96.2 C 115.1 96.6 115.2 96.9 115.3 97.3 C 115.4 98.1 115.5 99.1 115.5 100 C 115.5 101.1 115.4 102.1 115.2 103.1 C 115 104.1 114.7 105 114.4 105.8 C 114.4 105.9 114.3 105.9 114.3 106 C 114.1 106.4 114 106.7 113.8 107.1 C 113.7 107.2 113.7 107.3 113.7 107.3 C 113.6 107.4 113.6 107.5 113.5 107.6 C 113.3 107.9 113.1 108.3 112.9 108.6 C 112.4 109.3 111.9 110 111.3 110.6 C 111.2 110.7 111.1 110.8 111.1 110.9 C 110.8 111.1 110.5 111.4 110.3 111.6 C 110.2 111.7 110.2 111.7 110.1 111.8 C 109.8 112 109.5 112.3 109.2 112.5 C 109.1 112.5 109.1 112.5 109.1 112.5 C 108.9 112.7 108.6 112.9 108.4 113 C 108.1 113.2 107.8 113.4 107.5 113.6 C 107.4 113.6 107.4 113.6 107.4 113.7 C 106.6 114.1 105.7 114.4 104.9 114.7 C 104.7 114.8 104.5 114.8 104.3 114.9 C 104 115 103.6 115.1 103.3 115.2 C 103.2 115.2 103.1 115.2 103.1 115.2 C 102.1 115.4 101.1 115.5 100 115.5 C 93.3 115.5 87.6 111.3 85.4 105.3 C 85.4 105.3 85.4 105.2 85.4 105.2 C 85.3 104.8 85.2 104.5 85.1 104.2 C 85 104 85 103.9 85 103.8 C 84.9 103.5 84.8 103.2 84.8 102.9 C 84.7 102.5 84.6 102 84.6 101.6 C 84.5 101.1 84.5 100.5 84.5 100 C 84.5 99 84.6 98 84.8 97 C 84.8 97 84.8 96.9 84.8 96.9 C 84.9 96.4 85 96 85.2 95.6 C 85.3 95.2 85.4 94.9 85.5 94.5 C 85.6 94.3 85.6 94.2 85.7 94 C 85.7 93.9 85.8 93.8 85.8 93.8 C 86 93.4 86.2 93 86.3 92.7 C 86.4 92.6 86.4 92.5 86.5 92.4 C 86.7 92.1 86.9 91.7 87.1 91.4 C 87.3 91.1 87.5 90.8 87.8 90.5 C 88 90.2 88.2 90 88.4 89.7 C 88.6 89.5 88.8 89.3 88.9 89.1 C 89 89 89.1 89 89.2 88.9 C 89.4 88.7 89.7 88.4 89.9 88.2 C 90.2 88 90.5 87.8 90.8 87.5 C 90.8 87.5 90.9 87.5 90.9 87.5 C 91.1 87.3 91.4 87.1 91.6 87 C 91.9 86.8 92.2 86.6 92.5 86.4 C 92.6 86.4 92.6 86.4 92.6 86.3 C 93.1 86.1 93.5 85.9 94 85.7 C 94.4 85.6 94.7 85.4 95.1 85.3 C 95.3 85.2 95.5 85.2 95.7 85.1 C 96 85 96.4 84.9 96.8 84.8 C 96.8 84.8 96.8 84.8 96.9 84.8 C 96.9 84.8 96.9 84.8 96.9 84.8 C 97.4 84.7 97.9 84.6 98.4 84.6 C 98.9 84.5 99.5 84.5 100 84.5 z "
	    }
	  ];
	  icn["AC.IC.EMT STATION LOCATION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 100 55 L 70 80 L 75 80 L 75 125 L 125 125 L 125 80 L 130 80 L 100 55 z M 95 80 L 105 80 L 105 91.3 L 114.8 85.7 L 119.8 94.3 L 110 100 L 119.8 105.7 L 114.8 114.3 L 105 108.7 L 105 120 L 95 120 L 95 108.7 L 85.2 114.3 L 80.2 105.7 L 90 100 L 80.2 94.3 L 85.2 85.7 L 95 91.3 L 95 80 z "
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 95 80 L 95 91.3 L 85.2 85.7 L 80.2 94.3 L 90 100 L 80.2 105.7 L 85.2 114.3 L 95 108.7 L 95 120 L 105 120 L 105 108.7 L 114.8 114.3 L 119.8 105.7 L 110 100 L 119.8 94.3 L 114.8 85.7 L 105 91.3 L 105 80 L 95 80 z "
	    }
	  ];
	  icn["AC.IC.HEALTH DEPARTMENT FACILITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 131.4,83.6 100,68.4 68.5,83.5 z m -26.4,14.6 0,-9.7 -10.1,0 0,9.7 -9.5,0 0,10.4 9.5,0 0,9.5 10.1,0 0,-9.5 9.6,0 0,-10.4 z m -27.2,19.5 0,-27.8 1.4,0 0,-3.7 -7.3,0 0,3.7 1.2,0 0,27.8 -1.2,0 0,3.8 7.3,0 0,-3.8 z m 48.7,0 0,-27.8 1.4,0 0,-3.7 -7.3,0 0,3.7 1.2,0 0,27.8 -1.2,0 0,3.8 7.3,0 0,-3.8 z m -56.4,5.1 0,3 59.4,0 0,-3 z m -1.8,6.1 0,2.8 63.2,0 0,-2.8 z"
	    }
	  ];
	  icn["AC.IC.MEDICAL FACILITIES OUTPATIENT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 81.8,63.6 26.6,9 0,63.9 -26.6,-9.1 v -63.8 l 0,0 z m -1.6,65 29.9,10.4 v -10.6 h 9.8 V 61 H 80.2 v 67.6 l 0,0 z m 21.4,-18.1 c 0,1.1 1,2.6 2.2,2.6 0.8,0 1.2,-0.8 1.2,-1.6 v -0.4 c 0,-1.2 -1.1,-3 -2,-3 -0.8,0 -1.4,0.8 -1.4,1.6 v 0.8 H 101.5 z M 85.9,90.9 c 0.9,0.1 5.3,1.8 5.3,2.4 v 7.1 l 5.7,2.2 v -7.5 l 5.5,1.9 V 89.1 C 101.5,88.8 96.9,87.2 96.9,86.6 V 79.5 L 91.2,77.6 v 7.4 l -5.3,-2 v 7.9 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 81.8 63.6 L 81.8 127.4 L 108.4 136.6 L 108.4 72.7 L 81.8 63.6 z M 91.2 77.6 L 96.9 79.5 L 96.9 86.6 C 96.9 87.2 101.5 88.9 102.3 89.1 L 102.3 97 L 96.8 95.2 L 96.8 102.6 L 91.1 100.4 L 91.1 93.3 C 91.1 92.6 86.8 91 85.9 90.9 L 85.9 83 L 91.2 85 L 91.2 77.6 z M 102.9 108.1 C 103.9 108.1 105 109.9 105 111.2 L 105 111.6 C 105 112.4 104.6 113.2 103.8 113.2 C 102.5 113.2 101.5 111.6 101.5 110.6 L 101.5 110.6 L 101.5 109.8 C 101.5 108.9 102.1 108.1 102.9 108.1 z "
	    }
	  ];
	  icn["AC.IC.OPERATION/EMERGENCY MEDICAL OPERATION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 73.7,89.7 c 0.4,4.9 2.3,11.3 3.4,15.6 1.4,5.7 3.5,8.7 6.1,13.1 2.2,3.6 3.4,9.6 5.6,13.4 0.7,1.3 2.8,5.3 3.6,6 0.5,0.4 5.5,4 5.6,4 1.6,0 9.7,-0.4 10.4,-0.7 0.3,-0.1 4.1,-6.6 4.1,-7 v -3 h -7.8 c -2.7,0 -5.6,-1.3 -8.4,-1.3 V 112.6 c 0,-2.4 1.3,-17.3 2.1,-18 0.8,-0.7 11.4,-8.2 11.9,-8.3 l -1,-8.5 c -0.5,0.2 -5.6,1 -6,0.9 -1,-0.2 -4.7,-1.4 -5.5,-1.8 -1.9,1.1 -4.4,1.8 -6.5,2.7 -1.6,0.7 -3.5,2.7 -5.5,3.7 -2.4,1.2 -3.9,1.7 -6.7,2.5 -1.6,0.4 -2.4,0.4 -3.3,1.5 -0.7,0.8 -1.7,1.8 -2.2,2.5 z m 27.8,36.1 c 0,-8.1 2,-16.8 1.9,-24.8 0,-1.2 0.2,-1.9 0.2,-3.2 0,-1.4 0.4,-1.4 1.2,-2.2 1.2,-1.1 2.4,-2 3.6,-3 2.1,-1.7 5,-4.8 7.1,-6.1 0.3,0.1 0.3,0.2 0.9,0.2 h 4.9 c 0.2,0.8 4.9,6.4 5.8,7.4 2.6,3.1 3.8,3.9 2.9,9.6 -0.5,3.2 -0.7,8.6 -1,12 -0.3,4 -0.9,8.1 -0.9,12.2 l -26.7,-2.2 z m -1.7,1.3 29.8,2.2 2.4,-31.4 -9.8,-12.6 -7.2,-0.3 c -0.2,0 -6.9,5.9 -7.8,6.5 -1.4,1.1 -2.5,2.3 -3.9,3.2 -1.7,1.2 -1.2,3.3 -1.4,5.9 -0.6,8.4 -2.1,18.1 -2.1,26.5 z m 12.8,-9 0.2,0 c 2.3,0 6.5,2.8 8.1,2.8 h 3 V 119.4 H 121.4 c -0.6,0 -6.1,-2.3 -7.2,-2.7 -1.5,-0.6 -6.6,0.3 -8.6,0.3 v 1.3 l 7.1,-0.3 z m -5.6,-7.9 0.2,1.5 c 3.1,-0.7 5.6,-1.4 8.7,-0.8 1.3,0.3 2.8,0.6 4.2,0.9 2.5,0.6 2.8,1.2 3.3,-1 -1.3,0 -6.8,-1.3 -8.4,-1.7 -2.5,-0.7 -5.5,0.4 -8.1,1.1 z m -0.2,-8.1 0.5,1.4 5.7,-1.9 5,3.7 8,-1 -0.3,-1.7 -7.3,1 c -0.8,-0.6 -4.7,-3.6 -5.3,-3.6 -0.5,0 -5.6,1.9 -6.2,2.2 z m 10.7,-7.3 h 1.1 c 1.2,0 2.5,-1.3 2.5,-2.5 v -0.4 c 0,-1.4 -1.6,-2.5 -3,-2.5 -4.4,-0 -3.6,5.5 -0.6,5.5 z M 67.9,81.8 c 0,1.5 3.2,4.4 4.2,5.1 l 1.5,-1.6 -2.1,-4.7 h -2.2 c -0.5,0 -1.5,1.1 -1.5,1.2 z M 110.2,70.5 c 0.8,0.4 2.4,0.8 2.4,1.9 0,0.9 -0.5,1.4 -0.6,2.1 l -2.6,-0.4 c -1,-0.1 -4.2,0.6 -5.8,0.6 v 1.1 c 0,1.1 4,0 5.6,0 h 0.4 c 1.7,0 5.4,1.2 6.2,1.9 0.5,0.5 1.4,5.2 1.9,6.2 1.8,-0.9 1.3,-0.5 0.6,-3.2 -0.3,-0.9 -1.1,-3.1 -1.1,-4 l -3.9,-1.6 1.2,-2.3 c -1.1,-2.1 -0.8,-3.6 -4,-3.6 l -0.3,1.2 z m -36.5,6.6 c 0,0.9 2,4.6 2.2,6 0.3,0.1 1.1,0.4 1.1,0.4 0.3,0 2.1,-0.9 2.8,-1.1 -0.7,-3.1 -1.7,-6.6 -4.3,-7.9 -0.2,0.7 -1.7,2.3 -1.7,2.5 z m 5.9,-3.6 c 1.9,4.1 0.4,3.7 4.2,7 l 2.4,-1.2 v -3.8 c 0,-1.5 -1.2,-3.6 -1.3,-5.3 l -1.9,-0.2 h -1.7 l -1.6,3.7 z m 7.6,-2.8 2.5,5 3.9,-0.8 c 0,-1 0.6,-2.5 0.6,-3.4 0,-2.2 -1.1,-4.7 -1.1,-6.9 H 88.5 l -1.3,6 z M 97.8,62.8 c 0,0.6 0.2,7.2 0.3,7.4 0.3,1 3.7,2.6 5.5,2.4 0.9,-0.1 2.5,-0.3 3.5,-0.4 1.8,-0.2 1.2,-0.6 1.5,-2.6 0.2,-1.9 0.6,-4.9 1.1,-6.8 -0.4,-0.8 -2.4,-4.7 -3.2,-4.7 h -5.1 c -0.7,0 -3,4 -3.5,4.7 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 115.6 86.6 C 113.5 88 110.6 91 108.5 92.7 C 107.3 93.7 106 94.6 104.8 95.7 C 104 96.4 103.6 96.5 103.6 97.8 C 103.6 99.2 103.4 99.9 103.4 101.1 C 103.5 109.1 101.5 117.8 101.5 125.9 L 128.2 128 C 128.2 124 128.8 119.9 129.1 115.8 C 129.3 112.4 129.6 107.1 130.1 103.8 C 131 98.1 129.8 97.3 127.2 94.2 C 126.3 93.1 121.6 87.6 121.4 86.8 L 116.5 86.8 C 115.9 86.8 115.9 86.7 115.6 86.6 z M 118.2 89.3 C 119.5 89.3 121.1 90.4 121.1 91.9 L 121.1 92.3 C 121.1 93.6 119.8 94.9 118.6 94.9 L 117.5 94.9 C 114.5 94.9 113.8 89.3 118.2 89.3 z M 113.1 100 C 113.7 100 117.6 103.1 118.4 103.7 L 125.7 102.6 L 126 104.3 L 118 105.3 L 113 101.6 L 107.3 103.6 L 106.9 102.2 C 107.5 101.9 112.5 100 113.1 100 z M 113.2 109 C 113.9 109 114.5 109.1 115.2 109.2 C 116.7 109.6 122.2 110.9 123.5 110.9 C 123 113 122.7 112.4 120.2 111.8 C 118.8 111.5 117.3 111.2 116 110.9 C 112.8 110.3 110.4 111 107.3 111.8 L 107.1 110.3 C 109 109.8 111.2 109.1 113.2 109 z M 112.5 116.5 C 113.2 116.5 113.8 116.6 114.2 116.8 C 115.2 117.1 120.8 119.4 121.4 119.4 L 123.9 119.4 L 123.9 121 L 121 121 C 119.4 121 115.1 118.2 112.9 118.2 L 112.6 118.2 L 105.6 118.4 L 105.6 117.1 C 107.1 117.1 110.4 116.5 112.5 116.5 z"
	    }
	  ];
	  icn["AC.IC.TRIAGE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 91.6 69 C 87.3 69 83.6 71.5 83.6 75.3 L 83.6 83.3 L 80.5 83.3 C 74 83.3 73.6 88.1 71.2 91.5 C 69.3 94.3 63 94.4 63 100.9 L 63 131 L 137 131 L 137 102.6 C 137 99.5 136.2 97.3 134.7 95.6 C 133.2 94 130.8 93.6 129.1 92 C 126 88.8 126.9 83.3 119.1 83.3 L 116.2 83.3 L 116.2 75.5 C 116.2 71.3 112.9 69 108.4 69 L 91.6 69 z M 89.9 76 L 110.1 76 L 110.1 83.3 L 89.9 83.3 L 89.9 76 z M 95.3 90.4 L 104.4 90.4 L 104.4 99.4 L 112.2 94.9 L 116.8 102.8 L 109.1 107.3 L 116.8 111.9 L 112.1 119.8 L 104.4 115.3 L 104.4 124.1 L 95.3 124.1 L 95.3 115.3 L 87.6 119.7 L 83 111.8 L 90.7 107.3 L 83 102.8 L 87.6 94.9 L 95.3 99.3 L 95.3 90.4 z "
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 112.1,119.8 4.6,-7.9 -7.6,-4.6 7.7,-4.5 -4.6,-7.9 -7.7,4.4 -0,-8.9 -9.1,0 0,8.9 -7.7,-4.4 -4.5,7.9 7.6,4.5 -7.6,4.5 4.5,7.9 7.7,-4.4 0,8.8 9.1,0 0,-8.8 z"
	    }
	  ];
	  icn["AC.IC.EMERGENCY PUBLIC INFORMATION CENTER"] = [
	    icn["GR.IC.FF.EMERGENCY OPERATION"],
	    text("i")
	  ];
	  icn["AC.IC.FIRE HYDRANT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 80,131.3 v -1 c 1.3,0.1 5.7,1.8 7.7,2.2 2.8,0.6 5.8,1 9.1,1 h 6.5 c 3.4,0 6.1,-0.4 8.9,-1 2,-0.4 6.5,-2.1 7.7,-2.2 v 1 c 0,2.9 -12.5,4.5 -16.6,4.5 h -6.4 c -4.1,0 -16.9,-1.6 -16.9,-4.5 l 0,0 z m 17.9,-43.4 4.5,0.1 12.4,0.4 v 8.3 h 6.3 v 11.9 h -6.3 v 17.4 l 4.5,1.3 c -1.2,1.6 -12.2,3.3 -15.8,3.3 h -6.4 c -3.5,0 -15,-1.8 -16,-3.2 l 4.6,-1.6 0.1,-17.2 h -6.3 V 96.7 h 6.3 v -8.3 l 12.4,-0.4 0,0 z m 25.7,5.9 h 3 v 6.7 h 3.2 v 3.9 h -3.2 v 6.7 h -3 V 93.8 z m -50,0 h 2.9 v 17.2 h -2.9 v -6.7 h -3.5 v -3.9 h 3.4 V 93.8 h 0.1 z m 26.1,-8.3 c -5.2,0 -9.7,0.2 -14.8,0.2 -4.4,0 -3.5,-2.6 -1.8,-2.8 2.1,-0.3 4.9,-0.1 6.9,-0.4 5.3,-0.8 23.6,-0.3 28.1,0.8 0.2,1.8 0.4,1.5 -1,2.4 l -15.8,-0.2 -1.6,0.1 z m -1,-21.1 h 2.9 v 3.8 h 2 v 1.8 c 3.2,0.7 5.3,1.1 7.4,3.1 1.3,1.3 3.5,4.3 3.7,6.7 l -10.4,-0.3 -9.9,0.1 0.2,-0.1 -9.1,0.5 c 0.4,-4.7 5.2,-9.7 10.4,-9.7 h 0.8 v -2 h 2 v -3.8 z m -2.6,1.2 h -2 v 2.2 c -5.7,0.5 -10.6,6.6 -11.1,12.5 -2.2,0.2 -2.3,1.3 -3.4,2.1 l -0.2,1.6 c -0.3,2.2 2,3.9 3.6,4.3 v 5.5 h -3.6 v -2.4 h -8.3 v 6.7 h -3.2 V 107 h 3.2 v 6.3 h 8.3 v -2.4 h 3.6 V 123.8 c -2.3,0.6 -5.5,2 -5.5,4.9 v 2 c 0,6.3 12.9,7.7 19.8,7.7 h 5.9 c 6.9,0 19.4,-1.2 19.4,-7.7 v -2 c 0,-2.8 -3,-4.3 -5.3,-4.9 v -12.9 h 3.6 v 2.4 h 8.1 V 107 h 3.2 v -9.1 h -3.2 v -6.4 h -8.1 v 2.4 h -3.6 v -5.5 c 1.6,-0.3 3.6,-1.8 3.6,-3.8 0,-2.2 -1.6,-3.9 -3.6,-4 -0.5,-5.9 -5.7,-12.1 -11.4,-12.6 v -2.2 h -2 V 61.6 h -7.9 v 4 z m 2.9,47.2 c -4,0 -8.3,-5 -8.1,-9.3 0.2,-4.4 4.2,-9 8.3,-9 h 2 c 4.2,0 8.3,4.7 8.3,9.1 0,4.3 -4,9.1 -8.1,9.1 h -2.4 l 0,0 z m -10.5,-9.9 v 1.8 c 0,5.2 5.4,10.8 10.5,10.8 h 2.4 c 5.6,0 10.8,-5.8 10.8,-11.8 0,-6 -5.3,-11.8 -10.9,-11.8 h -2.1 C 93.7,92 88.4,97.5 88.4,103 l 0,0 z m 9.5,0.8 c 0.3,-0.6 0.8,-1.8 1.4,-1.8 h 1.4 c 0.7,0 1.4,1.3 1.4,2 0,0.1 -0.9,1.6 -1.4,1.6 h -1.4 c -0.6,0.1 -1.1,-1.2 -1.4,-1.8 z m -2.9,0 2.2,4.3 h 5 c 0.7,0 2.4,-3.6 2.9,-4.3 l -2.4,-4.5 h -4.9 c -0.8,0.1 -2.5,3.7 -2.9,4.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 97.9,103.8 c 0.3,-0.6 0.8,-1.8 1.4,-1.8 h 1.4 c 0.7,0 1.4,1.3 1.4,2 0,0.1 -0.9,1.6 -1.4,1.6 h -1.4 c -0.6,0.1 -1.1,-1.2 -1.4,-1.8 z m 1.2,-9.1 c -4.1,0 -8.1,4.6 -8.3,9 -0.2,4.3 4.1,9.3 8.1,9.3 l 2.4,0 c 4,0 8.1,-4.9 8.1,-9.1 0,-4.4 -4.1,-9.1 -8.3,-9.1 l -2,0 z m -1.2,4.7 4.9,0 2.4,4.5 c -0.4,0.7 -2.1,4.3 -2.9,4.3 l -5,0 -2.3,-4.3 c 0.4,-0.8 2.1,-4.4 2.9,-4.5 z M 98.7,64.5 h 2.9 v 3.8 h 2 v 1.8 c 3.2,0.7 5.3,1.1 7.4,3.1 1.3,1.3 3.5,4.3 3.7,6.7 l -10.4,-0.3 -9.9,0.1 0.2,-0.1 -9.1,0.5 c 0.4,-4.7 5.2,-9.7 10.4,-9.7 h 0.8 v -2 h 2 v -3.8 z m 1,21.1 c -5.2,0 -9.7,0.2 -14.8,0.2 -4.4,0 -3.5,-2.6 -1.8,-2.8 2.1,-0.3 4.9,-0.1 6.9,-0.4 5.3,-0.8 23.6,-0.3 28.1,0.8 0.2,1.8 0.4,1.5 -1,2.4 l -15.8,-0.2 -1.6,0.1 z m -26.1,8.3 h 2.9 v 17.2 h -2.9 v -6.7 h -3.5 v -3.9 h 3.4 V 93.8 h 0.1 z m 50,0 h 3 v 6.7 h 3.2 v 3.9 h -3.2 v 6.7 h -3 V 93.8 z m -25.7,-5.9 -12.4,0.4 0,8.3 -6.3,0 0,11.9 6.3,0 -0.1,17.3 -4.6,1.6 c 1.1,1.5 12.5,3.3 16,3.3 l 6.4,0 c 3.6,0 14.7,-1.7 15.8,-3.3 l -4.5,-1.3 0,-17.4 6.3,0 0,-11.9 -6.3,0 0,-8.3 -12.4,-0.4 -4.5,-0.1 z m 1.2,4.2 2.1,0 c 5.7,0 10.9,5.8 10.9,11.8 0,5.9 -5.2,11.8 -10.8,11.8 l -2.4,0 c -5.2,0 -10.5,-5.6 -10.5,-10.8 l 0,-1.8 c 0,-5.5 5.3,-11 10.7,-10.9 z M 80,131.3 v -1 c 1.3,0.1 5.7,1.8 7.7,2.2 2.8,0.6 5.8,1 9.1,1 h 6.5 c 3.4,0 6.1,-0.4 8.9,-1 2,-0.4 6.5,-2.1 7.7,-2.2 v 1 c 0,2.9 -12.5,4.5 -16.6,4.5 h -6.4 c -4.1,0 -16.9,-1.6 -16.9,-4.5 l 0,0 z"
	    }
	  ];
	  icn["AC.IC.OTHER WATER SUPPLY LOCATION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 113.2,116.5 c 0,-2.9 4.4,-9.3 5.8,-11.8 2.8,-5 3.1,-6.8 4.6,-13 2.1,1.4 2.2,4.3 3,7.1 0.8,2.8 1.6,4.8 2.9,7 2.2,3.8 6.7,8 5,14.1 -1.6,5.8 -5.2,7.8 -12.2,7.5 -5.8,-0.2 -9.1,-4.9 -9.1,-11 z m -1.2,-0.4 v 0.6 c 0,7.5 4.6,12.2 12,12.2 6.8,0 12,-4.6 12,-11 v -1.3 c 0,-5 -4.7,-10 -6.6,-13.8 -1.1,-2.2 -1.6,-5.5 -2.3,-8.1 -0.9,-3.3 -2.4,-4 -4.8,-5.6 0,13.6 -10.3,20 -10.3,26.8 z m 4.8,3.6 c 0,2.4 1.8,4.4 3.8,4.4 0.7,0 1.5,-0.6 1.7,-1.3 -1.6,-0.4 -3.2,-2.5 -3.4,-4.4 l -2.1,1.3 z M 89.2,73 v 15.8 h -2.1 v -15.8 l 0.6,-0.1 1.5,0.1 z m -10.4,2.3 h 6.6 v 11 H 78.8 v -11 z m 37.2,1.1 c 0,-0.5 0.2,-0.6 0.6,-0.6 h 1.5 c 0.5,0 0.6,0.2 0.6,0.6 v 9.1 h -2.8 v -9.1 z m -24.9,-1.3 22.8,2.4 v 6.5 l -22.8,1.9 v -10.7 z m -27,11.8 h 12.9 v 1 l 8.3,0.1 1.2,2.4 1.6,0.3 c 0.6,0.1 1,-0.2 1.8,-0.3 l 0.9,-0.6 0.2,-2.4 22.8,-1.6 c 1.2,2.5 4.2,1.6 6.6,1 0,-0.7 0.2,-0.8 0.2,-1.5 v -9.5 c 0,-1.5 -0.8,-2.1 -2.3,-2.1 h -2.1 c -3.8,0 0.2,2.5 -5,1.6 -2.1,-0.4 -4.6,-0.4 -6.7,-0.7 -3.3,-0.5 -10.4,-1.3 -13.5,-1.3 -0.1,-3.1 -5.6,-3.3 -5.7,0.4 h -8.4 v 0.6 h -13 l 0.1,12.4 0,0 z m 15.6,-4.8 0,1.9 4.6,0 0,-1.9 z m 0,-4.2 0,1.7 4.6,0 0,-1.7 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 91,75.1 22.8,2.4 v 6.5 l -22.8,1.9 v -10.7 z m 24.9,1.3 c 0,-0.5 0.2,-0.6 0.6,-0.6 h 1.5 c 0.5,0 0.6,0.2 0.6,0.6 v 9.1 h -2.8 v -9.1 z M 78.8,75.3 l 0,11 6.6,0 0,-11 -6.6,0 z m 0.8,2.6 4.7,0 0,1.7 -4.7,0 0,-1.7 z m 0,4.2 4.7,0 0,1.9 -4.7,0 0,-1.9 z M 123.5,91.8 c -1.4,6.2 -1.8,8 -4.6,13 -1.3,2.5 -5.8,8.9 -5.8,11.8 0,6.1 3.3,10.8 9.1,11 7,0.2 10.5,-1.7 12.2,-7.5 1.7,-6.1 -2.8,-10.3 -5,-14.1 -1.3,-2.2 -2,-4.3 -2.9,-7 -0.8,-2.8 -0.9,-5.7 -3,-7.1 z m -4.6,26.7 c 0.2,1.9 1.8,4 3.4,4.4 -0.2,0.6 -1,1.3 -1.7,1.3 -2,0 -3.8,-2.1 -3.8,-4.4 l 2.1,-1.3 z M 89.2,73 v 15.8 h -2.1 v -15.8 l 0.6,-0.1 1.5,0.1 z"
	    }
	  ];
	  icn["AC.IC.BANKING FINANCE AND INSURANCE INFRASTRUCTURE"] = text("€$£");
	  icn["GR.IN.IC.PUBLIC VENUES INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 87.9,87.3 c -3.2,0 -5.8,2.6 -5.8,5.8 0,2.8 2.1,5.2 4.8,5.7 l 0,3.3 -3.8,0 0,2 3.8,0 0,9.4 2,0 0,-9.4 3.8,0 0,-2 -3.8,0 0,-3.3 c 2.7,-0.5 4.8,-2.8 4.8,-5.7 0,-3.2 -2.6,-5.8 -5.8,-5.8 z m 24,0 c -3.2,0 -5.8,2.6 -5.8,5.8 0,2.8 2.1,5.2 4.8,5.7 l 0,3.3 -3.8,0 0,2 3.8,0 0,9.4 2,0 0,-9.4 3.8,0 0,-2 -3.8,0 0,-3.3 c 2.7,-0.5 4.8,-2.8 4.8,-5.7 0,-3.2 -2.6,-5.8 -5.8,-5.8 z m -24,2 c 2.1,0 3.8,1.7 3.8,3.8 0,2.1 -1.7,3.8 -3.8,3.8 -2.1,0 -3.8,-1.7 -3.8,-3.8 0,-2.1 1.7,-3.8 3.8,-3.8 z m 24,0 c 2.1,0 3.8,1.7 3.8,3.8 0,2.1 -1.7,3.8 -3.8,3.8 -2.1,0 -3.8,-1.7 -3.8,-3.8 0,-2.1 1.7,-3.8 3.8,-3.8 z m 24.2,37.8 0,-3 -72.1,0 0,3 z m -3,-6.2 0,-2.8 -66.2,0 0,2.8 z M 66.8,98.2 c 0,1.3 -0.7,2.6 -0.7,4.3 -0,1.8 -0.2,3.1 -0.2,5 v 3.2 l 0.6,3.6 h 2.7 l -0.8,-6.4 v -1.8 c 0,-8.1 5,-17.9 9.3,-21.5 5.6,-4.6 11.6,-9.1 21.7,-9.1 h 0.9 c 9,0 17.1,4.4 21.6,8.8 3.2,3.2 4.1,4.7 6.4,8.7 1.4,2.4 3.3,8.4 3.3,12 v 4.3 c 0,1.4 -0.7,3 -0.7,4.4 v 0.5 h 2.7 l 0.6,-6.4 v -3.8 c 0,-1.6 -1,-5.2 -1.4,-6.6 -0.8,-2.5 -1.3,-3.6 -2.3,-5.7 -1.8,-3.8 -3.8,-6.4 -6.7,-9.3 -4.6,-4.6 -13.6,-9.6 -22.6,-9.6 h -2.5 c -7.8,0 -16.6,4.1 -20.6,7.9 -2.8,2.7 -4.4,4.1 -6.7,7.5 -1.1,1.6 -1.5,3 -2.5,4.6 -0.9,1.6 -1.2,4 -2,5.2 z"
	    }
	  ];
	  icn["GR.IN.IC.RECREATIONAL AREA"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 96.4,78.8 8.1,-0 c 0.9,0 2.4,5.7 2.4,6.9 l 1.5,4.3 c 0,0.4 2,6.6 2,7 v 0.6 l -19.4,-0 5.4,-18.8 z m -19.9,-0 11.1,0 -3.5,11.2 c 0,1.7 -1.9,5.7 -1.9,6.9 v 0.6 h -20.8 v 7.2 l 18.5,0 -1.2,3 -0.1,0.8 -2.6,8.3 -3.6,11.5 c 1.1,0 9.3,0.1 9.7,-0.1 0.2,-0.1 2,-6.8 2.3,-7.7 0.5,-1.2 4.5,-15 4.5,-15.2 v -0.6 l 23.5,0 6.7,23.6 9.8,0 -1.4,-4.8 -0.7,-2.6 -2.4,-7.8 -0.9,-2.8 -1.7,-5.7 h 15.8 v -7.2 h -18.2 l -2.9,-8.9 -0.1,-0.8 -1,-3 -1.7,-6.2 h 10.6 v -7.2 h -47.9 v 7.2 l 0,0 0,0 z m 62.1,16.9 0,-6.1 -15.2,0 0,6.1 z m -62.3,0 0,-6.1 -14.9,0 0,6.1 z"
	    }
	  ];
	  icn["GR.IN.IC.SPECIAL NEEDS INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 73.1,111.2 c 0,-3.8 1,-5.8 2.3,-8.4 1.4,-2.8 3.3,-3.8 4.6,-5.8 l -1.1,-8.2 c -2.6,0.7 -7.7,6.5 -9.2,9 -2.4,4.1 -3.8,7.9 -3.8,14.2 v 3.3 c 0,2.2 2.2,8.1 3.1,9.6 2,3.2 3,4.5 5.5,7.1 3.6,3.6 10.7,7.1 17.9,7.1 h 1 c 4.9,0 9.9,-1.6 13.1,-3.6 1.7,-1 8.5,-6.2 8.5,-7.8 0,-1.2 -3.1,-6.6 -3.5,-8.4 -1.2,1.5 -1.6,3 -3,4.8 -1.2,1.5 -2.3,2.7 -3.8,3.8 -2.6,2 -6.8,4 -11.3,4 h -1.2 c -10.2,0 -19.1,-9 -19.1,-19.3 v -1.4 l 0,0 z m 8.9,-37.9 c 0.5,0.4 0.5,2.9 0.5,4 L 85,106.8 l 25.4,0 10,23 c 1.5,-0.1 5.5,-1.5 7.1,-2.1 1.2,-0.4 6.5,-1.4 6.5,-2.6 v -0.2 c 0,-0.7 -1.9,-4.8 -2,-6.3 l -7.6,2.6 -9,-21.6 H 91.6 l -0.4,-6 h 17.3 v -5.4 H 90.8 l -1.1,-12.9 c 2.6,-0.2 5.2,-3.9 5.2,-6.7 v -2.2 h -0.5 v -0.8 c 0,-0.8 -2.1,-3.1 -2.7,-3.5 -1,-0.7 -3.3,-1.6 -4.8,-1.3 -2.2,0.4 -3.2,0.8 -4.4,2 -0.7,0.7 -2.2,3.2 -2.2,4.3 v 1.2 c 0,2.4 0.8,3.6 1.7,4.9 l 0,0 z m 0.5,4 c 0,-1.1 0,-3.6 -0.5,-4 0,1.1 -0,3.6 0.5,4 z"
	    }
	  ];
	  icn["GR.IN.IC.ADULT DAY CARE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 107,118.3 v -0.2 c 0,-15.5 22.4,-14.7 22.4,-0.6 v 1.3 c 0,5.4 -5.3,10.4 -10.8,10.4 h -0.6 c -5.9,0 -11,-5.1 -11,-11 z m -1.6,-22.2 h 4.6 v 10 c 0,0 -3.2,3.3 -3.8,4.3 -0.5,0.8 -2.2,4.7 -2.2,5.8 v 2.3 c 0,6.8 6.6,13.7 13.3,13.7 h 1 c 5.8,0 10.8,-5 11,-5 h 7.1 v -1.9 h -3.2 c 0.2,-0.5 0.8,-1.3 0.8,-1.9 v -11 c 0,-1.9 -1,-3.3 -2.1,-4 h -3.3 l -0.8,-0.7 c 1.1,-0.3 2,-0.9 2,-2.2 v -0.4 c 0,-0.5 -1,-1.7 -1.6,-1.7 h -5 v -5.4 c 0,-2.7 -1.5,-4.2 -4.2,-4.2 h -2.1 c -5.9,0 -4.6,5.8 -4.6,11.6 l -0.6,0.4 V 94.7 c -0.4,-0.2 -0.4,-0.4 -0.8,-0.4 h -5.4 v 1.7 z m -22.6,1 c 0,-2.2 3.3,-4.8 4.5,-6.6 1.4,1 1.4,1.8 3.4,2.8 1.4,0.7 2.6,1.4 4,1.9 2.4,0.9 2.2,-0.1 4.3,1.9 0.9,0.9 1.8,2.5 3.5,2.5 0.4,0 0.8,-0.8 0.8,-1.3 v -1.1 c 0,-2.8 -3.3,-3.6 -5.3,-4.5 -2.3,-0.9 -5.3,-1.6 -6.1,-3.8 -0.8,-2.3 -2.2,-4.6 -2.9,-6.9 -0.7,-2.1 -1.9,-5.1 -4.6,-5.1 h -0.4 c -3,0 -7.4,7.5 -8.1,10.4 -0.6,2.3 -1.6,4.7 -2.1,7.2 -0.5,2.8 -0.6,5.2 -1.1,8 -0.3,1.8 0.1,2.3 -0.6,4 -0.4,1.2 -0.8,2.3 -1.2,3.4 -0.9,2.3 -1.7,4.6 -2.5,6.8 -0.8,2.1 -4.9,11.8 -4.9,13.5 0,2.6 6.2,1.3 7.7,1.1 -0,-1.9 -2.3,-1.6 -3.1,-2.7 2.1,-3.1 3.8,-6.3 5.8,-9.5 1,-1.7 4.6,-9.2 5.4,-9.8 0.6,0.4 3,3.1 3.8,3.9 1.9,1.9 2,1.8 2.8,4.8 1.1,4.2 1.9,7.7 1.9,13.1 l 1.7,0.2 4.2,-0 c 1.3,0 1.8,-0.2 2.3,-1 -0.6,-1 -3.1,-1.7 -4.6,-2.1 v -1.1 c 0,-0.4 -0.1,-0.4 -0.4,-0.8 v -12.1 c -1.5,-2.3 -2.9,-4.9 -4.6,-7.1 -1.1,-1.6 -3.8,-5.2 -3.8,-7.6 v -2.5 l 0,0 z m 30.3,-9.7 v 1.6 c 0,1.5 2.3,3.9 4.2,3.9 h 0.8 c 2.1,0 4.2,-2.3 4.2,-4.5 V 87.6 c 0,-2.2 -2.2,-4.2 -4.5,-4.2 h -0.1 c -2.3,-0 -4.6,2 -4.6,4 z m -28.4,-15.6 v 1.7 c 0,0.6 1,2.1 1.4,2.5 0.6,0.6 1.8,1.2 2.9,1.2 h 1 c 2,0 4.2,-2.2 4.2,-4 v -1.4 c 0,-1.6 -2.5,-3.9 -4.5,-3.9 h -0.7 c -1.8,0 -4.2,2.2 -4.2,3.9 z"
	    }
	  ];
	  icn["GR.IN.IC.AGRICULTURE AND FOOD INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 79.5,127.9 h -7.8 v -21.4 c 0,-1 6.8,-13.3 7.4,-13.6 1,-0.6 13.9,-7.1 14.1,-7.1 0.5,0 13.2,6.3 14.4,7 0.4,0.3 7.7,13.1 7.7,13.7 v 21.4 h -7.6 V 110.4 H 79.5 v 17.5 z m 37.4,-39.4 h 15.4 v 39.8 h -12.1 v -18.8 h 2.6 c -0.5,-0.8 -5.8,-9.8 -5.8,-10 V 88.5 z m 0.2,-1.9 c 0,-4.4 2.9,-8.2 7.2,-8.2 h 0.4 c 4.5,0 7.6,3.7 7.6,8.2 h -15.2 v 0 z M 105.2,82.1 h 8.9 c -0.2,1.6 -0.9,2.5 -0.9,5 0,2 0,3.9 0,5.8 -1.4,-1 -0.9,-2.8 -3.2,-4 -1.2,-0.6 -3.8,-2 -4.8,-2.3 v -4.6 z m 0,-2.8 c 0,-2.8 3.8,-7.4 6.9,-7.4 h 0.6 c 3.1,0 5.5,1.8 6.7,3.7 -0.2,0.2 -4.8,4.3 -4.8,4.3 h -9.5 v -0.6 z m -11.9,1.5 c -3.2,1.7 -6.6,3.2 -9.9,4.8 -1.7,0.9 -3.3,1.5 -5,2.4 -2.8,1.4 -2.3,0.7 -4,3.1 -0.9,1.3 -1.8,3.2 -2.7,4.7 -0.9,1.6 -1.9,3 -2.8,4.6 -1.6,2.9 -3.6,6.5 -5.4,9.1 h 2.8 v 22.5 H 84 V 114.7 h 19 v 17.3 h 33.3 V 87.5 c 0,-7.5 -4.2,-13 -11.7,-13 h -1.7 c -0.8,-2.9 -5.9,-6.5 -10,-6.5 h -0.4 c -6.4,0 -11,5.9 -11,12.1 v 4.6 l -8.2,-3.9 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 79.5,110.4 h 28.1 v 17.5 h 7.6 v -21.4 c 0,-0.6 -7.2,-13.4 -7.7,-13.7 -1.1,-0.8 -13.8,-7.1 -14.4,-7.1 -0.1,0 -13,6.5 -14.1,7.1 -0.6,0.4 -7.3,12.6 -7.3,13.6 v 21.4 h 7.8 v -17.5 z m 37.4,-10.8 c 0,0.1 5.3,9.2 5.8,10 h -2.6 v 18.8 h 12.1 v -39.8 h -15.4 v 11 z m 0.2,-13 h 15.1 c 0,-4.6 -3,-8.2 -7.6,-8.2 h -0.4 c -4.2,-0 -7.2,3.8 -7.2,8.2 z m -11.9,0 c 1.1,0.2 3.6,1.7 4.8,2.3 2.2,1.1 1.7,3 3.2,3.9 0,-2 0,-3.9 0,-5.8 0,-2.5 0.7,-3.4 0.9,-5 h -8.9 v 4.6 z m 0,-7.4 v 0.6 h 9.5 c 0,0 4.6,-4.1 4.8,-4.3 -1.2,-1.8 -3.6,-3.7 -6.7,-3.7 h -0.6 c -3.1,0 -6.9,4.6 -6.9,7.4 z"
	    }
	  ];
	  icn["GR.IN.IC.AGRICULTURAL LABORATORY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 98.4,77.9 -0.1,0.3 2.6,0.6 0,-0.3 z m 2.1,7.3 0.4,-3.2 -0.3,-0.1 -0.4,3.2 z m -3.8,-16.8 0.1,-0.2 -1.4,-0.3 1,-2.6 -0.4,-0.3 -1.7,5.7 0.1,0 0.3,-0.1 0.7,-2.4 z m -1,5.3 c 0.8,0 0.5,-1.7 0.8,-2.3 l -0.4,-0.1 -0.4,2.4 z m 1.4,-5.5 0.6,-2.6 -0.4,-0.1 -0.6,2.7 z m 0.2,-2.7 0.1,-0.3 -1,-0.2 -0.1,0.2 z m 11.8,65.6 0,5.6 3.3,0 c 1.1,0 1.9,-0.2 2.4,-0.7 0.5,-0.5 0.8,-1.2 0.8,-2.1 -10e-6,-0.9 -0.3,-1.6 -0.8,-2.1 -0.5,-0.5 -1.3,-0.7 -2.4,-0.7 l -3.3,0 m 0,-6.2 0,4.6 3,0 c 1,0 1.7,-0.2 2.2,-0.6 0.5,-0.4 0.7,-1 0.7,-1.7 -10e-6,-0.8 -0.2,-1.3 -0.7,-1.7 -0.5,-0.4 -1.2,-0.6 -2.2,-0.6 l -3,0 m -2.1,-1.7 5.2,0 c 1.6,1e-5 2.8,0.3 3.6,1 0.8,0.7 1.3,1.6 1.3,2.8 -2e-5,0.9 -0.2,1.7 -0.7,2.2 -0.4,0.5 -1.1,0.9 -1.9,1 1,0.2 1.8,0.7 2.3,1.4 0.6,0.7 0.8,1.5 0.8,2.6 -1e-5,1.4 -0.5,2.4 -1.4,3.1 -0.9,0.7 -2.2,1.1 -3.9,1.1 l -5.4,0 0,-15.2 m -9.2,2 -2.8,7.5 5.6,0 -2.8,-7.5 m -1.2,-2 2.3,0 5.8,15.2 -2.1,0 -1.4,-3.9 -6.8,0 -1.4,3.9 -2.2,0 5.8,-15.2 m -16,0 2.1,0 0,13.4 7.4,0 0,1.7 -9.4,0 0,-15.2 M 98.6,92.5 c 0.9,-0.2 0.8,-1.8 1.1,-2.6 l 0.9,0.4 -1.4,4.2 -0.6,-2 z m -0.2,-0.4 0.1,0.2 c -0.5,-0.1 -0.8,-1.3 -0.8,-1.9 l 0.4,0.6 -0.3,-2.2 1.6,0.8 c -0,0.7 -0.4,2.3 -0.9,2.4 z m -0.9,-2.3 -0.6,-1.4 c 0.4,0.1 0.6,0.3 0.6,0.9 v 0.5 z m 2.6,-4.4 -0.6,3.9 -1.7,-0.8 v -3.4 -0.3 l 2.3,0.6 z m -2.6,-1.1 0.4,0.1 v 0.4 h -0.4 v 3.5 l -0.8,-0.4 0.1,0.4 h -0.2 c 0,-0.9 -1.2,-2.8 -1.6,-3.5 0.1,-0.1 0.1,-0.1 0.1,-0.4 v -0.4 l 2.4,0.6 0,-0.4 z m 6.1,-1.7 2.5,0.6 v 0.4 c 0,0.2 0,0.2 0.1,0.3 -1.2,0 -1.9,0.4 -2.8,0.8 l 0.2,-2 z m -6.1,1.7 -2.4,-0.8 0.1,-1.8 v -1 l 2.4,0.5 -0.2,3 z m 8.6,-1.6 c -0.3,0 -2.3,-0.4 -2.4,-0.6 0,0 0.2,-2.3 0.2,-2.7 l 2.2,0.4 0.1,1.6 -0,1.2 z m -12.7,-2.4 c 0.4,0 0.7,0.2 1.1,0.2 0.8,0.2 0.4,0.1 0.4,0.7 v 2.1 c -0.3,-0 -0.7,-0.2 -1,-0.3 -0.7,-0.2 -0.5,0.1 -0.5,-0.4 v -2.4 z m 10.7,-4.2 1.7,0.4 0.3,3 -2.2,-0.4 0.2,-3 z m -6.4,5.2 v -0.4 l -2.4,-0.5 0.3,-2.8 2.4,0.5 -0.2,2.9 h 0.3 v 0.4 h -0.3 z m -4,-4.2 1.6,0.4 -0.3,2.9 -1.5,-0.4 0.2,-2.9 z m 7.6,1.4 0.3,-3.1 2.4,0.6 -0.3,3 -2.4,-0.5 z m -0.4,-0.1 0.4,0.1 v 0.4 c 0.4,0 2.3,0.4 2.4,0.6 0,0.1 -0.2,2.3 -0.2,2.6 -0.8,0 -1.6,-0.4 -2.3,-0.4 -0.2,0 -0.2,0.2 -0.2,0.4 l 2.4,0.5 -0.2,2.2 h 0.2 c -0.5,0.7 -1.1,1.6 -1.4,2.4 -0.3,0.8 -0.7,2.1 -1.1,2.8 l -0.9,-0.4 0.6,-4 h -0.2 l -0.2,-0.1 v -0.4 l -2.3,-0.7 0.2,-3 2.5,0.5 v -0.3 h 0.4 l 0.2,-2.8 h -0.3 l -0.3,2.7 -2.4,-0.4 0.2,-2.9 c -0.3,-0.1 -0.2,0 -0.3,-0.4 h 0.2 l 0.2,0.1 0.4,-3.2 2.4,0.6 -0.3,3.1 z m 3.2,-5.4 v -0.3 l 0.3,0.1 v 0.3 c 1,0.1 1.1,0.1 1.2,1 0,0.3 0.2,1.8 0.3,1.9 l -1.7,-0.3 v 0.4 h -0.3 v -0.5 l -2.4,-0.6 0.3,-2.5 2.3,0.4 z m 0.2,-0.2 0.2,-2.9 c 0.6,0.1 0.7,2.4 0.8,3.1 l -1,-0.2 z m -5.1,-0.9 2.4,0.5 -0.3,2.6 -2.4,-0.6 0.4,-2.5 z m 4.9,0.8 c -3.3,-0.8 -2,0 -2,-3.3 l 2.2,0.4 -0.2,2.9 z m -4.4,-3.8 c 3.2,0.8 1.9,-0.2 1.9,3.2 l -2.3,-0.5 0.4,-2.7 z m -2.5,-0.4 2.1,0.4 -0.4,2.7 -2.2,-0.4 0.4,-2.6 z m 7.1,1.3 v -0.4 l -2.2,-0.4 0.2,-2.6 c 0.3,0 0.7,0.1 1.1,0.2 0.6,0.1 0.5,0 0.7,0.6 0.3,1 0.3,0.9 0.3,2.2 l 0.3,0.4 -0.4,0.1 z m -4.1,-3.9 1.8,0.4 -0.2,2.6 -2.1,-0.4 0.4,-2.6 z m 2.3,-2.2 1.4,2.6 -1.5,-0.2 0.1,-2.4 z m -1.6,-1.6 0,-0.1 1.2,1.2 -0.1,0 c 0.3,-0.1 0.3,-0.1 0.4,0.3 l -0.2,-0.2 -0.2,2.6 -1.8,-0.4 0.7,-3.5 z m -2.9,3 c 0.5,-1.1 0.3,-3.4 1.9,-3.4 0.3,0 0.2,0 0.5,0.1 l -0.6,3.7 -1.8,-0.4 z m -0.4,-0.1 0.4,0.1 v 0.3 l 1.8,0.4 -0.4,2.6 -2.1,-0.4 v 0.2 l -0.1,0.2 -0.2,-0.1 h -0.2 l -0.5,2.6 -1.6,-0.3 v 0.3 c 0.5,0 1,0.3 1.4,0.3 0.2,0 0,-0.2 0.5,-0.2 v 0.4 l 2.2,0.4 -0.3,2.4 -2.4,-0.6 v 0.4 l 2.3,0.6 -0.3,3.1 -2.4,-0.6 0.4,-3.2 h -0.4 c -0,0.8 -0.3,1.7 -0.3,2.4 -0,0.8 -0,0.7 -0.7,0.5 -0.2,-0 -0.9,-0.1 -0.9,-0.3 -0,-0.3 0.2,-2 0.3,-2.4 0.2,-1.2 0.5,-0.4 1.7,-0.3 l 0.1,-0.3 c -0.2,-0.1 -1.6,-0.3 -1.6,-0.5 0,-0.8 0.4,-1.5 0.4,-2.3 -0.6,0.1 -0.7,2.3 -0.8,3 -0.1,0.8 -0.4,2.6 -0.4,3.3 0,0.8 -0.2,2.4 -0.2,3.5 0,1.3 -0.1,2.4 -0.1,3.8 h 0.3 v -0.9 l 1.5,0.4 v 1 l -3.4,-0.5 h -0.1 c -5,0 -8.8,9.7 -8.8,15.4 0,2.3 0.8,5.4 2,6.2 0.7,-1.4 1.3,-3.1 2,-4.6 0.8,-1.5 1.4,-3.1 2.1,-4.6 0.3,-0.7 0.7,-1.5 1,-2.2 0.4,-0.8 0.8,-1.5 1.8,-1.2 0.9,0.3 1.9,3.2 2.1,4.6 0.5,3.8 0,9 0.6,12.6 0.7,4 2.3,6.4 5.4,8 1,-0.4 2.5,-0.6 3.4,-1.2 0.9,-0.6 1.8,-1.2 2.4,-2.2 1.2,-1.8 2,-4.1 2,-7.2 l 0,-0.6 -0.3,-5.6 v -0.3 c 0,-2.7 0.5,-8.3 2.8,-8.3 h 0.1 c 1.4,0 2,0.6 2.6,1.4 0.6,0.8 1.2,1.4 1.8,2.2 1.2,1.5 2.6,2.9 2.6,5.5 v 0.6 l 0.4,0.1 c 0.4,-1.6 1.8,-2.8 1.8,-5.2 v -1.5 c 0,-3.5 -1.4,-6.2 -3,-8.3 -0.8,-1.1 -1.8,-2 -2.8,-2.8 -0.7,-0.5 -2.7,-1.9 -3.8,-1.9 l -0.8,-0 -2.3,0.4 c -0.2,-0.8 0.1,-2 -0.1,-3.1 -0.1,-0.8 -0.2,-2.5 -0.2,-3.3 -0.2,-2.1 -0.5,-4.2 -0.9,-6.1 -0.6,-3.3 -2,-8.2 -4.6,-9.4 v 0.3 l -0.4,-0.1 0.1,-0.3 -0.8,-0.1 c -0.9,-0.1 -1.9,0.8 -2.3,1.3 -0.2,0.3 -1.7,2 -0.8,2 0.2,-0.6 1.3,-2.2 1.8,-2.4 l -0.8,2.7 z m 3,20.4 1.6,0.5 0.2,-0 c -0.1,-0.5 -1.4,-0.6 -1.8,-0.8 v 0.4 z m 3.6,-9.8 0.2,-2.6 -0.2,-0.1 -0.2,2.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 98.6,92.5 0.6,2 1.4,-4.2 -0.9,-0.4 c -0.3,0.7 -0.2,2.3 -1.1,2.6 z m -0.6,-1.4 -0.3,-0.6 c 0,0.6 0.4,1.8 0.8,1.9 l -0.1,-0.2 c 0.6,-0.2 0.9,-1.8 1,-2.4 l -1.6,-0.8 0.2,2.2 z m 2.4,-5.9 c 0.4,0.2 1.7,0.3 1.8,0.8 l -0.2,0 -1.6,-0.5 -0.6,4 0.9,0.5 c 0.4,-0.7 0.8,-2 1.1,-2.8 0.4,-0.8 1,-1.7 1.4,-2.4 h -0.2 l 0.2,-2.3 -2.4,-0.5 -0.4,3.2 z m -1,4.1 0.6,-3.9 -2.3,-0.6 0,0.2 0,3.4 z m 0.6,-4.2 0.4,-3.2 -2.5,-0.5 -0.2,3 z m 0.7,-6.6 0.3,-3.1 -2.4,-0.6 -0.4,3.2 z m -5.1,-4.8 -0.1,0.3 c -1.2,-0 -1.5,-0.9 -1.7,0.3 -0.1,0.4 -0.3,2.1 -0.3,2.4 0,0.2 0.7,0.2 1,0.3 0.7,0.2 0.7,0.2 0.7,-0.5 0,-0.8 0.3,-1.7 0.4,-2.4 h 0.4 l -0.4,3.2 2.4,0.6 0.4,-3.2 -2.3,-0.5 v -0.4 l 2.3,0.6 0.3,-2.4 -2.2,-0.4 c -0.3,0.6 0,2.3 -0.8,2.3 z m 8.3,-1 0.2,-2.9 -2.2,-0.4 c 0,3.4 -1.3,2.6 2,3.3 z m -6.2,11.7 -0.4,-0.1 v 0.4 l -2.4,-0.6 v 0.4 c 0,0.2 -0,0.2 -0.1,0.4 0.4,0.7 1.6,2.6 1.6,3.5 h 0.2 l -0.1,-0.4 0.8,0.4 v -3.5 h 0.4 l -0,-0.4 0,0 z m -0.3,5.4 0,-0.6 c 0,-0.5 -0.2,-0.8 -0.6,-0.9 l 0.6,1.4 z m 2.6,-4.8 0,0.4 0.2,0.1 0.2,0 0,-0.3 z m 3.3,-0.4 c 0.8,-0.4 1.5,-0.8 2.8,-0.8 -0.1,-0.1 -0.1,-0.1 -0.1,-0.2 v -0.4 l -2.5,-0.6 -0.2,2 z m -8.3,-1.1 2.4,0.8 0.2,-3 -2.5,-0.5 0,1 z m -1.8,-0.8 c 0,0.5 -0.2,0.2 0.5,0.4 0.3,0.1 0.6,0.2 1,0.3 v -2.1 c 0,-0.7 0.4,-0.6 -0.4,-0.7 -0.4,-0.1 -0.7,-0.2 -1.1,-0.2 v 2.4 z m 7.5,-4 h 0.3 l -0.2,2.8 h -0.4 v 0.4 l 0.3,0.1 c 0,-0.2 0,-0.4 0.2,-0.4 0.7,0 1.6,0.4 2.3,0.4 0,-0.3 0.3,-2.5 0.2,-2.6 -0,-0.2 -2,-0.6 -2.3,-0.6 v -0.4 l -0.4,-0.1 v 0.3 z m 3.3,-8.9 0.4,-0 -0.3,-0.4 c 0,-1.3 -0,-1.2 -0.3,-2.2 -0.2,-0.6 -0,-0.5 -0.7,-0.6 -0.4,-0.1 -0.8,-0.2 -1.1,-0.2 l -0.2,2.6 2.2,0.4 v 0.4 z m -2.4,-0.9 0.2,-2.6 -1.8,-0.4 -0.4,2.6 z m 4.4,13.8 0,-1.2 -0.1,-1.6 -2.2,-0.4 c 0,0.4 -0.2,2.7 -0.2,2.7 0.1,0.2 2.2,0.6 2.4,0.6 z m -7.8,-4.6 -0.2,2.9 2.4,0.4 0.3,-2.7 z m -0.2,3.2 0,-0.4 -0.3,0 0.2,-2.9 -2.3,-0.5 -0.3,2.8 2.4,0.5 0,0.4 z m -3.1,-1 0.3,-2.9 -1.6,-0.4 -0.2,2.9 z m 11.1,-0.8 -0.3,-3 -1.7,-0.4 -0.2,3 z m -2,-6.6 -2.3,-0.4 -0.3,2.5 2.4,0.6 z m -0.4,6 0.2,-3 -2.4,-0.6 -0.2,3.1 z m -2.4,-4 0.3,-2.6 -2.3,-0.5 -0.3,2.5 z m -2.9,3.2 0.1,-0.3 -0.2,-0.1 h -0.2 c 0,0.4 -0.1,0.3 0.2,0.4 z m 5.8,-2.4 1.7,0.3 c -0.1,-0.2 -0.2,-1.6 -0.3,-1.9 -0.1,-1 -0.2,-1 -1.2,-1 l -0.2,2.6 z m 0,0.3 0,-0.3 -0.3,-0.1 0,0.4 z m 0.2,-3 0,-0.3 -0.2,-0.1 0,0.3 z m 0,-0.3 1,0.2 c -0.1,-0.6 -0.2,-3 -0.8,-3 l -0.2,2.9 z m -5.1,-1.1 2.3,0.5 c 0,-3.4 1.3,-2.5 -1.9,-3.2 l -0.4,2.7 z m -2.5,-0.6 2.2,0.4 0.4,-2.7 -2.1,-0.4 z m 1.1,-5.6 -0.6,2.6 2.1,0.4 0.4,-2.6 -1.8,-0.4 0,-0.3 -0.4,-0.1 -0.1,0.3 z m -0.6,2.8 0,-0.2 -0.4,0 -0.1,0.2 0.2,0 0.2,0.1 z m 0.2,-2.9 -1,-0.2 -1,2.6 1.4,0.3 z m 4.8,0.7 1.5,0.2 -1.4,-2.6 z m -2.1,-0.4 1.8,0.4 0.2,-2.6 0.2,0.2 c -0,-0.4 -0,-0.3 -0.4,-0.3 l 0.1,-0.1 -1.2,-1.1 -0.1,0.1 -0.7,3.5 z m -2.2,-0.4 1.8,0.4 0.6,-3.7 c -0.4,-0 -0.2,-0.1 -0.6,-0.1 -1.6,0 -1.4,2.3 -1.9,3.4 z"
	    }
	  ];
	  icn["GR.IN.IC.ANIMAL FEEDLOT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 121.6,107.1 -0.4,-2.3 -0.2,-2 h 16.3 l -1.7,13.2 h -13 v -0.6 l -1,-8.2 z m 16.1,4.3 0.4,-2.3 0.9,-6.2 -0.1,-1.6 h -19.6 l 1.4,10.7 0.3,0.6 0.5,4.3 -0.1,0.6 h 15.7 v -1.6 l 0.6,-4.6 z M 123,82.6 c -3.3,-0.8 -4.6,0.4 -6.8,1.9 h -1.4 c -0.3,0.4 -0.6,1.2 -1.2,1.2 h -1 c -2.2,0 -3.9,-1.8 -5.8,-1.8 h -0.6 c -0.9,0 -2.1,0.8 -3.9,0.8 -5.1,0 -3.9,0.2 -8,1.5 -2,0.6 -6.2,0.8 -8.9,0.8 h -5.2 c -2.8,0 -5,-0.6 -7.2,-0.6 -2.6,0 -4.7,0.2 -7.4,0.2 -0.5,0 -0.5,-0.1 -0.8,-0.2 -2.4,1.2 -3.1,4.2 -3.1,7.8 0,3.6 -0.6,6.3 -0.6,10.1 v 0.2 c 0,0.6 0.1,0.6 0.2,1 l 1,-0.3 0,-0.5 h 0.4 l 0.2,-12.2 h 0.2 c 0,2 0.1,4.5 0.6,6 0.4,1.2 1.7,3.8 1.7,4.9 v 0.2 l -1.6,13.2 h 3.7 c 0,-1.4 -0.4,-1.1 -0.4,-2.1 v -2.1 c 0,-1.4 1,-4.2 2.3,-4.3 0.4,1.5 3.3,3.7 3.3,6.8 v 0.6 c 0,0.6 -0.1,0.6 -0.2,1 0.4,-0.1 0.5,-0.2 1,-0.2 1.2,0 3.5,0.7 3.5,-0.4 0,-0.3 -1.9,-3.2 -2.2,-3.5 -0.4,-0.5 -1.3,-3.6 -1.3,-4.3 v -0.2 c 0,-0.2 1.2,-2.3 1.2,-4.8 4,2.2 3.5,2.7 9.9,2.7 2.2,0 4.2,0.5 6,0.4 1,-0 3.3,-1.4 4.3,-1.9 0,1.2 0.4,2.4 0.2,3.3 l -1.2,8 c 1,0.3 1.6,0.6 2.8,0.6 h 0.6 -0.2 l 0.7,-11.3 c 0.6,0.4 2.8,7.1 2.6,8.4 l -0.3,2.3 c 0.8,0.4 1.5,0.6 2.6,0.6 h 1 l -1.2,-7.4 -0.1,-0.8 c 0,-0.9 1.6,-0.7 2.5,-1.2 0.6,-0.3 1.4,-1.2 1.8,-1.7 1.1,-1.5 2,-2.7 3,-4.2 3.9,-5.4 3.5,-2.4 10.2,-4 v -0.6 h 1.6 c 1,0 1.8,-0.8 1.8,-1.8 v -0.4 c 0,-2.4 -2.5,-2.5 -2.5,-5.6 l -3.3,-3.4 5.4,-2.9 z m 14.6,28.9 c 0.4,-0.4 0.4,-1.5 0.4,-2.3 l -0.4,2.3 z m -16.1,-4.3 c 0,-0.8 0,-1.9 -0.4,-2.3 l 0.4,2.3 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 121.2,104.9 c 0.4,0.4 0.4,1.5 0.4,2.3 l 1,8.2 v 0.6 h 13 l 1.7,-13.2 h -16.3 l 0.2,2.1 z"
	    }
	  ];
	  icn["GR.I.FF.SATELLITE"] = [
	    {
	      type: "path",
	      stroke: !numberSIDC ? iconColor : false,
	      fill: numberSIDC ? iconColor : false,
	      d: "m 115,70 20,0 0,55 -20,0 z m -25,5 20,0 0,45 -20,0 z m -25,-5 20,0 0,55 -20,0 z"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 110,100 5,0 m -30,0 5,0 m 10,27 0,-7 m -20,15 c 10,-10 30,-10 40,0"
	    }
	  ];
	  icn["GR.IN.IC.FARM/RANCH"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 119.9,119 v -0.2 c 0,-2 1.5,-3.7 3.5,-3.7 h 0.4 c 2.2,0 3.7,1.6 3.7,4 v 0.6 c 0,1.2 -2.1,2.8 -3.7,2.8 h -0.4 c -1.9,0 -3.5,-1.6 -3.5,-3.5 z m -52,-10.7 c 1.3,-2 1.1,-2.7 3.2,-4.4 1.3,-1 3.3,-1.9 5.5,-1.9 h 0.6 c 4.7,0 9,4.1 9,8.8 v 1.1 c 0,5 -4,9.2 -8.8,9.2 H 76.9 c -5.4,0 -9.4,-4.2 -9.4,-9.6 0,-1.4 0.4,-1.6 0.4,-3 l 0,0 z m 7.9,-20.2 c -0.8,0 -1.5,-4.4 -1.8,-5.3 -0.2,-1 -1.3,-4.6 -1.3,-5.5 h 24.1 c 0.5,0 1.3,-0.8 1.3,-1.3 v -2.2 c 0,-0.7 -0.8,-1.1 -1.5,-1.1 h -31.8 c -0.7,0 -1.5,0.4 -1.5,1.1 v 2.2 c 0,0.5 0.8,1.3 1.3,1.3 h 3.5 l 2.6,16 -6.8,2.5 2.8,3.4 c -1,1.3 -2.3,2.1 -3.6,4.2 -0.4,0.8 -1.9,4.4 -1.9,5.5 v 2.2 c 0,5.4 1.6,8.8 4.3,11.5 2.3,2.3 6.5,4.8 11,4.8 h 0.4 c 8.8,0 15.8,-7.4 15.8,-16 h 13.4 c 0.6,0 1.9,1.4 2.4,1.8 h 8.6 c -1.1,1.6 -2.2,2.9 -2.2,5.7 0,4.6 3.9,8.6 8.6,8.6 4.4,0 8.8,-3.8 8.8,-7.9 v -2 c 0,-1.2 -1.5,-3.4 -2,-4.4 h 7.2 l 1,-4.6 h -7.2 v -0.6 l 1.2,-8.1 -0.1,-3.3 c 0,-0.6 -1.7,-2.1 -2.2,-2.4 l -16,-0.5 V 78.2 c 0,-0.5 -0.4,-0.9 -0.9,-0.9 -0.5,0 -0.9,0.4 -0.9,0.9 v 15.4 c -2.2,-0.2 -6,-0.4 -8.1,-0.4 -1.3,0 -2.9,0.1 -4.2,0 -2.1,-0.1 -2,-1.3 -2.9,-1.3 h -4.6 l 2,12.3 H 91.1 V 98.6 C 91.1,97.8 87.1,94.4 86.1,94.4 H 78.7 V 89.8 L 77.5,88.1 75.8,88 z M 88.1,92 c 0,0.5 0.1,0.2 0.2,0.9 h 0.6 c 0.9,0 8.5,-6.4 10.1,-6.8 V 85.4 c 0,-0.5 -0.2,-0.6 -0.6,-0.6 h -0.4 C 97.5,84.7 88.1,91.6 88.1,92 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 119.9,119 c 0,1.9 1.6,3.5 3.5,3.5 h 0.4 c 1.6,0 3.7,-1.6 3.7,-2.8 v -0.7 c 0,-2.3 -1.5,-4 -3.7,-4 h -0.4 c -2,0 -3.5,1.7 -3.5,3.7 v 0.2 z m -52,-10.7 c 0,1.4 -0.4,1.7 -0.4,3.1 0,5.4 4.1,9.6 9.4,9.6 h 0.6 c 4.8,0 8.8,-4.3 8.8,-9.2 v -1.1 c 0,-4.7 -4.3,-8.8 -9,-8.8 h -0.6 c -2.2,0 -4.3,0.9 -5.5,1.9 -2.2,1.7 -1.9,2.4 -3.2,4.4 z"
	    }
	  ];
	  icn["GR.IN.IC.GRAIN STORAGE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 122.8,69.6 c 0.4,0.1 0.9,0.5 1.3,1 0.4,0.5 0.8,1.2 1.3,2 l 2.1,4.1 -2.2,0 -1.9,-3.9 c -0.5,-1 -1,-1.7 -1.5,-2 -0.5,-0.3 -1.1,-0.5 -1.9,-0.5 l -2.2,0 0,6.4 -2.1,0 0,-15.2 4.6,0 c 1.7,1.5e-5 3,0.4 3.9,1.1 0.9,0.7 1.3,1.8 1.3,3.3 -1e-5,1 -0.2,1.7 -0.7,2.4 -0.4,0.6 -1.1,1.1 -1.9,1.3 m -5.1,-6.4 0,5.4 2.6,0 c 1,8e-6 1.7,-0.2 2.2,-0.7 0.5,-0.5 0.8,-1.1 0.8,-2 -1e-5,-0.9 -0.3,-1.6 -0.8,-2 -0.5,-0.5 -1.2,-0.7 -2.2,-0.7 l -2.6,0 m -12.3,-0.3 c -1.5,1.4e-5 -2.7,0.6 -3.6,1.7 -0.9,1.1 -1.3,2.6 -1.3,4.5 0,1.9 0.4,3.4 1.3,4.5 0.9,1.1 2.1,1.7 3.6,1.7 1.5,1e-6 2.7,-0.6 3.5,-1.7 0.9,-1.1 1.3,-2.6 1.3,-4.5 -2e-5,-1.9 -0.4,-3.4 -1.3,-4.5 -0.9,-1.1 -2,-1.7 -3.5,-1.7 m 0,-1.7 c 2.1,1.6e-5 3.8,0.7 5.1,2.1 1.3,1.4 1.9,3.3 1.9,5.7 -2e-5,2.4 -0.6,4.3 -1.9,5.7 -1.3,1.4 -3,2.1 -5.1,2.1 -2.1,0 -3.8,-0.7 -5.1,-2.1 -1.3,-1.4 -1.9,-3.3 -1.9,-5.7 -10e-7,-2.4 0.6,-4.3 1.9,-5.7 1.3,-1.4 3,-2.1 5.1,-2.1 m -21,0.3 12.8,0 0,1.7 -5.4,0 0,13.4 -2.1,0 0,-13.4 -5.4,0 0,-1.7 m -2,0.5 0,2 c -0.8,-0.4 -1.5,-0.6 -2.2,-0.8 -0.7,-0.2 -1.4,-0.3 -2,-0.3 -1.1,1.4e-5 -2,0.2 -2.6,0.7 -0.6,0.4 -0.9,1 -0.9,1.8 -4e-6,0.7 0.2,1.2 0.6,1.5 0.4,0.3 1.2,0.6 2.3,0.8 l 1.2,0.3 c 1.5,0.3 2.7,0.8 3.4,1.5 0.7,0.7 1.1,1.7 1.1,2.9 -1.2e-5,1.5 -0.5,2.6 -1.5,3.3 -1,0.8 -2.4,1.1 -4.3,1.1 -0.7,0 -1.5,-0.1 -2.3,-0.2 -0.8,-0.2 -1.6,-0.4 -2.5,-0.7 l 0,-2.1 c 0.8,0.5 1.6,0.8 2.4,1.1 0.8,0.2 1.6,0.4 2.4,0.4 1.2,1e-6 2.1,-0.2 2.7,-0.7 0.6,-0.5 1,-1.1 1,-2 -10e-6,-0.7 -0.2,-1.3 -0.7,-1.7 -0.5,-0.4 -1.2,-0.7 -2.2,-0.9 l -1.2,-0.2 c -1.5,-0.3 -2.6,-0.8 -3.3,-1.4 -0.7,-0.6 -1,-1.6 -1,-2.7 -10e-7,-1.3 0.5,-2.4 1.4,-3.2 0.9,-0.8 2.3,-1.2 3.9,-1.2 0.7,1.6e-5 1.4,0.1 2.2,0.2 0.7,0.1 1.5,0.3 2.3,0.6 m 24.4,48.1 -0.2,2.4 h 0.4 l -1.7,3 -1,-1.7 -0.1,2 0.5,0.6 -1.2,3 -1.5,-3 0.4,3.6 0.8,0.2 -3.1,9.7 -0.5,-4.2 0.1,-1.8 c 0,-1.5 0.8,-4.7 1,-6.3 0.3,-1.7 1.3,-4.5 1.4,-6 0.6,0.1 0.4,0.2 0.8,0.2 0.4,0 2.3,-1.5 2.6,-1.8 l -3,0.6 0.8,-2.7 c 0.6,0.1 0.4,0.2 0.8,0.2 0.4,0 2.6,-1.7 2.8,-2 l -3,0.8 0.7,-2.4 c 1.3,0 2.1,-0.8 2.8,-1.4 l -2.4,0.4 0.8,-2 c 1.1,-0 1.5,-0.9 1.8,-1.8 l -1.3,0.7 2.3,-6.1 -0.8,-0.1 -2.1,5.9 -0.3,0 -0.5,-2.1 -0.1,-0 c 0,1.5 -0.4,1.6 -0.4,2.4 0,0.5 0.2,0.5 0.6,0.6 l -0.9,2.1 -1,-1.4 c -0.1,1.6 -0.4,1.9 0.7,2.4 l -0.8,2.4 -1.7,-2.2 0.4,2.8 0.6,0.5 -0.5,2.7 -1.5,-1.9 0.2,2.4 0.9,0.5 c 0,0.4 -1,4.6 -1.2,6 -0.4,2.3 -0.9,3.5 -0.9,6.3 l -1.2,-3.6 0.6,-0.8 -0,-2 -1.2,1.2 -0.8,-2.8 0.6,-0.8 -0,-2 -1.1,1.2 -0.7,-1.7 c 1,-0.5 1,-1.6 1,-3.2 l -1.3,2.1 c -0.7,-0.2 -1.1,-1.4 -1.3,-2.3 0.3,-0.4 0.6,-0.5 0.6,-1 v -1.6 h -0.4 l -0.7,1.8 c -0.2,-0.2 -0.7,-0.7 -0.7,-1.2 0,-0.4 0.6,-0.3 0.6,-1 v -0.2 c 0,-1.1 -0.4,-1.1 -0.4,-2.4 l -0.7,2.3 -0.3,0 -2.8,-5.9 -0.4,0.2 2.5,5.7 -1.3,-0.7 1,1.9 1,0 0.6,1 -2.6,-0.4 c 0.4,0.4 1.7,1.4 2.4,1.4 0.1,0 0.4,-0.1 0.6,-0.2 l 1,2.2 -3.2,-0.6 c 1.1,1 2,1.7 3.6,1.6 l 1.1,2.7 -2.9,-0.4 c 0.7,1 1.7,1.3 3,1.5 0.4,0.1 1.1,2.8 1.2,3.5 l -3,-0.6 2.2,1.6 h 1 c 1.2,2.3 2.4,11.9 2.4,15.8 h 1.4 l -0.2,-2.2 0,-1 c 0,-4 2.9,-9.3 3.2,-12.3 0.8,0.1 0.5,0.2 1,0.2 0.2,0 2.9,-1.2 3.2,-1.4 l -3.6,0.3 1.2,-3.1 0.8,0.4 3,-1.3 -3.2,0.2 1.4,-2.8 c 0.4,0.1 0.4,0.2 1,0.2 0.3,0 2.1,-1 2.4,-1.2 l -2.8,0.2 1.4,-2 c 1.5,0.1 1.5,-0.4 2.4,-1.6 l -1.4,0.4 c 0.5,-1.1 1.2,-2.2 1.8,-3.2 0.4,-0.6 2,-2.7 0.8,-3 l 0.2,0.1 -3.4,5.8 -0.4,-2.3 h -0.2 c 0,1.4 -0.6,1.7 -0.6,2.2 0,0.3 0.3,0.7 0.4,1 l -1.5,2 -0.7,-1.9 z m -25.4,13.5 c 0,-3.7 0.1,-9.1 0.7,-12.4 0.4,-2 0.1,-4 0.6,-6 0.4,-1.7 0.4,-4.2 0.8,-5.8 2.8,-10.1 1,-11.8 14.3,-11.8 h 4.4 c 11.6,0 12.6,1.2 14.2,11.3 1.2,7.6 2,14.6 2,23.6 v 8.3 l -0.4,3.6 c -1.1,1.6 -2.1,3.4 -4.9,3.4 H 86.7 c -5.4,0 -5.3,-6.4 -5.3,-11.9 v -2.4 z m -5.8,-32.5 c 2.1,-0.6 0.4,-1.3 4.4,-1 2.4,0.2 3,0.3 5,0.8 -0.7,1.1 -4.6,3 -6.5,3 h -0.4 c -0.9,0 -2.4,-1.2 -2.4,-2 v -0.8 h -0 z m 43.2,-1.5 c 2.2,-0.2 4.8,0.9 4.8,3.1 v 0.6 c 0,0.6 -0.6,0.8 -1.2,0.8 h -0.6 c -1.8,0 -6.2,-2.7 -6.9,-3.9 l 4,-0.6 z m -36.6,-6.7 c 0,-1 1,-2.2 1.8,-2.2 h 0.6 c 0.6,0 1.4,1.6 1.4,2.2 v 4.2 c 0,1.3 -0.4,1.5 -0.4,2.8 -1,-0.3 -3.4,-4.3 -3.4,-5.5 v -1.4 h -0 z m 31.7,2.8 c 0,-2.8 -0,-5.2 2.8,-5.2 h 0.6 c 0.6,0 1,0.7 1,1.4 0,2 -3,6.8 -4.4,7.3 v -3.6 h -0 z m 1.4,3.8 c 0.5,-1.8 3.8,-5 3.8,-7.1 v -1.4 c -0.6,-0.3 -0.7,-1.2 -1.6,-1.2 h -0.6 c -2.6,0 -3.8,2 -3.8,4.5 v 4.2 c -2,-0.5 -2.3,-1 -5.2,-1.2 -2,-0.2 -3.7,-0.4 -6,-0.4 h -3.6 c -4.8,0 -8.9,0.3 -12.1,2 0.2,-0.7 0.4,-0.9 0.4,-1.8 v -3.4 c 0,-1.4 -1,-3.8 -2.2,-3.8 h -0.8 c -0.8,0 -2.6,1.9 -2.6,3 0,2 2.1,5.5 3,6.8 l -5.7,-0.5 c -1.2,0 -3.4,1.1 -3.4,2.1 v 0.6 c 0,1.3 1.7,2.8 3,2.8 h 0.2 c 2.9,0 4.5,-2 6.3,-2.4 -1.9,3.5 -3.8,22 -3.8,28.1 v 6 c 0,5.9 0.3,12.3 6.1,12.3 h 26.1 c 4.1,0 6.1,-3.8 6.1,-7.9 v -10.5 c 0,-2.3 -0.2,-5.5 -0.4,-7.7 -0.2,-1.8 -0.8,-5.7 -0.8,-7.4 0,-2.6 -0.7,-4.7 -1,-7.1 -0.2,-2.1 -1.3,-4.3 -1.8,-6.2 1.2,0.6 4.9,3 6.1,3 h 1.2 c 1,0 1.8,-0.8 1.8,-1.8 v -0.2 c 0,-2.2 -1.5,-3.8 -3.8,-3.8 h -2.6 l -2.8,0.4 z m -28.1,0.6 c 0.5,1.9 8.9,3.2 11.9,3.2 h 1 c 3.1,0 12.5,-1.4 12.7,-3.6 -4.1,-1 -6.5,-1.8 -11.9,-1.8 h -1.4 c -2.4,0 -4.4,0.4 -6.5,0.6 -2.9,0.4 -3.8,1.1 -5.8,1.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 105.3,110.1 c -0.3,0.3 -2.2,1.8 -2.6,1.8 -0.4,0 -0.2,-0.1 -0.8,-0.2 0,1.5 -1.1,4.3 -1.3,6 -0.3,1.6 -1,4.8 -1,6.3 l -0.1,1.8 0.5,4.2 3.1,-9.7 -0.8,-0.2 -0.4,-3.6 1.5,3 1.2,-3 -0.5,-0.6 0.1,-2 1,1.7 1.7,-3 h -0.4 l 0.2,-2.4 -0.3,-1.2 -1.2,1.2 z m 0,0 1.2,-1.2 0.3,1.2 0.7,1.9 1.5,-2 c -0.1,-0.3 -0.4,-0.7 -0.4,-1 0,-0.5 0.6,-0.8 0.6,-2.2 h 0.2 l 0.4,2.3 3.4,-5.7 -0.2,-0.1 c 1.3,0.4 -0.4,2.4 -0.8,3 -0.6,1 -1.3,2.1 -1.8,3.2 l 1.4,-0.4 c -0.8,1.2 -0.9,1.7 -2.4,1.6 l -1.4,2 2.8,-0.2 c -0.3,0.2 -2,1.2 -2.4,1.2 -0.5,0 -0.5,-0.1 -1,-0.2 l -1.4,2.8 3.2,-0.2 -3,1.3 -0.8,-0.4 -1.2,3.1 3.6,-0.4 c -0.3,0.2 -2.9,1.4 -3.2,1.4 -0.5,0 -0.2,-0.1 -1,-0.2 -0.3,2.9 -3.2,8.2 -3.2,12.3 l -0.1,1 0.3,2.2 h -1.4 c 0,-4 -1.2,-13.6 -2.4,-15.8 h -1 l -2.2,-1.6 3,0.6 c 0,-0.7 -0.8,-3.4 -1.2,-3.5 -1.3,-0.2 -2.3,-0.5 -3,-1.5 l 2.9,0.4 -1.1,-2.8 c -1.5,0.1 -2.5,-0.6 -3.6,-1.6 l 3.2,0.6 -1.1,-2.2 c -0.2,0.1 -0.5,0.2 -0.6,0.2 -0.7,0 -2,-1 -2.4,-1.4 l 2.6,0.4 -0.6,-1 h -1 l -1,-1.9 1.3,0.7 -2.5,-5.7 0.4,-0.2 2.8,5.9 0.3,-0 0.7,-2.4 c 0,1.3 0.4,1.2 0.4,2.4 v 0.2 c 0,0.7 -0.6,0.6 -0.6,1 0,0.4 0.5,1 0.7,1.2 l 0.7,-1.8 h 0.4 v 1.6 c 0,0.5 -0.3,0.6 -0.6,1 0.2,0.9 0.5,2.1 1.3,2.3 l 1.3,-2.1 c 0,1.5 0,2.6 -1,3.2 l 0.7,1.7 1.1,-1.2 0,2 -0.6,0.8 0.8,2.8 1.2,-1.2 0,2 -0.6,0.7 1.2,3.6 c 0,-2.8 0.4,-4 0.9,-6.2 0.3,-1.3 1.3,-5.6 1.2,-6 l -0.9,-0.5 -0.2,-2.5 1.5,1.9 0.5,-2.7 -0.6,-0.5 -0.4,-2.8 1.7,2.2 0.8,-2.4 c -1,-0.5 -0.8,-0.8 -0.7,-2.4 l 1,1.4 0.9,-2.1 c -0.4,-0.1 -0.6,-0 -0.6,-0.6 0,-0.8 0.4,-0.9 0.4,-2.4 l 0.1,0 0.5,2.1 0.3,-0 2.1,-5.9 0.8,0.1 -2.3,6.1 1.3,-0.7 c -0.2,0.9 -0.6,1.8 -1.8,1.8 l -0.8,2 2.4,-0.4 c -0.7,0.6 -1.5,1.4 -2.8,1.4 l -0.7,2.4 3,-0.8 c -0.2,0.3 -2.4,2 -2.8,2 -0.4,0 -0.2,-0.1 -0.8,-0.2 l -0.8,2.7 3,-0.5 z M 87.1,90.1 c 2,-0.5 2.9,-1.2 5.8,-1.6 2.1,-0.3 4.1,-0.6 6.5,-0.6 h 1.4 c 5.4,0 7.8,0.8 11.9,1.8 -0.2,2.2 -9.6,3.6 -12.7,3.6 h -1 c -3,0 -11.4,-1.3 -11.9,-3.2 z m -5.8,33.5 v 2.4 c 0,5.5 -0.1,11.9 5.3,11.9 h 26.4 c 2.8,0 3.8,-1.7 4.9,-3.4 l 0.4,-3.6 v -8.3 c 0,-9 -0.8,-15.9 -2,-23.6 -1.6,-10.1 -2.6,-11.3 -14.2,-11.3 h -4.4 c -13.3,0 -11.6,1.7 -14.3,11.8 -0.4,1.6 -0.4,4 -0.8,5.8 -0.5,2 -0.2,3.9 -0.6,6 -0.6,3.3 -0.7,8.6 -0.7,12.4 z M 114.8,90.2 c 0.7,1.2 5.2,3.9 6.9,3.9 h 0.6 c 0.6,0 1.2,-0.2 1.2,-0.8 v -0.6 c 0,-2.2 -2.6,-3.3 -4.8,-3.1 l -4,0.6 0,0 z m -39.2,0.9 v 0.8 c 0,0.8 1.4,2 2.4,2 h 0.4 c 2,0 5.8,-1.9 6.5,-3 -2,-0.4 -2.6,-0.6 -5,-0.8 -3.8,-0.3 -2.1,0.4 -4.3,1 z m 38.3,-5.3 v 3.6 c 1.3,-0.5 4.4,-5.3 4.4,-7.3 0,-0.7 -0.4,-1.4 -1,-1.4 h -0.6 c -2.8,-0 -2.8,2.4 -2.8,5.1 z m -31.7,-2.8 v 1.4 c 0,1.3 2.4,5.3 3.4,5.5 0,-1.3 0.4,-1.5 0.4,-2.8 v -4.2 c 0,-0.6 -0.8,-2.2 -1.4,-2.2 h -0.6 c -0.8,0 -1.8,1.3 -1.8,2.2 z"
	    }
	  ];
	  icn["GR.IN.IC.ATM"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 73.6,116.3 c 5.1,-0.1 15.8,-6.6 17,-6.6 0.4,0 7.4,3.8 8.9,4.2 -0.4,0.6 -5.1,4.6 -6.2,5.7 -1.2,1.2 -4.7,5.8 -5.5,6.4 -1.6,-0.8 -14,-8.9 -14.2,-9.6 z m -15.1,-6.2 11.9,-2.5 11.1,5.6 -9.6,3 16.2,10.7 -0,-0.2 6.4,-7.5 26.9,12.7 20.3,-46.8 -50.2,-17.2 c -0.6,2.2 -5.2,9.1 -6.5,11.8 -0.8,1.8 -2.3,4.4 -3.3,6 -1.2,1.8 -2.2,4.1 -3.3,6 -1.2,2 -2.1,3.8 -3.3,5.8 -1.2,1.9 -2.1,4.2 -3.3,6 -2.4,3.6 -0.2,2.7 -5.5,3.7 -2.6,0.5 -5.2,1 -7.7,1.6 m 62,21.5 -25.2,-11.8 4.8,-4 7.3,3.5 1.2,-2.4 -23.9,-11.7 v 0.2 l -1,2.2 6,2.9 -6.2,3.4 -11.8,-5.8 -0.2,0 20.7,-37 0.2,0.1 47.4,16.1 h 0.2 l -19.4,44.2 z m 7.8,-31.3 1.1,-2 -5.8,-2.3 -0.8,2.3 z m -2.7,5.2 1.2,-1.9 -5.6,-2.3 -0.8,2.2 z m -22,-7.3 c 0.6,0.4 2.1,1.4 2.1,2.1 v 2.4 c 0,0.8 -1.7,1.5 -2.6,1.5 h -0.2 c -0.8,0 -1,-0.2 -1.7,-0.4 l 2.4,-5.7 z m -3.4,-6.4 c 0,-2.2 1.1,-2.8 3.2,-2.8 h 0.2 c 0.7,0 1,0.2 1.5,0.4 l -2.2,5.1 c -0.9,-0 -2.8,-1.2 -2.8,-2.4 v -0.2 z m 5.6,-4.2 c -0.3,-0.1 -1.2,-0.5 -1.6,-0.5 h -1.9 c -0.7,0 -2.5,0.6 -2.9,0.9 -0.3,0.2 -1.4,2.1 -1.4,2.5 v 1.7 c 0,2.1 3.8,4.2 3.8,4.9 0,0.4 -2.2,4.6 -2.4,5.7 -0.6,-0.3 -2.5,-1.8 -2.5,-2.6 v -0.6 c 0,-0.8 0.6,-1.4 0.8,-2.1 -0.9,-0.2 -2,-1.1 -2.4,-1.2 -0.4,-0.1 -1,1.7 -1,2.3 v 0.4 c 0,2.7 4.2,5.4 4.2,5.7 0,0.6 -0.4,1.4 -0.5,2 l 1.7,0.8 0.6,-1.7 c 1.4,0 2,0.8 3.6,0.8 h 0.6 c 1.4,0 2.6,-0.5 3.2,-1.3 0.3,-0.4 1.5,-2.4 1.5,-3 v -0.4 c 0,-2.6 -2.8,-4.8 -4.4,-5.9 l 2.5,-5.6 h 0.4 c 0.4,1.2 1.5,0.6 1.5,3.6 l 2.8,1.2 v -1.7 c 0,-2 -2,-4.1 -3.8,-4.6 l 0.8,-2.1 -2.1,-0.5 -0.8,1.5 z m 13,18.4 -0.9,2 5.4,2.2 -0,-0.2 1.2,-1.8 z m -22.4,-25.2 26.1,9.5 -11,24.1 -26.7,-12.8 11.6,-20.8 z m -12.5,21.2 27.8,13.4 11.7,-25.7 c -1,-0.1 -11.8,-4.2 -13.4,-4.8 -1.2,-0.5 -13.3,-5 -13.5,-5 -0.9,0 -5.4,9.5 -6.4,10.8 -0.8,1.3 -5.9,10.3 -6.1,11.2 z m 31.7,11.2 5.4,2.2 -0.1,-0.2 1.3,-1.8 c -1.1,-0.2 -5,-2.2 -5.5,-2.2 -0.4,0 -1.1,1.6 -1.2,2.1 z m -25.8,0.6 4.3,2.9 -6,5.8 -6,-4.1 7.7,-4.6 z m -9.1,4.5 7.4,4.9 7.1,-6.6 c -0.5,-0.4 -5.3,-3.6 -5.4,-3.6 -1,0 -7.6,4.9 -9.1,5.3 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 115.7,111.8 c 0,-0.5 0.8,-2.1 1.2,-2.1 0.5,0 4.4,2 5.5,2.3 l -1.3,1.8 0.1,0.2 -5.4,-2.2 z m 3.2,-7.1 5.7,2.2 -1.2,1.8 0,0.2 -5.4,-2.2 0.9,-2 z m 2.4,-4.8 5.6,2.3 -1.2,1.9 -5.2,-2 0.8,-2.2 z m 2.5,-5.3 5.8,2.3 -1.1,2 -5.5,-2 0.8,-2.3 z m -39.7,6 c 0.2,-1 5.3,-10 6.1,-11.2 0.9,-1.4 5.4,-10.8 6.4,-10.8 0.2,0 12.3,4.5 13.5,5 1.7,0.7 12.5,4.8 13.5,4.8 l -11.7,25.7 -27.8,-13.4 z m 55.9,-14.6 h -0.2 l -47.4,-16.1 -0.2,-0.1 -20.7,37 0.2,-0 11.8,5.8 6.3,-3.4 -6,-2.9 1,-2.2 v -0.2 l 23.9,11.7 -1.2,2.4 -7.3,-3.5 -4.8,4 25.2,11.8 19.4,-44.2 0,0 z m -59.1,30.9 c 1.5,-0.4 8,-5.3 9.1,-5.3 0.2,0 4.9,3.2 5.5,3.6 l -7.2,6.6 -7.4,-4.9 z m -7.2,-0.6 c 0.2,0.8 12.6,8.8 14.2,9.6 0.8,-0.6 4.3,-5.2 5.5,-6.4 1.1,-1.1 5.8,-5.1 6.2,-5.7 -1.6,-0.3 -8.5,-4.1 -8.9,-4.1 -1.2,0 -11.9,6.5 -17,6.6 z m 26.6,-25.9 v 0.2 c 0,1.2 1.8,2.4 2.7,2.4 l 2.2,-5 c -0.4,-0.2 -0.8,-0.4 -1.5,-0.4 h -0.2 c -2.1,0 -3.2,0.7 -3.2,2.8 z m 0.9,12.1 c 0.7,0.2 0.9,0.4 1.7,0.4 h 0.2 c 1,0 2.6,-0.7 2.6,-1.5 v -2.4 c 0,-0.7 -1.6,-1.7 -2.1,-2.1 l -2.4,5.6 z m 5.5,-17.7 2.1,0.5 -0.8,2.1 c 1.8,0.4 3.8,2.5 3.8,4.6 v 1.7 l -2.8,-1.1 c 0,-3 -1.1,-2.4 -1.5,-3.6 h -0.4 l -2.5,5.6 c 1.6,1.1 4.4,3.3 4.4,5.9 v 0.4 c 0,0.6 -1.2,2.6 -1.5,3 -0.6,0.8 -1.8,1.3 -3.2,1.3 h -0.6 c -1.6,0 -2.2,-0.7 -3.6,-0.8 l -0.6,1.7 -1.7,-0.8 c 0.1,-0.6 0.5,-1.4 0.5,-2 0,-0.3 -4.2,-2.9 -4.2,-5.7 v -0.4 c 0,-0.6 0.6,-2.4 1,-2.4 0.4,0.1 1.4,1 2.4,1.2 -0.2,0.7 -0.7,1.3 -0.7,2.1 v 0.6 c 0,0.8 1.8,2.3 2.4,2.6 0.2,-1 2.4,-5.3 2.4,-5.7 0,-0.7 -3.8,-2.8 -3.8,-4.9 V 89.1 c 0,-0.4 1.1,-2.3 1.4,-2.5 0.4,-0.3 2.2,-0.9 2.9,-0.9 h 1.9 c 0.4,0 1.4,0.4 1.6,0.5 l 0.8,-1.4 z m -21.8,15.4 26.6,12.9 11,-24.1 -26,-9.5 -11.6,20.8 z m 5,12.1 -7.7,4.6 6,4.1 6,-5.8 z"
	    }
	  ];
	  icn["GR.IN.IC.BANK"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100.8,110.6 c 2.4,0 5.3,1.9 5.3,4.4 v 0.7 c 0,3.1 -2.1,4.9 -5.3,4.9 v -9.9 z m -6.6,-8.8 c 0,-2.3 1.7,-4.4 4,-4.4 h 0.7 v 9 c -1.9,-0.4 -4.6,-1.6 -4.6,-3.7 v -0.9 z m 6.6,-4.4 c 2.2,0 4.6,1.6 4.6,3.5 v 0.9 h 3.5 c 0,-5.3 -3.7,-6.7 -8.1,-7.7 v -2.4 h -2 v 2.4 c -3.9,0 -8.2,3.5 -8.2,7 v 2.6 c 0,1.3 2,3.6 3,4.2 1,0.6 3.8,1.8 5.1,1.9 v 10.6 c -3.4,-0.1 -5.2,-2.6 -5.2,-6.1 h -3.3 l 0.2,3.5 c 1.1,1.7 0.9,2.8 2.9,4.1 1.3,0.8 3.4,1.6 5.5,1.6 v 4 h 2 v -3.9 c 4.9,0 9,-3.4 9,-8.1 v -1.8 c 0,-4.2 -5.4,-6 -9,-6.8 v -9.4 z m -25.3,15.2 v -2.4 c 0,-2.2 2.6,-7.4 3.1,-9.4 0.7,-2.7 3.1,-5.9 4.7,-8 3.5,-4.6 8.5,-8.9 16.5,-8.9 h 4.4 c 3.4,0 8.8,4.3 10.4,6.5 1.3,1.7 2.2,3.1 3.4,5 0.5,0.7 2.7,5.2 2.7,5.9 v 0.7 h 0.4 v 0.7 c 0,0.4 0.9,1.5 0.8,3.1 l 0.5,0.7 c 0,2 1.1,6.8 1.3,9 0.4,3.2 1.3,5.6 -0.7,8.5 0,2.4 -5.2,8.7 -6.2,8.8 l -9.2,-1.5 c -1.8,-0.3 -6.8,2 -9.2,2 -2,0 -5.6,-1.7 -7.5,-1.7 -1.6,0 -3.2,1.3 -5.5,1.3 h -0.6 c -1.9,0 -5.9,-6.1 -7,-7.7 -1.8,-2.6 -2.4,-8 -2.4,-12.3 z m 30.7,-31 -6.1,-1.1 c -0.8,-0.1 -5.2,1.1 -5.8,1.3 l -6.3,-11.5 1.7,0.5 v -2.9 l 8.9,3.4 0.3,-3.5 3.2,2.5 5.7,-2.6 v 2.6 l 7.5,-1.4 -9.3,13 0,0 z m 11.8,-14.5 -9.1,1.6 v -2.8 c -0.9,0.5 -5.7,2.9 -6.6,2.9 -0.1,0 -3.4,-2.6 -4,-2.9 l -0.7,4 -8.8,-3.6 v 2.9 l -3.1,-1 8.1,15.1 -0.2,0.1 c -4.6,1.1 -10.3,6.8 -12.7,10.4 -0.8,1.1 -1.3,2.6 -2,3.7 -1.4,1.8 -0.9,2.5 -1.7,4 -0.6,1.1 -2.9,7.2 -2.9,8.6 v 3.7 c 0,1 0.7,5.8 1,6.7 0.4,1.4 0.4,2 0.8,3.2 0.3,0.9 0.9,1.6 1.4,2.3 1.3,2 4.8,7.5 7.6,7.5 2.5,0 4.3,-1.3 5.7,-1.3 2.3,0 5.2,1.7 7.3,1.7 h 0.7 c 2,0 5.7,-1.4 8,-1.9 1.8,-0.3 5.9,1 8.5,1 h 1.7 c 1.7,0 4.8,-4.2 5.8,-5.5 1.1,-1.4 1.3,-2.2 1.7,-4 0.1,-0.4 1.1,-4.3 1.1,-4.4 0,-3 -0.9,-4.1 -1.1,-5.9 -0.2,-2.4 -0.4,-4 -0.7,-6.1 -0.2,-1.7 -2.8,-8.6 -3.6,-10.3 -2.4,-4.9 -7.7,-13.2 -14,-13.7 l 11.7,-16.2 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 100.8,120.4 c 3.2,0 5.3,-1.7 5.3,-4.9 v -0.6 c 0,-2.5 -2.9,-4.3 -5.3,-4.4 v 9.8 z m -6.6,-18.7 v 0.9 c 0,2.2 2.8,3.3 4.6,3.7 v -9 h -0.7 c -2.3,0 -4,2 -4,4.4 z m 6.6,5 c 3.6,0.8 9,2.6 9,6.8 v 1.7 c 0,4.7 -4.1,8.1 -9,8.1 v 4 h -2 v -3.9 c -2,0 -4.2,-0.7 -5.5,-1.6 -2,-1.3 -1.7,-2.5 -2.9,-4.2 l -0.2,-3.5 h 3.3 c 0,3.5 1.8,6.1 5.3,6.2 v -10.6 c -1.3,-0.1 -4.1,-1.3 -5.1,-2 -1,-0.6 -3,-3 -3,-4.2 v -2.6 c 0,-3.5 4.2,-7 8.1,-7 v -2.4 h 2 v 2.4 c 4.4,1 8.1,2.3 8.1,7.7 h -3.5 v -0.9 c 0,-1.9 -2.5,-3.5 -4.6,-3.5 v 9.5 l 0,0 z m -25.3,5.8 c 0,4.3 0.6,9.8 2.4,12.3 1.1,1.6 5.1,7.7 7,7.7 h 0.7 c 2.3,0 3.9,-1.3 5.5,-1.3 1.9,0 5.5,1.7 7.5,1.7 2.5,0 7.4,-2.3 9.2,-2 l 9.1,1.5 c 1,0 6.2,-6.4 6.2,-8.8 2,-2.9 1,-5.3 0.7,-8.6 -0.2,-2.2 -1.3,-6.9 -1.3,-9 l -0.5,-0.6 c 0.1,-1.6 -0.8,-2.7 -0.8,-3.1 v -0.7 h -0.4 v -0.7 c 0,-0.7 -2.2,-5.2 -2.7,-5.9 -1.1,-1.9 -2.1,-3.2 -3.4,-5 -1.6,-2.2 -7,-6.5 -10.4,-6.5 h -4.4 c -8,0 -13,4.4 -16.5,8.9 -1.6,2.1 -4,5.3 -4.7,8 -0.5,2 -3.1,7.2 -3.1,9.4 v 2.4 z m 40,-44 -7.4,1.5 v -2.6 l -5.8,2.6 -3.2,-2.4 -0.3,3.5 -8.9,-3.4 v 2.9 l -1.7,-0.5 6.3,11.5 c 0.5,-0.2 5,-1.4 5.8,-1.3 l 6.1,1.1 9.3,-13 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.BULLION STORAGE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 123.1,77.9 c 0.4,0.1 0.9,0.5 1.3,1 0.4,0.5 0.8,1.2 1.3,2 l 2.1,4.1 -2.2,0 -1.9,-3.9 c -0.5,-1 -1,-1.7 -1.5,-2 -0.5,-0.3 -1.1,-0.5 -1.9,-0.5 l -2.2,0 0,6.4 -2.1,0 0,-15.2 4.6,0 c 1.7,1.5e-5 3,0.4 3.9,1.1 0.9,0.7 1.3,1.8 1.3,3.3 -1e-5,1 -0.2,1.7 -0.7,2.4 -0.4,0.6 -1.1,1.1 -1.9,1.3 m -5.1,-6.4 0,5.4 2.6,0 c 1,8e-6 1.7,-0.2 2.2,-0.7 0.5,-0.5 0.8,-1.1 0.8,-2 -1e-5,-0.9 -0.3,-1.6 -0.8,-2 -0.5,-0.5 -1.2,-0.7 -2.2,-0.7 l -2.6,0 m -12.3,-0.3 c -1.5,1.4e-5 -2.7,0.6 -3.6,1.7 -0.9,1.1 -1.3,2.6 -1.3,4.5 -10e-6,1.9 0.4,3.4 1.3,4.5 0.9,1.1 2.1,1.7 3.6,1.7 1.5,10e-7 2.7,-0.6 3.5,-1.7 0.9,-1.1 1.3,-2.6 1.3,-4.5 -1e-5,-1.9 -0.4,-3.4 -1.3,-4.5 -0.9,-1.1 -2,-1.7 -3.5,-1.7 m 0,-1.7 c 2.1,1.5e-5 3.8,0.7 5.1,2.1 1.3,1.4 1.9,3.3 1.9,5.7 -1e-5,2.4 -0.6,4.3 -1.9,5.7 -1.3,1.4 -3,2.1 -5.1,2.1 -2.1,0 -3.8,-0.7 -5.1,-2.1 -1.3,-1.4 -1.9,-3.3 -1.9,-5.7 -10e-7,-2.4 0.6,-4.3 1.9,-5.7 1.3,-1.4 3,-2.1 5.1,-2.1 m -21,0.3 12.8,0 0,1.7 -5.4,0 0,13.4 -2.1,0 0,-13.4 -5.4,0 0,-1.7 m -2,0.5 0,2 c -0.8,-0.4 -1.5,-0.6 -2.2,-0.8 -0.7,-0.2 -1.4,-0.3 -2,-0.3 -1.1,1.4e-5 -2,0.2 -2.6,0.7 -0.6,0.4 -0.9,1 -0.9,1.8 -3e-6,0.7 0.2,1.2 0.6,1.5 0.4,0.3 1.2,0.6 2.3,0.8 l 1.2,0.3 c 1.5,0.3 2.7,0.8 3.4,1.5 0.7,0.7 1.1,1.7 1.1,2.9 -1.2e-5,1.5 -0.5,2.6 -1.5,3.3 -1,0.8 -2.4,1.1 -4.3,1.1 -0.7,0 -1.5,-0.1 -2.3,-0.2 -0.8,-0.2 -1.6,-0.4 -2.5,-0.7 l 0,-2.1 c 0.8,0.5 1.6,0.8 2.4,1.1 0.8,0.2 1.6,0.4 2.4,0.4 1.2,10e-7 2.1,-0.2 2.7,-0.7 0.6,-0.5 1,-1.1 1,-2 -1e-5,-0.7 -0.2,-1.3 -0.7,-1.7 -0.5,-0.4 -1.2,-0.7 -2.2,-0.9 l -1.2,-0.2 c -1.5,-0.3 -2.6,-0.8 -3.3,-1.4 -0.7,-0.6 -1,-1.6 -1,-2.7 -2e-6,-1.3 0.5,-2.4 1.4,-3.2 0.9,-0.8 2.3,-1.2 3.9,-1.2 0.7,1.5e-5 1.4,0.1 2.2,0.2 0.7,0.1 1.5,0.3 2.3,0.6 M 103.6,119.3 h 9.6 c 0.4,0 9,9.2 9.6,10.1 H 95.6 c 0.2,-1 7.4,-10.1 8,-10.1 z m -29.2,0 h 9.9 c 0.6,0 8.2,9 8.9,10.1 H 65.9 c 0.3,-1 7.8,-10.1 8.4,-10.1 l 0,0 z m 11.5,0 h 15.4 l -6.9,9.9 -8.5,-9.9 z m -5.5,-1 c 0.7,-1.1 7.6,-9.4 8.4,-9.4 h 9.2 c 0.7,0 8.9,8.5 9.2,9.4 H 80.4 z m 43.7,10.8 -9.5,-10.4 10.4,-14.3 9.7,8.5 -10.7,16.1 0,0 z m -4.8,-24.8 4.8,-0 -10.5,14.1 -4.1,-0.1 9.8,-13.9 z m -31.1,-0.2 2.8,0.1 c -1.1,1.6 -4.6,4.9 -6.2,6.8 -1.7,2.1 -4.2,5.1 -5.6,7.2 l -4.2,-0.1 13.2,-14.1 z m 21.1,-8.6 c 0.9,0.6 9,8.2 9,8.5 0,0.1 -9.3,13.6 -9.9,14 l -8.9,-9.9 9.8,-12.6 z M 89.1,108 c 0.9,-1.3 11.4,-12.6 12.1,-12.6 h 6.8 l -9.5,12.5 -9.4,0 z m 2.9,-4.6 h -4.6 c -1.2,1.8 -4.3,4.9 -6,6.6 -2.1,2.1 -3.9,4.4 -6,6.5 -1.3,1.3 -11.2,12.8 -11.4,13.7 0.5,0.1 0.5,0.2 1.2,0.2 l 59.3,-0 11.6,-17.5 -0.3,0.1 -10.5,-9.6 h -5.8 c -1.5,-1 -9.6,-8.9 -10.4,-8.9 h -8.2 c -0.9,0 -7.6,8 -9,8.9 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 103.6,119.3 c -0.5,0 -7.7,9.2 -8,10.1 h 27.3 c -0.6,-1 -9.2,-10.1 -9.6,-10.1 h -9.6 z m -29.2,0 c -0.6,0 -8.2,9.1 -8.4,10.1 h 27.3 c -0.7,-1.1 -8.3,-10.1 -8.9,-10.1 H 74.3 l 0,0 z m 50.7,-14.7 -10.4,14.3 9.5,10.4 10.7,-16.1 z m -30.7,24.7 6.9,-9.9 -15.4,0 z m 5.1,-21.1 8.9,9.9 c 0.6,-0.4 9.9,-13.9 9.9,-14 0,-0.3 -8.1,-7.9 -9,-8.5 l -9.9,12.6 z m -19.1,10.2 h 26.8 c -0.2,-0.9 -8.5,-9.4 -9.2,-9.4 h -9.2 c -0.9,0 -7.7,8.3 -8.4,9.4 z m 33.2,0.1 10.5,-14.1 -4.8,0 -9.8,13.9 z m -38.6,-0.2 4.2,0.1 c 1.4,-2.1 3.9,-5.1 5.6,-7.2 1.6,-1.9 5.1,-5.2 6.2,-6.8 l -2.8,-0.1 -13.2,14.1 z m 14.1,-10.3 9.4,-0 9.5,-12.5 h -6.7 c -0.7,0 -11.2,11.2 -12.1,12.6 z"
	    }
	  ];
	  icn["GR.IN.IC.FEDERAL RESERVE BANK"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 65.6,125.4 h 68.8 v 4.4 H 65.6 v -4.4 z m 58.1,-31.3 h 5.3 v 29.9 h -5.3 v -29.9 z m -10.6,0 h 5.1 v 29.9 h -5.1 v -29.9 z m -31.3,0 h 5.3 v 29.9 H 81.8 v -29.9 z m -10.6,0 h 5.1 v 29.9 h -5.1 v -29.9 z m 27.7,1.5 h 2 v 1.4 h 0.5 c 2.9,0 6,2.3 6,5.3 l -2.9,0.4 c -0.2,-0 -1,-1.9 -1.4,-2.4 -0.4,-0.5 -1.5,-1.1 -2.3,-1.2 v 7.8 c 3,0.3 7.3,2.3 7.3,5.3 v 1.1 c 0,4 -3.4,6.7 -7.3,6.7 v 2.5 h -2 v -2.5 c -1.7,-0 -4.1,-0.8 -5.1,-1.7 -0.8,-0.7 -2.4,-2.8 -2.4,-4.1 v -0.9 l 3.1,-0.5 c 0,2.3 2,4.9 4.4,4.9 v -8.6 c -2.3,-0 -6.9,-2.5 -6.9,-5.1 v -1.8 c 0,-3 3.2,-5.3 6.2,-5.3 h 0.7 v -1.4 z m -33.3,-7.5 h 68.8 v 4.6 H 65.6 v -4.6 z M 100,70.3 c 0.7,0.6 6.5,3.4 7.9,4.1 2.7,1.4 5.2,2.7 7.9,4.1 2.7,1.3 5.3,2.7 7.9,4.1 1.1,0.6 7.7,3.6 8.1,4 H 68.5 l 31.5,-16.1 0,0 z m -35.9,17.1 v 6 c 0,0.4 0.3,0.7 0.7,0.7 h 4.9 v 29.9 h -5.6 v 7.4 h 71.7 v -7.4 h -5.5 v -29.9 h 4.9 c 0.4,0 0.5,-0.1 0.5,-0.5 v -6.7 c -2,-0.7 -6.7,-3.4 -8.9,-4.6 -3,-1.5 -5.9,-3 -8.9,-4.6 -1.7,-0.8 -17.8,-9.1 -17.9,-9.1 -0.4,0 -16.3,8.2 -18.1,9.2 -1.9,1 -17.8,8.7 -17.8,9.6 l 0,0 0,0 z m 36.7,30.4 c 1.7,0 4,-2 4,-3.5 v -1.4 c 0,-2.1 -2.3,-2.7 -4,-3.1 v 8 z m -5.6,-14 c 0,1.6 2.2,2.6 3.6,2.7 v -7.4 c -1.3,0.3 -3.6,1.4 -3.6,2.7 v 2 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 134.4,129.8 0,-4.4 -68.8,0 0,4.4 z m -5.5,-5.8 0,-29.9 -5.3,0 0,29.9 z m -10.8,0 0,-29.9 -5.1,0 0,29.9 z m -31.1,0 0,-29.9 -5.3,0 0,29.9 z m -10.7,0 0,-29.9 -5.1,0 0,29.9 z m -7.9,-37.5 63.3,0 c -0.4,-0.3 -6.9,-3.4 -8.1,-4 -2.7,-1.3 -5.2,-2.7 -7.9,-4.1 -2.7,-1.3 -5.2,-2.7 -7.9,-4.1 -1.4,-0.7 -7.2,-3.5 -7.9,-4.1 l -31.5,16.1 0,0 z m 65.9,6.2 0,-4.6 -68.8,0 0,4.6 z m -33.5,25.1 v -8 c 1.7,0.4 4,1 4,3.1 v 1.5 c 0,1.4 -2.2,3.5 -4,3.5 z m -5.6,-14 v -2 c 0,-1.3 2.4,-2.4 3.6,-2.7 v 7.4 c -1.5,-0.1 -3.6,-1.1 -3.6,-2.7 z m 3.6,-6.7 h -0.8 c -3,0 -6.2,2.3 -6.2,5.3 v 1.8 c 0,2.5 4.6,5.1 6.9,5.1 v 8.6 c -2.4,0 -4.4,-2.5 -4.4,-4.9 l -3.1,0.5 v 0.9 c 0,1.3 1.6,3.5 2.4,4.1 1,0.8 3.3,1.6 5.1,1.7 v 2.5 h 2 v -2.5 c 3.9,0 7.3,-2.7 7.3,-6.7 v -1.1 c 0,-3 -4.3,-5 -7.3,-5.3 v -7.8 c 0.8,0.1 1.9,0.6 2.3,1.2 0.3,0.5 1.1,2.3 1.4,2.4 l 2.9,-0.4 c 0,-3 -3.1,-5.3 -6,-5.3 h -0.6 v -1.4 h -2 v 1.4 z"
	    }
	  ];
	  icn["GR.IN.IC.FINANCIAL EXCHANGE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 133.7,124.6 0,-1.4 -66.8,0 0.3,0 0,-47 -1,0 0,48.4 z m -29.5,-8.6 -9.8,-20.8 -5.9,14.4 -5.3,-6.5 -13.3,12.4 0.9,1 v 0.2 l 12.4,-11.3 5.5,7 h 0.3 c 0,-1 2.3,-5.6 2.8,-7 0.3,-1 1.1,-2.4 1.5,-3.4 0.3,-0.8 0.9,-3.1 1.5,-3.2 l 9.4,20.3 0.1,0.2 17.4,-27.4 0.2,0.1 8,15.6 1.4,-0.5 -9.4,-18 c -0.1,0.5 -7.7,12.1 -8.7,13.6 -1,1.6 -8.2,13.2 -8.9,13.4 z m 2.8,-19.4 V 89.2 c 2.1,0 4.1,1.4 4.1,3.6 v 0.2 c 0,2.1 -1.9,3.6 -4.1,3.6 z m -4.7,-13.6 c 0,-2 1,-3.4 3,-3.4 h 0.5 v 6.6 c -1.8,-0.1 -3.4,-1.3 -3.4,-3.2 z m 3.5,-5.6 h -1 c -2.6,0 -5.2,2.9 -5.2,5.6 v 1 c 0,1.1 1.3,2.8 2.1,3.4 1.1,0.8 2.5,1.2 4,1.5 v 7.8 c -2.6,-0.6 -4.1,-1.7 -4.1,-4.8 h -2.4 l 0.2,2.5 c 0.9,1.4 0.6,2.1 2.2,3.2 1.1,0.7 2.4,1.2 4.1,1.2 v 2.8 h 1.2 v -2.8 c 3,0 6.4,-2.3 6.4,-5 v -2.5 c 0,-2.9 -4,-4.3 -6.4,-4.8 v -6.9 c 2,0 3.4,1.4 3.4,3.3 h 2.7 c 0,-3.2 -2.8,-5.5 -6.1,-5.5 V 75.4 h -1.2 v 1.9 z"
	    }
	  ];
	  icn["GR.IN.IC.FINANCIAL SERVICES, OTHER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 103.4,138.2 -2.7,0 -0,-8.2 c -1.9,-0 -3.8,-0.3 -5.7,-0.7 -1.9,-0.4 -3.8,-1 -5.8,-1.9 l 0,-4.9 c 1.9,1.2 3.7,2.1 5.6,2.7 1.9,0.6 3.9,0.9 5.9,0.9 l 0,-12.5 c -4,-0.7 -7,-1.8 -8.8,-3.3 -1.8,-1.6 -2.7,-3.7 -2.7,-6.5 -5e-6,-3 1,-5.3 3,-7 2,-1.7 4.8,-2.7 8.6,-3 l 0,-6.4 2.7,0 0,6.3 c 1.7,0.1 3.3,0.3 4.9,0.5 1.6,0.3 3.1,0.7 4.6,1.1 l 0,4.8 c -1.5,-0.8 -3.1,-1.4 -4.7,-1.8 -1.6,-0.4 -3.2,-0.7 -4.9,-0.7 l 0,11.7 c 4.1,0.6 7.2,1.8 9.1,3.4 2,1.6 2.9,3.9 2.9,6.7 -3e-5,3.1 -1,5.5 -3.1,7.3 -2.1,1.8 -5,2.8 -8.9,3.1 l 0,8.3 m -2.7,-29.3 0,-11.2 c -2.1,0.2 -3.7,0.8 -4.8,1.8 -1.1,1 -1.7,2.3 -1.7,3.9 -1e-5,1.6 0.5,2.8 1.5,3.7 1,0.9 2.7,1.5 5,1.9 m 2.7,5.3 0,11.8 c 2.3,-0.3 4.1,-1 5.2,-2 1.2,-1 1.8,-2.3 1.8,-4 -3e-5,-1.6 -0.6,-2.9 -1.7,-3.8 -1.1,-0.9 -2.9,-1.6 -5.3,-2.1 m 5.8,-52.2 2.1,0 0,6.2 7.5,0 0,-6.2 2.1,0 0,15.2 -2.1,0 0,-7.2 -7.5,0 0,7.2 -2.1,0 0,-15.2 m -14.8,0 12.8,0 0,1.7 -5.4,0 0,13.4 -2.1,0 0,-13.4 -5.4,0 0,-1.7 m -8.1,1.4 c -1.5,1.3e-5 -2.7,0.6 -3.6,1.7 -0.9,1.1 -1.3,2.6 -1.3,4.5 -3e-6,1.9 0.4,3.4 1.3,4.5 0.9,1.1 2.1,1.7 3.6,1.7 1.5,1e-6 2.7,-0.6 3.5,-1.7 0.9,-1.1 1.3,-2.6 1.3,-4.5 -1.3e-5,-1.9 -0.4,-3.4 -1.3,-4.5 -0.9,-1.1 -2,-1.7 -3.5,-1.7 m 0,-1.7 c 2.1,1.5e-5 3.8,0.7 5.1,2.1 1.3,1.4 1.9,3.3 1.9,5.7 -1.5e-5,2.4 -0.6,4.3 -1.9,5.7 -1.3,1.4 -3,2.1 -5.1,2.1 -2.1,-10e-7 -3.8,-0.7 -5.1,-2.1 -1.3,-1.4 -1.9,-3.3 -1.9,-5.7 -1e-6,-2.4 0.6,-4.3 1.9,-5.7 1.3,-1.4 3,-2.1 5.1,-2.1"
	    }
	  ];
	  icn["GR.IN.IC.COMMERCIAL INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 101.9,123.3 -1.7,0 -0,-5 c -1.2,-0 -2.3,-0.2 -3.5,-0.4 -1.2,-0.3 -2.3,-0.6 -3.5,-1.1 l 0,-3 c 1.1,0.7 2.3,1.2 3.4,1.6 1.2,0.4 2.4,0.5 3.6,0.5 l 0,-7.6 c -2.4,-0.4 -4.2,-1.1 -5.3,-2 -1.1,-1 -1.7,-2.3 -1.7,-3.9 -2e-6,-1.8 0.6,-3.2 1.8,-4.3 1.2,-1 2.9,-1.6 5.2,-1.8 l 0,-3.9 1.7,0 0,3.9 c 1,0 2,0.2 3,0.3 1,0.2 1.9,0.4 2.8,0.7 l 0,2.9 c -0.9,-0.5 -1.9,-0.8 -2.8,-1.1 -1,-0.3 -2,-0.4 -3,-0.4 l 0,7.1 c 2.5,0.4 4.4,1.1 5.5,2.1 1.2,1 1.8,2.4 1.8,4.1 -2e-5,1.9 -0.6,3.3 -1.9,4.4 -1.3,1.1 -3.1,1.7 -5.4,1.9 l 0,5 m -1.7,-17.8 0,-6.8 c -1.3,0.1 -2.3,0.5 -2.9,1.1 -0.7,0.6 -1,1.4 -1,2.3 -6e-6,1 0.3,1.7 0.9,2.2 0.6,0.5 1.6,0.9 3,1.1 m 1.7,3.2 0,7.2 c 1.4,-0.2 2.5,-0.6 3.2,-1.2 0.7,-0.6 1.1,-1.4 1.1,-2.4 -1e-5,-1 -0.3,-1.7 -1,-2.3 -0.7,-0.6 -1.7,-1 -3.2,-1.3 M 104.5,74.8 h 4.5 v 13.4 h 9.9 V 74.8 h 4.5 v 13.4 h 6.7 v 37 H 70 V 88.2 h 34.6 l 4e-4,-13.4 0,0 z m -35.7,51.6 h 62.3 V 86.9 h -6.4 V 73.5 h -7.2 v 13.4 h -7.2 V 73.5 h -7.2 V 86.9 H 68.8 v 39.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 101.9,108.7 0,7.2 c 1.4,-0.2 2.5,-0.6 3.2,-1.2 0.7,-0.6 1.1,-1.4 1.1,-2.4 -1e-5,-1 -0.3,-1.7 -1,-2.3 -0.7,-0.6 -1.7,-1 -3.2,-1.3 m -1.7,-3.2 0,-6.8 c -1.3,0.1 -2.3,0.5 -2.9,1.1 -0.7,0.6 -1,1.4 -1,2.3 -6e-6,1 0.3,1.7 0.9,2.2 0.6,0.5 1.6,0.9 3,1.1 m 4.3,-30.7 0,13.4 -34.6,0 0,37 60.1,0 0,-37 -6.7,0 0,-13.4 -4.5,0 0,13.4 -9.9,0 0,-13.4 -4.5,0 z m -4.3,17.6 1.7,0 0,3.8 c 1,0 2,0.2 3,0.3 1,0.2 1.9,0.4 2.8,0.7 l 0,2.9 c -0.9,-0.5 -1.9,-0.8 -2.8,-1.1 -1,-0.3 -2,-0.4 -3,-0.5 l 0,7.1 c 2.5,0.4 4.3,1.1 5.5,2.1 1.2,1 1.8,2.4 1.8,4.1 -2e-5,1.9 -0.6,3.4 -1.9,4.4 -1.3,1.1 -3.1,1.7 -5.4,1.9 l 0,5 -1.7,0 -0,-5 c -1.2,-0 -2.3,-0.2 -3.5,-0.4 -1.2,-0.3 -2.3,-0.6 -3.5,-1.1 l 0,-3 c 1.1,0.7 2.3,1.3 3.4,1.6 1.2,0.4 2.4,0.5 3.6,0.5 l 0,-7.6 c -2.4,-0.4 -4.2,-1.1 -5.3,-2 -1.1,-1 -1.7,-2.2 -1.7,-3.9 -2e-6,-1.8 0.6,-3.2 1.8,-4.3 1.2,-1 3,-1.6 5.2,-1.8 l 0,-3.9 z"
	    }
	  ];
	  icn["GR.IN.IC.CHEMICAL PLANT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 94.4,89.6 0,0.1 c -0.5,0.1 -1,0.3 -1.4,0.6 -0.5,0.5 -0.6,1.3 -0.5,1.9 0.2,0.8 0.8,1.5 1.7,1.8 -0,0.5 -0.1,1.7 0,3 l -0.1,0 c -0,2.7 -2.3,5.7 -4.9,8.8 -2.4,3 -5,6.4 -5.3,10.4 l -0.1,0 c 0,0.1 0,0.2 0,0.2 -0,0.1 -0,0.2 -0,0.3 l 0.1,0 c 0.2,2.4 1.7,4.2 3.7,5.3 2.1,1.2 4.6,1.7 6.8,1.6 l 0,-0 8.9,0 0,0.1 c 0.3,-0 0.5,-0 0.8,-0.1 l 0.5,0 0,-0.1 c 2.1,-0.2 4.2,-0.3 6,-1 1.1,-0.4 2.1,-1.1 2.8,-2.1 0.6,-0.9 0.9,-2.1 1.1,-3.6 l 0.2,0 c 0.2,-4.4 -2.1,-7.5 -4.5,-10.3 -2.3,-2.8 -4.7,-5.5 -5.4,-9.6 0,-1.3 0.1,-3 0.1,-3.3 0.2,-0.1 0.4,-0.2 0.6,-0.3 0.5,-0.4 0.9,-1 0.9,-1.7 -0,-0.7 -0.5,-1.3 -1.1,-1.6 -0.4,-0.2 -0.9,-0.3 -1.5,-0.4 l 0,-0.1 c -0.2,0 -0.4,-0 -0.6,0 -2.5,0 -7.2,0 -8.1,0 -0.1,-2.4e-4 -0.7,0 -0.7,0 z m 0.7,2 c 0.8,0 5.5,0 8.1,0 0.6,0 0.9,0.1 1.1,0.2 -0.2,0.1 -0.5,0.3 -0.9,0.4 l -8.1,0 c -0.4,-0.1 -0.7,-0.3 -0.7,-0.4 -0,-0.1 -0,-0.1 -0,-0.1 0,-0 0.1,-0.1 0.6,-0.1 z m 1.2,2.6 6.7,0 c -0,0.7 -0.1,1.9 -0.1,3.1 -0,0.1 -0,0.2 -0,0.3 l 0.1,0 c 0.9,4.5 3.5,7.6 5.8,10.3 2.2,2.7 4,5 4,8.4 l -0.1,0 c -0,1.4 -0.4,2.4 -0.8,3 -0.4,0.7 -1,1.1 -1.8,1.4 -1.4,0.6 -3.6,0.7 -5.8,0.9 l -10.3,0 0,0 c -1.6,0 -3.6,-0.4 -5.1,-1.3 -1.6,-0.9 -2.6,-2.2 -2.7,-3.9 0.1,-3.2 2.4,-6.3 4.9,-9.4 2.4,-3 5.1,-6.1 5.3,-9.6 l 0.1,-0 c -0.1,-1 -0.1,-2.7 -0,-3.3 z m -7,19.6 v 1.9 c 0,3.5 6,4.3 9.9,4.3 h 3.2 c 2.5,0 8,-2.2 8,-4.2 v -0.8 c 0,-3.2 -6.6,-9.4 -7.3,-12.4 h -7.5 c -0.6,2.5 -6.2,10 -6.2,11.2 z m 14.8,-39 h 4.5 v 13.4 h 9.9 V 74.8 h 4.5 v 13.4 h 6.7 v 37 H 69.6 V 88.2 h 34.6 l 4e-4,-13.4 0,0 z m -35.7,51.6 h 62.3 V 86.9 h -6.4 V 73.5 h -7.2 v 13.4 h -7.2 V 73.5 h -7.2 v 13.4 h -34.4 v 39.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 104.1 74.8 L 104.1 88.2 L 69.6 88.2 L 69.6 125.2 L 129.6 125.2 L 129.6 88.2 L 122.9 88.2 L 122.9 74.8 L 118.5 74.8 L 118.5 88.2 L 108.6 88.2 L 108.6 74.8 L 104.1 74.8 z M 94.4 89.6 C 94.4 89.6 95.1 89.6 95.2 89.6 C 96.1 89.6 100.8 89.6 103.3 89.6 C 103.5 89.6 103.8 89.6 103.9 89.6 L 103.9 89.7 C 104.5 89.8 105 89.9 105.4 90.1 C 106 90.4 106.5 91 106.5 91.7 C 106.5 92.4 106.1 93 105.6 93.4 C 105.4 93.5 105.2 93.6 105 93.8 C 105 94 104.9 95.7 104.9 97.1 C 105.6 101.1 108 103.8 110.3 106.7 C 112.6 109.5 114.9 112.6 114.7 117 L 114.6 116.9 C 114.4 118.4 114.1 119.6 113.5 120.5 C 112.8 121.5 111.8 122.2 110.8 122.7 C 108.9 123.4 106.8 123.5 104.8 123.7 L 104.8 123.7 L 104.3 123.7 C 104.1 123.7 103.8 123.8 103.5 123.8 L 103.5 123.7 L 94.6 123.7 L 94.6 123.8 C 92.4 123.9 89.9 123.4 87.8 122.2 C 85.9 121.1 84.3 119.2 84.1 116.8 L 84.1 116.8 C 84.1 116.7 84.1 116.6 84.1 116.5 C 84.1 116.4 84 116.4 84 116.3 L 84.1 116.3 C 84.3 112.3 86.9 109 89.4 105.9 C 91.9 102.7 94.2 99.8 94.3 97.1 L 94.3 97.1 C 94.2 95.7 94.3 94.6 94.3 94 C 93.5 93.7 92.8 93.1 92.6 92.3 C 92.4 91.6 92.6 90.9 93.1 90.4 C 93.4 90 93.9 89.8 94.4 89.7 L 94.4 89.6 z M 95.1 91.6 C 94.7 91.6 94.5 91.7 94.5 91.8 C 94.5 91.8 94.5 91.7 94.6 91.8 C 94.6 91.9 94.8 92.2 95.3 92.2 L 103.4 92.2 C 103.8 92.1 104.1 92 104.3 91.8 C 104.1 91.8 103.8 91.6 103.2 91.6 C 100.6 91.6 95.9 91.6 95.1 91.6 z M 96.3 94.2 C 96.2 94.9 96.2 96.5 96.3 97.5 L 96.2 97.6 C 96 101.1 93.4 104.2 90.9 107.2 C 88.5 110.3 86.2 113.3 86.1 116.6 C 86.2 118.3 87.2 119.5 88.8 120.5 C 90.3 121.3 92.3 121.8 93.9 121.8 L 93.9 121.7 L 104.2 121.7 C 106.5 121.5 108.6 121.4 110 120.8 C 110.8 120.5 111.4 120.1 111.8 119.4 C 112.3 118.8 112.6 117.8 112.7 116.4 L 112.7 116.4 C 112.7 113 110.9 110.6 108.7 107.9 C 106.5 105.2 103.8 102.1 103 97.6 L 102.8 97.6 C 102.8 97.5 102.9 97.4 102.9 97.3 C 102.9 96.1 102.9 94.9 103 94.2 L 96.3 94.2 z M 95.5 102.6 L 103 102.6 C 103.8 105.7 110.3 111.9 110.3 115.1 L 110.3 115.9 C 110.3 117.9 104.9 120 102.4 120 L 99.2 120 C 95.3 120 89.3 119.2 89.3 115.7 L 89.3 113.8 C 89.3 112.6 94.9 105.1 95.5 102.6 z "
	    }
	  ];
	  icn["GR.IN.IC.FIREARMS MANUFACTURER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 104.1,74.8 h 4.5 v 13.4 h 9.9 V 74.8 h 4.5 v 13.4 h 6.7 v 37 H 69.6 V 88.2 h 34.6 l 4e-4,-13.4 0,0 z m -35.7,51.6 h 62.3 V 86.9 h -6.4 V 73.5 h -7.2 v 13.4 h -7.2 V 73.5 h -7.2 v 13.4 h -34.4 v 39.5 z m 25.8,-26.6 h 10.8 v 5.8 c -1.6,0 -4.7,1 -5.8,0.7 -1.2,-0.4 -3.8,-1.5 -5,-1.6 v -4.8 z m -19.2,0 h 16.6 v 6 c 0,0.6 3,1.4 3.7,1.7 0.4,0.1 3.9,1.4 3.9,1.5 l 7.2,-0.9 0.8,2.7 1.1,3.7 c 0.3,0.4 1,2.4 1,3.1 v 0.2 c 0,1.1 -0.6,1.9 -0.6,3.5 l 13.5,-0 -0.9,-3 -0.6,-1.7 -3,-10 c -0.2,-0.4 -0.5,-0.7 -0.5,-1.3 0,-1.3 3.9,-4.1 4.7,-5.3 l -2.7,-8.4 h -43.9 v 8.4 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 94.2,99.9 h 10.8 v 5.8 c -1.6,0 -4.7,1 -5.8,0.7 -1.2,-0.4 -3.8,-1.5 -5,-1.6 v -4.8 z m 9.9,-25.1 0,13.4 -34.6,0 0,37 60.1,0 0,-37 -6.7,0 0,-13.4 -4.5,0 0,13.4 -9.9,0 0,-13.4 -4.5,0 z m -29.1,16.7 43.9,0 2.7,8.4 c -0.8,1.2 -4.7,4.1 -4.7,5.3 0,0.6 0.2,0.9 0.5,1.3 l 3.1,10 0.6,1.8 0.9,3 -13.5,0 c 0,-1.6 0.7,-2.4 0.7,-3.6 l 0,-0.2 c 0,-0.7 -0.7,-2.7 -1,-3.1 L 107.2,110.8 106.4,108.1 99.2,109 c -0,-0.1 -3.6,-1.4 -3.9,-1.5 -0.7,-0.3 -3.7,-1.1 -3.7,-1.7 l 0,-5.9 -16.6,0 0,-8.4 z"
	    }
	  ];
	  icn["GR.IN.IC.FIREARMS RETAILER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 85.1,123 -1.1,0 -0,-3.2 c -0.8,-0 -1.5,-0.1 -2.3,-0.3 -0.8,-0.2 -1.5,-0.4 -2.3,-0.7 l 0,-1.9 c 0.7,0.5 1.5,0.8 2.2,1 0.8,0.2 1.5,0.3 2.3,0.4 l 0,-4.9 c -1.6,-0.3 -2.7,-0.7 -3.5,-1.3 -0.7,-0.6 -1.1,-1.5 -1.1,-2.5 -2e-6,-1.2 0.4,-2.1 1.2,-2.8 0.8,-0.7 1.9,-1.1 3.4,-1.2 l 0,-2.5 1.1,0 0,2.5 c 0.7,0 1.3,0.1 1.9,0.2 0.6,0.1 1.2,0.3 1.8,0.5 l 0,1.9 c -0.6,-0.3 -1.2,-0.5 -1.8,-0.7 -0.6,-0.2 -1.3,-0.3 -1.9,-0.3 l 0,4.6 c 1.6,0.3 2.8,0.7 3.6,1.3 0.8,0.6 1.1,1.5 1.1,2.6 -1.2e-5,1.2 -0.4,2.2 -1.2,2.9 -0.8,0.7 -2,1.1 -3.5,1.2 l 0,3.3 m -1.1,-11.5 0,-4.4 c -0.8,0.1 -1.5,0.3 -1.9,0.7 -0.4,0.4 -0.7,0.9 -0.7,1.5 -4e-6,0.6 0.2,1.1 0.6,1.4 0.4,0.3 1.1,0.6 2,0.7 m 1.1,2.1 0,4.7 c 0.9,-0.1 1.6,-0.4 2.1,-0.8 0.5,-0.4 0.7,-0.9 0.7,-1.6 -1e-5,-0.6 -0.2,-1.1 -0.7,-1.5 -0.4,-0.4 -1.1,-0.6 -2.1,-0.8 m 22.6,-21.9 -8,20.8 0.8,0.3 8,-20.8 -0.8,-0.3 z m -43,6.5 0,0.8 0.3,26 0,0.8 0.8,0 32.2,-0.2 0.4,0 0.2,-0.3 7.3,-8.7 0.2,-0.2 -0,-0.3 -0.2,-10.1 0,-0.4 -0.3,-0.2 -8.4,-6.6 -0.2,-0.2 -0.3,0 -31.3,-0.4 -0.8,0 z m 1.6,1.6 30.2,0.3 7.9,6.2 0.2,9.4 -6.9,8.2 -31,0.2 -0.3,-24.3 z M 97.3,85.4 h 14.4 v 7.7 c -2.1,0 -6.2,1.4 -7.8,0.9 -1.6,-0.5 -5,-2.1 -6.6,-2.2 v -6.4 z m -25.5,0 h 22.1 v 7.9 c 0,0.8 4,1.9 4.8,2.2 0.5,0.2 5.2,1.9 5.2,2 l 9.6,-1.2 1,3.6 1.4,4.9 c 0.3,0.5 1.3,3.2 1.3,4.1 v 0.2 c 0,1.5 -0.9,2.5 -0.9,4.7 h 18 l -1.1,-3.9 -0.8,-2.4 -4,-13.4 c -0.3,-0.5 -0.6,-0.9 -0.6,-1.7 0,-1.7 5.2,-5.5 6.2,-7.1 l -3.6,-11.1 H 71.8 v 11.1 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 85.1,113.6 0,4.7 c 0.9,-0.1 1.6,-0.4 2.1,-0.8 0.5,-0.4 0.7,-0.9 0.7,-1.6 -1e-5,-0.6 -0.2,-1.1 -0.7,-1.5 -0.4,-0.4 -1.1,-0.6 -2.1,-0.8 m -1.1,-2.1 0,-4.4 c -0.8,0.1 -1.5,0.3 -1.9,0.7 -0.4,0.4 -0.7,0.9 -0.7,1.5 -4e-6,0.6 0.2,1.1 0.6,1.4 0.4,0.3 1.1,0.6 2,0.7 M 66.4,99.8 l 0.3,24.3 31,-0.2 6.9,-8.2 -0.2,-9.4 -7.9,-6.2 -30.2,-0.3 z m 17.7,3.3 1.1,0 0,2.5 c 0.7,0 1.3,0.1 1.9,0.2 0.6,0.1 1.2,0.2 1.8,0.4 l 0,1.9 c -0.6,-0.3 -1.2,-0.5 -1.8,-0.7 -0.6,-0.2 -1.3,-0.3 -1.9,-0.3 l 0,4.6 c 1.6,0.3 2.8,0.7 3.6,1.3 0.8,0.6 1.2,1.5 1.2,2.7 -1.2e-5,1.2 -0.4,2.2 -1.2,2.9 -0.8,0.7 -2,1.1 -3.5,1.2 l 0,3.3 -1.1,0 0,-3.2 c -0.8,-0 -1.5,-0.1 -2.3,-0.3 -0.8,-0.2 -1.5,-0.4 -2.3,-0.8 l 0,-1.9 c 0.7,0.5 1.5,0.8 2.2,1.1 0.8,0.2 1.5,0.3 2.3,0.3 l 0,-4.9 c -1.6,-0.3 -2.7,-0.7 -3.5,-1.3 -0.7,-0.6 -1.1,-1.5 -1.1,-2.5 -2e-6,-1.2 0.4,-2.1 1.2,-2.8 0.8,-0.7 1.9,-1.1 3.4,-1.2 l 0,-2.5 z"
	    }
	  ];
	  icn["GR.IN.IC.HAZARDOUS MATERIAL PRODUCTION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 104.7,71.8 h 5 v 15 h 11.1 v -15 h 5 v 15 h 7.5 v 41.4 h -67.4 V 86.8 h 38.8 v -15 z m -40,57.9 h 69.8 V 85.5 h -7.1 v -15.2 h -8 v 15.2 h -8 v -15.2 h -8 v 15.2 h -38.6 v 44.1 l 0,0 z m 15.5,-21.8 h 38.6 l -19.3,18.6 -19.3,-18.6 z m 21.8,-16.8 c 0.5,0.4 4.3,3.8 4.3,4.3 v 12 h -4.3 V 91.1 z m -5,-0 0,16.3 h -4.3 l 0.1,-12.2 4.1,-4.1 0,0 z m -12.1,12 c 0,-0.4 3.1,-3.2 3.6,-3.6 v 7.8 h -3.6 v -4.3 z m 25.7,-3.6 3.7,3.4 c -0.2,0.4 -0.2,-0.2 -0.2,0.5 v 4 h -3.6 v -7.9 z m 9.4,8.2 -20.5,-20 -20.4,20 20.4,19.9 20.5,-19.9 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 99.5,126.5 19.3,-18.6 -38.6,0 z m 0,1 -20.4,-19.9 20.4,-20 20.5,20 -20.5,19.8 z m 5.2,-40.8 h -38.8 v 41.4 h 67.4 V 86.8 h -7.5 v -15 h -5 v 15 h -11.1 v -15 h -5 v 15 z m 5.9,20.6 h 3.6 v -4 c 0,-0.7 -0,-0.1 0.2,-0.5 l -3.7,-3.4 v 7.9 z m -8.6,0 h 4.3 v -12 c 0,-0.4 -3.8,-3.9 -4.3,-4.3 v 16.3 z m -9.3,0 4.3,0 -0,-16.3 -4.1,4.1 z m -7.8,-4.3 v 4.3 h 3.6 v -7.9 c -0.5,0.3 -3.6,3.2 -3.6,3.6 z"
	    }
	  ];
	  icn["GR.IN.IC.HAZARDOUS MATERIAL STORAGE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 122.4,68.8 c 0.4,0.1 0.9,0.5 1.3,1 0.4,0.5 0.8,1.2 1.3,2 l 2.1,4.1 -2.2,0 -1.9,-3.9 c -0.5,-1 -1,-1.7 -1.5,-2 -0.5,-0.3 -1.1,-0.5 -1.9,-0.5 l -2.2,0 0,6.4 -2.1,0 0,-15.2 4.6,0 c 1.7,1.5e-5 3,0.4 3.9,1.1 0.9,0.7 1.3,1.8 1.3,3.3 -10e-6,1 -0.2,1.7 -0.7,2.4 -0.4,0.6 -1.1,1.1 -1.9,1.3 m -5.1,-6.4 0,5.4 2.6,0 c 1,8e-6 1.7,-0.2 2.2,-0.7 0.5,-0.5 0.8,-1.1 0.8,-2 -10e-6,-0.9 -0.3,-1.6 -0.8,-2 -0.5,-0.5 -1.2,-0.7 -2.2,-0.7 l -2.6,0 m -12.3,-0.3 c -1.5,1.4e-5 -2.7,0.6 -3.6,1.7 -0.9,1.1 -1.3,2.6 -1.3,4.5 -1e-5,1.9 0.4,3.4 1.3,4.5 0.9,1.1 2.1,1.7 3.6,1.7 1.5,1e-6 2.7,-0.6 3.5,-1.7 0.9,-1.1 1.3,-2.6 1.3,-4.5 -10e-6,-1.9 -0.4,-3.4 -1.3,-4.5 -0.9,-1.1 -2,-1.7 -3.5,-1.7 m 0,-1.7 c 2.1,1.5e-5 3.8,0.7 5.1,2.1 1.3,1.4 1.9,3.3 1.9,5.7 -10e-6,2.4 -0.6,4.3 -1.9,5.7 -1.3,1.4 -3,2.1 -5.1,2.1 -2.1,-10e-7 -3.8,-0.7 -5.1,-2.1 -1.3,-1.4 -1.9,-3.3 -1.9,-5.7 -2e-6,-2.4 0.6,-4.3 1.9,-5.7 1.3,-1.4 3,-2.1 5.1,-2.1 m -21,0.3 12.8,0 0,1.7 -5.4,0 0,13.4 -2.1,0 0,-13.4 -5.4,0 0,-1.7 m -2,0.5 0,2 c -0.8,-0.4 -1.5,-0.6 -2.2,-0.8 -0.7,-0.2 -1.4,-0.3 -2,-0.3 -1.1,1.4e-5 -2,0.2 -2.6,0.7 -0.6,0.4 -0.9,1 -0.9,1.8 -3e-6,0.7 0.2,1.2 0.6,1.5 0.4,0.3 1.2,0.6 2.3,0.8 l 1.2,0.3 c 1.5,0.3 2.7,0.8 3.4,1.5 0.7,0.7 1.1,1.7 1.1,2.9 -1.2e-5,1.5 -0.5,2.6 -1.5,3.3 -1,0.8 -2.4,1.1 -4.3,1.1 -0.7,-10e-7 -1.5,-0.1 -2.3,-0.2 -0.8,-0.2 -1.6,-0.4 -2.5,-0.7 l 0,-2.1 c 0.8,0.5 1.6,0.8 2.4,1.1 0.8,0.2 1.6,0.4 2.4,0.4 1.2,1e-6 2.1,-0.2 2.7,-0.7 0.6,-0.5 1,-1.1 1,-2 -1e-5,-0.7 -0.2,-1.3 -0.7,-1.7 -0.5,-0.4 -1.2,-0.7 -2.2,-0.9 l -1.2,-0.2 c -1.5,-0.3 -2.6,-0.8 -3.3,-1.4 -0.7,-0.6 -1,-1.6 -1,-2.7 -2e-6,-1.3 0.5,-2.4 1.4,-3.2 0.9,-0.8 2.3,-1.2 3.9,-1.2 0.7,1.5e-5 1.4,0.1 2.2,0.2 0.7,0.1 1.5,0.3 2.3,0.6 M 70.6,110 h 57.9 l -29,27.9 -28.9,-27.9 z m 32.8,-25.2 c 0.8,0.5 6.4,5.8 6.4,6.4 v 17.9 h -6.4 V 84.8 z m -7.6,-0.1 0.1,24.4 h -6.5 l 0.2,-18.3 6.2,-6.1 0,0 z m -18.2,18 c 0,-0.7 4.7,-4.9 5.3,-5.3 v 11.8 h -5.3 v -6.5 z m 38.6,-5.3 5.6,5.2 c -0.3,0.7 -0.2,-0.3 -0.2,0.7 v 5.9 h -5.3 V 97.4 z m 14.2,12.3 -30.7,-30.1 -30.7,30 30.7,29.9 30.8,-29.8 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 99.5,137.9 29,-27.9 -57.9,0 z m 16.7,-28.7 h 5.3 v -5.9 c 0,-1 -0.1,-0.1 0.2,-0.7 l -5.6,-5.2 v 11.8 z m -12.8,0 h 6.4 V 91.2 c 0,-0.7 -5.6,-5.9 -6.4,-6.4 v 24.4 z m -14,-10e-6 6.5,0 -0.1,-24.4 -6.2,6.1 z m -11.8,-6.4 v 6.4 h 5.3 V 97.4 c -0.7,0.5 -5.3,4.7 -5.3,5.3 z"
	    }
	  ];
	  icn["GR.IN.IC.INDUSTRIAL SITE"] = [
	    /*{
	      type: "path",
	      stroke: false,
	      d: "m 104.1,74.8 h 4.5 v 13.4 h 9.9 V 74.8 h 4.5 v 13.4 h 6.7 v 37 H 69.6 V 88.2 h 34.6 l 4e-4,-13.4 0,0 z m -35.7,51.6 h 62.3 V 86.9 h -6.4 V 73.5 h -7.2 v 13.4 h -7.2 V 73.5 h -7.2 v 13.4 h -34.4 v 39.5 z",
	    },*/
	    {
	      type: "path",
	      //stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 104,75 h 5 v 13 h 9 V 75 h 5 v 13 h 7 v 37 H 70 V 88 h 34 z"
	    }
	  ];
	  icn["GR.IN.IC.LANDFILL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 124.1,115.8 c 0,2.5 1.6,2.7 3,3.6 h -22.8 c 1.2,-0.7 2.8,-1.2 2.8,-3.3 v -1.2 c 0,-1.3 -1.9,-2.8 -3.6,-2.8 -1,0 -1.8,0.4 -2.3,0.9 -0.4,0.4 -1.1,1.6 -1.1,2.1 v 1.3 c 0,0.2 0.9,1.7 1,1.9 0.6,0.7 1.2,0.6 1.8,1 h -8.6 c 0.6,-0.4 1.3,-0.5 1.8,-1.1 0.4,-0.4 0.6,-1.4 1,-1.6 v -1.7 c 0,-0.4 -0.9,-1.8 -1.2,-2.1 -0.6,-0.6 -1.3,-0.9 -2.4,-0.9 h -0.1 c -1.7,0 -3.5,1.5 -3.5,3.1 v 1.3 c 0,1.5 2,2.2 2.8,2.8 h -8.7 c -0.1,-3.2 -2.5,-1.8 -3.1,-3 -1.1,-1.9 0.9,-2.2 -2.8,-3.1 -3.1,-0.8 -2,-0.3 -3.9,-2.2 -0.6,-0.7 -3,-1.8 -4.2,-1.8 h -0.1 c -1,0 -1.9,1.2 -2.7,1.5 -1.1,0.5 -2.3,0.4 -3.2,1.1 -1.1,0.8 -2.3,4.4 -2.3,6.2 v 0.6 h -0.4 v 2.2 h 72.1 4.9 v -1.5 h -9.5 c 0.8,-0.5 0.9,-0.2 1.8,-1 0.4,-0.4 0.9,-1.5 1.2,-1.6 v -1.6 c 0,-0.5 -0.9,-1.9 -1.3,-2.2 -0.7,-0.5 -1.4,-0.8 -2.5,-0.8 -1.9,0 -3.6,1.5 -3.6,3.5 v 0.2 h 0 z m -1,-17.6 h 3.5 c 0.5,0 4.2,4.8 4.6,5.4 h -8.1 v -5.4 z m -4.1,-17.8 -0.7,-1.3 -7,3.9 1.4,3.5 -32,14.5 c 0.8,0.4 2.1,4.3 2.6,5.3 0.2,0.4 2.3,5 2.3,5.1 0,0.5 -0.9,0.2 -0.8,0.6 l 0.5,3.1 h 3.4 c 0,-2.4 2,-4.8 4.3,-4.8 h 1 c 2.4,0 4.3,2.3 4.3,4.8 h 0.6 c 0,-2.4 0.6,-2.3 1.5,-3.6 l -2.1,-5.6 9.5,-4.3 4.2,9.9 -5.1,0 c 0.9,1.3 1.6,1.3 1.6,3.6 h 14.4 v -0.5 c 0,-2.1 2.5,-4.3 4.8,-4.3 h 0.5 c 2.6,0 4.6,2.2 4.6,4.8 h 2.6 v -3.1 h -1.2 v -7.4 c 0,-1.2 -5.8,-6.8 -6.1,-8.1 h -6.4 v 15 h -4.1 l -5.3,-12.1 5.5,-2.3 -4.3,-9.5 5.6,-7.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 123.1,103.6 h 8.1 c -0.5,-0.6 -4.2,-5.4 -4.6,-5.4 h -3.5 v 5.4 z"
	    }
	  ];
	  icn["GR.IN.IC.PHARMACEUTICAL MANUFACTURER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 105.2,71.3 h 5.1 V 86.5 H 121.5 V 71.3 h 5.1 v 15.2 h 7.6 v 42.1 H 65.8 V 86.6 h 39.4 V 71.3 z M 64.5,130.1 h 71 V 85.3 h -7.3 V 69.9 h -8.2 V 85.3 h -8.2 V 69.9 H 103.7 V 85.3 H 64.5 v 44.8 z M 90.3,93.1 h 7.6 c 1.2,0 3.4,1.8 3.4,2.7 v 2.6 c 0,1.3 -2.4,2.9 -3.6,2.9 h -7.4 v -8.2 z m -4.9,26.5 h 4.9 v -13.1 l 1.7,0.1 7.6,10 -8.8,11 5.9,0.1 5.9,-7 c 1.2,0.3 4.2,5.9 5.6,6.9 h 6.2 c -0.9,-1.7 -8.4,-10.4 -8.4,-11 0,-0.3 7.4,-9.7 8.2,-10.4 l -6,-0.1 -5.6,6.2 -4.3,-5.7 c 5.2,-1.2 8.4,-3.3 8.4,-9.8 v -0.6 c 0,-2 -1.7,-4.7 -2.8,-5.8 -1,-1 -4.1,-2.4 -6.2,-2.4 H 85.4 v 31.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 85.4,88 h 12.4 c 2.1,0 5.1,1.4 6.1,2.4 1.1,1.1 2.8,3.8 2.8,5.8 v 0.6 c 0,6.5 -3.1,8.6 -8.4,9.8 l 4.3,5.7 5.6,-6.2 6.1,0.1 c -0.8,0.6 -8.2,10 -8.2,10.4 0,0.7 7.4,9.4 8.4,11.1 h -6.2 c -1.5,-1 -4.4,-6.6 -5.6,-6.9 l -5.9,6.9 -5.9,-0.1 8.8,-11 -7.6,-9.9 -1.8,-0.1 v 13.1 h -4.9 v -31.6 z m 19.8,-1.4 h -39.4 v 42.1 h 68.4 V 86.6 h -7.6 V 71.3 H 121.5 V 86.5 H 110.3 V 71.3 h -5.1 v 15.3 z m -14.9,14.7 h 7.4 c 1.2,0 3.6,-1.6 3.6,-2.9 v -2.5 c 0,-1 -2.2,-2.7 -3.4,-2.7 h -7.6 v 8.2 z"
	    }
	  ];
	  icn["GR.IN.IC.CONTAMINATED HAZARDOUS WASTE SITE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 133.7,71.5 c -0.3,0 -0.7,0.1 -0.9,0.2 l -49.5,0 -0.7,0 0,0.1 c -0.7,0.3 -1.3,0.9 -1.8,1.7 -0.6,1 -1.2,2.5 -1.6,4.2 -0.9,3.5 -1.4,8.2 -1.4,13.4 0,4.8 0.5,9.2 1.2,12.6 -1,0.1 -2.1,0.5 -3,0.3 -1.2,-0.1 -2.5,-0.1 -3.8,-0.1 -1.3,0 -6.5,-0.9 -6.5,0.7 0,1.8 6,3.4 7.5,6.1 -0.8,1.5 -5.9,1.4 -8.1,1.8 -1.5,0.2 -3,0.2 -3.8,1.1 -1,1 0.2,2.3 1.1,2.7 1.7,0.9 6,1 8.2,1.5 1.3,0.3 2.6,0.7 3.1,1.9 0.4,1.1 0.6,2.6 2.2,2.6 l 0.1,0 c 2.1,0 5.1,-1.7 7.9,-1.7 l 1.1,0 c 6.2,0 6.8,7.4 12.3,7.7 3.5,0.2 5.3,-0.8 7.8,-1.9 1.6,-0.7 5.5,-2.8 7.3,-2.8 l 0.3,0 c 1.8,0 3.3,1.1 4.8,1.5 1.6,0.5 3.3,1 5.4,1 l 0.5,0 c 1.2,0 2.3,-0.2 3.2,-0.5 1.2,-0.4 1.1,-1 1.1,-2.4 -0.1,-1.9 -2.2,-3.3 -3.5,-4 -1.4,-0.9 -3.4,-1.8 -4.9,-2.6 -0.8,-0.4 -1.5,-0.9 -2.3,-1.4 -1.3,-1 -1,-0.6 -1.7,-2.1 1.2,-1.8 6.9,0.2 6.9,-1.9 0,-0.2 -0.3,-0.5 -0.7,-0.7 l 12.2,0 0.7,0 0,-0.4 c 0.7,-0.3 1.3,-0.9 1.8,-1.7 0.6,-1 1.2,-2.5 1.6,-4.2 0.9,-3.5 1.4,-8.2 1.4,-13.4 0,-5.2 -0.5,-9.9 -1.4,-13.4 -0.4,-1.7 -1,-3.2 -1.6,-4.2 -0.6,-1 -1.4,-1.8 -2.5,-1.8 z m 0.3,1.4 c 0.3,0 0.7,0.3 1.3,1.1 0.5,0.8 1,2.2 1.4,3.8 0.8,3.3 1.4,7.9 1.4,13.1 0,5.1 -0.5,9.8 -1.4,13.1 -0.4,1.7 -0.9,3 -1.4,3.8 -0.5,0.8 -1,1.1 -1.3,1.1 -0.2,0 -0.4,-0.1 -0.7,-0.4 l 0,0.7 -47.9,0 c 0.2,-0.2 0.4,-0.4 0.6,-0.8 0.6,-1 1.1,-2.3 1.5,-4 0.9,-3.4 1.4,-8.1 1.4,-13.2 0,-5.2 -0.5,-9.8 -1.4,-13.2 -0.4,-1.7 -0.9,-3.1 -1.5,-4 -0.2,-0.3 -0.4,-0.5 -0.6,-0.7 l 47.9,0 0,0.2 c 0.3,-0.3 0.5,-0.4 0.7,-0.4 z m -50.7,0.2 c 0.3,0 0.7,0.3 1.3,1.1 0.5,0.8 1,2.2 1.4,3.8 0.8,3.3 1.4,7.9 1.4,13.1 0,5.1 -0.5,9.8 -1.4,13.1 -0.4,1.7 -0.9,3 -1.4,3.8 -0.5,0.8 -1,1.1 -1.3,1.1 -0.3,0 -0.7,-0.3 -1.3,-1.1 -0.3,-0.5 -0.6,-1.1 -0.8,-1.8 0.4,1.7 1,3 1.7,3.5 l 8.3,-0.2 7.1,0.1 20.3,-0.1 c 0.5,0 1.5,0.5 2.3,1 l 0,0 c 0.5,0.3 0.8,0.6 1,0.7 -0.1,0.2 -0.4,0.3 -0.6,0.4 -0.2,0.1 -0.5,0.2 -0.8,0.2 -0.4,0.1 -0.9,0.1 -1.3,0.1 -0.2,-0 -0.5,-0 -0.7,-0 -0.4,-0 -0.9,-0 -1.2,-0 l -0.3,0 c -0.9,0 -1.7,0.5 -1.7,1.4 l 0,0.1 0,0.1 c 0,0.1 0,0.2 0,0.3 0.7,3 11.3,5.8 11.9,9.2 0,0.1 0,0.2 0,0.3 -0,0.1 -0,0.1 -0,0.1 -0.2,1.6 -2.9,2.2 -5.2,2.2 -0.7,0 -1.3,0 -1.8,-0.1 -2.6,-0.4 -5.4,-2.3 -7.3,-2.3 -5.3,0 -9.5,5.5 -15.2,4.8 -4.4,-0.6 -5.5,-7.9 -12.3,-7.9 l -1.3,0 c -3,0 -5.6,1.7 -8.4,1.7 -0.5,0 -0.7,-0.3 -0.9,-0.6 -0,-0 -0,-0.1 -0.1,-0.1 -0.2,-0.5 -0.3,-1.1 -0.6,-1.6 -0,-0 0,-0 0,-0 -0,-0.1 -0.1,-0.1 -0.1,-0.2 -0,-0 -0,-0.1 -0.1,-0.1 -0,-0.1 -0.1,-0.1 -0.1,-0.1 -0.1,-0.2 -0.3,-0.3 -0.4,-0.4 -1.2,-0.9 -2.3,-1.1 -4,-1.4 -1.9,-0.3 -5.8,-0.3 -7.3,-1.5 -0,-0 -0.1,-0.1 -0.1,-0.1 -0,-0 -0,-0 -0.1,-0.1 -0,-0 -0.1,-0.1 -0.1,-0.1 -0,-0 -0,-0 -0,-0.1 -0,-0 -0,-0 -0,-0 -0.2,-0.3 -0.4,-0.6 -0.4,-0.9 l 0,-0.3 c 0,-2.1 13.2,-0.9 13.2,-3.2 0,-0.3 -0.1,-0.6 -0.3,-0.8 -0,-0.1 -0.1,-0.1 -0.1,-0.2 -0,-0 -0,-0 -0.1,-0.1 -0.1,-0.1 -0.1,-0.1 -0.2,-0.2 -0,-0 -0,-0 -0.1,-0.1 -0.1,-0.1 -0.3,-0.3 -0.5,-0.4 -1.7,-1.3 -4.8,-2.7 -6.3,-3.9 -0.1,-0.1 -0.3,-0.2 -0.4,-0.3 -0,-0 -0,-0 -0.1,-0.1 -0,-0 -0.1,-0.1 -0.1,-0.1 -0,-0 -0,-0 -0.1,-0.1 -0,-0 -0.1,-0.1 -0.1,-0.1 -0.1,-0.1 -0.2,-0.2 -0.2,-0.4 0.3,-0.1 0.6,-0.3 1.1,-0.3 l 2.9,0 6.3,0.3 2.6,-0.3 c 9.4e-4,0 -9.4e-4,0 0,0 l 0.7,-0.1 0.8,0.1 c -0,-0 -0,-0 -0,-0 -0.8,-3.3 -1.4,-7.9 -1.4,-13.1 0,-5.1 0.5,-9.7 1.4,-13.1 0.4,-1.7 0.9,-3 1.4,-3.8 0.5,-0.8 1,-1.1 1.3,-1.1 z m 27.7,1.1 -17.4,17 17.4,16.9 17.4,-16.9 -17.4,-17 z m -2.2,2.9 0,13.8 -3.6,0 0.1,-10.4 3.5,-3.5 z m 4.3,0 c 0.4,0.3 3.6,3.3 3.6,3.7 l 0,10.2 -3.6,0 0,-13.8 z m 7.3,7.2 3.2,2.9 c -0.1,0.1 -0.1,0.1 -0.1,0.1 -0,-0 0,0 0,0.3 l 0,3.3 -3.1,0 0,-6.7 z m -18.8,0 0,6.7 -3,0 0,-3.7 c 0,-0.4 2.7,-2.8 3,-3 z m -7,7.1 32.8,0 -16.4,15.8 -16.4,-15.8 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 134,72.9 c -0.2,0 -0.4,0.1 -0.7,0.4 l 0,-0.2 -47.9,0 c 0.2,0.2 0.4,0.4 0.6,0.7 0.6,1 1.1,2.3 1.5,4 0.9,3.4 1.4,8.1 1.4,13.2 0,5.2 -0.5,9.8 -1.4,13.2 -0.4,1.7 -0.9,3.1 -1.5,4 -0.2,0.3 -0.4,0.5 -0.6,0.8 l 47.9,0 0,-0.7 c 0.3,0.3 0.5,0.4 0.7,0.4 0.3,0 0.7,-0.3 1.3,-1.1 0.5,-0.8 1,-2.2 1.4,-3.8 0.8,-3.3 1.4,-7.9 1.4,-13.1 0,-5.1 -0.5,-9.8 -1.4,-13.1 -0.4,-1.7 -0.9,-3 -1.4,-3.8 -0.5,-0.8 -1,-1.1 -1.3,-1.1 z m -50.7,0.2 c -0.3,0 -0.7,0.3 -1.3,1.1 -0.5,0.8 -1,2.2 -1.4,3.8 -0.8,3.3 -1.4,7.9 -1.4,13.1 0,5.1 0.5,9.8 1.4,13.1 0,0 0,0 0,0 l -0.8,-0.1 -3.3,0.4 -6.2,-0.3 -2.9,0 c -0.5,0 -0.8,0.1 -1.1,0.3 0.4,1.6 8.4,4.3 8.4,6.5 0,2.3 -13.2,1.1 -13.2,3.2 l 0,0.3 c 0,2.4 5.6,2.3 8,2.7 1.7,0.3 2.8,0.5 4,1.4 1.3,1 0.8,3.3 2.2,3.3 2.8,0 5.4,-1.7 8.4,-1.7 l 1.3,0 c 6.8,0 7.9,7.3 12.3,7.9 5.7,0.7 9.9,-4.8 15.2,-4.8 1.8,0 4.7,1.9 7.3,2.3 2.3,0.2 7,-0.2 7,-2.4 0,-3.6 -12,-6.5 -12,-9.8 l 0,-0.1 c 0,-0.9 0.9,-1.4 1.7,-1.4 l 0.3,0 c 1.4,0 3.9,0.3 4.7,-0.7 -0.3,-0.4 -2.5,-1.7 -3.2,-1.7 l -20.3,0.1 -7.1,-0.1 -8.3,0.2 c -0.7,-0.5 -1.3,-1.8 -1.7,-3.5 0.3,0.7 0.5,1.3 0.8,1.8 0.5,0.8 1,1.1 1.3,1.1 0.3,0 0.7,-0.3 1.3,-1.1 0.5,-0.8 1,-2.2 1.4,-3.8 0.8,-3.3 1.4,-7.9 1.4,-13.1 0,-5.1 -0.5,-9.7 -1.4,-13.1 -0.4,-1.7 -0.9,-3 -1.4,-3.8 -0.5,-0.8 -1,-1.1 -1.3,-1.1 z m 27.7,1.1 17.4,17 -17.4,16.9 -17.4,-16.9 17.4,-17 z m -2.2,2.9 -3.5,3.5 -0.1,10.4 3.6,0 -0,-13.8 z m 4.3,0 0,13.8 3.6,0 0,-10.2 c 0,-0.4 -3.2,-3.4 -3.6,-3.7 z m 7.3,7.2 0,6.7 3.1,0 0,-3.3 c 0,-0.3 -0,-0.3 -0,-0.3 0,0 0,0 0.1,-0.1 l -3.2,-2.9 z m -18.8,0 c -0.4,0.3 -3,2.7 -3,3 l 0,3.7 3,0 0,-6.7 z m -7,7.1 16.4,15.8 16.4,-15.8 -32.8,0 z"
	    }
	  ];
	  icn["GR.IN.IC.TOXIC RELEASE INVENTORY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 81.8,61 0,15.2 2,0 0,-6.4 2.2,0 c 0.8,6e-6 1.5,0.2 1.9,0.5 0.5,0.3 1,1 1.5,2 l 1.9,3.9 2.2,0 -2.1,-4.2 c -0.4,-0.9 -0.8,-1.5 -1.3,-2 -0.4,-0.5 -0.8,-0.8 -1.3,-0.9 0.8,-0.2 1.5,-0.7 1.9,-1.3 0.4,-0.6 0.7,-1.4 0.7,-2.4 -2e-5,-1.5 -0.4,-2.6 -1.3,-3.3 -0.9,-0.7 -2.1,-1.1 -3.9,-1.1 l -4.6,0 z m 14.5,0 0,15.2 9.8,0 0,-1.7 -7.7,0 0,-5.5 7.2,0 0,-1.7 -7.2,0 0,-4.5 7.5,0 0,-1.7 -9.6,0 z m 13.2,0 0,15.2 9.4,0 0,-1.7 -7.4,0 0,-13.4 -2,0 z m -25.6,1.7 2.6,0 c 1,1.4e-5 1.7,0.2 2.2,0.7 0.5,0.4 0.8,1.1 0.8,2 -10e-6,0.9 -0.3,1.6 -0.8,2 -0.5,0.5 -1.2,0.7 -2.2,0.7 l -2.6,0 0,-5.4 z m 16,14.7 c -4.3,1.1e-5 -8.3,0.4 -11.2,1.2 -1.4,0.4 -2.6,0.8 -3.5,1.3 -0.7,0.4 -1.2,0.9 -1.4,1.5 l -0.1,0 0,0.6 c -3.1e-5,0 0,0 0,0 l 0,31.1 -0.2,-0.7 c -0.1,0 -1.1,0.1 -2.4,0 -1.2,-0.1 -2.7,-0.2 -4.2,-0.3 -1.5,-0.1 -2.9,-0.2 -4,-0.1 -0.6,0 -1.1,0 -1.5,0.1 -0.2,0 -0.4,0.1 -0.6,0.2 -0.2,0.1 -0.4,0.2 -0.6,0.5 -0.3,0.4 -0.4,0.9 -0.3,1.4 0.1,0.5 0.3,0.8 0.5,1.2 0.5,0.7 1.2,1.2 1.9,1.7 0.7,0.5 1.4,1 1.9,1.5 0.5,0.5 0.7,0.9 0.6,1.2 -0,0.1 -0,0.2 -0.2,0.3 -0.2,0.2 -0.6,0.3 -1,0.5 -0.9,0.3 -2.2,0.5 -3.5,0.7 -1.3,0.2 -2.7,0.3 -3.7,0.5 -0.5,0.1 -1,0.2 -1.4,0.4 -0.2,0.1 -0.4,0.2 -0.6,0.3 -0.2,0.2 -0.4,0.4 -0.4,0.7 -0.1,0.9 0.3,1.7 1,2.3 0.7,0.6 1.5,1.1 2.6,1.6 2.1,0.9 4.9,1.7 7.9,2.4 2.9,0.7 5.9,1.2 8.3,1.7 2.4,0.4 4.4,0.8 4.8,0.9 2,0.6 3.3,1.8 4.9,3.2 1.5,1.3 3.2,2.8 5.8,3.5 3,0.8 6.2,-0.6 9.4,-2 3.2,-1.4 6.4,-2.8 9.1,-2.5 0.1,0 1,0.2 1.9,0.5 1,0.3 2.2,0.6 3.4,0.8 1.2,0.3 2.4,0.5 3.5,0.6 1.1,0.1 2,0.2 2.7,-0.5 0.8,-0.7 1.3,-1.4 1.4,-2.1 0.2,-0.8 -0,-1.5 -0.4,-2.2 -0.8,-1.3 -2.2,-2.3 -3.9,-3.2 -1.6,-0.9 -3.5,-1.8 -5,-2.6 -1.5,-0.8 -2.7,-1.6 -3,-1.9 -0.2,-0.3 -0.2,-0.2 -0.1,-0.4 0.1,-0.1 0.3,-0.4 0.7,-0.7 0.8,-0.5 2.2,-1 3.2,-1.5 0.5,-0.3 1,-0.5 1.3,-1 0.2,-0.3 0.3,-0.7 0.2,-1 -0.1,-0.4 -0.3,-0.6 -0.6,-0.8 -0.5,-0.4 -1.2,-0.7 -2.3,-1.1 -1.1,-0.3 -2.6,-0.7 -4.6,-1.1 l -0.3,1.3 0,-35.4 0,-0.6 -0.1,0 c -0.2,-0.6 -0.7,-1.1 -1.4,-1.5 -0.9,-0.5 -2.1,-1 -3.5,-1.3 -2.9,-0.7 -6.8,-1.2 -11.2,-1.2 z m 0,1.2 c 4.3,-1.1e-5 8.1,0.4 10.9,1.1 1.4,0.4 2.5,0.8 3.2,1.2 0.3,0.2 0.4,0.3 0.6,0.5 0.1,0.1 0.2,0.2 0.3,0.3 0,0 0,0 0,0.1 0,0 0,0.1 0,0.1 0,0 0,0.1 0,0.1 0,0 -0,0.1 -0,0.1 -0,0 -0,0 -0,0 -0,0 -0,0 -0,0.1 -0,0 -0,0 -0,0.1 -0,0 -0,0 -0,0.1 -0,0 -0,0.1 -0.1,0.1 -0,0.1 -0.1,0.1 -0.1,0.2 -0,0 -0,0 -0,0 -0.1,0.1 -0.3,0.3 -0.6,0.5 -0.7,0.4 -1.8,0.8 -3.2,1.2 -2.8,0.7 -6.6,1.2 -10.9,1.2 -4.3,1.1e-5 -8.1,-0.4 -10.9,-1.1 -1.4,-0.4 -2.5,-0.8 -3.2,-1.2 -0.3,-0.2 -0.5,-0.3 -0.6,-0.5 -0,-0 -0.1,-0.1 -0.1,-0.1 -0,-0 -0,-0 -0,-0 -0,-0 -0,-0.1 -0.1,-0.1 -0,-0 -0,-0 -0,-0 -0,-0 -0,-0.1 -0.1,-0.1 -0,-0.1 -0.1,-0.1 -0.1,-0.2 0,-0 0,-0.1 0,-0.1 0.1,-0.2 0.3,-0.6 0.9,-0.9 0.7,-0.4 1.8,-0.8 3.2,-1.2 2.8,-0.7 6.6,-1.1 10.9,-1.1 z m 15,5.3 0,34.1 0,0 0,5.6 c 0.1,0.2 0.2,0.3 0.2,0.4 0,0.2 -0.2,0.6 -0.9,1.1 -0.7,0.4 -1.8,0.8 -3.2,1.2 -2.8,0.7 -6.6,1.1 -10.9,1.1 -4.3,1e-5 -8.1,-0.4 -10.9,-1.1 -1.4,-0.4 -2.5,-0.8 -3.2,-1.2 -0.6,-0.4 -0.9,-0.7 -0.9,-1 l -0,0 0,-0.1 0,-1.9 c -0.1,0.1 -0.1,0.1 -0.2,0.1 l 0,-38.4 c 0.1,0.1 0.2,0.1 0.3,0.2 0.9,0.5 2.1,1 3.5,1.3 2.9,0.7 6.8,1.2 11.2,1.2 4.3,-1.2e-5 8.3,-0.5 11.2,-1.2 1.4,-0.4 2.6,-0.8 3.5,-1.3 0.1,-0.1 0.2,-0.1 0.3,-0.2 z m -15.2,6.1 -14.6,14.2 14.2,13.8 0.8,0 14.2,-13.8 -14.6,-14.3 z m -1.8,2.4 0,11.6 -3.1,0 0.1,-8.7 3,-2.9 z m 3.6,0 c 0.4,0.3 3,2.7 3,3 l 0,8.5 -3,0 0,-11.6 z m -9.7,6 0,5.6 -2.5,0 0,-3.1 c 0,-0.3 2.2,-2.3 2.5,-2.5 z m 15.8,0 2.6,2.5 c -0.1,0.3 -0.1,-0.1 -0.1,0.3 l 0,2.8 -2.5,0 0,-5.6 z m -21.7,6 27.5,0 -13.8,13.3 -13.7,-13.3 z m -12.8,9.3 c 1.1,-0 2.5,0 3.9,0.1 1.4,0.1 2.9,0.2 4.2,0.3 1.1,0.1 1.9,0.1 2.6,-0 l 0,10 0,0.6 0.3,0 c 0.2,0.6 0.7,1.1 1.4,1.5 0.9,0.5 2.1,1 3.5,1.3 2.9,0.7 6.8,1.2 11.2,1.2 4.3,-1e-5 8.3,-0.4 11.2,-1.2 1.4,-0.4 2.6,-0.8 3.5,-1.3 0.9,-0.5 1.5,-1.2 1.5,-2.1 0,-0.3 -0.1,-0.5 -0.2,-0.8 l 0,-5.6 c 1.9,0.4 3.4,0.8 4.4,1.1 0.9,0.3 1.3,0.5 1.6,0.7 -0.1,0.1 -0.1,0.1 -0.4,0.3 -0.8,0.4 -2.2,0.9 -3.3,1.6 -0.5,0.3 -1,0.7 -1.3,1.3 -0.3,0.6 -0.2,1.4 0.2,2 0.7,1 2,1.6 3.5,2.4 1.6,0.8 3.4,1.6 4.9,2.5 1.5,0.9 2.8,1.9 3.3,2.7 0.2,0.4 0.3,0.7 0.2,1 -0.1,0.3 -0.3,0.8 -0.9,1.3 0,-0 -0.6,0.2 -1.5,0.1 -0.9,-0.1 -2.1,-0.3 -3.3,-0.6 -1.2,-0.3 -2.4,-0.6 -3.3,-0.8 -1,-0.3 -1.7,-0.5 -2.2,-0.5 -3.3,-0.3 -6.7,1.3 -9.9,2.7 -3.2,1.4 -6.1,2.5 -8.4,1.9 -2.3,-0.6 -3.7,-1.8 -5.2,-3.2 -1.5,-1.3 -3.1,-2.8 -5.5,-3.5 -0.8,-0.2 -2.5,-0.5 -5,-0.9 -2.4,-0.4 -5.4,-1 -8.3,-1.6 -2.9,-0.7 -5.6,-1.5 -7.6,-2.3 -1,-0.4 -1.7,-0.9 -2.2,-1.3 -0.3,-0.3 -0.4,-0.5 -0.5,-0.7 0.2,-0.1 0.6,-0.2 1.1,-0.3 1,-0.2 2.3,-0.3 3.6,-0.5 1.4,-0.2 2.7,-0.4 3.9,-0.8 0.6,-0.2 1.1,-0.4 1.5,-0.8 0.4,-0.3 0.8,-0.8 0.8,-1.4 0.1,-1 -0.4,-1.8 -1.1,-2.5 -0.6,-0.7 -1.4,-1.2 -2.1,-1.7 -0.7,-0.5 -1.3,-1 -1.6,-1.4 -0.1,-0.2 -0.2,-0.3 -0.2,-0.4 -0,-0.1 0,-0.1 0.1,-0.2 0,-0 0.1,-0 0.1,-0 0.3,-0 0.7,-0.1 1.2,-0.1 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 85.8,104.4 13.7,13.3 13.8,-13.3 z m 21.7,-0.4 h 2.5 v -2.8 c 0,-0.5 -0,-0.1 0.1,-0.4 l -2.7,-2.4 v 5.6 z m -6.1,0 h 3.1 v -8.5 c 0,-0.3 -2.7,-2.8 -3.1,-3.1 v 11.6 z m -6.6,-8.7 -0.1,8.7 3.1,0 -0,-11.6 z m -5.7,5.6 v 3.1 h 2.5 v -5.6 c -0.3,0.2 -2.5,2.2 -2.5,2.5 z M 99.8,85.4 c -4.3,1.2e-5 -8.1,-0.4 -10.9,-1.1 -1.4,-0.4 -2.5,-0.8 -3.2,-1.2 -0.7,-0.4 -0.9,-0.8 -0.9,-1 0,-0.2 0.2,-0.6 0.9,-1 0.7,-0.4 1.8,-0.8 3.2,-1.2 2.8,-0.7 6.6,-1.2 10.9,-1.2 4.3,-1.1e-5 8.1,0.4 10.9,1.1 1.4,0.4 2.5,0.8 3.2,1.2 0.7,0.4 0.9,0.8 0.9,1 0,0.2 -0.2,0.6 -0.9,1 -0.7,0.4 -1.8,0.8 -3.2,1.2 -2.8,0.7 -6.6,1.2 -10.9,1.2 z m -15,-1.5 0,38.4 c 0.1,-0.1 0.1,-0.1 0.2,-0.1 l 0,1.8 0,0.1 0,0 c 0,0.2 0.3,0.6 0.9,0.9 0.7,0.4 1.8,0.9 3.2,1.2 2.8,0.7 6.6,1.2 10.9,1.2 4.3,-1e-5 8.2,-0.5 10.9,-1.2 1.4,-0.4 2.4,-0.8 3.2,-1.2 0.7,-0.4 0.9,-0.8 0.9,-1 0,-0.1 -0,-0.2 -0.2,-0.4 l 0,-5.6 -0,0 0,-34.1 c -0.1,0.1 -0.2,0.1 -0.3,0.2 -0.9,0.5 -2.1,1 -3.5,1.3 -2.9,0.7 -6.8,1.2 -11.2,1.2 -4.3,1.1e-5 -8.3,-0.4 -11.2,-1.2 -1.4,-0.4 -2.6,-0.8 -3.5,-1.3 -0.1,-0.1 -0.2,-0.1 -0.3,-0.2 z m 14.8,6.1 14.6,14.3 -14.2,13.8 -0.8,0 L 85,104.2 99.6,90 z m -26.7,23.7 c 1.1,-0 2.5,0 3.9,0.1 1.4,0.1 2.9,0.2 4.2,0.3 1.1,0.1 1.9,0.1 2.6,-0 l 0,10 0,0.6 0.3,0 c 0.2,0.6 0.7,1.1 1.4,1.5 0.9,0.5 2.1,1 3.5,1.3 2.9,0.7 6.8,1.2 11.2,1.2 4.3,-1e-5 8.3,-0.4 11.2,-1.2 1.4,-0.4 2.6,-0.8 3.5,-1.3 0.9,-0.5 1.5,-1.2 1.5,-2.1 0,-0.3 -0.1,-0.5 -0.2,-0.8 l 0,-5.6 c 1.9,0.4 3.4,0.8 4.4,1.1 0.9,0.3 1.3,0.5 1.6,0.7 -0.1,0.1 -0.1,0.1 -0.4,0.3 -0.8,0.4 -2.2,0.9 -3.3,1.6 -0.5,0.3 -1,0.7 -1.3,1.3 -0.3,0.6 -0.2,1.4 0.2,2 0.7,1 2,1.6 3.5,2.4 1.6,0.8 3.4,1.6 4.9,2.5 1.5,0.9 2.8,1.9 3.3,2.7 0.2,0.4 0.3,0.7 0.2,1 -0.1,0.3 -0.3,0.8 -0.9,1.3 0,-0 -0.6,0.2 -1.5,0.1 -0.9,-0.1 -2.1,-0.3 -3.3,-0.6 -1.2,-0.3 -2.4,-0.6 -3.3,-0.8 -1,-0.3 -1.7,-0.5 -2.2,-0.5 -3.3,-0.3 -6.7,1.3 -9.9,2.7 -3.2,1.4 -6.1,2.5 -8.4,1.9 -2.3,-0.6 -3.7,-1.8 -5.2,-3.2 -1.5,-1.3 -3.1,-2.8 -5.5,-3.5 -0.8,-0.2 -2.5,-0.5 -5,-0.9 -2.4,-0.4 -5.4,-1 -8.3,-1.6 -2.9,-0.7 -5.6,-1.5 -7.6,-2.3 -1,-0.4 -1.7,-0.9 -2.2,-1.3 -0.3,-0.3 -0.4,-0.5 -0.5,-0.7 0.2,-0.1 0.6,-0.2 1.1,-0.3 1,-0.2 2.3,-0.3 3.6,-0.5 1.4,-0.2 2.7,-0.4 3.9,-0.8 0.6,-0.2 1.1,-0.4 1.5,-0.8 0.4,-0.3 0.8,-0.8 0.8,-1.4 0.1,-1 -0.4,-1.8 -1.1,-2.5 -0.6,-0.7 -1.4,-1.2 -2.1,-1.7 -0.7,-0.5 -1.3,-1 -1.6,-1.4 -0.1,-0.2 -0.2,-0.3 -0.2,-0.4 -0,-0.1 0,-0.1 0.1,-0.2 0,-0 0.1,-0 0.1,-0 0.3,-0 0.7,-0.1 1.2,-0.1 z"
	    }
	  ];
	  icn["GR.IN.IC.COLLEGE/UNIVERSITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 97.4,106.9 h -14.8 v 31.7 h 32 v -31.7 H 99.8 V 95.1 c 0,-0.6 6.5,-3 7.5,-3.4 1.3,-0.5 6.9,-3 7.9,-3 -0.3,-0.4 -14.7,-6.3 -15.7,-6.3 h -2.3 v 24.5 z m 23.3,-30.1 -9.6,0 0,-15.1 2,0 0,13.3 7.6,0 0,1.8 M 106,63.5 c 0.6,0.7 1.1,1.5 1.4,2.5 0.3,1 0.5,2.1 0.5,3.3 -1e-5,1.2 -0.2,2.4 -0.5,3.4 -0.3,1 -0.8,1.8 -1.4,2.5 -0.6,0.7 -1.4,1.2 -2.2,1.5 -0.8,0.3 -1.8,0.5 -2.9,0.5 -1.1,0 -2,-0.2 -2.9,-0.5 -0.9,-0.4 -1.6,-0.9 -2.2,-1.5 -0.6,-0.7 -1.1,-1.5 -1.4,-2.5 -0.3,-1 -0.5,-2.1 -0.5,-3.3 -10e-7,-1.2 0.2,-2.3 0.5,-3.3 0.3,-1 0.8,-1.8 1.4,-2.5 0.6,-0.7 1.3,-1.2 2.2,-1.5 0.9,-0.4 1.9,-0.5 2.9,-0.5 1.1,1.5e-5 2.1,0.2 2.9,0.5 0.9,0.4 1.6,0.9 2.2,1.5 m -0.2,5.8 c -2e-5,-2 -0.4,-3.5 -1.3,-4.5 -0.9,-1.1 -2.1,-1.6 -3.6,-1.6 -1.5,1.4e-5 -2.7,0.5 -3.6,1.6 -0.9,1.1 -1.3,2.6 -1.3,4.5 -3e-6,2 0.4,3.5 1.3,4.6 0.9,1 2.1,1.6 3.6,1.6 1.5,2e-6 2.7,-0.5 3.6,-1.6 0.9,-1.1 1.3,-2.6 1.3,-4.6 m -14,6.5 c -0.4,0.2 -0.7,0.3 -1,0.5 -0.3,0.1 -0.7,0.3 -1.2,0.4 -0.4,0.1 -0.9,0.2 -1.4,0.3 -0.5,0.1 -1,0.1 -1.6,0.1 -1.1,0 -2.1,-0.2 -3,-0.5 -0.9,-0.3 -1.7,-0.8 -2.3,-1.5 -0.7,-0.6 -1.2,-1.5 -1.5,-2.4 -0.4,-1 -0.5,-2.1 -0.5,-3.5 -10e-7,-1.2 0.2,-2.4 0.5,-3.3 0.4,-1 0.9,-1.8 1.5,-2.5 0.6,-0.7 1.4,-1.2 2.3,-1.5 0.9,-0.3 1.9,-0.5 3,-0.5 0.8,1.5e-5 1.6,0.1 2.4,0.3 0.8,0.2 1.7,0.5 2.7,1 l 0,2.4 -0.2,0 c -0.8,-0.7 -1.7,-1.2 -2.5,-1.5 -0.8,-0.3 -1.7,-0.5 -2.6,-0.5 -0.8,1.4e-5 -1.5,0.1 -2.1,0.4 -0.6,0.2 -1.2,0.6 -1.6,1.1 -0.5,0.5 -0.8,1.2 -1.1,1.9 -0.3,0.8 -0.4,1.7 -0.4,2.7 -3e-6,1.1 0.1,2 0.4,2.7 0.3,0.8 0.7,1.4 1.1,1.9 0.5,0.5 1,0.9 1.7,1.1 0.6,0.2 1.3,0.4 2,0.4 1,2e-6 1.9,-0.2 2.7,-0.5 0.8,-0.3 1.6,-0.8 2.4,-1.5 l 0.1,0 0,2.4"
	    }
	  ];
	  icn["GR.IN.IC.SCHOOL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 98.4,96.4 H 83.7 v 31.7 h 32 V 96.4 H 100.9 V 84.6 c 0,-0.6 6.5,-3 7.5,-3.4 1.3,-0.5 6.9,-3 7.9,-3 -0.3,-0.4 -14.7,-6.3 -15.7,-6.3 H 98.4 V 96.4 z"
	    }
	  ];
	  icn["GR.IN.IC.REST STOP"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 108.4,89.6 v -0.4 l 0.6,-0.6 -0.4,1.4 -3.8,13.4 -0.2,0.8 -0.4,0.6 0,0.9 -2,6.7 7.2,0 v 19.7 h 5.2 v -19.7 h 2.7 v 19.7 h 5.2 v -19.7 h 7.1 l -1.3,-5.3 -0.2,-0.8 -4.8,-16.4 -0.5,-1.4 0.6,0.7 0.1,0.4 c 2.1,2.4 5.4,14.2 8.6,14.2 h 0.4 c 1.2,0 2.1,-1.1 2.1,-2.3 v -0.6 c 0,-0.5 -4.8,-10 -5.3,-11.6 -0.7,-2 -1.7,-4.2 -2.6,-6 -1,-2.1 -1.2,-3.8 -4.6,-3.8 h -12.4 c -3.4,0 -3.6,1.8 -4.7,3.9 -0.9,1.7 -1.9,4 -2.5,5.9 -0.6,1.6 -5.2,11.1 -5.2,11.6 v 0.6 c 0,1.3 0.6,2.3 1.9,2.3 h 0.8 c 2.4,0 6.4,-12.2 8.2,-14.2 z m 0.2,0.4 0.4,-1.5 -0.6,0.6 0,0.4 z m 15.1,-0.4 -0.1,-0.4 -0.6,-0.6 0.5,1.4 z M 69.6,88.8 h 2.3 v 43.6 h 6.1 v -25.6 h 2.7 v 25.6 h 5.9 v -43.6 h 2.3 v 16.4 h 4.6 V 86.3 l -0.3,-2.3 h -0.4 c 0,-2.3 -1.7,-4.4 -4,-4.4 H 69.6 c -3,0 -4.4,3.4 -4.4,6.5 v 19.1 h 4.4 V 88.8 z M 110.7,72.8 c 0,2.7 2.4,5.4 5,5.4 h 0.2 c 1.6,0 2.8,-0.6 3.6,-1.4 0.5,-0.4 1.8,-2.4 1.8,-3 v -1.6 c 0,-2.4 -2.8,-4.6 -5.4,-4.6 -3,-0 -5.2,2.4 -5.2,5.2 z m -36.7,1.1 c 0,2 2.8,4.4 5,4.4 h 0.2 c 4.2,0 4.3,-3.4 5.2,-3.8 V 71.6 c 0,-1.8 -2.8,-4 -5.2,-4 -2.3,0 -5.2,2.2 -5.2,4 v 2.3 z"
	    }
	  ];
	  icn["GR.IN.IC.CONTROL VALVE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 114,114.5 h 15.7 v 4 h 9.1 v -23.6 h -9.1 V 98.8 H 114.4 c -0.4,0 -2.6,-2.6 -2.6,-3.4 v -5.6 h -9.9 v -8.2 h 12.3 v -3.6 h -28.2 v 3.6 h 12.1 v 8.3 H 89.2 v 6.6 l -0.2,-0.2 -1.8,2.4 -17.2,0.1 V 95 H 61.2 v 23.6 h 8.9 v -4 H 87 c 0.4,0 2,2.4 2.4,2.8 0.5,0.6 2.2,1.9 2.9,2.4 1.9,1.2 4.7,2.4 7.8,2.4 h 0.6 c 3.5,0 5.8,-1 8.1,-2.4 1.4,-0.8 4.8,-3.8 5.2,-5.3 z"
	    }
	  ];
	  icn["GR.IN.IC.DAM"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 68.3,89.1 c 2.3,0 3.2,-1.7 4.6,-2.6 1.1,0.8 2.2,2.6 4.4,2.6 h 0.2 c 2.6,0 3.3,-1.7 4.7,-2.6 1.4,0.9 2.2,2.6 4.7,2.6 2.4,0 3.3,-1.8 4.6,-2.6 0.6,0.4 1.1,1.1 1.9,1.6 0.4,0.2 2.2,0.9 2.2,1.3 v 6.8 C 94.1,95.8 91.8,93.8 91.5,92.6 h -0.3 c -0.3,1.1 -3,3.6 -4.5,3.6 -1.5,0 -4.1,-2.6 -4.4,-3.8 -1,0.6 -2.6,3.8 -4.6,3.8 h -0.4 c -1.2,0 -4,-2.7 -4.2,-3.7 -0.8,0.2 -2.6,3.7 -4.7,3.7 h -0.3 c -1.1,0 -1.7,-0.7 -2.4,-1.2 l -1,1.2 c 1,0.7 1.6,1.8 3.2,1.8 h 0.4 c 2.3,0 3.1,-1.8 4.6,-2.8 0.7,1.1 2.8,2.8 4.7,2.8 2.3,0 3.3,-2 4.6,-2.8 1.2,0.8 2.6,2.8 4.7,2.8 2.1,0 3.4,-2.1 4.7,-2.8 0.7,1 2.6,2.4 4,2.7 v 7 c -1.4,-0.1 -3.4,-2.4 -4,-3.5 -1.1,0.7 -2.5,3.6 -4.7,3.6 h -0.1 c -2.3,0 -4.1,-3.5 -4.7,-3.7 -0.3,1 -3,3.7 -4.1,3.7 h -0.4 c -2.2,0 -3.6,-2.9 -4.7,-3.7 -0.6,1 -2.8,3.7 -4.1,3.7 H 67.7 c -0.7,0 -1.7,-1 -2.2,-1.3 l -0.9,1.5 c 1.1,0.7 1.7,1.6 3.6,1.6 2.7,0 3.1,-1.8 4.7,-2.6 1.4,0.9 2,2.6 4.7,2.6 2.2,0 3.4,-1.8 4.6,-2.6 1.4,1 2.5,2.6 4.8,2.6 1.8,0 3.4,-2 4.4,-2.6 0.9,0.5 1,1 2,1.6 0.4,0.3 2.2,0.7 2.2,1.2 v 6.8 c -1.4,-0.3 -3.6,-2.2 -4,-3.5 -1.1,0.7 -2.5,3.8 -4.8,3.8 -1.4,0 -4.1,-2.6 -4.4,-3.8 -1.2,0.8 -2.6,3.8 -4.8,3.8 -2,0 -3.7,-3.2 -4.7,-3.8 -0.3,1 -3,3.8 -4.3,3.8 h -0.6 c -0.8,0 -1.8,-1 -2.4,-1.3 l -0.9,1.3 c 1.1,0.7 1.8,1.8 3.6,1.8 2.2,0 3.3,-1.8 4.7,-2.8 1.2,0.8 2.6,2.9 4.7,2.8 2.3,-0.1 3.3,-1.9 4.6,-2.8 1.2,0.8 2.7,2.8 4.7,2.8 1.9,0 3.4,-2 4.6,-2.8 1.6,1 1.8,2 4.1,2.5 v 5 h 17 l -1.4,-5.2 c 0.8,0.2 1,0.6 2.2,0.6 2,0 3.3,-1.9 4.6,-2.8 1.3,0.9 2.4,2.8 4.7,2.8 1.6,0 3.8,-1.8 4.4,-2.8 1.3,0.3 2.5,2.8 5.1,2.8 1.2,0 2.6,-1.4 3.4,-1.8 l -1,-1.3 c -0.7,0.4 -1.5,1.3 -2.6,1.3 -2.1,0 -3.7,-3.1 -4.7,-3.8 -0.7,1.4 -2.7,3.8 -4.7,3.8 -1.3,0 -4.3,-2.6 -4.4,-3.8 -1,0.7 -2.6,3.8 -4.7,3.8 h -0.2 c -1.1,0 -2.2,-0.9 -2.7,-1.5 -0.4,-0.4 -0.8,-2.5 -1.1,-3.2 -0.4,-1 -1.8,-5.6 -1.8,-6.6 l -0.3,-0.4 0,-0.6 -0.3,-0.4 v -0.6 l -0.3,-0.4 -5.3,-18.6 0.2,-0 -0.3,-0.4 0,-0.6 c -0.2,-0.3 -0.3,-0.3 -0.3,-0.6 v -0.4 h -5.6 v 7.8 c -1.4,-0.7 -1.2,-0.5 -2.4,-1.6 -0.1,-0.1 -1,-0.9 -1,-1 -0.4,-0.5 -0.1,-0.9 -0.8,-1.1 -0.1,1.2 -3.1,3.8 -4.3,3.8 h -0.2 c -2.5,0 -4.2,-3.6 -4.8,-3.8 -0.3,1.1 -3,3.8 -4.2,3.8 h -0.4 c -1.2,0 -4.2,-2.7 -4.2,-3.8 -0.5,0.1 -2.8,3.8 -4.4,3.8 H 67.7 c -0.7,0 -1.7,-1 -2.2,-1.3 l -0.9,1.3 c 1,0.7 1.6,1.6 3.4,1.6 h 0.3 v 0 z"
	    }
	  ];
	  icn["GR.IN.IC.DISCHARGE OUTFALL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 63.2,111.4 v 13.4 h 73.6 V 111.7 l -3.1,0.5 -1.1,-0.1 c -2.2,0 -3.6,-0.7 -4.9,-1.6 -0.6,-0.4 -1.1,-1.1 -1.5,-1.8 -0.4,-0.6 -0.2,-2.1 -1,-2.1 h -0.4 c -0.8,0 -0.7,1.6 -1.2,2.2 -0.4,0.6 -0.9,1.2 -1.6,1.7 -1.3,1 -3,1.6 -5.1,1.6 h -0.9 c -3.2,0 -6.8,-2.1 -6.8,-5.1 -0.3,-0.2 -0.4,-0.4 -0.8,-0.4 h -0.3 c -0.7,0 -0.8,1.5 -1.1,2.1 -0.4,0.6 -1,1.4 -1.5,1.8 -1.2,1 -2.7,1.6 -4.8,1.6 h -0.9 c -3.5,0 -7.3,-2.1 -7.3,-5.4 -0.4,-0.1 -0.4,-0.2 -0.8,-0.2 h -0.3 c -0.6,0 -0.6,1.5 -1.1,2.2 -0.5,0.8 -0.7,1.1 -1.5,1.7 -1.3,1 -2.7,1.6 -4.8,1.6 H 82.9 c -3.5,0 -6.7,-2.2 -7,-5.4 -0.3,-0.1 -0.4,-0.2 -0.8,-0.2 h -0.1 c -0.7,0 -0.8,1.5 -1.2,2.2 -0.4,0.6 -0.9,1.2 -1.6,1.7 -1.4,1 -2.7,1.6 -5,1.6 h -1 c -1.2,0 -2.2,-0.4 -3,-0.8 l 0,0 z m 0,-21.6 19.5,0 0,1.2 2.7,0 0,-15.8 -2.7,0 0,1.2 -19.5,0 z M 89.7,80.9 v 0.1 c 8.1,0 16.2,1.2 20.6,4.9 2.8,2.4 3.1,4.5 3.1,9.6 0,4.1 0.5,8.3 4.5,8.3 h 0.8 c 1.7,0 2.8,-2.6 2.8,-4.3 v -0.9 c 0,-5.1 -3.3,-10.7 -5.9,-13.3 -1.6,-1.6 -3.6,-3 -6.1,-3.6 -2.2,-0.5 -6,-1.1 -8.6,-1.1 l -1.8,-0.1 -9.4,0.4 z"
	    }
	  ];
	  icn["GR.IN.IC.GROUND WATER WELL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M86,64L86,70L75,110L81,110L92,70L99,70L99,130L86,130L86,140L120,140L120,130L110,130L110,89L120,89L120,93L130,93L130,87C130,82.631 125.551,83 125.551,83L110,83L110,70L113.774,70L113.774,64L86,64Z"
	    }
	  ];
	  icn["GR.IN.IC.TELECOMMUNICATIONS INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 109.7,116.6 4.1,13.4 -0.2,0.1 -12.2,-8.4 8.3,-5.2 z m -19.7,0 8,5.1 -12.1,8.4 4.1,-13.6 z m 9.8,-9.8 8.8,8.2 c -1.7,0.5 -8.1,5.6 -8.8,5.6 -0.2,0 -8.2,-5.4 -8.6,-5.8 l 8.5,-8.1 z m 5.3,-4.8 3.1,9.8 -6.9,-6.4 3.7,-3.4 z m -10.5,0.1 3.8,3.3 -6.9,6.4 3.1,-9.7 z m 2.1,-1 6.4,-0 -3.2,3.2 -3.2,-3.2 z M 99.2,84.8 C 99.1,85.4 99,85.5 99,86.1 v 2 h -3 c -0.5,0 -0.8,0.3 -0.8,0.8 0,0.5 0.1,0.5 0.2,1 0.4,0.1 0.4,0.2 1,0.2 h 2.6 v 2.8 h -4.5 c -0.6,0 -1.2,0.2 -1.2,0.8 0,0.5 0.3,0.8 0.8,0.8 h 4.9 v 4.9 h -4.5 c -0.5,0 -0.5,0.1 -0.9,0.2 l -2.5,7.9 -1,3.2 -4.1,13.3 -1.1,3.1 c 0,2 -1.4,3.5 -1.4,5.5 0,0.4 0.1,0.2 0.2,0.8 h 0.5 c 0.6,0 15.1,-10.3 15.4,-10.3 0.6,0 14.2,9.4 15.8,10.5 0.4,-0.2 1,-0.4 1,-1 v -0.6 c 0,-0 -1.5,-4.4 -1.7,-5 -0.4,-1.1 -1.4,-4.3 -1.5,-5.2 l -1,-3.2 -4.1,-13.2 -0.9,-3.4 c -1,-0.4 -0.3,-2.6 -1.6,-2.6 h -4.8 v -5 h 4.8 c 0.5,0 0.8,-0.3 0.8,-0.8 0,-0.5 -0.3,-0.8 -0.8,-0.8 H 100.8 V 90.1 h 2.4 c 0.7,0 1.4,-0.4 1.4,-1 v -0.2 c 0,-0.5 -0.3,-0.8 -0.8,-0.8 h -2.9 v -2.6 c 0,-0.4 -0.6,-1 -0.8,-1 -0,-0 -0.7,0.1 -0.8,0.2 z m 6.7,-15.7 c 7,1.6 10.9,4.6 15.1,8.9 3,3 7.3,11 7.3,16.9 v 4 c 0,2.1 -1.5,7.7 -2.2,9 -0.7,1.1 -1.2,2.4 -1.9,3.6 -0.3,0.4 -2.4,3.3 -2.4,3.4 0,0.7 1,1.6 1.2,2.6 1.7,-0.4 4.8,-6.3 5.7,-8.2 1.2,-2.5 2.7,-7.8 2.7,-11.4 V 94.3 c 0,-0.1 -0.9,-4.9 -1,-5.5 -0.3,-0.9 -1.4,-3.7 -1.8,-4.8 -0.9,-2.2 -3.7,-6.4 -5.2,-8 -3.6,-3.6 -10.6,-9.2 -16.9,-9.7 l -0.4,2.8 z m -1.6,10.7 c 6,0.5 13.3,9.2 13.3,16.1 v 2.2 c 0,1.5 -1.4,5.5 -1.4,5.5 0,0.2 1.2,2.9 1.4,3.2 l 0.2,0.1 1.6,-3.4 0.1,-0.6 0.7,-5.9 0.2,-0.4 -1,-5.9 c -0.7,-0.3 -0.6,-1.4 -1.1,-2.2 -0.4,-0.8 -0.8,-1.6 -1.3,-2.3 -1.1,-1.6 -1.8,-2.6 -3.2,-3.9 -2.2,-2.2 -5.8,-4.2 -9.2,-5 l -0.3,2.8 z M 68.7,95.2 v 5.1 c 0,4.2 5.4,16.3 7.9,17 0.1,-0.5 1,-2.2 1,-2.6 0,0 -2.1,-2.9 -2.3,-3.4 -0.7,-1.3 -1.3,-2.4 -1.9,-3.8 -1,-2.6 -1.8,-6 -1.8,-9.6 v -2.4 c 0,-8 3.3,-12.9 6.9,-17.5 1.4,-1.8 4.7,-4.4 6.7,-5.6 1.4,-0.8 2.5,-1.4 4.1,-2.1 0.5,-0.2 4.5,-1.3 4.5,-1.6 l -0.2,-2.6 c -2.4,0.1 -8,2.6 -9.6,3.7 -3.2,1.9 -4.8,3.6 -7.3,6.1 -3.6,3.6 -7.8,12 -7.8,19.1 l 0,0 z m 10.7,0 v 2.9 c 0,1.9 0.2,3.1 0.8,4.5 0.2,0.4 1.5,4 1.5,4 l 0.4,-0 1.5,-2.9 c -0.9,-1.2 -1.4,-4 -1.4,-6.2 v -1.8 c 0,-3.7 2.3,-8.3 4.2,-10.3 1.8,-1.8 5.9,-5.5 9.1,-5.6 L 95,77.1 C 88,77.6 79.4,87.3 79.4,95.2 z"
	    }
	  ];
	  icn["GR.IN.IC.TELECOMMUNICATIONS TOWER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 102.5,119.2 12,-8 2.8,9.2 1.3,4 2.1,6.9 -18.2,-12 z m -23,12 3.4,-11.7 2,-5.9 0.8,-2.6 11.9,8.2 -18,12 z m 20.4,-34.6 13,12.2 c -1.5,1 -12.3,8.5 -13.1,8.5 -0.1,0 -11.6,-7.7 -12.7,-8.5 L 99.9,96.6 z m 7.7,-7.1 0.2,0.2 1.8,5.7 2.5,8.7 -10.1,-9.3 5.6,-5.2 0,0 z m -15.5,0.6 v -0.6 l 0.4,0.2 5.4,5 -10,9.4 2.6,-9 1.6,-5 z m 2.9,-1.7 9.8,-0 -5,4.4 -4.8,-4.4 z m 3.6,-23.1 v 3.6 h -4.4 c -0.5,0 -1,0.6 -1,1 v 0.6 c 0,0.7 0.8,1 1.5,1 h 4 v 4.2 h -7.2 c -0.5,0 -1,0.6 -1,1 v 0.2 c 0,1 0.5,1.5 1.5,1.5 h 6.8 v 7 h -6.8 c -0.8,0 -1,0.3 -1.3,0.7 l -0.6,2 -4.9,15.6 -3,9.6 -3.1,9.4 -0.1,0.8 -2.9,8.7 -0.1,0.8 -0.5,2.2 c 1,0.2 0.5,0.6 1.3,0.6 h 0.2 c 0.8,0 20.1,-13.7 23.1,-15.2 2.5,1.7 22.4,15.2 23.5,15.2 0.6,0 1,-0.7 1,-1.3 0,-0.1 -1.4,-4 -1.5,-4.2 l -0.1,-0.8 -3.1,-9.7 -2.9,-9.3 -4.7,-15.7 c -0.6,-0.8 -1.4,-3.8 -1.8,-5 -0.6,-1.8 -0.5,-4.3 -2.5,-4.3 h -6.8 v -7 h 7.2 c 0.5,0 1,-0.6 1,-1 v -0.4 c 0,-0.6 -0.2,-1.3 -0.8,-1.3 h -7.4 v -4.2 h 4 c 0.7,0 1.5,-0.4 1.5,-1 v -0.6 c 0,-0.7 -0.8,-1 -1.5,-1 h -4 v -4 c 0,-0.6 -0.7,-1 -1.3,-1 -0.8,-0 -1.3,0.6 -1.3,1.4 l 0,0 z m -6.6,24.8 0.4,-0.4 -0.4,-0.2 z"
	    }
	  ];
	  icn["GR.IN.IC.AIR TRAFFIC CONTROL FACILITY"] = text("ATC");
	  icn["GR.IN.IC.PROPANE FACILITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 98.7,73.1 v 0.2 c 0,1 0.5,1.5 1.5,1.5 0.5,0 1.1,-0.6 1.1,-1.1 0,-0.8 -0.2,-0.8 -0.2,-1.5 -0.5,-0.1 -0.5,-0.2 -1.1,-0.2 h -0.2 c -0.5,0 -1.1,0.6 -1.1,1.1 z m -12.6,58.5 h 28.4 v 3.3 h -28.4 v -3.3 z M 75.8,119 h 48.5 v 3.3 c 0,2 -8.8,7.8 -9.8,7.8 H 85.8 c -1,0 -10,-5.8 -10,-7.6 v -3.5 l 0,0 z m 0,-27.5 c 0,-1.1 7.2,-5.8 8.5,-6.6 2.6,-1.5 7.4,-3.7 11.4,-3.7 h 8.5 c 4.1,0 9.1,2 11.6,3.7 1.3,0.9 8.5,5.4 8.5,6.6 v 4.2 H 75.8 V 91.5 l 0,0 z M 98.2,77.1 c 0.7,0 0.8,0.2 1.5,0.2 h 0.4 c 0.8,0 0.8,-0.2 1.5,-0.2 v 1.8 l 1.2,0.8 -5.5,0 c 0.3,-0.5 0.9,-0.8 0.9,-1.3 l -0,-1.3 0,0 z m -1.1,-4 c 0,-1.4 1.4,-2.4 2.8,-2.4 1.3,0 2.8,0.9 2.8,2 v 1.1 c 0,1.4 -1.6,2.4 -3,2.4 -1,0 -2.6,-1.2 -2.6,-2.4 v -0.7 h -0 z m 12.2,-8.1 h 3.5 v 3.5 h -1.8 v 6.8 c 0.7,0 2.4,0.6 2.4,1.3 v 3.7 H 109.4 V 65.1 z m -22.7,0 h 4.2 V 80.3 H 85.8 v -4.1 c 0.8,-0.2 3.1,-0.8 3.1,-1.5 v -6.1 h -2.2 v -3.5 z m 5.7,0 h 15.5 v 15.3 c -1.6,-0.4 -4.8,-0.9 -4.8,-2.6 v -0.9 c 0,-1.5 0.9,-2.1 0.9,-2.6 v -1.1 c 0,-3.2 -3,-3.2 -3.3,-4.4 h 4.2 v -1.5 h -9.6 v 1.5 h 4.2 v 0.6 c -1.9,0.1 -3.1,1.9 -3.1,4 v 0.6 c 0,1 0.9,2 0.9,2.4 v 1.3 c 0,1.4 -3.4,2.3 -4.8,2.6 V 65.1 l 0,0 z m -7.2,4.8 h 2.2 v 4 c 0,0.8 -2.1,1.2 -2.8,1.3 v 6.8 h 3 c -0.6,0.4 -2.7,1.2 -3.6,1.8 -1.2,0.7 -2.2,1.4 -3.4,2.1 -0.9,0.6 -6.1,4.7 -6.3,4.8 v 31.6 c 0,1.9 3.2,4.4 4.5,5.3 1,0.6 5.8,3.3 5.8,4.1 v 4.8 h 31.2 v -4.8 c 0,-1.6 10,-4.6 10,-10 V 91.1 c 0,-0.9 -5,-4.4 -6,-5.1 -1.2,-0.8 -2.1,-1.4 -3.3,-2.1 -0.9,-0.6 -3.2,-1.4 -3.7,-1.9 h 2.4 v -6.8 c -0.7,-0.2 -2.6,-0.5 -2.6,-1.3 v -4 h 2 V 63.5 H 85.2 v 6.3 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 114.4,134.9 0,-3.3 -28.4,0 0,3.3 z M 75.8,122.5 c 0,1.9 9,7.6 10,7.6 h 28.6 c 1,0 9.8,-5.9 9.8,-7.8 v -3.3 H 75.8 v 3.5 l 0,0 z m 0,-31 v 4.2 h 48.5 V 91.5 c 0,-1.2 -7.2,-5.7 -8.5,-6.6 -2.5,-1.7 -7.5,-3.7 -11.6,-3.7 h -8.5 c -3.9,0 -8.8,2.2 -11.4,3.7 -1.3,0.8 -8.5,5.4 -8.5,6.6 l 0,0 z M 109.4,80.3 h 4.2 v -3.7 c 0,-0.8 -1.7,-1.2 -2.4,-1.3 v -6.8 h 1.8 V 65.1 H 109.4 V 80.3 z M 86.7,68.6 h 2.2 v 6.1 c 0,0.8 -2.3,1.4 -3,1.5 v 4.2 h 5 V 65.1 h -4.2 v 3.5 z m 11.6,9.8 c 0,0.6 -0.6,0.8 -0.9,1.3 l 5.5,-0.1 -1.1,-0.8 V 77.1 c -0.7,0 -0.8,0.2 -1.5,0.2 H 99.8 c -0.8,0 -0.8,-0.2 -1.5,-0.2 l -0,1.3 0,0 z m 2.8,-6.1 c 0.1,0.7 0.2,0.8 0.2,1.6 0,0.5 -0.6,1.1 -1.1,1.1 -1,0 -1.5,-0.5 -1.5,-1.5 v -0.2 c 0,-0.5 0.6,-1.1 1.1,-1.1 h 0.2 c 0.6,0 0.6,0.1 1.1,0.2 z m -3.9,0.9 v 0.7 c 0,1.2 1.6,2.4 2.6,2.4 1.4,0 3,-1 3,-2.4 V 72.7 c 0,-1 -1.6,-2 -2.8,-2 -1.4,0 -2.8,1 -2.8,2.4 z"
	    }
	  ];
	  icn["GR.IN.IC.GOVERNMENT SITE INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 100,67.3 C 90.1122,72.1037 79.3336,77.3992 70,82 c -1.2,0.6 -3.8,1.3 -3.8,2.8 l -0.1,0 0,0.4 c 0,0.6 0.1,0.6 0.2,1.1 0.5,0.1 0.5,0.2 1.1,0.2 l 65,0 c 0.7,0 1.7,-0.6 1.7,-1.1 0,-2.2 -1.7,-2.4 -3.2,-3 C 119.391,76.7575 109.17,71.7941 100,67.3 Z m -0.1,3.4 c 0.2,0 24.5,12 25.9,13 l -51.6,0 0,-0.1 C 75,83 99.7,70.7 99.9,70.7 Z m 31.6,55.6 0,-3 -63.3,0 0,3 z m 2.3,6.4 0,-3 -67.7,0 0,3 z m -6.2,-40.7 2.4,0 0,-3.2 -7.9,0 0,3.2 2.1,0 -0.6,25.5 -1.5,0 0,3.8 7.9,0 0,-3.8 -1.5,0 z m -14.6,-3.2 -7.6,0 0,3.2 2.2,0 -0.9,25.4 -1.3,0 0,3.8 7.6,0 0,-3.8 -1.4,0 -0.7,-25.5 2.1,0 z m -20.8,3.1 2.3,0 0,-3.2 -7.8,0 0,3.2 2.3,0 -0.8,25.4 -1.5,0 0,3.8 7.8,0 0,-3.8 -1.7,0 z m -22.5,25.5 0,3.8 8,0 0,-3.8 -1.5,0 -0.8,-25.5 2.3,0 0,-3.2 -8,0 0,3.2 2.4,0 -0.9,25.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 74.1,83.6 h 51.6 C 124.3,82.7 100,70.7 99.8,70.7 99.6,70.7 74.9,83 74.1,83.6 l 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.MILITARY INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 65.2,93.1 c 0,-0.5 15.6,-11.5 17.3,-12.8 1.5,-1.2 17.3,-12.6 17.4,-12.6 0.6,0 15.9,11.2 17.6,12.5 1.7,1.3 17.3,12.4 17.3,12.9 0,0 -6.1,18.6 -6.7,20.3 -1.2,3.4 -2.2,6.8 -3.4,10.3 -1,3 -2.7,7.2 -3.3,10 H 78.4 c -0.1,-1.7 -5.6,-18 -6.5,-20.4 -0.6,-1.4 -6.6,-20.1 -6.6,-20.1 z m 8.4,38.5 2,6.1 49,0 8.4,-26.4 6.6,-20.5 -39.7,-28.7 -39.6,28.8 13.3,40.6 0,0 z M 100,76.2 c 2.7,2.4 26.6,18.7 26.6,19.6 0,0.8 -4.1,12.7 -4.5,13.4 l -5.6,17.4 -32.5,0 c -0.9,0 -3,-7.4 -3.5,-8.7 -0.6,-1.8 -2.9,-7.8 -2.9,-9.4 L 74.3,98.9 73.5,95.5 100,76.2 z m 30.5,18 c -3.1,-2.1 -30,-22.2 -30.7,-22.2 -0.1,0 -13.8,10.1 -15.2,11.1 -2,1.4 -14.3,10.7 -15.2,10.9 v 0.7 c 0,1 2.9,7 2.9,9.3 l 8.7,26.3 37.7,0 5,-15.7 6.6,-20.4 z m -50.4,3.2 c 0.8,-0.2 8.6,-6.1 10,-7 1.2,-0.8 9.5,-7.1 10,-7.1 0,0 9,6.5 10,7.2 1.2,0.8 9.7,6.5 9.7,7.3 0,1.2 -0.4,2 -0.9,2.7 0,1.6 -2.6,8.7 -3.3,10.6 -0.5,1.4 -2.8,10.1 -3.7,10.1 H 88.1 c -0.7,0 -1.8,-4 -2,-4.8 -0.6,-1.7 -1.2,-3.3 -1.7,-5.1 -0.6,-2.1 -3.1,-8.7 -3.1,-10.3 l -0.3,0.1 -0.9,-3.7 z m -3.2,-0.7 8.8,27 28.2,-0 8.7,-27.2 c -3.2,-1.7 -21.7,-16.3 -22.9,-16.3 -0.3,0 -20.6,15 -22.9,16.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 77,96.8 c 2.3,-1.5 22.6,-16.6 22.9,-16.6 1.2,0 19.7,14.6 22.9,16.3 l -8.7,27.2 -28.3,0 -8.8,-27 z m -3.6,-1.3 0.9,3.4 3.4,9.7 c 0,1.5 2.3,7.6 2.9,9.4 0.4,1.3 2.5,8.7 3.5,8.7 l 32.5,-0 5.5,-17.4 c 0.4,-0.6 4.5,-12.6 4.5,-13.4 0,-1 -23.9,-17.2 -26.6,-19.6 L 73.5,95.5 z m 6.7,2 0.9,3.7 0.3,-0.1 c 0,1.6 2.4,8.2 3.1,10.3 0.5,1.8 1.1,3.4 1.7,5.1 0.2,0.8 1.3,4.8 2,4.8 h 23.8 c 1,0 3.3,-8.6 3.7,-10.1 0.6,-1.9 3.3,-9 3.3,-10.6 0.5,-0.7 1,-1.5 1,-2.7 0,-0.8 -8.5,-6.5 -9.7,-7.3 -1,-0.7 -9.9,-7.2 -10,-7.2 -0.5,0 -8.8,6.2 -10,7 -1.3,1 -9.2,6.8 -10,7.1 z m 43.8,17.1 -5,15.7 -37.7,-0 -8.7,-26.3 c 0,-2.3 -2.9,-8.3 -2.9,-9.3 v -0.7 c 1,-0.2 13.2,-9.5 15.2,-10.9 1.4,-1 15.1,-11.1 15.2,-11.1 0.7,0 27.6,20 30.7,22.2 l -6.6,20.4 z M 65.2,93.1 c 0,0 6,18.7 6.6,20.1 1,2.4 6.4,18.7 6.5,20.4 h 43.1 c 0.6,-2.8 2.3,-7 3.3,-10 1.2,-3.5 2.1,-6.8 3.4,-10.3 0.6,-1.7 6.7,-20.2 6.7,-20.3 0,-0.5 -15.6,-11.5 -17.3,-12.9 C 115.8,79 100.5,67.7 99.9,67.7 99.8,67.7 84.1,79.2 82.5,80.3 80.8,81.6 65.2,92.7 65.2,93.1 z"
	    }
	  ];
	  icn["GR.IN.IC.POSTAL SERVICE INFRASTRUCTURE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 64.3,86.6 99.9,102.1 135.7,86.6 v 31.8 H 64.3 v -31.8 l 0,0 z m 62.5,1.9 c -3.1,1.2 -5.9,2.6 -9,3.9 -2.2,0.9 -17.1,7.7 -18,7.7 -0.5,0 -15.8,-7 -17.8,-7.8 -3,-1.2 -5.9,-2.8 -8.8,-3.9 -2.3,-0.9 -6.8,-3.4 -8.8,-3.8 v -3.2 h 71.5 v 3.2 c -2.1,0.4 -6.6,2.9 -9,3.9 z m -64.1,31.7 h 74.7 V 79.8 H 62.7 v 40.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 64.3,86.6 0,31.8 71.5,0 0,-31.8 -35.8,15.5 z m 0,-2 c 2,0.5 6.5,3 8.8,3.8 2.9,1.1 5.8,2.7 8.8,3.9 2,0.8 17.3,7.8 17.8,7.8 0.9,0 15.9,-6.8 18,-7.7 3.1,-1.3 5.9,-2.6 9,-3.9 2.4,-1 6.9,-3.4 9,-3.9 V 81.4 H 64.3 v 3.2 l 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.POSTAL DISTRIBUTION CENTER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 64.3,94.6 99.9,110.1 135.7,94.6 V 126.4 H 64.3 l 4e-4,-31.8 0,0 z m 62.5,1.9 c -3.1,1.2 -5.9,2.6 -9,3.9 -2.2,0.9 -17.1,7.7 -18.1,7.7 -0.5,0 -15.7,-6.9 -17.8,-7.8 -3,-1.2 -5.9,-2.8 -8.8,-3.9 -2.3,-0.9 -6.8,-3.4 -8.8,-3.9 v -3.2 h 71.5 v 3.2 c -2.1,0.5 -6.6,2.9 -9,3.9 z M 62.7,128.2 h 74.7 V 87.8 H 62.7 v 40.5 z m 66.1,-54.4 -5.4,0 0,13.3 -2,0 0,-13.3 -5.4,0 0,-1.8 12.8,0 0,1.8 m -14,9 c -1e-5,0.6 -0.1,1.2 -0.4,1.7 -0.3,0.6 -0.7,1.1 -1.1,1.5 -0.5,0.4 -1.2,0.8 -1.9,1 -0.7,0.2 -1.6,0.4 -2.6,0.4 -1.1,0 -2.1,-0.1 -2.9,-0.3 -0.9,-0.2 -1.8,-0.5 -2.7,-0.9 l 0,-2.5 0.1,0 c 0.8,0.6 1.6,1.1 2.7,1.5 1,0.3 1.9,0.5 2.8,0.5 1.2,10e-7 2.2,-0.2 2.9,-0.7 0.7,-0.5 1,-1.1 1,-1.9 -1e-5,-0.7 -0.2,-1.2 -0.5,-1.5 -0.3,-0.3 -0.8,-0.6 -1.5,-0.7 -0.5,-0.1 -1.1,-0.2 -1.7,-0.3 -0.6,-0.1 -1.2,-0.2 -1.9,-0.3 -1.3,-0.3 -2.3,-0.8 -3,-1.5 -0.6,-0.7 -1,-1.6 -1,-2.7 0,-1.3 0.5,-2.3 1.6,-3.1 1.1,-0.8 2.4,-1.2 4.1,-1.2 1.1,1.6e-5 2,0.1 2.9,0.3 0.9,0.2 1.7,0.5 2.4,0.8 l 0,2.4 -0.1,0 c -0.6,-0.5 -1.3,-0.9 -2.3,-1.2 -0.9,-0.3 -1.9,-0.5 -2.9,-0.5 -1.1,1.3e-5 -1.9,0.2 -2.6,0.7 -0.7,0.4 -1,1 -1,1.7 -1e-5,0.6 0.2,1.1 0.5,1.5 0.3,0.4 0.9,0.6 1.7,0.8 0.4,0.1 1,0.2 1.8,0.3 0.8,0.1 1.5,0.3 2,0.4 1.1,0.3 2,0.7 2.5,1.4 0.6,0.6 0.9,1.4 0.9,2.5 m -14.4,4.3 -6,0 0,-1.5 2,0 0,-12 -2,0 0,-1.5 6,0 0,1.5 -2,0 0,12 2,0 0,1.5 m -8.6,-7.5 c -1.5e-5,1.4 -0.3,2.6 -0.9,3.7 -0.6,1.1 -1.4,2 -2.4,2.6 -0.7,0.4 -1.5,0.7 -2.3,0.9 -0.8,0.2 -2,0.3 -3.4,0.3 l -3.8,0 0,-15.1 3.8,0 c 1.5,1.5e-5 2.6,0.1 3.5,0.3 0.9,0.2 1.6,0.5 2.2,0.9 1,0.6 1.8,1.5 2.4,2.6 0.6,1.1 0.9,2.3 0.9,3.8 m -2.1,-0 c -1.2e-5,-1.2 -0.2,-2.2 -0.6,-3 -0.4,-0.8 -1,-1.5 -1.8,-1.9 -0.6,-0.3 -1.2,-0.6 -1.9,-0.7 -0.7,-0.1 -1.5,-0.2 -2.4,-0.2 l -1.9,0 0,11.7 1.9,0 c 1,2e-6 1.8,-0.1 2.5,-0.2 0.7,-0.1 1.4,-0.4 2,-0.8 0.8,-0.5 1.3,-1.1 1.7,-1.9 0.4,-0.8 0.6,-1.8 0.6,-2.9"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 126.8,96.5 c -3.1,1.2 -5.9,2.6 -9,3.9 -2.2,0.9 -17.1,7.7 -18.1,7.7 -0.5,0 -15.7,-6.9 -17.8,-7.8 -3,-1.2 -5.9,-2.8 -8.8,-3.9 -2.3,-0.9 -6.8,-3.4 -8.8,-3.9 v -3.2 h 71.5 v 3.2 c -2.1,0.5 -6.6,2.9 -9,3.9 z m -62.5,-1.9 35.6,15.5 35.8,-15.5 V 126.4 H 64.3 l 4e-4,-31.8 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.POST OFFICE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 74.7,92.8 24.9,10.8 L 124.7,92.8 V 115.1 H 74.7 V 92.8 l 0,0 z m 43.7,1.3 c -2.2,0.9 -4.1,1.8 -6.3,2.7 -1.5,0.6 -12,5.4 -12.6,5.4 -0.4,0 -11,-4.9 -12.5,-5.4 -2.1,-0.8 -4.1,-1.9 -6.2,-2.7 -1.6,-0.6 -4.8,-2.4 -6.2,-2.7 v -2.2 h 50 v 2.3 c -1.5,0.3 -4.6,2 -6.3,2.7 z M 73.6,116.4 H 125.8 V 88.1 H 73.6 V 116.4 z M 99.8,64.3 c 0.2,0 35.5,19.8 37.1,21.2 h -4.8 v 38.6 h -63.9 v -38.6 h -4.9 c 1.6,-1.4 6.9,-4.1 9.1,-5.3 3.1,-1.8 6,-3.4 9.1,-5.3 1.6,-1 18.3,-10.6 18.4,-10.6 z m -43.3,23.1 9.9,-0.2 v 38.4 h 67.4 v -38.4 l 9.9,0.2 c -0.5,-0.6 -43.6,-25 -43.9,-25 -0,0 -19.5,11.4 -21.7,12.5 -3.5,1.8 -7.4,4.2 -10.9,6.2 -2.7,1.6 -8.8,4.6 -10.8,6.3 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "M 99.8,64.3 C 99.8,64.3 83.1,73.9 81.5,74.9 c -3,1.8 -6,3.5 -9.1,5.3 -2.2,1.2 -7.5,4 -9.1,5.3 l 4.9,0 0,38.6 63.9,0 0,-38.7 4.8,0 c -1.6,-1.4 -36.9,-21.2 -37.1,-21.2 z M 73.6,88.1 l 52.3,0 0,28.3 -52.3,0 0,-28.3 z m 44.9,6.1 c -2.2,0.9 -4.1,1.8 -6.3,2.7 -1.5,0.6 -12,5.4 -12.6,5.4 -0.4,0 -11,-4.9 -12.5,-5.4 -2.1,-0.8 -4.1,-1.9 -6.2,-2.7 -1.6,-0.6 -4.8,-2.4 -6.2,-2.7 v -2.2 h 50 v 2.3 c -1.5,0.3 -4.6,2 -6.3,2.7 z M 74.7,92.8 99.6,103.7 124.7,92.8 V 115.1 H 74.7 V 92.8 l 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.ENCLOSED FACITLITY (PUBLIC VENUE)"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 114.9,121.3 0,-1.2 -30.7,0 0,1.2 z m -31.9,-2.5 -10.4,-16.7 -1,0.4 10.6,16.6 z m 13,-13.8 h 7 c 0.6,0 4.4,-6 5,-6.8 H 91 c 0.6,0.9 4.4,6.8 5,6.8 z m 15.3,12 0,-1 -23.5,0 0,1 z m 2.4,-1.6 8.6,-13.6 -0.8,-0.4 -8.5,13.3 z M 76.8,101.9 c 0,0.3 3.7,5.9 4.2,6.7 0.4,0.6 4.2,6.7 4.3,6.7 0.4,0 0.5,-0.2 0.7,-0.5 l -8.5,-13.4 c -0.2,0.1 -0.7,0.2 -0.7,0.5 z m 31,10.8 0,-1 -16.5,0 0,1 z m -19.3,-1.2 0.7,-0.4 -6.7,-10.5 -0.7,0.4 z m 22.3,-0 6.4,-10.5 -0.8,-0.3 -6.6,10.5 z m -6.4,-3 0,-1 -9.7,0 0,1 z m 2.8,-1.8 c 0,0.6 0.3,0.6 0.7,0.6 l 4.2,-6.9 -0.6,-0.4 c -0.2,0.2 -4.3,6.6 -4.3,6.7 z m -20.3,-6.3 4.1,7 c 0.3,-0.1 0.8,-0.2 0.8,-0.5 0,-0.6 -3.7,-5.6 -4,-6.9 l -1,0.4 z m -19.7,18 0.3,-2.8 c 0.1,-3.9 2,-11.4 3,-14.6 1.6,-4.7 3.2,-8.3 5.6,-12 4.4,-6.5 12,-12.4 22.8,-12.4 h 1.1 c 9.6,0 17,4.8 21.3,10.2 1.2,1.5 2.3,2.8 3.2,4.6 0.5,0.9 1,1.6 1.4,2.6 0.4,0.9 0.7,1.9 1.1,2.7 0.8,1.4 3.6,10.3 3.6,12.1 v 0.6 h 0.3 v 1 l 1.2,10.8 -0.1,2.2 H 67 l 0.2,-5 0,0 z m -2.3,-4 -0.3,2.4 -0.4,5.6 v 3.8 h 70.9 v -1 c 0,-2 0.1,-6.4 -0.2,-8.1 -0.4,-2.4 -0.5,-5.2 -1,-7.5 -0.4,-2 -2.9,-12.7 -3.9,-13.1 0,-1.6 -3.5,-7.6 -4.3,-8.8 -1.8,-2.6 -3.8,-5 -6.2,-7 -4.9,-3.9 -10.5,-7 -19.3,-7 h -1 c -11.8,0 -19.6,5.9 -24.6,12.8 -1.4,1.9 -2.4,3.8 -3.5,5.9 -1.2,2.3 -1.7,4.2 -2.6,6.7 -1.2,3 -3.4,11.4 -3.5,15.3 l 0,0 z m 52.2,4.7 c 0.4,-1.3 4.2,-6.6 5.2,-8.3 0.6,-1 5.1,-7.9 5.1,-8.2 0,-0.3 -0.6,-0.4 -0.8,-0.5 l -10.6,16.6 1.1,0.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 84.2,120.1 h 30.7 v 1.2 H 84.2 v -1.2 z m 3.6,-4.2 h 23.5 v 1 H 87.8 v -1 z m 3.5,-4.2 h 16.5 v 1 H 91.4 v -1 z m 3.3,-4.2 h 9.7 v 1 h -9.7 v -1 z m 22.4,11.5 -1.1,-0.4 10.6,-16.6 c 0.3,0.1 0.8,0.2 0.8,0.5 0,0.3 -4.6,7.2 -5.1,8.2 -1,1.8 -4.9,7 -5.2,8.3 z m -45.4,-16.6 1,-0.4 10.4,16.7 -0.8,0.4 -10.6,-16.6 z m 13.7,12.8 c -0.2,0 -4,-6 -4.3,-6.7 -0.5,-0.8 -4.2,-6.3 -4.2,-6.6 0,-0.3 0.4,-0.4 0.7,-0.5 l 8.5,13.3 c -0.2,0.3 -0.2,0.5 -0.7,0.5 z m 36.2,-13.8 0.8,0.4 -8.6,13.6 -0.8,-0.6 8.6,-13.4 z m -5.1,-0.6 0.8,0.3 -6.4,10.5 -1,-0.3 6.6,-10.5 z m -33.9,-0 6.7,10.5 -0.7,0.4 -6.7,-10.5 0.7,-0.4 z m 24.7,6 c 0,-0.1 4.1,-6.5 4.3,-6.7 l 0.6,0.4 -4.2,6.9 c -0.4,0 -0.7,-0.1 -0.7,-0.6 z m -19.4,-6.7 c 0.3,1.3 4,6.3 4,6.9 0,0.3 -0.6,0.4 -0.8,0.5 l -4.1,-7 1,-0.4 z m 8.2,4.9 c -0.6,0 -4.4,-6 -5,-6.8 h 17 c -0.6,0.8 -4.4,6.8 -5,6.8 h -7 z m -28.5,10.7 c 0,0.5 -0,2.8 -0.3,2.8 l -0.2,5 h 65.2 l 0.1,-2.2 -1.2,-10.8 v -1 h -0.3 v -0.6 c 0,-1.8 -2.8,-10.6 -3.6,-12.1 -0.4,-0.8 -0.7,-1.8 -1.1,-2.7 -0.5,-1 -1,-1.6 -1.5,-2.6 -0.9,-1.8 -2,-3.1 -3.2,-4.6 -4.2,-5.4 -11.6,-10.2 -21.3,-10.2 h -1 c -10.8,0 -18.5,5.8 -22.8,12.4 -2.5,3.8 -4.1,7.4 -5.7,12 -1.1,3.2 -3,10.7 -3,14.6 l 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.OPEN FACILITY (OPEN VENUE)"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 122.4,117.1 0,-1.5 -45.1,0 0,1.5 z M 74.5,114 75.6,113.4 59.8,88.8 58.8,89.4 z m 49.6,-0.6 c 0.2,0.1 1,0.5 1.3,0.5 0.2,0 14.4,-22.4 15.9,-24.6 l -1.5,-0.5 -15.7,24.6 z m -6.6,-2.6 0,-1.7 -35,0 0,1.7 z m 2.4,-3.2 c 0,0.2 1,0.8 1.1,0.9 l 12.8,-20 h 0.2 l -1.6,-0.8 c -1.3,2.4 -12.6,19.3 -12.6,20 z m -41.1,0.9 1.4,-0.8 -12.7,-20.1 -1.3,0.8 z m 33.3,-3.9 0,-1.6 -24.4,0 0,1.6 z m 3.4,-2.8 c 0,0.6 0.6,0.7 1.1,0.9 l 9.6,-15.4 -1.2,-0.6 c -0.6,2 -9.4,14.5 -9.4,15.2 z m -32.2,1 1.4,-0.6 -9.7,-15.5 -1.3,0.8 z m 23.4,-4.5 0,-1.7 -13.8,0 0,1.7 z m 5.6,-1.7 6.4,-10.3 -1.2,-0.5 -6.6,10.2 z m -24.6,0.1 1.1,-0.8 -6.5,-10.2 -1.3,0.6 z m 6.6,-4 11,0.1 c 0.6,0 6.4,-8.9 7,-10 H 87.3 l 6.9,9.9 z"
	    }
	  ];
	  icn["GR.IN.IC.RELIGIOUS INSTITUTION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 101.2,68.1 c 7.9,0 18,3.8 21.7,8 5,5.7 7,12.3 7,22.8 V 131.9 H 101.2 V 68.1 z M 70.1,96.3 c 0,-8.4 3.4,-16.4 7.7,-20.7 3.9,-3.9 13.2,-7.5 20.9,-7.5 v 63.9 H 70.1 V 96.3 z m -2.6,38.3 h 65 V 99.3 c 0,-10.8 -2.5,-19.7 -8.1,-25.2 -4.8,-4.8 -15,-8.7 -24.6,-8.7 -8.3,0 -19.4,3.7 -23.6,7.9 -3.2,3.3 -4.3,5 -6.2,9.5 -1,2.4 -2.5,10 -2.5,13.2 v 38.5 l 0,0 z M 105.1,97.6 v 12.5 c 0,0.5 0.6,1.1 1.1,1.1 h 0.4 c 0.7,0 1.1,-0.8 1.1,-1.5 V 97.8 c 0,-0.5 -0.6,-1.1 -1.1,-1.1 H 106 c -0.5,0 -0.9,0.4 -0.9,0.9 z m -11.2,13.6 c 0.8,0 0.9,-1 0.9,-1.7 V 97.6 c 0,-0.5 -0.4,-0.9 -0.9,-0.9 h -0.6 c -0.5,0 -0.9,0.4 -0.9,0.9 v 12.5 c 0,0.5 0.6,1.1 1.1,1.1 h 0.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 105.1,97.6 c 0,-0.5 0.4,-0.9 0.9,-0.9 h 0.7 c 0.5,0 1.1,0.6 1.1,1.1 v 11.8 c 0,0.7 -0.4,1.5 -1.1,1.5 h -0.5 c -0.5,0 -1.1,-0.6 -1.1,-1.1 V 97.6 h 0 z m -3.9,34.4 h 28.7 V 98.9 c 0,-10.5 -2,-17.1 -7,-22.8 C 119.2,71.9 109.1,68.1 101.2,68.1 v 63.9 z M 94,111.2 H 93.5 c -0.5,0 -1.1,-0.6 -1.1,-1.1 V 97.6 c 0,-0.5 0.4,-0.9 0.9,-0.9 h 0.7 c 0.5,0 0.9,0.4 0.9,0.9 v 11.8 c 0,0.8 -0.1,1.8 -0.9,1.8 z M 70.1,96.3 v 35.7 H 98.8 V 68.1 c -7.7,0 -17,3.6 -20.9,7.5 -4.3,4.3 -7.7,12.3 -7.7,20.7 z"
	    }
	  ];
	  icn["GR.IN.IC.CHILD DAY CARE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 76.6,100.3 c 0,1.8 1.1,3.4 3,3.4 h 0.6 c 1.4,0 2.4,-1.5 2.4,-3 0,-4.3 -6,-4.2 -6,-0.4 z m 26.5,-11.9 v 0.4 c 0,1.5 1.4,3.2 2.8,3.2 h 0.4 c 1.6,0 3,-1.2 3,-2.8 V 87.8 c 0,-1 -1.6,-2 -2.8,-2 h -0.2 c -1.5,-0 -3.2,1.4 -3.2,2.6 z m -3.2,-16.8 35.4,21.7 c -1.3,0.2 -4.6,-0.3 -4.6,0.9 v 34.9 H 69.3 V 94.1 c 0,-1.2 -3.3,-0.8 -4.6,-0.9 l 35.2,-21.7 0,0 z m -39.8,22.4 c 0.2,0.8 0.3,1.3 1.3,1.3 h 6.2 v 34.6 c 0,0.5 0.1,0.5 0.2,0.9 h 64 c 0.4,0 0.8,-0.3 0.8,-0.8 V 95.2 h 6 c 0.8,0 1.3,-0.4 1.3,-1.1 0,-0.6 -17.8,-11.2 -19.8,-12.5 -1.6,-1 -20,-12.3 -20,-12.3 -0.2,0 -36.7,22.5 -40,24.7 l 0,0 z m 20.9,14.2 5.9,4.3 -0.1,0.1 -4.8,2.2 c -0.2,-0.8 -1,-1.9 -1,-2.5 v -4.1 z m 28.4,-8.8 c 0.5,-0.8 0.6,-2.9 1,-3.1 0.4,-0.2 2.4,0.8 2.9,0.9 v 3.6 l -4.4,1.7 v -0.6 c -0,-0.9 0.5,-1 0.5,-2.4 z m -3,2 c 0,0.9 0,1.1 -0.4,1.7 V 104 c -2.4,0.2 -15.4,7.5 -17,7.5 -0.5,0 -6.5,-6.7 -7.3,-6.7 h -4.3 c -0.5,0 -2.8,5.2 -2.8,5.6 v 4.7 c 0,0.9 1.8,1.4 2,2.4 l -4.1,1.7 1.3,2.6 6.2,-2.8 c 1.5,0.8 9.3,5.6 10.5,5.6 h 0.6 c 0.8,0 1.9,-0.8 1.9,-1.5 v -0.4 c 0,-0.9 -7.3,-4.8 -8.4,-5.8 l 14,-6.3 v 8.4 h -3 v 6.7 h 8.4 v -6.7 h -2.8 v -9.9 l 13.2,-5.8 c 0,1.6 0.2,3.7 0.4,5.1 0.2,1.8 -0.6,3.9 1.5,3.9 2.1,0 1.3,-2.5 1.3,-4.3 0,-1.9 -0.2,-3.5 -0.2,-5.6 v -0.6 l 9.1,-4 -1,-2.9 -6.2,2.8 c 0.3,-0.6 0.7,-0.8 1,-1.4 0.2,-0.7 0.4,-1.2 0.7,-1.8 0.5,-1 0.9,-2.6 1.4,-3.4 l -11.4,-1.6 c -0.6,0.5 -3.2,3.3 -3.2,4.2 v 0.6 h -0.4 l -1.1,7.1 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 81,112.2 c 0,0.6 0.8,1.7 1,2.5 l 4.8,-2.2 0.2,-0.1 -6,-4.3 v 4.1 z m 28.4,-12.9 c 0,1.4 -0.6,1.6 -0.6,2.4 v 0.6 l 4.5,-1.7 v -3.6 c -0.5,-0.1 -2.6,-1 -2.9,-0.9 -0.4,0.2 -0.5,2.4 -1,3.1 z m -32.9,0.9 c 0,-3.9 6,-4 6,0.4 0,1.4 -1.1,3 -2.4,3 h -0.5 c -1.8,0 -3,-1.6 -3,-3.4 z m 29.5,2.8 0.4,-1.7 1.1,-7.1 h 0.4 v -0.6 c 0,-0.8 2.6,-3.7 3.2,-4.2 l 11.4,1.6 c -0.5,0.8 -0.9,2.4 -1.4,3.4 -0.3,0.6 -0.4,1.1 -0.7,1.8 -0.3,0.7 -0.7,0.8 -1,1.4 l 6.2,-2.8 1,2.9 -9.1,4 v 0.6 c 0,2.1 0.2,3.7 0.2,5.6 0,1.8 0.8,4.3 -1.3,4.3 -2.1,0 -1.3,-2.2 -1.5,-3.9 -0.2,-1.4 -0.4,-3.5 -0.4,-5.1 l -13.2,5.8 v 9.9 h 2.8 v 6.7 h -8.4 v -6.7 h 3 v -8.4 l -14,6.3 c 1.1,0.9 8.4,4.9 8.4,5.8 v 0.4 c 0,0.7 -1,1.5 -1.9,1.5 H 90.6 c -1.2,0 -8.9,-4.8 -10.5,-5.6 l -6.2,2.8 -1.3,-2.6 4.1,-1.7 c -0.3,-1 -2,-1.5 -2,-2.4 v -4.6 c 0,-0.4 2.3,-5.6 2.8,-5.6 h 4.3 c 0.8,0 6.8,6.7 7.3,6.7 1.5,0 14.6,-7.3 17,-7.5 v -0.9 z m -3,-14.8 c 0,-1.2 1.7,-2.6 3.2,-2.6 h 0.2 c 1.2,0 2.8,1.1 2.8,2 v 1.3 c 0,1.6 -1.4,2.8 -3,2.8 h -0.4 c -1.4,0 -2.8,-1.7 -2.8,-3.2 v -0.4 z m -38.4,4.9 c 1.3,0.1 4.6,-0.3 4.6,0.8 v 34.9 h 61.4 V 94.1 c 0,-1.2 3.3,-0.8 4.6,-0.9 l -35.4,-21.7 -35.2,21.8 0,0 z"
	    }
	  ];
	  icn["GR.IN.IC.HELICOPTER LANDING SITE"] = [
	    {
	      type: "path",
	      stroke: black,
	      d: "M80,70 l10,10 M120,110 l-10,-10 M80,110 l10,-10 M120,70 l-10,10 M100,115 l0,20 M95,135 l10,0",
	      fill: false
	    },
	    {
	      type: "path",
	      stroke: black,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 113,90 c -0.3,8.8 -1.9,20.3 -10.8,24.6 -7.7,2 -12.3,-7.1 -13.8,-13.3 -2.6,-11.5 -2.3,-26 6.9,-34.6 6.0,-4.9 13.1,1.9 14.9,7.8 2,4.9 2.8,10.2 2.8,15.5 z"
	    },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 40 }
	  ];
	  icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE LOCK"] = [
	    { type: "path", fill: false, d: "m 70,70 65,30 -65,30" }
	  ];
	  icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE SHIP ANCHORAGE"] = [
	    {
	      type: "path",
	      fill: false,
	      stroke: "rgb(255, 0, 255)",
	      d: "m 73.6,112.8 c 0.8,8 26.4,11.2 26.4,11.2 0,0 25.6,-3.2 26.4,-11.2 M 80,88 l 40,0 m -20,-12 0,48"
	    }
	  ];
	  icn["GR.IN.IC.NATURAL GAS FACILITY"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,60.5 c -16.4,0 -29.6,13.2 -29.6,29.6 0,12.8 8.3,23.9 19.7,27.8 l 0,19.7 c 3.2,1.2 6.3,1.8 9.9,1.8 3.6,0 6.7,-0.6 9.9,-1.8 l 0,-19.8 c 11.5,-3.9 19.8,-15 19.7,-27.8 0,-16.4 -13.2,-29.6 -29.6,-29.6 z"
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 35,
	      text: "NG"
	    }
	  ];
	  icn["GR.IN.IC.TOLL FACILITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 69.1,112.3 c 0,-0.7 0.8,-1.7 1.4,-1.7 h 0.5 c 0.8,0 1.5,0.8 1.5,1.5 v 1.2 c 0,0.5 -0.9,1.2 -1.5,1.2 h -0.2 c -0.8,0 -1.7,-0.8 -1.7,-1.4 v -0.9 l 0,0 z m -1.1,0.5 v 0.3 c 0,1.2 1.5,2.6 2.9,2.6 1.3,0 2.8,-1.5 2.8,-2.5 v -1 c 0,-1.2 -1.4,-2.6 -2.8,-2.6 -1.7,0 -2.9,1.6 -2.9,3.2 z m 27.6,-11.6 -2,-2.8 -2.3,0 4.3,2.8 z m -29.5,17.8 c 0,-0.5 0.8,-0.9 1.4,-0.9 H 99.1 c 0.8,0 1.3,0.6 1.4,1.4 -0.6,0.1 -1,0.3 -1.7,0.3 H 68 c -0.6,0 -1.8,0 -1.8,-0.6 v -0.2 z m 9.4,-10.2 15.1,0 8.2,0.2 c 0.5,0.9 2,3 1.8,4.3 l -0.2,2.6 c -0.5,0.2 -0.5,0.3 -1,0.3 H 67.1 c -0.6,0 -0.5,-0.2 -1.1,-0.3 -0.1,-0.7 -0.3,-1 -0.3,-1.8 v -0.6 c 0,-1.1 1.5,-3.5 2,-4.4 l 7.8,-0.2 z m -5.8,-2 c 0.1,-1.1 3.5,-7.1 4.3,-7.1 h 18.4 c 1,0 4,5.8 4.3,7.1 H 69.7 z m 21.7,-8.4 2.3,-0 2,2.8 -4.3,-2.8 z m 44.3,27.8 V 73.8 c -1,0.2 -10.3,6 -11.9,7 -1.3,0.8 -11.6,6.5 -11.6,7.2 0,0 1.3,2.1 1.4,2.3 l 4.9,-2.8 v 19.2 l -0.4,0.3 c -2.9,-2 -33.4,-22 -33.6,-22 -0.1,0 -3.9,5.6 -4,6.2 l 10.8,7 -18.3,0 c -0.9,1.4 -1.9,2.4 -2.8,3.8 -0.2,0.3 -2,4.4 -2,4.6 v 0.8 h -1.2 c -0.1,0.9 -2.6,4.6 -2.6,5.4 v 0.8 c 0,1.5 0.4,2.9 1.4,3.4 -0.2,0.3 -1,1.1 -1,1.6 v 0.9 c 0,1.1 1.5,1.5 2.6,1.5 v 2.3 l 0.2,2 c 0.5,0.2 0.3,0.5 1.2,0.6 0.6,0.1 1,0.2 1.7,0.2 h 1.1 l 1.7,-0.2 0.3,-0.3 0.2,-2 0,-2.5 h 19.1 v 3.1 c 0,0.8 0.3,1.2 0.6,1.7 l 1.4,0.2 1.2,-0 c 1.7,0 3.1,-0.1 3.1,-1.8 v -3.1 c 0.8,-0.2 2.6,-0.5 2.6,-1.4 v -1.7 c 0,-0.5 -0.5,-0.7 -0.9,-0.8 0.1,-0.5 1.2,-1.1 1.2,-2.5 v -2 c 0,-1.5 -2.1,-4.1 -2.5,-5.4 h -1.2 v -0.4 c 0,-1.1 -2.2,-4.8 -2.5,-5.8 l 19,12.5 c -0.4,1.6 -2,4 -2,5.2 v 7.2 h 22.9 l 0,0 z M 95.9,114.6 H 95.7 c -1.1,0 -1.8,-0.7 -1.8,-1.7 v -0.5 c 0,-1 0.6,-1.8 1.5,-1.8 h 0.5 c 1,0 1.5,1.1 1.5,2 0,1.1 -0.5,2 -1.5,2 z m -3.1,-2.5 v 1.1 c 0,1 1.6,2.5 2.9,2.5 1.4,0 2.6,-1.3 2.6,-2.8 v -0.8 c 0,-1.2 -1.3,-2.6 -2.5,-2.6 H 95.7 c -1.4,0 -2.9,1.4 -2.9,2.6 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 114.5,107.9 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z m -11.2,-7.2 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z m -5.5,-3.7 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z M 108.9,104.5 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z M 92.3,93.5 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z M 86.5,89.8 c 0,0.9 -0.8,1.6 -1.8,1.6 -1,0 -1.8,-0.7 -1.8,-1.6 0,-0.9 0.8,-1.6 1.8,-1.6 1,0 1.8,0.7 1.8,1.6 z m 35.6,2.6 10.8,0 0,16.1 -10.8,0 z m -55.9,26.4 v 0.2 c 0,0.6 1.2,0.6 1.8,0.6 h 30.8 c 0.7,0 1.1,-0.2 1.7,-0.3 -0.1,-0.8 -0.6,-1.4 -1.4,-1.4 H 67.5 c -0.5,0 -1.4,0.4 -1.4,0.9 z m 26.6,-6.8 c 0,-1.2 1.5,-2.6 2.9,-2.6 h 0.2 c 1.2,0 2.5,1.4 2.5,2.6 v 0.8 c 0,1.4 -1.2,2.8 -2.6,2.8 -1.4,0 -2.9,-1.4 -2.9,-2.5 v -1 h -0 z m -24.8,0.6 c 0,-1.6 1.2,-3.2 2.9,-3.2 1.3,0 2.8,1.5 2.8,2.6 v 1.1 c 0,0.9 -1.4,2.5 -2.8,2.5 -1.4,0 -2.9,-1.4 -2.9,-2.6 v -0.3 z m -0.3,-3.8 c -0.5,1 -2,3.4 -2,4.4 v 0.6 c 0,0.9 0.2,1.1 0.3,1.8 0.5,0.1 0.5,0.3 1.1,0.3 h 32.3 c 0.6,0 0.5,-0.2 1,-0.3 l 0.2,-2.6 c 0.1,-1.2 -1.4,-3.4 -1.8,-4.3 l -8.2,-0.2 -15.1,-0 -7.8,0.2 z m 2,-2.2 h 27.1 c -0.4,-1.3 -3.3,-7.1 -4.3,-7.1 H 74 c -0.8,0 -4.2,6 -4.3,7.1 z m 26.2,7.8 c 1.1,0 1.5,-0.9 1.5,-2 0,-0.9 -0.6,-2 -1.5,-2 h -0.5 c -1,0 -1.5,0.8 -1.5,1.8 v 0.5 c 0,1 0.8,1.7 1.8,1.7 h 0.2 l 0,0 z M 69.1,112.3 v 0.9 c 0,0.6 1,1.4 1.7,1.4 h 0.2 c 0.6,0 1.5,-0.8 1.5,-1.2 v -1.2 c 0,-0.8 -0.8,-1.5 -1.5,-1.5 h -0.5 c -0.6,0 -1.4,1 -1.4,1.7 z"
	    }
	  ];
	  icn["GR.IN.IC.TRAFFIC INSPECTION FACILITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 121.4,81.7 h 1.1 v 0.6 c 0,0.6 0.8,2.1 1.2,2.4 0.5,0.4 1.9,0.9 2.7,0.9 2.6,0 3.9,-1.9 3.9,-4.5 v -0.5 h -7.4 c -0.5,0 -1.2,0.8 -1.4,1.1 z m -22.6,23.5 c 0,-1.7 1.7,-3 3.4,-3 1.7,0 3.1,1.4 3.1,3.1 v 0.6 c 0,1.3 -1.7,2.6 -3.1,2.6 -1.7,0 -3.4,-1.3 -3.4,-3 v -0.5 z m -29.7,0 c 0,-1.8 1.3,-3 3.1,-3 1.7,0 3.3,1.4 3.3,3.1 v 0.3 c 0,1.6 -1.6,3 -3.4,3 -1.5,0 -3,-1.2 -3,-2.6 v -0.8 z m 3.7,-7 c 0,-0.4 1.6,-4.2 1.9,-5 0.6,-1.7 0.9,-3.6 3.3,-3.6 H 96.5 c 2.8,0 2.2,1.8 3.2,3.6 0.2,0.4 1.8,4.5 1.8,4.9 H 72.8 z m -3.7,1 c -2.1,0 -3.7,1.5 -3.7,3.6 v 9.2 c 0,1 1.7,2.3 3.1,2.3 v 5.3 c 0,1.8 1.3,3.3 3.3,3.3 1.4,0 3.1,-1.6 3.1,-2.6 v -5.9 h 24.8 v 6.2 c 0,1 1.7,2.3 3,2.3 h 0.2 c 1.4,0 3.1,-1.3 3.1,-2.6 v -5.9 c 1.9,0 3.3,-1.4 3.3,-3.3 v -8.1 c 0,-2 -1.4,-3.3 -3.2,-3.7 -1.4,-0.2 -1.1,-0.8 -1.6,-1.9 -0.4,-0.8 -0.7,-1.6 -1,-2.4 -1.2,-2.6 -2.2,-8.2 -5.6,-8.2 h -21.2 c -2.9,0 -3.5,3.3 -4.5,5.5 -0.6,1.4 -2.7,5.8 -3,7 z m 56.5,20.2 0.3,-3.3 0.5,-6.2 h 1.7 l 0.8,12.9 h 5.8 V 88.9 c 0,-0.6 -1.2,-1.9 -2,-1.9 l -0.6,0.1 -9.9,14.6 h 8.4 v 3.6 h -11.2 v 17.6 h 6.1 l -0,-0.8 0.2,-2.6 z m -16.8,-30.8 c 0.2,-0.9 1,-1.5 2,-1.6 v 2.2 h -2 c 0,1.4 0.8,2.2 2.2,2.2 v -2 h 2 c -0,1.3 -0.8,1.4 -1.4,2 h 7.8 l 0,10.2 10,-14.3 -10.1,-0.2 h -6.4 v -7.6 c 0,-1.2 -0.8,-2.2 -1.9,-2.2 h -0.4 c -2.2,0 -2,2.4 -2,4.7 0,1.3 -0.4,5.8 0.2,6.6 z m 0,0 v 0.6 h 2 v -2.2 c -1.1,0 -1.8,0.7 -2,1.6 z m 2.2,2.8 h 0.6 c 0.6,-0.6 1.4,-0.7 1.4,-2 h -2 v 2 z m 19.3,-12 0,-2 -8.8,-0 1,2 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 130.3,79.4 -7.9,-0 0.4,1.3 7.5,0 z m -8.1,22.2 9.9,-14.6 0.6,-0.1 -3.1,0.2 -10,14.3 -0.1,3.7 11.2,0 0,-3.6 z m -23.3,3.6 v 0.5 c 0,1.7 1.7,3 3.4,3 1.4,0 3.1,-1.4 3.1,-2.6 v -0.6 c 0,-1.7 -1.4,-3.1 -3.1,-3.1 -1.8,0 -3.4,1.3 -3.4,3 z m -29.7,0 v 0.8 c 0,1.4 1.5,2.6 3,2.6 1.8,0 3.4,-1.3 3.4,-3 v -0.3 c 0,-1.6 -1.6,-3.1 -3.3,-3.1 -1.8,0 -3.1,1.2 -3.1,3 z m 3.7,-7 h 28.6 c 0,-0.5 -1.5,-4.5 -1.8,-4.9 -1,-1.8 -0.4,-3.6 -3.2,-3.6 H 77.9 c -2.4,0 -2.6,1.9 -3.3,3.6 -0.2,0.8 -1.8,4.6 -1.8,5 z"
	    }
	  ];
	  icn["GR.IN.IC.TUNNEL"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 94.4,116.8 c 0,-3.5 2.6,-7.2 5.9,-7.2 3.2,0 5.6,4 5.6,7.1 v 0.8 H 94.4 v -0.7 z m 27.2,-4.7 9,-4.2 c 0.2,1.7 0.8,3.2 1,5.2 0.3,1.8 0.6,3.3 0.6,5.6 v 0.5 h -10 l -0.7,-7.1 z m -43.5,4.9 0.1,2.2 H 68 c 0,-1.6 0.3,-3.8 0.6,-5.4 0.1,-0.7 0.2,-1.8 0.5,-2.4 0.1,-0.2 0.7,-2.2 0.7,-2.4 l 9.2,3.1 -0.8,4.9 z m 39,-16.8 6.2,-6.2 c 0.6,1 1.2,1.8 1.9,2.8 0.8,1.1 1.2,2 1.8,3.1 0.6,1 2.8,5.6 2.8,6.9 l -8.7,4.2 c -0.1,-2.5 -3,-9 -4,-10.6 z m -37.9,10.4 -9.1,-3 c 0.1,-1.2 2.4,-5.9 3,-7 1.2,-2.1 3,-4.2 4,-6 l 7.6,4.4 c -0.2,0.5 -2.6,4.3 -3,5.4 -0.8,1.7 -1.6,4.9 -2.4,6.2 z M 111.2,83.2 c 2.8,0.7 9.8,7.1 11.3,9.4 l -6.3,6.2 c -0.5,-1.8 -6,-6.9 -8.2,-7.4 l 3.2,-8.2 z M 78.1,93.4 C 79.7,91 88,83.8 91,83.1 L 94.9,91 c -2.6,0.6 -7.9,5 -9.2,6.9 l -7.6,-4.5 z M 92.6,82.4 c 2.6,-0.6 4.1,-1.8 7.8,-1.8 h 1.4 c 4,0 5.3,1.2 8.1,1.8 -0,1 -1.9,5.2 -2.3,6.3 -0.6,1.4 -0.4,2 -2.2,1.5 -1.1,-0.3 -2.4,-0.6 -3.6,-0.6 h -1 L 96.1,90.3 92.6,82.4 z M 66.5,119.8 H 60.4 c -0.4,0 -0.5,0.1 -0.5,0.5 v 0.2 c 0,0.4 0.1,0.5 0.5,0.5 h 79 c 0.3,0 0.7,-0.3 0.7,-0.5 0,-0.4 -0.3,-0.7 -0.7,-0.7 h -5.7 v -1.5 c 0,-10.1 -4.9,-20.4 -9.5,-25.9 C 119.8,87 111.6,79 102.2,79 h -2 c -9.7,0 -18.8,8.4 -23.6,13.7 -5,5.6 -10.1,16.6 -10.1,27.1 l 0,0 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 79,112 -9.3,-3.1 c -0,0.2 -0.6,2.2 -0.7,2.4 -0.2,0.6 -0.4,1.7 -0.5,2.4 -0.2,1.5 -0.5,3.8 -0.5,5.4 h 10.3 l -0.1,-2.2 0.8,-4.9 z m 15.5,5.4 h 11.4 v -0.8 c 0,-3.1 -2.4,-7.1 -5.6,-7.1 -3.3,0 -5.9,3.8 -5.9,7.2 v 0.7 z m 27.9,1.7 h 10 v -0.5 c 0,-2.3 -0.4,-3.8 -0.6,-5.6 -0.3,-2 -0.9,-3.5 -1,-5.2 l -9,4.2 0.7,7.1 z m -5.2,-19 c 1.1,1.6 4,8.1 4,10.6 l 8.7,-4.2 c 0,-1.2 -2.1,-5.8 -2.8,-6.8 -0.7,-1.1 -1.1,-2 -1.8,-3.1 -0.7,-1 -1.3,-1.8 -1.9,-2.8 l -6.2,6.2 z m -37.9,10.4 c 0.7,-1.4 1.6,-4.5 2.4,-6.2 0.5,-1.1 2.9,-4.9 3,-5.4 l -7.6,-4.4 c -1,1.8 -2.8,4 -4,6 -0.6,1.1 -2.9,5.8 -3,7 l 9.1,3 z m 28.8,-19.1 c 2.1,0.5 7.6,5.6 8.2,7.4 l 6.3,-6.1 c -1.5,-2.3 -8.5,-8.8 -11.3,-9.5 l -3.2,8.2 z m -30,2 7.6,4.6 C 87,96 92.3,91.6 94.9,91 l -3.8,-7.9 c -3.1,0.7 -11.4,7.9 -13,10.3 z M 92.6,82.4 l 3.5,7.9 4.6,-0.6 h 1 c 1.3,0 2.6,0.3 3.6,0.6 1.7,0.4 1.6,-0.1 2.2,-1.5 0.4,-1.1 2.3,-5.3 2.3,-6.3 -2.8,-0.6 -4,-1.9 -8.1,-1.9 h -1.4 c -3.6,0 -5.2,1.3 -7.7,1.9 z"
	    }
	  ];
	  icn["GR.IN.IC.PUMPING STATION"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 83.2,83.8 0,1.2 0,5.6 -11.3,0 0,-0 c -0.2,0 -0.3,0 -0.5,0 -0.1,6.6e-4 -0.1,-9.6e-4 -0.2,0 -2.7,0 -4.9,0.3 -6.5,1.7 -1.4,1.2 -2,3.3 -2.1,5.9 l -0.1,0 0,1.2 c 8e-6,0.1 -0,0.2 -0,0.3 l 0,0 0,14.1 -2.8,0 0,2.4 80.8,0 0,-2.4 -2.8,0 0,-14 0,-1.6 -0.1,0 c -0.1,-2.6 -0.5,-4.6 -1.8,-5.9 -1.5,-1.4 -3.8,-1.7 -6.8,-1.7 l 0,-0 -0.3,0 c -0.2,-5.6e-4 -0.3,-0 -0.4,-0 l 0,0 -11.3,0 0,-5.6 0,-1.2 -1.2,0 -31.2,0 -1.2,0 z m 2.4,2.4 28.8,0 0,27.2 -28.8,0 0,-27.2 z M 71.2,93 c 0.1,-0 0.1,0 0.2,0 l 11.8,0 0,8.4 -7.5,0 c -0.8,-0.1 -1.4,-0.1 -2,-0 -0,0 -0,0 -0.1,0 -0,0 -0,-0 -0,0 l 0,0 c -0.5,0.1 -1.2,0.3 -1.5,0.8 -0.4,0.5 -0.4,1.1 -0.4,1.6 -0,0.4 -0,0.8 0,1.2 l -0,0 0,8.8 -6.8,0 0,-14.5 c 0,-3 0.5,-4.5 1.4,-5.3 C 67.1,93.3 68.7,93.1 71.2,93 z m 45.6,0 11.8,0 c 0.1,9.7e-4 0.1,-0 0.2,0 2.8,0.1 4.5,0.4 5.2,1.1 0.8,0.7 1.2,2.3 1.2,5.2 l 0,14.5 -6.8,0 0,-8 0,0 c -0,-0.1 -0,-0.3 -0,-0.4 0,-0.9 0.2,-1.6 -0.1,-2.5 -0.1,-0.5 -0.6,-1.2 -1.2,-1.4 -0.2,-0.1 -0.5,-0 -0.7,-0 l 0,-0.1 -9.6,0 0,-8.4 z M 74,103.8 l 9.2,0 0,10 -9.2,0 0,-8.5 0,0 c 0,-0.6 -0,-1.1 -0,-1.4 0,-0.1 -0,-0 0,-0.1 z m 42.8,0 9.2,0 c 0,0.2 0,0.8 0,1.6 l -0,0 0,8.4 -9.2,0 0,-10 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 116.8,93 11.8,0 c 0.1,9.7e-4 0.1,-0 0.2,0 2.8,0.1 4.5,0.4 5.2,1.1 0.8,0.7 1.2,2.3 1.2,5.2 l 0,14.5 -6.8,0 0,-8 0,0 c -0,-0.1 -0,-0.3 -0,-0.4 0,-0.9 0.2,-1.6 -0.1,-2.5 -0.1,-0.5 -0.6,-1.2 -1.2,-1.4 -0.2,-0.1 -0.5,-0 -0.7,-0 l 0,-0.1 -9.6,0 0,-8.4 z m -45.6,0 c 0.1,-0 0.1,0 0.2,0 l 11.8,0 0,8.4 -7.5,0 c -0.8,-0.1 -1.4,-0.1 -2,-0 -0,0 -0,0 -0.1,0 -0,0 -0,-0 -0,0 l 0,0 c -0.5,0.1 -1.2,0.3 -1.5,0.8 -0.4,0.5 -0.4,1.1 -0.4,1.6 -0,0.4 -0,0.8 0,1.2 l -0,0 0,8.8 -6.8,0 0,-14.5 c 0,-3 0.5,-4.5 1.4,-5.3 C 67.1,93.3 68.7,93.1 71.2,93 z m 14.4,-6.8 28.8,0 0,27.2 -28.8,0 0,-27.2 z"
	    }
	  ];
	  icn["GR.IN.IC.RESERVOIR"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 127.3 69.1 C 127 69.1 126.7 69.2 126.4 69.2 C 123.4 69.5 120.8 71.9 118.4 74.5 C 115.9 77 113.5 79.7 111.5 80.9 C 108.9 82.4 105.5 82.5 101.9 82.6 C 98.3 82.7 94.7 82.9 91.8 84.9 C 89.7 86.5 88.6 88.5 87.5 90.3 C 86.4 92 85.2 93.4 82.7 94.2 C 79.4 95.3 72 96.4 66.9 98.8 C 64.3 100.1 62.1 101.7 61.5 104 C 60.8 106.3 61.7 109.1 64.7 112.3 L 65.1 111.9 L 65.1 120.1 L 84.3 120.1 L 84.3 129.7 L 86.7 129.7 L 86.7 120.1 L 97.9 120.1 L 97.9 129.7 L 100.3 129.7 L 100.3 120.1 L 117.1 120.1 L 117.1 112.5 C 117.4 112.2 117.7 111.9 118 111.5 C 119 110.1 119.3 108.5 119.5 106.9 C 119.8 103.7 119.5 100.5 121.7 97.7 C 123.1 95.9 126 95.4 129.1 94.7 C 132.1 94.1 135.4 93.3 137.2 90.4 C 139.4 86.7 139.1 81.3 137.2 76.8 C 136.3 74.5 134.9 72.5 133 71.1 C 131.4 69.9 129.5 69.1 127.3 69.1 z M 127.4 70.7 C 129.2 70.7 130.7 71.3 132.1 72.3 C 133.6 73.5 134.9 75.4 135.8 77.4 C 137.5 81.5 137.6 86.6 135.8 89.6 C 134.5 91.8 131.7 92.5 128.7 93.2 C 125.7 93.8 122.4 94.3 120.5 96.7 C 117.8 100 118.2 103.7 117.9 106.7 C 117.8 108.2 117.5 109.5 116.7 110.6 C 116.5 110.8 116.3 111.1 116.1 111.3 L 65.8 111.3 L 65.9 111.3 C 63.1 108.2 62.6 106.1 63 104.4 C 63.5 102.8 65.2 101.4 67.6 100.3 C 72.3 98 79.5 96.9 83.1 95.8 C 86.1 94.8 87.7 92.9 88.8 91.1 C 90 89.3 90.9 87.5 92.8 86.2 C 95.1 84.5 98.4 84.3 102 84.2 C 105.5 84.1 109.2 84.1 112.3 82.3 C 114.7 80.8 117.1 78.1 119.5 75.6 C 121.9 73.1 124.4 71 126.6 70.8 C 126.9 70.8 127.1 70.7 127.4 70.7 z "
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 127.4,70.7 c 1.8,-0 3.3,0.6 4.7,1.6 1.5,1.2 2.8,3 3.7,5.1 1.7,4.1 1.9,9.2 0.1,12.2 -1.3,2.2 -4.1,3 -7.1,3.6 -3,0.6 -6.3,1.1 -8.3,3.5 -2.6,3.3 -2.3,7.1 -2.6,10 -0.1,1.5 -0.4,2.8 -1.2,3.8 -0.2,0.2 -0.4,0.5 -0.6,0.7 l -50.2,0 0,-0 c -2.8,-3 -3.3,-5.2 -2.8,-6.8 0.5,-1.6 2.1,-3 4.5,-4.2 4.8,-2.3 11.9,-3.4 15.6,-4.5 3,-1 4.5,-2.8 5.7,-4.6 1.2,-1.8 2.1,-3.6 3.9,-4.9 2.3,-1.7 5.7,-1.9 9.2,-2 3.5,-0.1 7.3,-0.1 10.3,-1.9 2.5,-1.4 4.8,-4.2 7.2,-6.7 2.4,-2.5 4.9,-4.6 7.1,-4.8 0.3,-0 0.5,-0.1 0.8,-0.1 z m -41.9,49 13.6,0 0,10 -13.6,0 z"
	    }
	  ];
	  icn["GR.IN.IC.STORAGE TOWER"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 118.3,121 0.4,5.3 0.7,12.8 h 2.9 c 0,-6.1 -1.1,-12.6 -1.1,-18.6 0,-3.4 -0.4,-6.2 -0.4,-9.6 -0.1,-5.3 0.2,-3 2.6,-6.6 l -0.3,-3.1 0,-1.1 h -4.2 V 84 c -2.5,0.6 -5.2,1.8 -8.3,2.6 -2.6,0.6 -6.4,1.4 -9.4,1.4 h -2.4 c -7.6,0 -12.2,-2.6 -18,-4 v 16.2 h -4.2 v 0.7 l -0.3,3.7 3.2,3.7 -2,30.8 h 3.1 v -3.3 l 1.4,-21.7 c 0.5,0.4 2.1,2.7 3,3.6 0.9,0.9 2.4,2.2 3.5,2.9 2.2,1.5 5.6,3.8 8.7,4.1 v 14.4 h 5.6 v -14.4 c 3.7,-0.9 6.2,-2.2 8.8,-4.3 1.4,-1.1 2.2,-1.8 3.4,-3 0.7,-0.7 2.5,-3.2 3,-3.4 v 3.1 l 0.2,3.8 z M 99.7,85.2 c 7.4,0 23,-4.4 25.7,-8.4 -2.8,-1.5 -25.1,-16 -25.3,-16 -0.4,0 -24.9,15.4 -25.5,16.2 2.6,3.5 16.6,8.2 23.3,8.2 h 1.8 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 97.9,85.2 c -4.3,0 -11.7,-2 -17,-4.3 l -0,3.2 c 5.8,1.4 10.4,4 18,4 h 2.4 c 3,0 6.9,-0.8 9.4,-1.4 3,-0.8 5.8,-2 8.3,-2.6 V 80.8 c -6,2.4 -14.4,4.4 -19.3,4.4 H 97.9 z"
	    }
	  ];
	  icn["GR.IN.IC.SURFACE WATER INTAKE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 63.4 75.5 L 63.4 76.3 L 63.4 90.7 L 63.4 91.5 L 64.2 91.5 L 75.7 91.5 C 76.5 96.6 79.8 99.1 83.3 101 C 87.1 102.9 91.3 104.3 93.8 107.5 C 94.8 108.9 94.9 110.7 95.2 112.6 C 95.4 113.6 95.6 114.5 96.2 115.4 C 96.7 116.2 97.5 117 98.8 117.5 C 101.2 118.6 108.7 120.7 115.9 122.4 C 119.6 123.2 123.1 123.9 126 124.3 C 127.5 124.4 128.7 124.5 129.8 124.5 C 130.8 124.4 131.6 124.3 132.2 123.8 C 134.8 121.7 136.1 119.9 136.5 118.3 C 136.8 116.8 136.1 115.4 135 114.4 C 133.9 113.4 132.4 112.5 131 111.7 C 129.7 110.8 128.4 109.9 127.7 108.8 C 124.2 103.6 121 95.5 113.4 91.5 L 119 91.5 L 119.8 91.5 L 119.8 90.7 L 119.8 76.3 L 119.8 75.5 L 119 75.5 L 64.2 75.5 L 63.4 75.5 z M 65 77.1 L 118.2 77.1 L 118.2 89.9 L 109.4 89.9 L 109.4 81.1 L 73.8 81.1 L 73.8 89.9 L 65 89.9 L 65 77.1 z M 76.9 91.5 L 110.5 91.5 C 119.4 94.8 122.7 103.5 126.7 109.5 C 127.6 110.8 129 111.8 130.4 112.7 C 131.8 113.6 133.2 114.4 134.2 115.3 C 135.1 116.2 135.6 117 135.3 118.1 C 135.1 119.2 134 120.8 131.4 122.9 C 131.3 123 130.6 123.2 129.7 123.3 C 128.8 123.3 127.6 123.3 126.2 123.1 C 123.3 122.8 119.8 122.1 116.2 121.3 C 109 119.6 101.5 117.3 99.3 116.4 C 98.2 116 97.6 115.4 97.2 114.8 C 96.8 114.1 96.6 113.3 96.4 112.4 C 96.1 110.6 96 108.5 94.7 106.8 C 91.9 103.2 87.6 101.8 83.9 99.9 C 80.5 98.1 77.7 96.1 76.9 91.5 z "
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 76.9,91.5 33.6,0 c 8.9,3.3 12.2,12 16.2,18 0.9,1.3 2.3,2.3 3.7,3.2 1.4,0.9 2.8,1.7 3.8,2.6 0.9,0.9 1.4,1.7 1.2,2.8 -0.2,1.1 -1.3,2.7 -3.9,4.8 -0.2,0.1 -0.8,0.3 -1.7,0.4 -0.9,0 -2.2,-0 -3.6,-0.2 -2.8,-0.3 -6.4,-1 -10,-1.8 -7.2,-1.7 -14.7,-3.9 -16.9,-4.8 -1.1,-0.4 -1.6,-1 -2.1,-1.7 -0.4,-0.7 -0.6,-1.5 -0.8,-2.3 -0.3,-1.8 -0.4,-3.9 -1.7,-5.6 -2.8,-3.6 -7.1,-5 -10.8,-6.9 C 80.5,98.1 77.7,96.1 76.9,91.5 z m -11.9,-14.4 53.2,0 0,12.8 -8.8,0 0,-8.8 -35.6,0 0,8.8 -8.8,0 0,-12.8 z"
	    }
	  ];
	  icn["GR.IN.IC.WAREHOUSE/STORAGE FACILITY"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 23,
	      text: "STOR"
	    }
	  ];
	  icn["GR.IN.IC.WASTEWATER TREATMENT FACILITY"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 107.2,114.8 c 1.9,0 3.9,-1 4.3,-2.4 1.5,1 1.7,2.4 4.6,2.4 h 0.4 c 1.8,0 3.8,-1.1 4.1,-2.4 h 0.4 c 0.4,1.4 2.5,2.4 4.5,2.4 h 0.4 c 2.7,0 3,-1.5 4.5,-2.4 0.4,1.4 2.6,2.4 4.5,2.4 v -1.5 c -2.2,0 -3.5,-1.6 -3.9,-3.4 h -1.5 c -0,1.8 -1.7,3.4 -3.6,3.4 h -0.4 c -2.2,0 -3.6,-1.4 -3.8,-3.4 h -1.7 l -0.2,1.3 c -1,0.7 -1.1,2 -3.3,2 h -0.4 c -3.3,0 -3.2,-3.4 -4.1,-3.4 h -1.3 c -0.2,2 -1.4,3.4 -3.6,3.4 v 1.5 z m -2.2,-33.3 h 32 v 37 h -32 V 81.5 z M 65.1,114.8 v -1.5 c 2,0 3.7,-1.6 3.8,-3.4 h 1.9 c 0,1.8 1.5,3.4 3.4,3.4 h 0.4 c 1.8,0 3.5,-1.6 3.6,-3.4 h 1.9 c 0,2 1.7,3.4 3.8,3.4 h 0.2 c 2.2,0 3.2,-1.6 3.6,-3.4 h 1.7 c 0,2 1.7,3.4 3.8,3.4 v 1.5 c -2,0 -4.1,-1 -4.5,-2.4 -1.4,0.9 -1.7,2.5 -4.6,2.5 h -0.6 c -2.9,0 -3.1,-1.5 -4.5,-2.4 -0.4,1.3 -2.4,2.4 -4.1,2.4 H 74.1 c -2.4,0 -3.4,-1.2 -4.5,-2.4 -0.4,1.4 -2.6,2.4 -4.5,2.4 l 0,0 z M 96.5,93.4 h 6.7 v 13.3 H 96.5 V 93.4 z m -31.4,7.9 c 2,0 3.6,-1.5 3.8,-3.4 h 1.9 c 0.2,1.8 1.4,3.4 3.4,3.4 h 0.4 c 1.8,0 3.5,-1.7 3.6,-3.4 h 1.9 c 0,2 1.7,3.4 3.8,3.4 h 0.2 c 1.5,0 3.4,-1.5 3.4,-2.6 v -0.8 h 1.9 c 0,1.9 1.8,3.4 3.8,3.4 v 1.5 c -3.6,0 -3.8,-2 -4.9,-2.2 -0.4,1.3 -2.5,2.2 -4.2,2.2 h -0.6 c -1.7,0 -3.8,-1 -4.1,-2.2 -1,0.3 -1.4,2.2 -4.5,2.2 H 74.1 c -2.7,0 -3,-1.3 -4.5,-2.2 -1,1.4 -2.2,2.2 -4.5,2.2 v -1.5 l 0,0 z m 0,-12 c 2,0 3.6,-1.5 3.8,-3.4 h 1.9 c 0.1,1.8 1.4,3.4 3.4,3.4 h 0.4 c 1.8,0 3.5,-1.7 3.6,-3.4 h 1.9 c 0,2 1.7,3.4 3.8,3.4 h 0.2 c 1.5,0 3.4,-1.5 3.4,-2.6 v -0.8 h 1.9 c 0,1.9 1.8,3.4 3.8,3.4 v 1.5 c -3.1,0 -3,-1 -4.7,-2 -1.4,1 -1.7,2.1 -4.4,2.1 h -0.6 c -2.7,0 -2.9,-1.1 -4.3,-2 -1.6,1 -1.6,2 -4.5,2 H 73.9 c -2.4,0 -2.9,-1.2 -4.1,-2 -1.6,1 -1.7,2 -4.7,2 v -1.5 l 0,0 z m 31.4,21.3 h 6.7 v 10.1 h 35.6 V 79.4 L 103.3,79.2 V 89.5 H 96.5 V 79.4 L 61.2,79.2 v 41.6 h 35.4 v -10.1 z m 14.2,-12.2 c 0,1.4 -1.8,2.8 -3.6,2.8 v 1.5 c 3.4,0 3.5,-1.9 4.7,-2.2 0.4,1.3 2.7,2.2 4.5,2.2 h 0.2 c 2.9,0 3,-1.3 4.3,-2.2 1.2,0.9 1.7,2.2 4.3,2.2 h 0.8 c 2.6,0 3,-1.3 4.3,-2.2 1.4,1 1.5,2.2 4.6,2.2 v -1.5 c -1.7,0 -3.8,-1.6 -3.8,-2.8 v -0.6 h -1.7 c -0.1,1.8 -1.6,3.4 -3.6,3.4 h -0.6 c -1.4,0 -3.4,-1.4 -3.4,-2.4 v -0.9 h -1.9 c 0,1.7 -1.7,3.4 -3.5,3.4 h -0.4 c -1.9,0 -3.5,-1.5 -3.6,-3.4 h -1.8 v 0.6 z m 0,-12 c 0,1.4 -1.8,2.8 -3.6,2.8 v 1.5 c 1.8,0 4,-0.9 4.3,-2.2 1.6,1.1 1.7,2.2 4.9,2.2 h 0.4 c 2.6,0 2.9,-1.3 4.3,-2.2 0.3,1.3 2.4,2.3 4.1,2.3 h 0.8 c 2.7,0 3,-1.3 4.5,-2.2 0.4,1.3 2.7,2.2 4.5,2.2 v -1.5 c -1.7,0 -3.8,-1.6 -3.8,-2.8 v -0.6 h -1.7 c -0.1,1.8 -1.6,3.4 -3.6,3.4 h -0.6 c -1.6,0 -3.4,-1.4 -3.4,-2.8 v -0.6 h -1.9 c 0,1.7 -1.7,3.4 -3.5,3.4 h -0.4 c -1.9,0 -3.5,-1.5 -3.6,-3.4 h -1.8 v 0.5 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 65.1,114.8 c 1.9,0 4.1,-1 4.5,-2.4 1.1,1.2 2.2,2.4 4.5,2.4 h 0.6 c 1.8,0 3.8,-1.1 4.1,-2.4 1.4,1 1.6,2.4 4.5,2.4 h 0.6 c 2.8,0 3.2,-1.6 4.5,-2.4 0.4,1.4 2.5,2.4 4.5,2.4 v -1.5 c -2.1,0 -3.7,-1.4 -3.8,-3.4 h -1.6 c -0.4,1.8 -1.4,3.4 -3.6,3.4 h -0.2 c -2.1,0 -3.7,-1.4 -3.8,-3.4 h -1.8 c -0,1.8 -1.7,3.4 -3.6,3.4 H 74.1 c -1.8,0 -3.3,-1.6 -3.4,-3.4 h -1.9 c -0,1.8 -1.8,3.4 -3.8,3.4 v 1.5 l 0,0 z m 0,-13.5 v 1.5 c 2.3,0 3.6,-0.9 4.5,-2.2 1.4,1 1.8,2.2 4.5,2.2 h 0.6 c 3.1,0 3.5,-2 4.5,-2.2 0.4,1.3 2.4,2.2 4.1,2.2 h 0.6 c 1.7,0 3.8,-1 4.1,-2.2 1.1,0.3 1.2,2.2 4.9,2.2 v -1.5 c -2,0 -3.8,-1.4 -3.8,-3.4 h -1.9 v 0.8 c 0,1.2 -1.9,2.6 -3.4,2.6 h -0.2 c -2,0 -3.7,-1.4 -3.8,-3.4 h -1.8 c -0,1.6 -1.7,3.4 -3.6,3.4 H 74.1 c -2,0 -3.2,-1.5 -3.4,-3.4 h -1.9 c -0.2,1.8 -1.7,3.4 -3.8,3.4 l 0,0 z m 0,-12 v 1.5 c 3,0 3.1,-1 4.7,-2 1.2,0.9 1.7,2 4.1,2 h 0.6 c 2.9,0 2.9,-1 4.5,-2 1.4,0.9 1.6,2 4.3,2 h 0.6 c 2.7,0 2.9,-1.1 4.3,-2 1.6,1.1 1.6,2 4.7,2 v -1.5 c -2,0 -3.8,-1.4 -3.8,-3.4 h -1.9 v 0.8 c 0,1.2 -1.9,2.6 -3.4,2.6 h -0.2 c -2,0 -3.7,-1.4 -3.8,-3.4 h -1.8 c -0,1.7 -1.7,3.4 -3.6,3.4 H 74.1 c -2,0 -3.2,-1.5 -3.4,-3.4 h -1.9 c -0.2,1.8 -1.7,3.4 -3.8,3.4 l 0,0 z m 42.1,25.4 v -1.5 c 2.2,0 3.4,-1.4 3.6,-3.4 h 1.3 c 1,0 0.8,3.4 4.1,3.4 h 0.4 c 2.2,0 2.4,-1.4 3.3,-2.1 l 0.2,-1.3 h 1.7 c 0.2,2 1.6,3.4 3.8,3.4 h 0.4 c 1.8,0 3.5,-1.6 3.6,-3.4 h 1.5 c 0.4,1.8 1.7,3.4 3.9,3.4 v 1.5 c -1.9,0 -4.1,-1 -4.5,-2.4 -1.5,1 -1.8,2.5 -4.5,2.5 h -0.4 c -2,0 -4.1,-1 -4.5,-2.4 h -0.4 c -0.4,1.3 -2.3,2.4 -4.1,2.4 h -0.4 c -2.9,0 -3.1,-1.4 -4.7,-2.4 -0.4,1.4 -2.4,2.4 -4.3,2.4 z m 3.6,-16.8 h 1.9 c 0,1.8 1.6,3.4 3.5,3.4 h 0.4 c 1.8,0 3.5,-1.6 3.6,-3.4 h 1.9 v 0.9 c 0,1 2,2.4 3.4,2.4 h 0.6 c 1.9,0 3.4,-1.6 3.6,-3.4 h 1.7 v 0.6 c 0,1.2 2,2.8 3.8,2.8 v 1.5 c -3.1,0 -3.2,-1.2 -4.7,-2.2 -1.3,0.9 -1.7,2.2 -4.4,2.2 h -0.7 c -2.6,0 -3,-1.3 -4.3,-2.2 -1.3,1 -1.4,2.2 -4.3,2.2 h -0.2 c -1.8,0 -4.2,-1 -4.5,-2.2 -1.2,0.3 -1.2,2.2 -4.7,2.2 v -1.5 c 1.8,0 3.6,-1.4 3.6,-2.8 v -0.6 l 0,0 z m 0,-12 h 1.9 c 0,1.9 1.6,3.4 3.5,3.4 h 0.4 c 1.8,0 3.5,-1.6 3.6,-3.4 h 1.9 v 0.6 c 0,1.4 1.8,2.8 3.4,2.8 h 0.6 c 1.9,0 3.4,-1.6 3.6,-3.4 h 1.7 v 0.6 c 0,1.2 2,2.8 3.8,2.8 v 1.5 c -1.8,0 -4.2,-1 -4.5,-2.2 -1.5,1 -1.8,2.2 -4.6,2.2 h -0.7 c -1.7,0 -3.8,-1 -4.1,-2.2 -1.4,0.9 -1.7,2.2 -4.3,2.2 h -0.4 c -3.1,0 -3.2,-1.2 -4.9,-2.2 -0.4,1.3 -2.5,2.2 -4.3,2.2 v -1.5 c 1.8,0 3.6,-1.4 3.6,-2.8 v -0.6 z m -5.8,32.6 h 32 V 81.5 h -32 v 37 z m -1.7,-11.8 0,-13.3 -6.8,0 0,13.3 z"
	    }
	  ];
	  icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE.TRAFFIC CONTROL POINT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 85.5,81.3 0.5,0.7 13.7,18.2 0.3,0.5 0.3,-0.5 13.7,-18.2 0.5,-0.7 -0.9,0 -27.4,0 -0.9,0 z m 1.7,0.9 25.7,0 L 100,99.3 87.2,82.2 z M 106.7,50.7 c 0,0.2 -0,0.5 -0.1,0.7 -0.1,0.2 -0.2,0.4 -0.4,0.5 -0.2,0.2 -0.4,0.3 -0.7,0.4 -0.3,0.1 -0.6,0.1 -1,0.1 l -0.7,0 0,2.1 -0.7,0 0,-5.6 1.5,0 c 0.3,5e-6 0.6,0 0.9,0.1 0.2,0.1 0.4,0.1 0.6,0.3 0.2,0.1 0.4,0.3 0.5,0.5 0.1,0.2 0.2,0.5 0.2,0.8 m -0.8,0 c -1e-5,-0.2 -0,-0.4 -0.1,-0.5 -0.1,-0.1 -0.2,-0.3 -0.3,-0.3 -0.1,-0.1 -0.3,-0.1 -0.4,-0.2 -0.2,-0 -0.3,-0.1 -0.6,-0.1 l -0.7,0 0,2.2 0.6,0 c 0.3,3e-6 0.5,-0 0.7,-0.1 0.2,-0.1 0.3,-0.1 0.5,-0.3 0.1,-0.1 0.2,-0.2 0.2,-0.4 0.1,-0.1 0.1,-0.3 0.1,-0.4 m -3.9,3.5 c -0.1,0.1 -0.3,0.1 -0.4,0.2 -0.1,0.1 -0.3,0.1 -0.4,0.2 -0.2,0 -0.3,0.1 -0.5,0.1 -0.2,0 -0.4,0.1 -0.6,0.1 -0.4,0 -0.8,-0.1 -1.1,-0.2 -0.3,-0.1 -0.6,-0.3 -0.9,-0.5 -0.2,-0.2 -0.4,-0.5 -0.6,-0.9 -0.1,-0.4 -0.2,-0.8 -0.2,-1.3 0,-0.5 0.1,-0.9 0.2,-1.2 0.1,-0.4 0.3,-0.7 0.6,-0.9 0.2,-0.2 0.5,-0.4 0.9,-0.6 0.3,-0.1 0.7,-0.2 1.1,-0.2 0.3,6e-6 0.6,0 0.9,0.1 0.3,0.1 0.6,0.2 1,0.4 l 0,0.9 -0.1,0 c -0.3,-0.3 -0.6,-0.4 -0.9,-0.6 -0.3,-0.1 -0.6,-0.2 -1,-0.2 -0.3,5e-6 -0.5,0 -0.8,0.1 -0.2,0.1 -0.4,0.2 -0.6,0.4 -0.2,0.2 -0.3,0.4 -0.4,0.7 -0.1,0.3 -0.1,0.6 -0.1,1 -10e-7,0.4 0.1,0.7 0.2,1 0.1,0.3 0.2,0.5 0.4,0.7 0.2,0.2 0.4,0.3 0.6,0.4 0.2,0.1 0.5,0.1 0.7,0.1 0.4,10e-7 0.7,-0.1 1,-0.2 0.3,-0.1 0.6,-0.3 0.9,-0.6 l 0.1,0 0,0.9 m -5.1,-4.5 -2,0 0,4.9 -0.7,0 0,-4.9 -2,0 0,-0.7 4.7,0 0,0.7 M 85.9,44.6 l 0,0.4 0,36.5 0,0.4 0.4,0 27.4,0 0.4,0 0,-0.4 0,-36.5 0,-0.4 -0.4,0 -27.4,0 -0.4,0 z m 0.9,0.9 26.5,0 0,35.6 -26.5,0 0,-35.6 z"
	    }
	  ];
	  icn["AC.M1.RIOT"] = textm1("RIOT");
	  icn["AC.M1.THREAT"] = textm1("?");
	  icn["AC.M1.EMERGENCY COLLECTION EVACUATION POINT"] = textm1("ECEP");
	  icn["AC.M1.EMERGENCY INCIDENT COMMAND CENTER"] = textm1("EICC");
	  icn["AC.M1.EMERGENCY OPERATIONS CENTER"] = textm1("EOC");
	  icn["AC.M1.EMERGENCY SHELTER"] = textm1("ES");
	  icn["AC.M1.EMERGENCY STAGING AREA"] = textm1("SA");
	  icn["AC.M1.EMERGENCY"] = textm1("EMER");
	  icn["AC.M1.COMMERCIAL"] = textm1("COM");
	  icn["AC.M1.PRODUCTION"] = textm1("PROD");
	  icn["AC.M1.RETAIL"] = textm1("RTL");
	  icn["AC.M1.MILITARY ARMORY"] = textm1("RES");
	  icn["AC.M1.GENERATION STATION"] = textm1("GEN");
	  icn["AC.M1.EVICTION"] = textm1("EV");
	  icn["AC.M1.RAID"] = textm1("RAID");

	  // Emergency management import
	  icn["GR.I.FF.CIVILIAN ROTARY WING"] = [
	    {
	      type: "path",
	      stroke: black,
	      d: "M80,70 l10,10 M120,110 l-10,-10 M80,110 l10,-10 M120,70 l-10,10 M100,115 l0,20 M95,135 l10,0",
	      fill: false
	    },
	    {
	      type: "path",
	      stroke: black,
	      fill: STD2525 ? iconFillColor : false,
	      d: "m 113,90 c -0.3,8.8 -1.9,20.3 -10.8,24.6 -7.7,2 -12.3,-7.1 -13.8,-13.3 -2.6,-11.5 -2.3,-26 6.9,-34.6 6.0,-4.9 13.1,1.9 14.9,7.8 2,4.9 2.8,10.2 2.8,15.5 z"
	    }
	  ];
	  icn["GR.IC.HOSPITAL SHIP"] = text("AH");
	  icn["GR.IC.LAW ENFORCEMENT VESSEL"] = [
	    {
	      type: "path",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 75,100 0,-35 50,0 0,35 20,0 -15,35 -60,0 -15,-35 z"
	    },
	    { type: "path", d: "m 135,100 -15,35 -10,0 15,-35 z" }
	  ];

	  icn["CY.IC.COMMAND AND CONTROL (C2)"] = text("BC2");
	  icn["CY.IC.HERDER"] = text("HDR");
	  icn["CY.IC.CALLBACK DOMAIN"] = text("CBD");
	  icn["CY.IC.ZOMBIE"] = text("ZMB");
	  icn["CY.IC.ADVANCED PERSISTENT THREAT (APT)"] = text("APT");
	  icn["CY.IC.APT WITH C2"] = text("AC2");
	  icn["CY.IC.APT WITH SELF PROPAGATION"] = text("ASP");
	  icn["CY.IC.APT WITH C2 AND SELF PROPAGATION"] = text("ACS");
	  icn["CY.IC.APT OTHER"] = text("AOT");
	  icn["CY.IC.NON-ADVANCED PERSISTENT THREAT (NAPT)"] = text("NAPT");
	  icn["CY.IC.NAPT WITH C2"] = text("NC2");
	  icn["CY.IC.NAPT WITH SELF PROPAGATION"] = text("NSP");
	  icn["CY.IC.NAPT WITH C2 AND SELF PROPAGATION"] = text("NCS");
	  icn["CY.IC.NAPT OTHER"] = text("NOH");
	  icn["CY.IC.NORMAL"] = text("ON");
	  icn["CY.IC.NETWORK OUTAGE"] = text("OUT");
	  icn["CY.IC.UNKNOWN"] = text("UNK");
	  icn["CY.IC.IMPAIRED"] = text("IMP");
	  icn["CY.IC.CORE ROUTER"] = text("CRT");
	  icn["CY.IC.ROUTER TEXT"] = text("RTR");
	  icn["CY.IC.CROSS DOMAIN SOLUTION"] = text("CDS");
	  icn["CY.IC.MAIL SERVER"] = text("MNP");
	  icn["CY.IC.WEB SERVER"] = text("WSR");
	  icn["CY.IC.DOMAIN SERVER"] = text("DSR");
	  icn["CY.IC.FILE SERVER"] = text("FSR");
	  icn["CY.IC.PEER-TO-PEER NODE"] = text("P2P");
	  icn["CY.IC.FIREWALL TEXT"] = text("FWL");
	  icn["CY.IC.SWITCH TEXT"] = text("SWT");
	  icn["CY.IC.HOST"] = text("HST");
	  icn["CY.IC.VIRTUAL PRIVATE NETWORK (VPN)"] = text("VPN");
	  icn["CY.IC.DEPARTMENT OF DEFENSE (DOD)"] = text("DOD");
	  icn["CY.IC.GOVERNMENT"] = text("GOV");
	  icn["CY.IC.CONTRACTOR"] = text("CTR");
	  icn["CY.IC.SUPERVISORY CONTROL AND DATA ACQUISITION (SCADA)"] = text("SCD");
	  icn["CY.IC.NON-GOVERNMENT"] = text("NGD");
	  icn["CY.IC.INFECTION"] = text("INF");
	  icn["CY.IC.DEGRADATION"] = text("DGD");
	  icn["CY.IC.DATA SPOOFING"] = text("SPF");
	  icn["CY.IC.DATA MANIPULATION"] = text("MSR");
	  icn["CY.IC.EXFILTRATION"] = text("XFL");
	  icn["CY.IC.POWER OUTAGE"] = text("POT");
	  icn["CY.IC.NETWORK OUTAGE"] = text("NOT");
	  icn["CY.IC.SERVICE OUTAGE"] = text("SOT");
	  icn["CY.IC.DEVICE OUTAGE"] = text("DOT");

	  icn["CY.IC.COMBAT MISSION TEAM"] = text("CMT");
	  icn["CY.IC.NATIONAL MISSION TEAM"] = text("NMT");
	  icn["CY.IC.CYBER PROTECTION TEAM"] = text("CPT");
	  icn["CY.IC.INTERNET SERVICE PROVIDER"] = text("ISP");
	  icn["CY.IC.SECURITY"] = text("SEC");
	  icn["CY.IC.OPERATIONS"] = text("OPS");
	  icn["CY.IC.INSIDER"] = text("INS");
	  icn["CY.IC.NETWORK"] = text("NET");
	  icn["CY.IC.DEFENSIVE CYBERSPACE OPERATION"] = {
	    type: "path",
	    stroke: false,
	    d: "m 56.5,113 14,-23 14.1,23 z  m 59.5,0 14,-23 14,23 z  m -30.5,0 14,-23 15.5,23 z"
	  };
	  icn["CY.IC.OFFENSIVE CYBERSPACE OPERATION"] = {
	    type: "path",
	    stroke: false,
	    d: "m 61,97 h 62 V 85 l 15,15 -15,15 V 103 H 61 Z"
	  };

	  icn["CY.IC.THREAT ACTOR"] = {
	    type: "path",
	    strokewidth: 1.5,
	    d: "m 96.94,110.2 c 0,-1.6 1.17,-3.1 3.16,-3.1 1.9,0 3.1,1.5 3.1,3.1 0,2 -1.2,3.1 -3.1,3.5 -1.6,0 -3.16,-1.5 -3.16,-3.5 z  m 3.16,-2.3 c -1.21,0 -2.38,0.7 -2.38,2.3 0,1.6 0.78,2.7 2.38,2.7 1.5,0 2.7,-1.1 2.7,-2.7 0,-1.2 -1.2,-2.3 -2.7,-2.3 z  M 89.53,98.89 c -1.17,-1.56 -1.17,-3.51 -0.39,-5.07 1.17,-3.12 2.73,-6.24 4.68,-8.58 1.56,-1.95 3.51,-3.12 5.85,-3.51 2.33,0 3.93,0.78 5.43,2.34 3.1,2.73 5.1,6.63 6.3,10.53 0.8,1.95 0.4,2.73 -0.8,4.68 0,0 0.4,0.39 0.4,0.82 3.1,3.1 5.4,7 7.4,10.9 0.4,0.8 0.8,1.9 1.2,3.1 0.4,2.3 -1.2,4.3 -3.5,4.3 -11,0 -21.5,0 -32.03,0 -2.34,0 -4.29,-2 -3.51,-4.3 0,-1.2 0.78,-2.3 1.17,-3.5 1.95,-3.9 4.29,-7.4 7.02,-10.93 0.39,0 0.39,-0.39 0.78,-0.78 z  m 19.87,17.21 c 0,0 0,0 0,-0.4 0.4,-3.5 0.4,-7.5 0.8,-11 0,-0.7 -0.4,-0.7 -0.8,-0.7 -6.2,0 -12.46,0 -18.31,0 -1.17,0 -1.17,0.4 -1.17,1.1 0.39,2.4 0.39,5.1 0.78,7.8 0,0.8 0,2 0,3.2 6.24,0 12.5,0 18.7,0 z  M 111,96.55 c 0,-1.17 -0.4,-1.95 -0.4,-2.73 -1.2,-3.12 -2.7,-5.46 -4.7,-7.8 -0.8,-1.17 -1.5,-1.56 -2.3,-2.34 -2.4,-1.56 -4.71,-1.56 -7.05,0 -0.78,0.78 -1.56,1.17 -1.95,1.95 -2.34,2.73 -3.9,5.46 -5.07,8.19 0,0.78 -0.39,1.56 -0.39,2.73 5.46,-3.51 16.36,-3.51 21.86,0 z  m -21.08,3.12 c -2.73,2.33 -7.41,10.13 -8.58,13.63 -0.39,0.4 -0.39,1.2 -0.39,2 0,1.1 1.17,2.3 2.34,2.3 1.56,0 3.51,0 5.07,0 0.39,-1.2 0.39,-1.2 1.56,-1.5 0,-0.4 0.39,-0.4 0,-0.8 0,-3.1 -0.39,-6.3 -0.39,-9.4 -0.39,-2.3 -0.39,-2.7 1.95,-2.7 1.17,0 2.34,0 3.51,0 0,0 0,0 0,0 -1.56,-1.2 -3.12,-2.4 -5.07,-3.53 z  m 21.88,17.93 c 1.5,0 3.1,0 4.3,0 1.5,0 3.1,-1.2 2.7,-2.7 0,-1.2 -0.4,-2 -0.8,-3.1 -1.9,-4.3 -4.7,-8.2 -7.8,-11.7 0,-0.43 0,-0.43 -0.4,-0.43 -1.6,1.13 -3.1,2.33 -4.7,3.53 1.2,0 2.8,0 4.3,0 1.2,0 1.6,0.4 1.6,1.9 -0.4,2 -0.4,3.9 -0.4,5.9 -0.4,1.9 -0.4,3.5 -0.4,5.1 1.6,0.3 1.6,0.3 1.6,1.5 z  M 93.82,94.99 c 0.39,4.29 3.12,7.01 6.68,7.01 3.1,-0.4 5.8,-3.5 5.8,-6.62 C 102,94.6 98.11,94.6 93.82,94.99 Z  m 13.28,0.39 c -0.8,3.9 -2.7,7.42 -7,7.42 -4.33,-0.4 -6.28,-3.52 -7.06,-7.42 -0.39,0 -1.17,0.39 -1.56,0.39 -2.34,1.17 -2.34,1.95 -0.39,3.51 1.56,1.22 3.51,2.72 5.46,3.92 0,0 0.39,0 0.78,0 1.95,0 3.87,0 5.47,0 0.4,0 0.8,0 1.2,0 1.5,-1.2 3.5,-2.4 5,-3.53 0.4,-0.39 0.8,-0.78 1.2,-1.17 0.8,-0.78 0.8,-1.17 -0.4,-1.56 -0.8,-0.78 -1.6,-1.17 -2.7,-1.56 z  m -7,21.42 c -3.16,0 -6.67,0 -10.18,0 -0.39,0 -0.39,0.4 -0.78,0.4 0.39,0 0.39,0.4 0.78,0.4 6.63,0 13.68,0 20.28,0 0.4,0 0.8,0 0.8,-0.4 0,0 -0.4,-0.4 -0.8,-0.4 -3.1,0 -6.6,0 -10.1,0 z"
	  };

	  icn["CY.IC.APPLICATION"] = [
	    {
	      type: "path",
	      fill: iconFillColor,
	      stroke: false,
	      d: "m 85,85 h 30 v 30 H 85 Z"
	    },
	    {
	      type: "path",
	      fill: false,

	      d: "m 104.9,85 0.1,30  M 95,85 v 30  M 85,104.9 115,105  M 85,95 h 30  M 85,85 h 30 v 30 H 85 Z"
	    }
	  ];

	  icn["CY.IC.FIREWALL"] = {
	    type: "path",
	    fill: false,
	    d: "m 55.54,112.7 h 7.42 V 83.86 h 14.83 v 0 28.84 H 92.58 V 83.86 h 14.82 v 28.84 h 14.8 V 83.86 H 137 v 0 28.84 0 h 7.5"
	  };

	  icn["CY.IC.FIRMWARE"] = {
	    type: "path",

	    fill: false,
	    d: "m 100,107 5,-5  m -5,-9.13 V 107 l -5,-5  m 10.4,9.8 v 5.3  m -5.3,-5.3 v 5.3  m -5.46,-5.3 v 5.3  M 117,105.2 h -5.3  m 5.3,-5.36 h -5.3  m 5.3,-5.42 h -5.3  m -6.3,-11.5 v 5.3  m -5.3,-5.3 v 5.3  m -5.46,-5.3 v 5.3  m -6.36,16.98 h -5.3  m 5.3,-5.36 h -5.3  m 5.3,-5.42 h -5.3  m 10.05,-6 h 13.87 c 2.6,0 4.7,2.12 4.7,4.71 v 13.77 c 0,2.6 -2.1,4.7 -4.7,4.7 H 93.03 c -2.59,0 -4.71,-2.1 -4.71,-4.7 V 93.13 c 0,-2.59 2.12,-4.71 4.71,-4.71 z"
	  };

	  icn["CY.IC.SEARCH ENGINE"] = [
	    {
	      type: "path",
	      fill: false,

	      d: "M 111.9,107.2 101.7,96.99  m 1.9,-5.41 a 6.476,6.476 0 0 1 -6.5,6.48 6.476,6.476 0 0 1 -6.48,-6.48 6.476,6.476 0 0 1 6.48,-6.48 6.476,6.476 0 0 1 6.5,6.48 z  m -37.35,6.59 h 15.87 1.18 l -8.98,16.13 h 50.88 l -8.9,-16.13 h 0.5 17"
	    },
	    {
	      type: "path",

	      d: "M 131.4,106 145,98.17 131.4,90.33 Z  M 68.52,106 55,98.17 68.52,90.33 Z"
	    }
	  ];

	  icn["CY.IC.SOCIAL MEDIA"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "m 73.3,108 v 10.1 h 53.4 v -9.5 h -2.2 v 7.3 H 75.52 V 108 Z  m 0,-26.08 v 10.13 h 2.22 v -7.92 h 48.98 v 7.32 h 2.2 V 81.92 Z  M 109.8,91 v 18 l 16,-8.6 z  m 1.6,2.78 11.1,6.52 -11.1,6.1 z  M 84.17,91.16 c -1.23,0 -2.38,0.24 -3.44,0.68 -1.07,0.47 -2.02,1.06 -2.77,1.86 -0.8,0.83 -1.43,1.74 -1.86,2.81 -0.48,1.07 -0.68,2.21 -0.68,3.48 0,1.31 0.2,2.51 0.64,3.61 0.43,1.1 1.02,2 1.82,2.7 0.75,0.8 1.7,1.4 2.77,1.8 1.07,0.5 2.21,0.7 3.48,0.7 0.59,0 1.19,0 1.74,-0.1 0.56,-0.1 1.19,-0.2 1.82,-0.3 V 107 c -0.55,0.1 -1.15,0.2 -1.78,0.3 -0.59,0.1 -1.19,0.2 -1.78,0.2 -1.07,0 -2.02,-0.2 -2.93,-0.6 -0.91,-0.3 -1.66,-0.8 -2.33,-1.5 -0.68,-0.7 -1.15,-1.5 -1.51,-2.4 -0.35,-0.9 -0.51,-1.9 -0.51,-3.01 0,-1.07 0.16,-1.98 0.51,-2.89 0.4,-0.95 0.91,-1.74 1.55,-2.37 0.63,-0.68 1.42,-1.19 2.29,-1.59 0.91,-0.39 1.9,-0.59 2.97,-0.59 1.11,0 2.1,0.2 3.01,0.51 0.87,0.36 1.58,0.87 2.17,1.51 0.6,0.63 1.07,1.42 1.35,2.33 0.32,0.87 0.48,1.9 0.48,3.01 0,0.59 -0.1,1.29 -0.2,1.99 -0.16,0.7 -0.4,1.4 -0.68,1.9 h -2.45 v -8.48 h -1.58 v 0.47 C 85.79,95.6 85.4,95.44 85,95.32 c -0.36,-0.12 -0.79,-0.2 -1.27,-0.2 -1.14,0 -2.17,0.48 -3,1.39 -0.84,0.91 -1.23,2.09 -1.23,3.59 0,1.5 0.36,2.7 1.03,3.6 0.67,0.9 1.58,1.3 2.69,1.3 0.59,0 1.15,-0.1 1.58,-0.3 0.48,-0.3 0.95,-0.6 1.47,-1 l 0.23,1.2 h 4.48 c 0.51,-0.7 0.91,-1.5 1.15,-2.4 0.27,-0.9 0.43,-1.8 0.43,-2.67 0,-1.3 -0.2,-2.45 -0.59,-3.52 -0.36,-1.07 -0.91,-1.98 -1.63,-2.73 -0.71,-0.75 -1.58,-1.35 -2.65,-1.78 -1.03,-0.4 -2.21,-0.64 -3.52,-0.64 z  m -0.16,5.47 c 0.4,0 0.75,0 1.07,0.11 0.36,0.12 0.71,0.24 1.15,0.44 v 5.22 c -0.36,0.3 -0.79,0.5 -1.23,0.7 -0.47,0.2 -0.91,0.3 -1.35,0.3 -0.83,0 -1.46,-0.3 -1.86,-0.8 -0.35,-0.6 -0.59,-1.4 -0.59,-2.5 0,-1.06 0.28,-1.97 0.75,-2.56 0.52,-0.64 1.19,-0.91 2.06,-0.91 z  m 16.39,-4.16 -1.11,4.27 h -3.4 v 1.39 h 3.08 l -0.99,3.77 h -3.32 v 1.3 h 3.01 l -1.07,4.3 h 1.26 l 1.11,-4.3 h 2.73 l -1,4.3 h 1.3 l 1,-4.3 h 3.5 v -1.3 h -3.1 l 0.9,-3.77 h 3.4 v -1.39 h -3 l 1,-4.27 h -1.3 l -1,4.27 h -2.8 l 1.1,-4.27 z  m -0.1,5.66 h 2.7 l -0.9,3.77 h -2.81 z"
	  };

	  icn["CY.IC.MALWARE"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "m 106.3,81.71 c -1.4,0 -2.6,0.39 -3.6,1.08 -1,0.7 -1.7,1.77 -1.7,3.01 a 1.166,1.166 0 0 0 1.2,1.16 1.166,1.166 0 0 0 1.2,-1.16 c 0,-0.36 0.2,-0.75 0.7,-1.11 0.5,-0.37 1.3,-0.65 2.2,-0.65 a 1.166,1.166 0 0 0 1.2,-1.16 1.166,1.166 0 0 0 -1.2,-1.17 z  m -12.51,0.16 a 1.166,1.166 0 0 0 -1.17,1.17 1.166,1.166 0 0 0 1.17,1.17 c 0.88,0 1.67,0.26 2.17,0.62 0.51,0.36 0.7,0.74 0.7,1.12 a 1.166,1.166 0 0 0 1.17,1.17 1.166,1.166 0 0 0 1.17,-1.17 c 0,-1.25 -0.72,-2.33 -1.68,-3.01 -0.97,-0.69 -2.2,-1.06 -3.53,-1.07 z  m 20.71,20.33 -4,0.1 a 1.166,1.166 0 0 0 -1.2,1.1 1.166,1.166 0 0 0 1.2,1.2 l 3.1,0 4.5,3.9 a 1.166,1.166 0 0 0 1.7,-0.2 1.166,1.166 0 0 0 -0.1,-1.6 z  m -29.42,0.1 -4.74,4.2 a 1.166,1.166 0 0 0 -0.1,1.6 1.166,1.166 0 0 0 1.63,0.1 l 4.05,-3.6 3.73,0 a 1.166,1.166 0 0 0 1.16,-1.1 1.166,1.166 0 0 0 -1.16,-1.2 z  m 23.62,7.1 a 1.166,1.166 0 0 0 -0.7,0.6 1.166,1.166 0 0 0 0.4,1.6 l 3.2,1.8 2.4,3.5 a 1.166,1.166 0 0 0 1.7,0.3 1.166,1.166 0 0 0 0.3,-1.6 l -2.7,-4 -3.7,-2.1 a 1.166,1.166 0 0 0 -0.9,-0.1 z  m -17.09,0.2 a 1.166,1.166 0 0 0 -0.89,0 l -3.74,1.8 -2.87,4.2 a 1.166,1.166 0 0 0 0.31,1.7 1.166,1.166 0 0 0 1.63,-0.3 l 2.49,-3.7 3.19,-1.6 a 1.166,1.166 0 0 0 0.54,-1.5 1.166,1.166 0 0 0 -0.66,-0.6 z  M 113.5,88.05 a 1.166,1.166 0 0 0 -1.5,0.78 l -1.5,4.89 -2.5,1.79 a 1.166,1.166 0 0 0 -0.3,1.63 1.166,1.166 0 0 0 1.6,0.31 l 3.2,-2.25 1.8,-5.67 a 1.166,1.166 0 0 0 -0.8,-1.48 z  m -27.14,-0.1 a 1.166,1.166 0 0 0 -0.77,1.48 l 1.9,5.79 3.3,2.29 a 1.166,1.166 0 0 0 1.64,-0.31 1.166,1.166 0 0 0 -0.32,-1.63 l -2.68,-1.83 -1.59,-5.01 a 1.166,1.166 0 0 0 -1.48,-0.78 z  m 13.74,2.04 c -6.47,0 -11.47,6.4 -11.47,13.99 0,7.6 5,14 11.47,14 6.5,0 11.5,-6.4 11.5,-14 0,-7.59 -5,-13.99 -11.5,-13.99 z  m 0,2.34 c 4.9,0 9.1,5.08 9.1,11.65 0,6.6 -4.2,11.7 -9.1,11.7 -4.9,0 -9.14,-5.1 -9.14,-11.7 0,-6.57 4.24,-11.65 9.14,-11.65 z  m -0.1,-8 c -3.62,0 -6.57,2.96 -6.57,6.58 0,0.8 0.15,1.65 0.48,2.46 l 2.16,-0.88 c -0.21,-0.51 -0.3,-1.06 -0.3,-1.58 0,-2.38 1.87,-4.24 4.23,-4.24 2.4,0 4.2,1.86 4.2,4.24 0,0.49 0,0.99 -0.2,1.5 l 2.2,0.72 c 0.2,-0.73 0.4,-1.47 0.4,-2.22 0,-3.62 -3,-6.58 -6.6,-6.58 z"
	  };

	  icn["CY.IC.PHISIHNG"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "m 114.3,97.64 c 0,-0.1 0,-0.16 0,-0.2 -0.1,-0.1 -0.1,-0.12 -0.1,-0.2 -0.1,0 -0.1,-0.1 -0.1,-0.11 v 0 c -0.1,0 -0.1,-0.1 -0.2,-0.12 -0.1,0 -0.1,0 -0.1,-0.1 -0.1,0 -0.2,0 -0.2,0 -0.1,0 -0.1,0 -0.2,0 v 0 H 96.95 V 98.7 H 111 L 99.94,108.9 88.83,98.7 h 3.23 v -1.85 h -5.55 v 0 c -0.1,0 -0.16,0 -0.24,0 0,0 -0.1,0 -0.11,0 0,0 -0.1,0 -0.12,0.1 0,0 -0.12,0.1 -0.16,0.12 v 0 c 0,0 0,0.1 -0.1,0.11 0,0 -0.1,0.12 -0.12,0.2 0,0 0,0.12 0,0.2 0,0 0,0.1 0,0.12 v 19.4 c 0,0 0,0 0,0.1 0,0.1 0,0.1 0,0.2 0,0.1 0.1,0.1 0.12,0.2 0,0 0,0.1 0.1,0.1 v 0 c 0.1,0.1 0.16,0.2 0.28,0.2 0,0 0,0 0,0 0.12,0.1 0.24,0.1 0.36,0.1 h 26.88 c 0.2,0 0.3,0 0.4,-0.1 0,0 0,0 0,0 0.1,0 0.2,-0.1 0.3,-0.2 v 0 c 0.1,0 0.1,-0.1 0.1,-0.1 0,-0.1 0.1,-0.1 0.1,-0.2 0.1,-0.1 0.1,-0.1 0.1,-0.2 0,-0.1 0,-0.1 0,-0.1 V 97.76 c 0,0 0,-0.1 -0.1,-0.12 z  m -26.85,2.24 8.24,7.62 -8.24,7.5 z  m 1.42,16.32 8.15,-7.5 2.33,2.2 c 0.16,0.1 0.39,0.2 0.63,0.2 0.22,0 0.42,-0.1 0.62,-0.2 l 2.3,-2.2 8.2,7.5 z  m 23.63,-1.2 -8.2,-7.6 8.2,-7.56 z  m -8.6,-25 c -1.3,-1.3 -2.3,-2.33 -2.1,-5 0.9,-0.52 1.3,-1.66 0.8,-2.6 -0.5,-0.95 -1.7,-1.3 -2.62,-0.79 -0.95,0.51 -1.3,1.65 -0.79,2.6 0.16,0.27 0.39,0.55 0.67,0.71 -0.28,3.5 1.34,5.04 2.64,6.42 1.2,1.14 2.2,2.16 2.2,4.41 0,0 0,0.1 0,0.11 h 1.2 c 0.3,0 0.5,0 0.7,0.1 0,-0.1 0,-0.11 0,-0.19 0,-3.04 -1.4,-4.49 -2.7,-5.75 z  m -1.2,9.68 c -0.8,0.52 -1.8,0.92 -2.8,0.92 -2.64,0 -4.81,-2.18 -4.81,-4.85 v -0.12 l 1.38,0.9 c 0.44,0.28 1.03,0.16 1.34,-0.27 0.28,-0.43 0.16,-1.03 -0.27,-1.34 l -2.88,-1.93 c -0.43,-0.28 -1.02,-0.16 -1.34,0.28 -0.12,0.15 -0.15,0.35 -0.15,0.51 v 1.93 c 0,3.7 2.99,6.69 6.69,6.69 2.14,0 4.04,-1 5.24,-2.56 h -1.4 c -0.4,0 -0.7,0 -1,-0.16 z"
	  };

	  icn["CY.IC.SPEAR PHISIHNG"] = {
	    type: "path",
	    stroke: false,
	    d: "m 120.7,101.2 v 14 c 0,0.1 0,0.1 0,0.2 0,0.1 -0.1,0.3 -0.1,0.4 0,0 -0.1,0.1 -0.2,0.2 0,0.1 0,0.2 -0.1,0.2 v 0 c -0.1,0.1 -0.2,0.2 -0.4,0.3 l -0.1,0.1 c -0.1,0 -0.3,0.1 -0.5,0.1 H 77.05 c -0.18,0 -0.4,-0.1 -0.58,-0.1 v -0.1 c -0.13,-0.1 -0.31,-0.2 -0.45,-0.3 0,0 0,0 0,0 -0.1,0 -0.1,-0.1 -0.1,-0.2 0,-0.1 -0.14,-0.2 -0.18,-0.2 0,-0.1 0,-0.3 0,-0.4 0,-0.1 0,-0.1 0,-0.2 V 84.75 c 0,-0.1 0,-0.13 0,-0.22 0,-0.1 0,-0.23 0,-0.32 0,-0.1 0.1,-0.18 0.18,-0.27 0,0 0,-0.13 0.1,-0.17 0,0 0,0 0,0 0.1,-0.1 0.18,-0.14 0.27,-0.18 0.1,0 0.14,-0.1 0.18,-0.14 0,0 0.14,0 0.18,0 0.14,0 0.23,-0.1 0.36,-0.1 0,0 0,0 0.1,0 h 42.19 c 0,0 0,0 0.1,0 0.1,0 0.2,0 0.3,0 0.1,0 0.2,0 0.2,0 0,0 0.1,0.1 0.2,0.13 0.1,0 0.2,0.14 0.3,0.23 v 0 c 0,0 0,0.13 0,0.17 0.1,0.1 0.2,0.18 0.2,0.27 0.1,0.1 0.1,0.23 0.1,0.32 v 0 c 0,0.1 0,0.13 0,0.22 V 95.2 h -2.9 v -7.13 l -7.6,7 H 106 l 9.6,-8.88 H 80.64 L 98.13,102.3 99.57,101 H 106 l 11.8,10.9 v -10.7 z  m -5.1,12.6 -12.8,-11.8 -3.63,3.3 c -0.27,0.3 -0.63,0.4 -0.99,0.4 -0.36,0 -0.72,-0.1 -0.99,-0.4 L 93.56,102 80.77,113.8 Z  M 78.49,111.9 91.41,100 78.49,88.07 Z  M 139.5,92.24 c -1.9,-1.39 -4.7,-1.34 -7,-0.27 -1.8,0.9 -3.1,2.47 -3.7,4.27 H 94.05 l 3.68,3.86 h 30.87 c 0.3,1.1 0.8,2.1 1.6,3 2.3,2.3 5.8,3 8.7,1.1 l 8.5,-6.08 z  m -2,8.76 c -1.6,0.9 -3.3,0.5 -4.2,-0.5 -0.5,-0.5 -0.8,-1.12 -0.8,-1.8 0,-0.1 0,-0.22 0,-0.31 0,-0.1 0,-0.22 0,-0.31 0.2,-1.13 0.9,-2.02 1.9,-2.52 1.1,-0.53 2.4,-0.53 3.3,0.1 l 4.4,2.65 z  M 89.57,100 85.62,96.19 H 80.01 V 100  m -6.1,-3.81 V 100 H 54.44 c -0.54,0 -0.99,-0.22 -1.3,-0.53 -0.31,-0.32 -0.54,-0.81 -0.54,-1.35 0.1,-1.03 0.99,-1.88 2.02,-1.93 z"
	  };

	  icn["CY.IC.WHALE PHISHING"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "m 75.53,90.41 c -3.34,-0.1 -5.92,0.64 -7.78,2.27 -2.49,2.18 -3.45,5.73 -3.54,10.42 v 0 c -0.14,8.2 6.74,13.9 14.87,13 l -0.24,-2.2 c -7.05,0.9 -12.63,-3.8 -12.51,-10.8 0.1,-4.38 0.99,-7.23 2.81,-8.82 1.82,-1.6 4.83,-2.18 9.66,-1.44 l 0.32,-2.1 c -1.28,-0.19 -2.48,-0.31 -3.59,-0.33 z  m 4.32,-4.72 a 1.06,1.06 0 0 0 -0.92,0.96 1.06,1.06 0 0 0 -0.14,0.14 v 29.31 a 1.06,1.06 0 0 0 0.11,0.3 1.06,1.06 0 0 0 0.1,0.2 1.06,1.06 0 0 0 0.86,0.6 l 40.44,-0.1 a 1.06,1.06 0 0 0 1.1,-1.1 v 0 -29.21 0 a 1.06,1.06 0 0 0 -1.1,-1.1 z  m 2.77,2.16 H 117.4 L 99.71,103.5 Z  m 36.58,1.25 v 24.4 l -13.1,-12.9 z  m -38.29,0.1 12.74,11.6 -12.74,12.7 z  m 23.69,12.8 13.1,12.9 -35.28,0.1 12.8,-12.8 3.76,3.5 a 1.06,1.06 0 0 0 1.42,0 z  m 17.9,-20.17 c 3.7,1.06 7.1,2.29 9.8,5.43 2.7,-2.38 6,-2.93 9.4,-3.39 1.2,3.47 0.6,7.08 -2.4,8.81 -3.8,2.29 -5.2,5.64 -5.9,9.72 -1,5.6 -3.6,10.2 -9.3,12.4 -1,0.4 -2,0.6 -3,0.9 -0.1,-0.1 -0.3,-0.2 -0.4,-0.3 0.3,-0.5 0.5,-1.3 1,-1.4 6.9,-1.9 9.7,-7.2 10.6,-13.7 0.5,-3.29 1.7,-5.88 4.6,-7.62 2.5,-1.52 4.2,-3.6 3.8,-6.99 -3.4,0.34 -6.3,1.61 -8.7,4.07 -2.2,-2.76 -4.5,-5.13 -8.1,-5.85 -0.6,2.5 -0.1,4.66 1.5,6.57 1,1.19 2.1,2.2 3,3.39 3.8,4.45 1.8,10.43 -3.9,11.73 -0.8,0.2 -1.7,0.3 -2.5,0.3 -1.1,-0.1 -1.1,-0.1 -1.1,-1.7 3,0.5 5.3,-0.4 7,-2.9 1.5,-2.09 1.5,-3.87 -0.1,-5.86 -0.9,-1.1 -1.9,-2.08 -2.9,-3.09 -2.7,-2.97 -3.2,-6.45 -2.4,-10.52 z"
	  };

	  icn["CY.IC.DOCUMENT"] = {
	    type: "path",

	    fill: false,
	    d: "M 85.6,94.16 H 97.58 V 83.03  M 114.4,116.7 H 85.6 V 94.16 L 97,83.03 h 17.4 z"
	  };

	  icn["CY.IC.CRYPTO"] = {
	    type: "path",
	    stroke: false,
	    d: "m 92.23,81 v 7.56 c -0.4,0.36 -0.78,0.76 -1.14,1.19 -2.13,2.59 -3.21,5.89 -3.21,9.94 0,5.31 1.43,9.21 4.28,11.71 0,0 0,0 0.1,0.1 v 7.4 h 3.35 v -5.4 c 1.38,0.6 2.9,0.9 4.59,0.9 1.5,0 2.9,-0.3 4.3,-0.8 v 5.3 h 3.4 v -7.1 c 0.4,-0.3 0.7,-0.6 1,-0.9 1.9,-1.9 3,-4.4 3.3,-7.3 h -3.7 c -0.3,1.8 -0.9,3.3 -1.7,4.4 -1.4,2.1 -3.4,3.1 -6.2,3.1 -2.93,0 -5.16,-1 -6.67,-3 -1.48,-2 -2.23,-4.6 -2.23,-7.8 0,-3.91 0.83,-6.8 2.48,-8.69 1.66,-1.89 3.85,-2.84 6.52,-2.84 2.2,0 3.9,0.52 5.1,1.54 1.2,1.04 2.2,2.43 2.5,4.19 h 3.7 c -0.2,-2.32 -1.4,-4.39 -3.3,-6.23 -0.3,-0.26 -0.5,-0.5 -0.8,-0.72 V 81 h -3.4 v 4.99 c -1.1,-0.29 -2.5,-0.45 -3.8,-0.45 -1.87,0 -3.58,0.3 -5.09,0.91 V 81 Z"
	  };

	  icn["CY.IC.PERSONA"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "M 96.54 81.72 L 84.26 93.66 L 84.26 118.3 L 115.7 118.3 L 115.7 81.72 L 96.54 81.72 z  M 98.53 83.74 L 113.7 83.74 L 113.7 116.3 L 86.28 116.3 L 86.28 95.11 L 95.54 95.11 C 95.38 95.72 95.29 96.38 95.29 97.05 C 95.29 98.5 95.66 99.84 96.34 101 C 94.97 102 93.76 103.4 92.91 105.1 C 91.45 107.8 91.01 111.2 91.57 114.3 C 91.61 114.8 91.98 115.2 92.42 115.2 L 111.3 115.2 C 111.7 115.2 112.1 114.8 112.2 114.4 C 112.8 111.2 112.3 107.9 110.8 105.1 C 110 103.4 108.8 102 107.4 101 C 108 99.84 108.4 98.5 108.4 97.05 C 108.4 93.08 105.5 89.89 101.8 89.89 C 100.6 89.89 99.49 90.25 98.53 90.86 L 98.53 83.74 z  M 96.51 84.57 L 96.51 92.88 C 96.46 92.95 96.42 93.02 96.38 93.08 L 87.76 93.08 L 96.51 84.57 z  M 101.8 91.79 C 104.5 91.79 106.7 94.14 106.7 97.05 C 106.7 99.96 104.5 102.3 101.8 102.3 C 99.13 102.3 96.99 99.96 96.99 97.05 C 96.99 96.36 97.12 95.71 97.34 95.11 L 98.53 95.11 L 98.53 93.21 C 99.39 92.33 100.5 91.79 101.8 91.79 z  M 97.48 102.4 C 98.65 103.5 100.2 104.2 101.8 104.2 C 103.5 104.2 105 103.5 106.2 102.4 C 107.5 103.3 108.5 104.5 109.3 105.9 C 110.5 108.2 110.9 110.6 110.6 113.2 L 93.15 113.2 C 92.87 110.6 93.23 108.2 94.4 105.9 C 95.17 104.5 96.22 103.2 97.48 102.4 z"
	  };

	  icn["CY.IC.SERVER"] = {
	    type: "path",
	    //stroke: false,
	    strokewidth: 1,
	    d: "m 112.5,110.4 c -1.2,0 -2.2,1.2 -2.2,2.1 0,1.2 1,2.4 2.2,2.4 1.1,0 2.1,-1.2 2.1,-2.4 0,-0.9 -1,-2.1 -2.1,-2.1 z  m 0,1.6 c 0.2,0 0.5,0.5 0.5,0.9 0,0 -0.3,0.4 -0.5,0.4 -0.3,0 -0.5,-0.4 -0.5,-0.4 0,-0.4 0.2,-0.9 0.5,-0.9 z  m 0,-14.24 c -1.2,0 -2.2,0.82 -2.2,2.04 0,1.2 1,2.5 2.2,2.5 1.1,0 2.1,-1.3 2.1,-2.5 0,-0.81 -1,-2.04 -2.1,-2.04 z  m 0,1.63 c 0.2,0 0.5,0.41 0.5,0.41 0,0.4 -0.3,0.8 -0.5,0.8 -0.3,0 -0.5,-0.4 -0.5,-0.8 0,0 0.2,-0.41 0.5,-0.41 z  m 0,-14.28 c -1.2,0 -2.2,0.82 -2.2,2.04 0,1.23 1,2.04 2.2,2.04 1.1,0 2.1,-0.81 2.1,-2.04 0,-1.22 -1,-2.04 -2.1,-2.04 z  m 0,1.63 c 0.2,0 0.5,0 0.5,0.41 0,0.41 -0.3,0.41 -0.5,0.41 -0.3,0 -0.5,0 -0.5,-0.41 0,-0.41 0.2,-0.41 0.5,-0.41 z  m -29.54,7.35 c -0.9,0 -1.64,0.82 -1.64,1.63 v 8.58 c 0,0.8 0.74,1.6 1.64,1.6 H 117 c 0.9,0 1.7,-0.8 1.7,-1.6 v -8.58 c 0,-0.81 -0.8,-1.63 -1.7,-1.63 z  m 0.1,1.63 H 117 v 8.58 H 83.04 Z  m -0.1,10.98 c -0.9,0 -1.59,0.9 -1.59,1.7 v 8.5 c 0,0.9 0.73,1.7 1.59,1.7 h 34.14 c 0.8,0 1.6,-0.8 1.6,-1.7 v -8.5 c 0,-0.8 -0.7,-1.7 -1.6,-1.7 z  m 0.1,1.7 H 117 v 8.5 H 83.04 Z  m 0.1,-26.96 c -0.98,0 -1.8,0.81 -1.8,1.63 v 8.16 c 0,1.23 0.82,2.04 1.8,2.04 h 33.78 c 0.9,0 1.8,-0.81 1.8,-2.04 v -8.16 c 0,-0.82 -0.9,-1.63 -1.8,-1.63 z  m 0,1.63 h 33.78 c 0,0 0.1,0 0.1,0 v 8.16 c 0,0 -0.1,0 -0.1,0 H 83.12 c -0.1,0 -0.1,0 -0.1,0 v -8.16 z"
	  };

	  icn["CY.IC.WORKSTATION"] = {
	    type: "path",
	    stroke: false,
	    d: "M 80.9,81.7 V 113 h 17.2 v 1 H 86.2 v 4 H 113 v -4 h -13 v -1 h 19 V 81.7 Z  m 1.9,2 H 117 V 111 H 82.8 Z"
	  };

	  icn["CY.IC.MOBILE"] = {
	    type: "path",
	    stroke: false,
	    d: "M 106,82 H 94.1 c -3,0 -4.2,2.4 -4.2,4.7 V 113 c 0,3 1.2,5 4.2,5 H 106 c 2,0 4,-2 4,-5 V 86.7 c 0,-2.3 -2,-4.7 -4,-4.7 z  m -7.9,32 c 0,-1 1,-1 1.9,-1 1,0 1,0 1,1 0,1 0,2 -1,2 -0.9,0 -1.9,-1 -1.9,-2 z  m -7.3,-3 V 87.8 H 108 V 111 Z  M 104,85.5 c 0,0.4 0,0.8 0,0.8 h -7.9 c -1,0 -1,-0.4 -1,-0.8 0,-0.8 0,-1.1 1,-1.1 h 7.9 c 0,0 0,0.3 0,1.1 z"
	  };

	  icn["CY.IC.TABLET"] = {
	    type: "path",
	    stroke: false,
	    d: "m 74.2,113 c 0,3 2,5 4.7,5 H 121 c 3,0 5,-2 5,-5 V 87.2 c 0,-2.7 -2,-4.7 -5,-4.7 H 78.8 c -2.6,0 -4.7,2 -4.7,4.7 z  m 4.7,2 V 84.8 H 119 V 115 Z  M 121,100 c 0,-1.2 0,-2 1,-2 1,0 2,0.8 2,2 0,1 -1,2 -2,2 -1,0 -1,-1 -1,-2 z"
	  };

	  icn["CY.IC.LAPTOP"] = {
	    type: "path",
	    stroke: false,
	    d: "m 123,81.9 v 0 H 77 c -1.2,0 -2.5,1.3 -2.5,2.9 V 109 c 0,1 1.3,3 2.5,3 h 46 c 1,0 2,-2 2,-3 V 84.8 c 0,-1.6 -1,-2.9 -2,-2.9 z  M 122,108 H 77.8 V 85.2 H 122 Z  m -52,5 c 0,3 2.9,5 6.2,5 H 123 c 4,0 7,-2 7,-5 z  m 35,3 h -8.9 v -1 h 8.9 z"
	  };

	  icn["CY.IC.HEALTH MONITOR"] = {
	    type: "path",
	    fill: false,
	    d: "m 112,98.5 h -8 l -4,6.5 -3.5,-9.9 -2.6,4.9 H 82.7 C 76.3,86.7 92.8,77 100,89 v 0 c 7,-12 24,-2.7 17,11 l -17,16 -11,-10"
	  };
	  icn["CY.IC.SMARTVEST"] = {
	    type: "path",
	    fill: false,
	    d: "m 85.3,116 c 0,0 17.7,4 29.7,-1 v 0 -14 l -4,-2.2 3,-14.2 -7,-1.6 c -1,8.6 -13.1,8.6 -14.3,0 l -6.6,1.6 2.3,14.7 -3.1,1.7 v 14 z  m 6.2,-11 h -6.2 v 1 h 6.2 z  m 0,6 h -6.2 v 1 h 6.2 z  m 23.5,-5 h -7 v 0 z  m 0,5 h -7 v 1 h 7 z  M 106,95.2 H 93.5 V 102 H 106 Z  m -10.4,3.6 h 1.6  m 2,0 h 0.8  m 2,0 h 3"
	  };
	  icn["CY.IC.SMARTWATCH"] = {
	    type: "path",
	    strokewidth: 1,
	    d: "M 106,88.5 105,84 c 0,-1.3 -1,-2.5 -1,-2.5 h -9.9 c -1.2,0 -2.4,1.2 -2.8,2.5 l -0.7,4.5 c -1.9,0.3 -3.5,2.3 -3.5,4.7 V 106 c 0,2 1.6,5 3.5,5 l 0.7,4 c 0.4,2 1.6,3 2.8,3 h 9.9 c 0,0 1,-1 1,-3 l 1,-4 c 3,0 4,-3 4,-5 V 93.2 c 0,-2.4 -1,-4.4 -4,-4.7 z  M 93.3,84.2 c 0.3,-0.2 0.3,-0.7 0.8,-0.7 h 9.9 c 0,0 0,0.5 0,0.7 v 4.3 H 92.9 Z  M 104,115 c 0,0 0,1 0,1 h -9.9 c -0.5,0 -0.5,-1 -0.8,-1 l -0.4,-4 H 104 Z  m 4,-9 c 0,2 -1,3 -3,3 H 91.7 C 90.2,109 89,108 89,106 V 93.2 c 0,-1.7 1.2,-2.7 2.7,-2.7 H 105 c 2,0 3,1 3,2.7 z  m 5,-7.8 v 2.8 c 0,0 -1,1 -1,1 -1,0 -1,-1 -1,-1 v -2.8 c 0,-0.5 0,-1 1,-1 0,0 1,0.5 1,1 z"
	  };
	  icn["CY.IC.WEARABLE"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 93.1,81.1 h -5.4 l -10.4,9.8 6.4,6.1 4.7,-4.8 c 0.4,-0.4 1.8,0 1.8,0.8 v 26 H 111 V 93 c 0,-0.7 1,-1.1 2,-0.7 l 4,4.7 6,-6.1 -10,-9.8 h -6 c -1,2.6 -5,4.3 -7.3,4.3 -2.7,0 -5.2,-1.7 -6.6,-4.3 z"
	    },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 2,
	      d: "m 93.25,100.9 c 9.05,0 14.65,5.6 14.65,13.1  m -14.65,-8.4 c 5.24,0 9.95,3.7 9.95,8.4  m -9.95,-4.7 c 2.81,0 5.24,2.8 5.24,4.7  m -4.02,0 c 0,0 -0.28,0 -0.47,0 -0.19,0 -0.65,0 -0.65,0 0,-0.9 0.18,-0.9 0.65,-0.9 0.28,0 0.47,0 0.47,0.9 z"
	    }
	  ];
	  icn["CY.IC.IOT"] = {
	    type: "path",
	    fill: false,
	    strokewidth: 5,
	    d: "M 92.49,83.01 V 101.6  M 100,89.31 a 14.4,14.4 0 0 1 6.9,12.29 v 0 A 14.4,14.4 0 0 1 92.5,116 14.4,14.4 0 0 1 78.1,101.6 14.4,14.4 0 0 1 84.52,89.61  m 26.88,-4.07 h 21.3  m -10.6,0.14 V 114.3  M 67.3,84.11 v 31.59"
	  };
	  icn["CY.IC.PRINTER"] = {
	    type: "path",
	    strokewidth: 1.5,
	    d: "m 89.13,107.9 h 21.77 v 1.2 H 89.13 Z  M 109,97.03 h 6.8 v 1.19 H 109 Z  M 89.13,111.6 h 21.77 v 1.2 H 89.13 Z  m 27.27,6 v -6.2 h 4.4 V 93.22 h -4.4 V 82.35 H 83.59 v 10.87 h -4.35 v 18.18 h 4.35 v 6.2 z  m -1.1,-1.2 H 84.82 v -12 H 115.3 Z  M 84.82,83.51 h 30.48 v 9.67 H 84.82 Z  M 80.47,110.2 V 94.37 h 39.13 v 15.83 h -3.2 v -7 H 83.63 v 7 z"
	  };
	  icn["CY.IC.ROUTER"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,81.8 c 10.1,0 18.2,8.14 18.2,18.2 0,10.1 -8.1,18.2 -18.2,18.2 -10.01,0 -18.19,-8.1 -18.19,-18.2 0,-10.02 8.14,-18.2 18.19,-18.2 z  m 3.3,8.22 -3.2,-3.21 -3.26,3.29  m 3.26,7.65 v -10.9  m 6.6,16.35 -3.2,-3.2 3.3,-3.25  m 7.6,3.25 h -10.9  m -6.66,10 3.16,3.2 3.3,-3.3  m -3.2,-7.7 v 10.9  m -6.59,-16.35 3.21,3.21 -3.29,3.24  M 85.74,100 h 10.9"
	  };
	  icn["CY.IC.SWITCH"] = {
	    type: "path",
	    stroke: false,
	    d: "M 92.85 81.63 L 88.07 87.39 L 91.08 87.39 L 91.08 98.78 C 91.06 99.01 91.05 99.24 91.05 99.47 C 91.05 101.2 91.58 102.8 92.49 104.2 L 87.09 104.2 L 87.09 101.3 L 81.33 106.1 L 83.93 108.3 L 84.46 108.7 L 87.09 110.9 L 87.09 108 L 99.59 108 C 101.4 108 103 107.5 104.4 106.5 L 104.4 112.6 L 101.4 112.6 L 103.6 115.2 L 104.1 115.7 L 106.2 118.4 L 108.4 115.7 L 108.8 115.2 L 111 112.6 L 108.2 112.6 L 108.2 100.5 L 108.1 100.5 C 108.2 100.2 108.2 99.82 108.2 99.47 C 108.2 97.7 107.6 96.05 106.7 94.69 L 112.9 94.69 L 112.9 97.63 L 115.5 95.45 L 116.1 94.99 L 118.7 92.81 L 112.9 87.99 L 112.9 90.93 L 99.59 90.93 C 97.83 90.93 96.2 91.47 94.84 92.38 L 94.84 87.39 L 97.67 87.39 L 92.85 81.63 z  M 99.59 94.69 C 102.3 94.69 104.4 96.8 104.4 99.47 C 104.4 102.2 102.3 104.2 99.59 104.2 C 96.89 104.2 94.81 102.2 94.81 99.47 L 94.84 99.47 L 94.84 98.94 C 95.1 96.52 97.09 94.69 99.59 94.69 z"
	  };
	  icn["CY.M1.DEFENSIVE CYBERSPACE"] = {
	    type: "path",
	    stroke: false,
	    d: "M 67.8,78 78.1,60.9 88.6,78 Z  M 112,78 122,60.9 132,78 Z  M 89.2,78 99.6,60.9 111,78 Z"
	  };
	  icn["CY.M1.OFFENSIVE CYBERSPACE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 75,66.7 h 40 V 59 l 10,9.7 -10,9.7 V 70.6 H 75 Z"
	  };
	  icn["CY.M1.SOCIAL"] = {
	    type: "path",
	    fill: false,
	    d: "m 107,69.5 h 11  m -6,-2 v 10.9  m 4,-15.6 a 3.87,3.65 0 0 1 -4,3.6 3.87,3.65 0 0 1 -4,-3.6 3.87,3.65 0 0 1 4,-3.7 3.87,3.65 0 0 1 4,3.7 z  M 94.9,69.5 H 105  m -5.1,-2 V 78.4  M 105,62.8 a 4.91,4.64 0 0 1 -5.1,4.6 4.91,4.64 0 0 1 -4.9,-4.6 4.91,4.64 0 0 1 4.9,-4.6 4.91,4.64 0 0 1 5.1,4.6 z  m -22.6,6.7 h 10.5  m -5.4,-2 v 10.9  m 4.3,-15.6 a 3.87,3.65 0 0 1 -3.9,3.6 3.87,3.65 0 0 1 -3.9,-3.6 3.87,3.65 0 0 1 3.9,-3.7 3.87,3.65 0 0 1 3.9,3.7 z"
	  };
	  icn["CY.M1.WIRED"] = {
	    type: "path",
	    fill: false,
	    d: "M 98.3,78.9 V 68.2  M 113,78.9 V 68.2  M 84.7,78.9 V 68.2  M 78.3,67.8 H 122  M 91.9,67 V 56.3  M 107,67 V 56.3  M 91.9,67.4 V 56.7  M 107,67.4 V 56.7  M 91.9,67 V 56.3  M 107,67 V 56.3"
	  };
	  icn["CY.M1.WIRELESS"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 85.7,74.3 c 0,-1.9 2.4,-3.9 5.2,-3.9 3.1,0 5.5,2 5.5,3.9 0,2.4 -2.4,4 -5.5,4 -2.8,0 -5.2,-1.6 -5.2,-4 z"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "M 114,75.5 C 114,65.3 103,56.6 89.3,56.6  M 109,75.5 c 0,-8.3 -9,-15 -19.7,-15  m 13.7,15 C 103,69.6 96.8,64.9 89.3,64.9"
	    }
	  ];
	  icn["CY.M1.RADIO FREQUENCY"] = textm1("RF");
	  icn["CY.M1.OPERATING SYSTEM"] = {
	    type: "path",
	    stroke: false,
	    d: "m 112.3,65.45 2.6,-0.86 c 0.1,-0.56 0.1,-1.15 0.1,-1.7 l -2.6,-1.01 c -0.1,-0.42 -0.3,-0.8 -0.5,-1.14 l 1.3,-2.5 C 113,58 112.9,57.79 112.7,57.58 112.5,57.37 112.2,57.16 112,56.99 l -2.5,1.11 c -0.4,-0.21 -0.8,-0.35 -1.1,-0.49 l -0.9,-2.67 c -0.6,-0.1 -1.1,-0.1 -1.7,0 l -1,2.6 c -0.4,0.1 -0.8,0.24 -1.2,0.42 l -2.5,-1.25 c -0.2,0.17 -0.4,0.35 -0.6,0.55 -0.2,0.18 -0.4,0.38 -0.6,0.59 l 1.1,2.57 c -0.2,0.38 -0.4,0.73 -0.5,1.14 l -2.64,0.84 c -0.1,0.59 -0.11,1.14 -0.1,1.73 l 2.64,1.01 c 0.1,0.38 0.3,0.76 0.4,1.14 l -1.28,2.5 c 0.18,0.21 0.39,0.45 0.58,0.66 0.2,0.2 0.4,0.38 0.6,0.59 l 2.6,-1.15 c 0.3,0.21 0.7,0.38 1.1,0.52 l 0.9,2.67 c 0.5,0.1 1.1,0.1 1.7,0 l 1,-2.6 c 0.4,-0.11 0.8,-0.25 1.2,-0.46 l 2.5,1.29 c 0.2,-0.18 0.4,-0.35 0.6,-0.56 0.2,-0.21 0.4,-0.41 0.6,-0.62 l -1.1,-2.57 c 0.2,-0.34 0.3,-0.73 0.5,-1.11 z  m -2.9,1.22 c -1.8,1.63 -4.5,1.56 -6.2,-0.21 -1.6,-1.74 -1.6,-4.51 0.2,-6.14 1.7,-1.66 4.5,-1.56 6.2,0.17 1.6,1.77 1.5,4.51 -0.2,6.18 z  m -12.27,6.76 2.77,-0.14 c 0.2,-0.52 0.4,-1.07 0.5,-1.63 L 98.17,70 c 0,-0.42 0,-0.84 -0.11,-1.22 l 1.88,-2.08 c -0.11,-0.28 -0.21,-0.52 -0.35,-0.76 -0.14,-0.28 -0.28,-0.52 -0.45,-0.76 l -2.78,0.41 C 96.09,65.31 95.77,65.04 95.43,64.83 L 95.29,62.02 C 94.77,61.81 94.21,61.64 93.66,61.5 l -1.67,2.25 c -0.41,0 -0.79,0 -1.21,0.14 L 88.7,61.98 c -0.24,0.11 -0.52,0.25 -0.76,0.39 -0.25,0.1 -0.49,0.27 -0.73,0.41 l 0.41,2.78 c -0.31,0.27 -0.55,0.62 -0.79,0.93 l -2.81,0.14 c -0.21,0.52 -0.38,1.08 -0.49,1.63 l 2.26,1.67 c 0,0.41 0,0.83 0.1,1.21 l -1.91,2.08 c 0.11,0.24 0.25,0.52 0.38,0.76 0.14,0.28 0.28,0.52 0.42,0.77 l 2.78,-0.42 c 0.31,0.28 0.62,0.56 0.97,0.76 l 0.1,2.81 c 0.52,0.21 1.08,0.38 1.63,0.49 l 1.7,-2.22 c 0.38,0 0.8,0 1.21,-0.14 l 2.05,1.91 c 0.28,-0.11 0.52,-0.25 0.8,-0.38 0.24,-0.11 0.48,-0.28 0.73,-0.42 l -0.42,-2.77 c 0.31,-0.28 0.55,-0.63 0.8,-0.94 z  m -3.12,0.38 c -2.12,1.14 -4.76,0.31 -5.9,-1.8 -1.11,-2.12 -0.31,-4.79 1.8,-5.9 2.15,-1.14 4.79,-0.31 5.9,1.8 1.14,2.12 0.31,4.79 -1.8,5.9 z"
	  };
	  icn["CY.M1.CONTINUITY OF OPERATIONS"] = {
	    type: "path",
	    strokewidth: 1.5,
	    d: "m 101.6,56.69 v 1.17 c 6.4,0.34 10.8,1.53 13.6,3.08 2.8,1.55 3.8,3.38 3.7,5.18 -0.1,1.8 -1.3,3.73 -3.7,5.33 -2.1,1.48 -5.2,2.66 -9,3.17 L 107,72 101.6,75.47 108,78 106.2,75.8 c 3.9,-0.52 7.3,-1.75 9.7,-3.39 2.5,-1.73 4.1,-3.93 4.2,-6.24 0.1,-2.31 -1.3,-4.57 -4.3,-6.25 -3,-1.68 -7.6,-2.88 -14.2,-3.23 z  M 93,55 l 1.01,2.1 c -5.57,0.7 -9.33,2.13 -11.6,4.01 -2.36,1.96 -3.02,4.49 -2.16,6.81 0.85,2.31 3.08,4.4 6.26,5.9 3.18,1.5 7.33,2.4 12.11,2.28 V 74.92 C 93.97,75.05 90,74.17 87.01,72.76 c -2.99,-1.41 -4.97,-3.35 -5.67,-5.25 -0.7,-1.9 -0.26,-3.77 1.82,-5.5 1.99,-1.64 5.54,-3.05 10.94,-3.74 L 94,61 98.6,57.31 Z"
	  };
	  icn["CY.M1.INTERNET SERVICE PROVIDER"] = textm1("ISP");
	  icn["CY.M1.FINANCE"] = textm1("$");
	  icn["CY.M1.OUT OF BAND"] = {
	    type: "path",
	    fill: false,
	    d: "m 112.3,67.96 a 2.714,2.714 0 0 1 -2.7,2.71 2.714,2.714 0 0 1 -2.7,-2.71 2.714,2.714 0 0 1 2.7,-2.71 2.714,2.714 0 0 1 2.7,2.71 z  m -10.5,0 a 2.714,2.714 0 0 1 -2.74,2.71 2.714,2.714 0 0 1 -2.71,-2.71 2.714,2.714 0 0 1 2.71,-2.71 2.714,2.714 0 0 1 2.74,2.71 z  m -9.66,0 a 2.714,2.714 0 0 1 -2.71,2.71 2.714,2.714 0 0 1 -2.71,-2.71 2.714,2.714 0 0 1 2.71,-2.71 2.714,2.714 0 0 1 2.71,2.71 z  m 21.46,9.63 7.7,-10.4 -7.7,-9.18  m -27.08,0 -7.82,10.31 7.59,9.27"
	  };
	  icn["CY.M1.CLOUD"] = {
	    type: "path",
	    fill: false,
	    d: "m 103,55.74 c -3,0 -5.77,1.49 -7.52,3.94 -0.44,-0.13 -0.92,-0.2 -1.41,-0.21 -2.46,0 -4.6,1.65 -5.28,4.01 -3.97,1.05 -6.36,5.12 -5.31,9.1 0.86,3.27 3.83,5.51 7.22,5.51 h 18.7 c 4,0 7.4,-3.29 7.4,-7.41 0,-3.02 -1.8,-5.75 -4.5,-6.9 -0.7,-4.6 -4.6,-8.03 -9.3,-8.04 z"
	  };
	  icn["CY.M1.DATA"] = {
	    type: "path",
	    fill: false,
	    d: "m 90.81,63.07 h 7.65 V 55.96  M 90.81,77.5 V 63.07 l 7.29,-7.11 h 11.1 V 77.5 Z"
	  };

	  icn["CY.M2.SECURED"] = {
	    type: "path",
	    stroke: false,
	    d: "m 95.66,132 h 8.74 v -3.3 c 0,-1.2 -0.5,-2.2 -1.3,-3.1 -0.9,-0.8 -1.9,-1.2 -3.1,-1.2 -1.14,0 -2.14,0.4 -3.04,1.2 -0.9,0.9 -1.3,1.9 -1.3,3.1 z  m 14.14,1.6 v 9.9 c 0,0.4 -0.2,0.8 -0.5,1.1 -0.3,0.3 -0.7,0.5 -1.1,0.5 H 91.84 c -0.45,0 -0.85,-0.2 -1.17,-0.5 -0.32,-0.3 -0.49,-0.7 -0.49,-1.1 v -9.9 c 0,-0.4 0.17,-0.8 0.49,-1.1 0.32,-0.4 0.72,-0.5 1.17,-0.5 h 0.52 v -3.3 c 0,-2.1 0.8,-3.9 2.3,-5.4 1.5,-1.5 3.3,-2.3 5.34,-2.3 2.1,0 3.9,0.8 5.4,2.3 1.5,1.5 2.2,3.3 2.2,5.4 v 3.3 h 0.6 c 0.4,0 0.8,0.1 1.1,0.5 0.3,0.3 0.5,0.7 0.5,1.1 z"
	  };
	  icn["CY.M2.OPEN"] = {
	    type: "path",
	    stroke: false,
	    d: "m 107.7,129 c 0,-1.2 0.3,-2.3 1,-3.1 0.7,-0.9 1.6,-1.3 2.6,-1.3 1,0 1.8,0.4 2.6,1.3 0.6,0.8 1,1.9 1,3.1 v 2.8 h 2.7 V 129 c 0,-2.1 -0.6,-3.9 -1.8,-5.5 -1.3,-1.5 -2.8,-2.2 -4.5,-2.2 -1.7,0 -3.2,0.7 -4.5,2.2 -1.2,1.6 -1.8,3.4 -1.8,5.5 v 2.8 h 2.7 z  m 0.7,2.9 h -0.5 v -0.5 h -3.4 v 0.5 h -8.81 v -0.5 h -3.32 v 0.5 h -0.53 c -0.48,0 -0.85,0.2 -1.17,0.5 -0.33,0.3 -0.49,0.7 -0.49,1.2 v 9.9 c 0,0.5 0.16,0.9 0.49,1.2 0.32,0.3 0.69,0.5 1.17,0.5 h 16.56 c 0.5,0 0.9,-0.2 1.2,-0.5 0.3,-0.3 0.5,-0.7 0.5,-1.2 v -9.9 c 0,-0.5 -0.2,-0.9 -0.5,-1.2 -0.3,-0.3 -0.7,-0.5 -1.2,-0.5 z"
	  };
	  icn["CY.M2.RESPONSE ACTIONS"] = textm2("RA");
	  icn["CY.M2.INTERNAL DEFENSE MEASURES"] = textm2("IDM");
	  icn["CY.M2.ADVANCED PERSISTENT THREAT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 101.3,142.1 a 1.47,1.47 0 0 1 -1.42,1.5 1.47,1.47 0 0 1 -1.47,-1.5 1.47,1.47 0 0 1 1.47,-1.5 1.47,1.47 0 0 1 1.42,1.5 z  m -2.34,-3.1 -0.4,-11.6 2.34,0 -0.3,11.6 z"
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 90.04,126.9 v 9.2 c 0,6.3 9.96,10.4 9.96,10.4 0,0 10,-4.1 10,-10.4 v -9.6 c -3.3,0 -8,-1.2 -10,-3.5 -2.35,2.3 -6.73,3.9 -9.96,3.9 z"
	    }
	  ];
	  icn["CY.M2.NATION STATE"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 91.16,142.9 -9.03,-10.5 9.03,-10.5 9.04,10.5 z  m 17.94,0 -8.9,-10.5 8.9,-10.5 8.8,10.5 z"
	    },
	    {
	      type: "path",
	      fill: white,
	      strokewidth: 1,
	      d: "m 100,121.6 9.1,10.5 -9.1,10.4 -9.02,-10.4 z"
	    }
	  ];
	  icn["CY.M2.NATION STATE SPONSORED"] = [
	    {
	      type: "path",
	      fill: white,
	      strokewidth: 1,
	      d: "m 100,121.6 9.1,10.5 -9.1,10.4 -9.02,-10.4 z"
	    },
	    {
	      type: "path",
	      stroke: false,
	      d: "m 91.16,142.9 -9.03,-10.5 9.03,-10.5 9.04,10.5 z  m 17.94,0 -8.9,-10.5 8.9,-10.5 8.8,10.5 z"
	    }
	  ];
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };
	  icn["CY.M2."] = { type: "path", d: "" };

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var ground = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5],
	  icons: function ground(sId, bbox, icn, _STD2525) {
	    // GROUND ========================================================================
	    sId["S-G-------"] = [];
	    sId["S-G-U-----"] = [];
	    sId["S-G-UC----"] = [icn["GR.IC.COMBAT"]];
	    sId["S-G-UCD---"] = [icn["GR.IC.FF.AIR DEFENCE"]];
	    sId["S-G-UCDS--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE SHORT RANGE"],
	    ];
	    sId["S-G-UCDSC-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.AIR DEFENSE CHAPARRAL"],
	    ];
	    sId["S-G-UCDSS-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.AIR DEFENSE STINGER"],
	    ];
	    sId["S-G-UCDSV-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.FF.MAIN GUN SYSTEM"],
	      icn["GR.IC.AIR DEFENSE VULCAN"],
	    ];
	    sId["S-G-UCDM--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	    ];
	    sId["S-G-UCDML-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.MISSILE.LIGHT"],
	    ];
	    sId["S-G-UCDMLA"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.FF.MOTORIZED"],
	    ];
	    sId["S-G-UCDMM-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.MISSILE.MEDIUM"],
	    ];
	    sId["S-G-UCDMH-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.MISSILE.HEAVY"],
	    ];
	    sId["S-G-UCDH--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE H/MAD"],
	    ];
	    sId["S-G-UCDHH-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.AIR DEFENSE H/MAD HAWK"],
	    ];
	    sId["S-G-UCDHP-"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE MISSILE"],
	      icn["GR.IC.AIR DEFENSE H/MAD PATRIOT"],
	    ];
	    sId["S-G-UCDG--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE GUN UNIT"],
	    ];
	    sId["S-G-UCDC--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE COMPOSITE"],
	    ];
	    sId["S-G-UCDT--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE TARGETING UNIT"],
	    ];
	    sId["S-G-UCDO--"] = [
	      icn["GR.IC.FF.AIR DEFENCE"],
	      icn["GR.IC.AIR DEFENSE THEATER MISSILE DEFENSE UNIT"],
	    ];
	    sId["S-G-UCA---"] = [icn["GR.IC.ARMOUR"]];
	    sId["S-G-UCAT--"] = [icn["GR.IC.ARMOUR"]];
	    sId["S-G-UCATA-"] = [icn["GR.IC.ARMOUR"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCATW-"] = [icn["GR.IC.ARMOUR"], icn["GR.IC.FF.AMPHIBIOUS"]];
	    sId["S-G-UCATWR"] = [
	      icn["GR.IC.ARMOUR"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	      icn["GR.M2.RECOVERY (MAINTENANCE)"],
	    ];
	    sId["S-G-UCATL-"] = [icn["GR.IC.ARMOUR"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCATM-"] = [icn["GR.IC.ARMOUR"], icn["GR.M2.MEDIUM"]];
	    sId["S-G-UCATH-"] = [icn["GR.IC.ARMOUR"], icn["GR.M2.HEAVY"]];
	    sId["S-G-UCATR-"] = [
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.RECOVERY (MAINTENANCE)"],
	    ];
	    sId["S-G-UCAW--"] = [icn["GR.IC.ARMOR, WHEELED"]];
	    sId["S-G-UCAWS-"] = [
	      icn["GR.IC.ARMOR, WHEELED"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCAWA-"] = [icn["GR.IC.ARMOR, WHEELED"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCAWW-"] = [
	      icn["GR.IC.ARMOR, WHEELED"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	    ];
	    sId["S-G-UCAWWR"] = [
	      icn["GR.IC.ARMOR, WHEELED"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	      icn["GR.M2.RECOVERY (MAINTENANCE)"],
	    ];
	    sId["S-G-UCAWL-"] = [icn["GR.IC.ARMOR, WHEELED"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCAWM-"] = [icn["GR.IC.ARMOR, WHEELED"], icn["GR.M2.MEDIUM"]];
	    sId["S-G-UCAWH-"] = [icn["GR.IC.ARMOR, WHEELED"], icn["GR.M2.HEAVY"]];
	    sId["S-G-UCAWR-"] = [
	      icn["GR.IC.ARMOR, WHEELED"],
	      icn["GR.M2.RECOVERY (MAINTENANCE)"],
	    ];
	    sId["S-G-UCAA--"] = [icn["GR.IC.FF.ANTITANK/ANTIARMOUR"]];
	    sId["S-G-UCAAD-"] = [icn["GR.IC.FF.ANTITANK/ANTIARMOUR"]];
	    sId["S-G-UCAAL-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.M2.LIGHT"],
	    ];
	    sId["S-G-UCAAM-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.M2.AIRBORNE"],
	    ];
	    sId["S-G-UCAAS-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCAAU-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.M2.MOUNTAIN"],
	    ];
	    sId["S-G-UCAAC-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.M2.ARCTIC"],
	    ];
	    sId["S-G-UCAAA-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCAAAT"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCAAAW"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	    ];
	    sId["S-G-UCAAAS"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCAAO-"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.FF.MOTORIZED"],
	    ];
	    sId["S-G-UCAAOS"] = [
	      icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	      icn["GR.IC.FF.MOTORIZED"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCV---"] = [icn["GR.IC.AVIATION ROTARY WING"]];
	    sId["S-G-UCVF--"] = [icn["GR.IC.AVIATION FIXED WING"]];
	    sId["S-G-UCVFU-"] = [
	      icn["GR.IC.AVIATION FIXED WING"],
	      icn["GR.M1.UTILITY"],
	    ];
	    sId["S-G-UCVFA-"] = [icn["GR.IC.AVIATION FIXED WING"], icn["GR.M1.ATTACK"]];
	    sId["S-G-UCVUTP"] = [icn["GR.IC.AVIATION TACTICAL AIR CONTROL PARTY"]];
	    sId["S-G-UCVUFC"] = [icn["GR.IC.AVIATION FORWARD AIR CONTROLLER"]];
	    sId["S-G-UCVFR-"] = [icn["GR.IC.AVIATION FIXED WING"], icn["GR.M1.RECON"]];
	    sId["S-G-UCVR--"] = _STD2525
	      ? [
	          icn["GR.IC.AVIATION ROTARY WING"],
	          icn["GR.IC.AVIATION ROTARY WING 2525C"],
	        ]
	      : [icn["GR.IC.AVIATION ROTARY WING"]];
	    sId["S-G-UCVRA-"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.ATTACK"],
	    ];
	    sId["S-G-UCVRS-"] = [icn["GR.IC.AVIATION ROTARY WING"], icn["GR.M1.RECON"]];
	    sId["S-G-UCVRW-"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-G-UCVRU-"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.UTILITY"],
	    ];
	    sId["S-G-UCVRUL"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.UTILITY"],
	      icn["GR.M2.LIGHT"],
	    ];
	    sId["S-G-UCVRUM"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.UTILITY"],
	      icn["GR.M2.MEDIUM"],
	    ];
	    sId["S-G-UCVRUH"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.UTILITY"],
	      icn["GR.M2.HEAVY"],
	    ];
	    sId["S-G-UCVRUC"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.COMMAND AND CONTROL ROTARY WING"],
	    ];
	    sId["S-G-UCVRUE"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.MEDEVAC"],
	    ];
	    sId["S-G-UCVRM-"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.MINE COUNTERMEASURE"],
	    ];
	    sId["S-G-UCVS--"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.PERSONNEL RECOVERY"],
	    ];
	    sId["S-G-UCVC--"] = [icn["GR.IC.AVIATION COMPOSITE"]];
	    sId["S-G-UCVV--"] = [
	      icn["GR.IC.AVIATION FIXED WING"],
	      icn["GR.M2.VERTICAL OR SHORT TAKE-OFF AND LANDING "],
	    ];
	    sId["S-G-UCVU--"] = [icn["GR.IC.UNMANNED SYSTEMS"]];
	    sId["S-G-UCVUF-"] = [
	      icn["GR.IC.AVIATION FIXED WING"],
	      icn["GR.M1.UNMANNED AERIAL VEHICLE"],
	    ];
	    //1.X.3.1.1.4.6.1.1 WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCVU--'] = [icn['GR.IC.UNMANNED SYSTEMS'],icn['GR.M2.CONTROL']];
	    //1.X.3.1.1.4.6.1.2 WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCVU--'] = [icn['GR.IC.UNMANNED SYSTEMS'],icn['GR.M2.LAUNCHER']];
	    //1.X.3.1.1.4.6.1.3 WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCVU--'] = [icn['GR.IC.UNMANNED SYSTEMS'],icn['GR.M2.RECOVERY (UNMANNED SYSTEMS)']];
	    sId["S-G-UCVUR-"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.UNMANNED AERIAL VEHICLE"],
	    ];
	    sId["S-G-UCI---"] = [icn["GR.IC.FF.INFANTRY"]];
	    sId["S-G-UCIL--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCIM--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.FF.MOTORIZED"]];
	    sId["S-G-UCIO--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.M2.MOUNTAIN"]];
	    sId["S-G-UCIA--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCIS--"] = [
	      icn["GR.IC.FF.INFANTRY"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCIZ--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.ARMOUR"]];
	    sId["S-G-UCIN--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.FF.NAVAL"]];
	    sId["S-G-UCII--"] = [
	      icn["GR.IC.FF.INFANTRY"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.IC.FF.MAIN GUN SYSTEM"],
	    ];
	    sId["S-G-UCIC--"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.M2.ARCTIC"]];
	    //1.X.3.1.1.5.10  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCIC--'] = [icn['GR.IC.FF.INFANTRY'],icn['GR.M1.SNIPER']];
	    sId["S-G-UCE---"] = [icn["GR.IC.ENGINEER"]];
	    sId["S-G-UCEC--"] = [icn["GR.IC.ENGINEER"], icn["GR.M1.COMBAT"]];
	    sId["S-G-UCECS-"] = [
	      icn["GR.IC.ENGINEER"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCECA-"] = [icn["GR.IC.ENGINEER"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCECC-"] = [icn["GR.IC.ENGINEER"], icn["GR.M2.ARCTIC"]];
	    sId["S-G-UCECL-"] = [
	      icn["GR.IC.ENGINEER"],
	      icn["GR.M1.COMBAT"],
	      icn["GR.M2.LIGHT"],
	    ];
	    sId["S-G-UCECM-"] = [
	      icn["GR.IC.ENGINEER"],
	      icn["GR.M1.COMBAT"],
	      icn["GR.M2.MEDIUM"],
	    ];
	    sId["S-G-UCECH-"] = [
	      icn["GR.IC.ENGINEER"],
	      icn["GR.M1.COMBAT"],
	      icn["GR.M2.HEAVY"],
	    ];
	    sId["S-G-UCECT-"] = [
	      ms._scale(0.7, icn["GR.IC.ENGINEER"]),
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCECW-"] = [icn["GR.IC.ENGINEER"], icn["GR.IC.FF.MOTORIZED"]];
	    sId["S-G-UCECO-"] = [icn["GR.IC.ENGINEER"], icn["GR.M2.MOUNTAIN"]];
	    sId["S-G-UCECR-"] = [icn["GR.IC.ENGINEER"], icn["GR.IC.FF.RECONNAISSANCE"]];
	    //1.X.3.1.1.6.1.11  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCEC--'] = [
	    //1.X.3.1.1.6.1.12  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCEC--'] = [
	    //1.X.3.1.1.6.1.13  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCEC--'] = [
	    //1.X.3.1.1.6.1.14  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCEC--'] = [
	    sId["S-G-UCEN--"] = [icn["GR.IC.ENGINEER"], icn["GR.M1.CONSTRUCTION"]];
	    sId["S-G-UCENN-"] = [icn["GR.IC.ENGINEER"], icn["GR.M1.NAVAL"]];
	    sId["S-G-UCF---"] = [icn["GR.IC.FIELD ARTILLERY"]];
	    sId["S-G-UCFH--"] = [icn["GR.IC.FIELD ARTILLERY"]];
	    sId["S-G-UCFHE-"] = [
	      ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCFHS-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCFHA-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCFHC-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.ARCTIC"]];
	    sId["S-G-UCFHO-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.MOUNTAIN"]];
	    sId["S-G-UCFHL-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCFHM-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.MEDIUM"]];
	    sId["S-G-UCFHH-"] = [icn["GR.IC.FIELD ARTILLERY"], icn["GR.M2.HEAVY"]];
	    sId["S-G-UCFHX-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	    ];
	    sId["S-G-UCFR--"] = [icn["GR.IC.FF.FIELD ARTILLERY ROCKET"]];
	    sId["S-G-UCFRS-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.SINGLE ROCKET LAUNCHER"],
	    ];
	    sId["S-G-UCFRS-"] = [
	      ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	      icn["GR.M1.SINGLE ROCKET LAUNCHER"],
	      _STD2525 ? [] : icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCFRSS"] = [
	      ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	      icn["GR.M1.SINGLE ROCKET LAUNCHER"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCFRSR"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.SINGLE ROCKET LAUNCHER"],
	      icn["GR.M2.TRUCK"],
	    ];
	    sId["S-G-UCFRST"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.SINGLE ROCKET LAUNCHER"],
	      icn["GR.M2.TOWED"],
	    ];
	    sId["S-G-UCFRM-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.MULTIPLE ROCKET LAUNCHER"],
	      _STD2525 ? "" : icn["GR.M2.CROSS-COUNTRY TRUCK"],
	    ];
	    sId["S-G-UCFRMS"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.MULTIPLE ROCKET LAUNCHER"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCFRMR"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.MULTIPLE ROCKET LAUNCHER"],
	      icn["GR.M2.TRUCK"],
	    ];
	    sId["S-G-UCFRMT"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.MULTIPLE ROCKET LAUNCHER"],
	      icn["GR.M2.TOWED"],
	    ];
	    sId["S-G-UCFT--"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M2.TARGET ACQUISITION"],
	    ];
	    sId["S-G-UCFTR-"] = [
	      ms._translate(-30, 10, ms._scale(0.6, icn["GR.IC.FIELD ARTILLERY"])),
	      icn["GR.IC.RADAR"],
	    ];
	    sId["S-G-UCFTS-"] = [
	      ms._translate(0, 30, ms._scale(0.7, icn["GR.IC.FIELD ARTILLERY"])),
	      icn["GR.IC.FF.SOUND"],
	    ];
	    sId["S-G-UCFTF-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.M1.OPTICAL"],
	      icn["GR.M2.TARGET ACQUISITION"],
	    ];
	    sId["S-G-UCFTC-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.IC.FF.MOTORIZED"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	    ];
	    sId["S-G-UCFTCD"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	    ];
	    sId["S-G-UCFTCM"] = [
	      ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UCFTA-"] = [
	      icn["GR.IC.FIELD ARTILLERY"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["GR.M1.NAVAL"],
	    ];
	    sId["S-G-UCFM--"] = [icn["GR.IC.MORTAR"]];
	    sId["S-G-UCFMS-"] = [icn["GR.IC.MORTAR"], icn["GR.M2.TRACKED"]];
	    sId["S-G-UCFMW-"] = sId["S-G-UCFMSW"] = [
	      icn["GR.IC.MORTAR"],
	      icn["GR.M2.TRUCK"],
	    ];
	    sId["S-G-UCFMT-"] = [icn["GR.IC.MORTAR"], icn["GR.M2.TOWED"]];
	    sId["S-G-UCFMTA"] = [
	      icn["GR.IC.MORTAR"],
	      icn["GR.M2.TOWED"],
	      icn["GR.M2.AIRBORNE"],
	    ];
	    sId["S-G-UCFMTS"] = [
	      icn["GR.IC.MORTAR"],
	      icn["GR.M2.TOWED"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCFMTC"] = [icn["GR.IC.MORTAR"], icn["GR.M2.ARCTIC"]];
	    sId["S-G-UCFMTO"] = [
	      icn["GR.IC.MORTAR"],
	      icn["GR.M2.TOWED"],
	      icn["GR.M2.MOUNTAIN"],
	    ];
	    sId["S-G-UCFML-"] = [
	      ms._translate(0, -20, icn["GR.IC.MORTAR"]),
	      icn["GR.IC.FF.AMPHIBIOUS"],
	    ];
	    sId["S-G-UCFS--"] = [icn["GR.IC.SURVEY"]];
	    sId["S-G-UCFSS-"] = [
	      icn["GR.IC.SURVEY"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCFSA-"] = [icn["GR.IC.SURVEY"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCFSL-"] = [icn["GR.IC.SURVEY"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCFSO-"] = [icn["GR.IC.SURVEY"], icn["GR.M2.MOUNTAIN"]];
	    sId["S-G-UCFO--"] = [icn["GR.IC.METEOROLOGICAL"]];
	    sId["S-G-UCFOS-"] = [
	      icn["GR.IC.METEOROLOGICAL"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCFOA-"] = [icn["GR.IC.METEOROLOGICAL"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCFOL-"] = [icn["GR.IC.METEOROLOGICAL"], icn["GR.M2.LIGHT"]];
	    sId["S-G-UCFOO-"] = [icn["GR.IC.METEOROLOGICAL"], icn["GR.M2.MOUNTAIN"]];
	    //1.X.3.1.1.7.7  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCF---'] = [icn['GR.IC.FIELD ARTILLERY'],icn['GR.M1.FIRE DIRECTION CENTRE']];
	    //1.X.3.1.1.7.8  WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UCF---'] = [icn['GR.IC.FIELD ARTILLERY OBSERVER']];
	    sId["S-G-UCR---"] = [icn["GR.IC.FF.RECONNAISSANCE"]];
	    sId["S-G-UCRH--"] = [icn["GR.IC.FF.HORSE"]];
	    sId["S-G-UCRV--"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      _STD2525 ? icn["GR.M2.CAVALRY"] : [],
	    ];
	    sId["S-G-UCRVA-"] = [icn["GR.IC.FF.RECONNAISSANCE"], icn["GR.IC.ARMOUR"]];
	    sId["S-G-UCRVM-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.FF.MOTORIZED"],
	    ];
	    sId["S-G-UCRVG-"] = [icn["GR.IC.FF.RECONNAISSANCE"]];
	    sId["S-G-UCRVO-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.AVIATION ROTARY WING"],
	    ];
	    sId["S-G-UCRC--"] = [icn["GR.IC.FF.RECONNAISSANCE"], icn["GR.M2.ARCTIC"]];
	    sId["S-G-UCRS--"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.M1.AIRMOBILE/AIR ASSAULT"],
	    ];
	    sId["S-G-UCRA--"] = [icn["GR.IC.FF.RECONNAISSANCE"], icn["GR.M2.AIRBORNE"]];
	    sId["S-G-UCRO--"] = [icn["GR.IC.FF.RECONNAISSANCE"], icn["GR.M2.MOUNTAIN"]];
	    sId["S-G-UCRL--"] = sId["S-G-UCRLL-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.M2.LIGHT"],
	    ];
	    sId["S-G-UCRR--"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	    ];
	    sId["S-G-UCRRD-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	      _STD2525 ? icn["GR.M1.MARINE DIVISION"] : [],
	    ];
	    sId["S-G-UCRRF-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.FF.AMPHIBIOUS"],
	      icn["GR.M1.FORCE"],
	    ];
	    sId["S-G-UCRRL-"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	    ];
	    sId["S-G-UCRX--"] = [
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      _STD2525
	        ? icn["GR.M2.LONG RANGE SURVEILLANCE"]
	        : [
	            ms._translate(0, -20, icn["GR.M2.MOUNTAIN"]),
	            icn["GR.M2.LONG RANGE"],
	          ],
	    ];
	    sId["S-G-UCM---"] = [icn["GR.IC.MISSILE"]];
	    sId["S-G-UCMT--"] = [icn["GR.IC.MISSILE"], icn["GR.M2.TACTICAL MISSILE"]];
	    sId["S-G-UCMS--"] = [icn["GR.IC.MISSILE"], icn["GR.M2.STRATEGIC MISSILE"]];
	    sId["S-G-UCS---"] = [icn["GR.IC.SECURITY"]];
	    sId["S-G-UCSW--"] = [
	      ms._translate(0, -20, icn["GR.IC.SECURITY"]),
	      icn["GR.IC.FF.AMPHIBIOUS"],
	    ];
	    sId["S-G-UCSG--"] = [icn["GR.IC.SECURITY"]];
	    sId["S-G-UCSGD-"] = [icn["GR.IC.SECURITY"], icn["GR.IC.FF.INFANTRY"]];
	    sId["S-G-UCSGM-"] = [icn["GR.IC.SECURITY"], icn["GR.IC.FF.MOTORIZED"]];
	    sId["S-G-UCSGA-"] = [icn["GR.IC.SECURITY"], icn["GR.IC.ARMOUR"]];
	    sId["S-G-UCSM--"] = [
	      icn["GR.IC.SECURITY"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	    ];
	    sId["S-G-UCSR--"] = [icn["GR.IC.SECURITY"], icn["GR.M2.RAILROAD"]];
	    sId["S-G-UCSA--"] = [
	      ms._translate(0, -20, icn["GR.IC.SECURITY"]),
	      icn["GR.IC.AVIATION ROTARY WING"],
	    ];
	    sId["S-G-F-S---"] = icn["GR.IC.SURVEILLANCE"];
	    sId["S-G-UU----"] = [icn["GR.IC.COMBAT SUPPORT"]];
	    sId["S-G-UUA---"] = [icn["GR.IC.CBRN"]];
	    sId["S-G-UUAC--"] = [icn["GR.IC.CBRN"], icn["GR.M1.CHEMICAL"]];
	    sId["S-G-UUACC-"] = [icn["GR.IC.CBRN"], icn["GR.M1.SMOKE/DECON"]];
	    sId["S-G-UUACCK"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.SMOKE/DECON"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UUACCM"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.SMOKE/DECON"],
	      icn["GR.IC.FF.MOTORIZED"],
	    ];
	    sId["S-G-UUACS-"] = [icn["GR.IC.CBRN"], icn["GR.M1.SMOKE"]];
	    sId["S-G-UUACSM"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.SMOKE"],
	      icn["GR.IC.FF.MOTORIZED"],
	    ];
	    sId["S-G-UUACSA"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.SMOKE"],
	      icn["GR.IC.ARMOUR"],
	    ];
	    sId["S-G-UUACR-"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.CHEMICAL"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	    ];
	    sId["S-G-UUACRW"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	    ];
	    sId["S-G-UUACRS"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	      _STD2525 ? icn["GR.M1.CHEMICAL SURVEILLANCE"] : [],
	    ];
	    sId["S-G-UUAN--"] = [icn["GR.IC.CBRN"], icn["GR.M1.NUCLEAR"]];
	    sId["S-G-UUAB--"] = [icn["GR.IC.CBRN"], icn["GR.M1.BIOLOGICAL"]];
	    sId["S-G-UUABR-"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.BIOLOGICAL"],
	      icn["GR.IC.FF.MOTORIZED"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	    ];
	    sId["S-G-UUAD--"] = [icn["GR.IC.CBRN"], icn["GR.M1.DECONTAMINATION"]];
	    sId["S-G-UUADT-"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.DECONTAMINATION"],
	      icn["GR.M2.TROOP"],
	    ];
	    sId["S-G-UUADE-"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.DECONTAMINATION"],
	      icn["GR.M2.EQUIPMENT"],
	    ];
	    sId["S-G-UUADET"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.M1.DECONTAMINATION"],
	      icn["GR.M2.EQUIMENT/TROOP"],
	    ];
	    sId["S-G-UUAL--"] = [icn["GR.IC.CBRN"], icn["GR.M2.LABORATORY"]];
	    sId["S-G-UUM---"] = [icn["GR.IC.MILITARY INTELLIGENCE"]];
	    sId["S-G-UUMA--"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.UNMANNED AERIAL VEHICLE"],
	    ];
	    sId["S-G-UUMS--"] = [
	      ms._translate(-25, 0, icn["GR.IC.MILITARY INTELLIGENCE"]),
	      icn["GR.IC.RADIO"],
	    ];
	    sId["S-G-UUMSE-"] = [icn["GR.IC.ELECTRONIC WARFARE"]];
	    sId["S-G-UUMSEA"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.RECONNAISSANCE"],
	      icn["GR.IC.ARMOUR"],
	      icn["GR.M2.WHEELED"],
	    ];
	    sId["S-G-UUMSED"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.DIRECTION FINDING"],
	    ];
	    sId["S-G-UUMSEI"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.INTERCEPT"],
	    ];
	    sId["S-G-UUMSEJ"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.JAMMING"],
	    ];
	    sId["S-G-UUMSET"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-UUMSEC"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-UUMC--"] = [icn["GR.IC.COUNTER-INTELLIGENCE"]];
	    sId["S-G-UUMR--"] = [icn["GR.IC.MILITARY INTELLIGENCE"]];
	    sId["S-G-UUMRG-"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.RADAR"],
	    ];
	    sId["S-G-UUMRS-"] = [
	      ms._translate(0, 30, ms._scale(0.8, icn["GR.IC.MILITARY INTELLIGENCE"])),
	      icn["GR.IC.FF.SENSOR"],
	    ];
	    sId["S-G-UUMRSS"] = [
	      ms._translate(0, 30, ms._scale(0.8, icn["GR.IC.MILITARY INTELLIGENCE"])),
	      icn["GR.IC.FF.SENSOR"],
	      icn["GR.M1.SENSOR CONTROL MODULE"],
	    ];
	    sId["S-G-UUMRX-"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.GROUND STATION MODULE"],
	    ];
	    sId["S-G-UUMMO-"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.METEOROLOGICAL"],
	    ];
	    sId["S-G-UUMO--"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.OPERATIONS"],
	    ];
	    sId["S-G-UUMT--"] = [
	      icn["GR.IC.MILITARY INTELLIGENCE"],
	      icn["GR.M1.TACTICAL EXPLOITATION"],
	    ];
	    sId["S-G-UUMQ--"] = [icn["GR.IC.INTERROGATION"]];
	    sId["S-G-UUMJ--"] = [icn["GR.IC.JOINT INTELLIGENCE CENTRE"]];
	    sId["S-G-UUL---"] = [
	      icn["GR.IC.FF.MILITARY POLICE"],
	      icn["GR.IC.MILITARY POLICE"],
	    ];
	    sId["S-G-UULS--"] = [icn["GR.IC.SHORE PATROL"]];
	    sId["S-G-UULM--"] = [icn["GR.IC.MILITARY POLICE"]];
	    sId["S-G-UULC--"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	    sId["S-G-UULF--"] = [
	      ms._translate(0, -25, ms._scale(0.8, icn["GR.IC.SHORE PATROL"])),
	      icn["GR.IC.AVIATION FIXED WING"],
	    ];
	    sId["S-G-UULD--"] = [icn["GR.IC.CRIMINAL INVESTIGATION DIVISION"]];
	    sId["S-G-UUS---"] = [icn["GR.IC.FF.SIGNAL"]];
	    sId["S-G-UUSA--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.M1.AREA"]];
	    sId["S-G-UUSC--"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.M1.COMMUNICATIONS CONTINGENCY PACKAGE"],
	    ];
	    sId["S-G-UUSCL-"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.M1.LARGE COMMUNICATIONS CONTINGENCY PACKAGE"],
	      icn["GR.M2.AIRBORNE"],
	    ];
	    sId["S-G-UUSO--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.M1.OPERATIONS"]];
	    sId["S-G-UUSF--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.M1.FORWARD"]];
	    sId["S-G-UUSM--"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.M1.MOBILE SUBSCRIBER EQUIPMENT"],
	    ];
	    sId["S-G-UUSMS-"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.M1.SMALL EXTENSION NODE"],
	    ];
	    sId["S-G-UUSML-"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.M1.LARGE EXTENSION NODE"],
	    ];
	    sId["S-G-UUSMN-"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.M1.NODE CENTRE"]];
	    sId["S-G-UUSR--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.RADIO"]];
	    sId["S-G-UUSRS-"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.I.FF.SATELLITE"]];
	    sId["S-G-UUSRT-"] = [
	      icn["GR.IC.FF.SIGNAL"],
	      icn["GR.IC.RADIO TELETYPE CENTRE"],
	    ];
	    sId["S-G-UUSRW-"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.RADIO RELAY"]];
	    sId["S-G-UUSS--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.M1.SIGNAL SUPPORT"]];
	    sId["S-G-UUSW--"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.TELEPHONE SWITCH"]];
	    sId["S-G-UUSX--"] = [icn["GR.IC.ELECTRONIC RANGING"]];
	    sId["S-G-UUI---"] = [icn["GR.IC.INFORMATION OPERATIONS"]];
	    sId["S-G-UUP---"] = sId["S-G-UUX---"] = [
	      icn["GR.IC.FF.AMPHIBIOUS"],
	      icn["GR.M1.LANDING SUPPORT"],
	    ];
	    sId["S-G-UUE---"] = [icn["GR.IC.EXPLOSIVE ORDNANCE DISPOSAL"]];
	    sId["S-G-UUT---"] = [icn["GR.IC.TOPOGRAPHIC"]];
	    //1.X.3.1.2.9 WRONG SIDC IN STANDARD APP6B
	    //sId['S-G-UU----'] = [icn['GR.IC.DOG']];
	    sId["S-G-UUD---"] = [icn["GR.IC.DRILLING"]];
	    sId["S-G-US----"] = [icn["GR.IC.COMBAT SERVICE SUPPORT"]];
	    sId["S-G-USA---"] = [icn["GR.IC.ADMINISTRATIVE"]];
	    sId["S-G-USAT--"] = [
	      icn["GR.IC.ADMINISTRATIVE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAC--"] = [
	      icn["GR.IC.ADMINISTRATIVE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAJ--"] = [icn["GR.IC.JUDGE ADVOCATE GENERAL"]];
	    sId["S-G-USAJT-"] = [
	      icn["GR.IC.JUDGE ADVOCATE GENERAL"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAJC-"] = [
	      icn["GR.IC.JUDGE ADVOCATE GENERAL"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAO--"] = [icn["GR.IC.POSTAL"]];
	    sId["S-G-USAOT-"] = [icn["GR.IC.POSTAL"], icn["GR.IC.FF.THEATRE SUPPORT"]];
	    sId["S-G-USAOC-"] = [icn["GR.IC.POSTAL"], icn["GR.IC.FF.CORPS SUPPORT"]];
	    sId["S-G-USAF--"] = [icn["GR.IC.FINANCE"]];
	    sId["S-G-USAFT-"] = [icn["GR.IC.FINANCE"], icn["GR.IC.FF.THEATRE SUPPORT"]];
	    sId["S-G-USAFC-"] = [icn["GR.IC.FINANCE"], icn["GR.IC.FF.CORPS SUPPORT"]];
	    sId["S-G-USAS--"] = [icn["GR.IC.PERSONNEL SERVICES"]];
	    sId["S-G-USAST-"] = [
	      icn["GR.IC.PERSONNEL SERVICES"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USASC-"] = [
	      icn["GR.IC.PERSONNEL SERVICES"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAM--"] = [icn["GR.IC.MORTUARY AFFAIRS"]];
	    sId["S-G-USAMT-"] = [
	      icn["GR.IC.MORTUARY AFFAIRS"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAMC-"] = [
	      icn["GR.IC.MORTUARY AFFAIRS"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAR--"] = [icn["GR.IC.RELIGIOUS SUPPORT"]];
	    sId["S-G-USART-"] = [
	      icn["GR.IC.RELIGIOUS SUPPORT"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USARC-"] = [
	      icn["GR.IC.RELIGIOUS SUPPORT"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAP--"] = [icn["GR.IC.PUBLIC AFFAIRS"]];
	    sId["S-G-USAPT-"] = [
	      icn["GR.IC.PUBLIC AFFAIRS"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAPC-"] = [
	      icn["GR.IC.PUBLIC AFFAIRS"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAPB-"] = [icn["GR.IC.PUBLIC AFFAIRS BROADCAST"]];
	    sId["S-G-USAPBT"] = [
	      icn["GR.IC.PUBLIC AFFAIRS BROADCAST"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAPBC"] = [
	      icn["GR.IC.PUBLIC AFFAIRS BROADCAST"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAPM-"] = [icn["GR.IC.JOINT INFORMATION BUREAU"]];
	    sId["S-G-USAPMT"] = [
	      icn["GR.IC.JOINT INFORMATION BUREAU"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAPMC"] = [
	      icn["GR.IC.JOINT INFORMATION BUREAU"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAX--"] = [icn["GR.IC.REPLACEMENT HOLDING UNIT"]];
	    sId["S-G-USAXT-"] = [
	      icn["GR.IC.REPLACEMENT HOLDING UNIT"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAXC-"] = [
	      icn["GR.IC.REPLACEMENT HOLDING UNIT"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAL--"] = [icn["GR.IC.LABOUR"]];
	    sId["S-G-USALT-"] = [icn["GR.IC.LABOUR"], icn["GR.IC.FF.THEATRE SUPPORT"]];
	    sId["S-G-USALC-"] = [icn["GR.IC.LABOUR"], icn["GR.IC.FF.CORPS SUPPORT"]];
	    sId["S-G-USAW--"] = [icn["GR.IC.MORALE, WELFARE, AND RECREATION"]];
	    sId["S-G-USAWT-"] = [
	      icn["GR.IC.MORALE, WELFARE, AND RECREATION"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAWC-"] = [
	      icn["GR.IC.MORALE, WELFARE, AND RECREATION"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USAQ--"] = [icn["GR.IC.QUARTERMASTER"]];
	    sId["S-G-USAQT-"] = [
	      icn["GR.IC.QUARTERMASTER"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USAQC-"] = [
	      icn["GR.IC.QUARTERMASTER"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USM---"] = [icn["GR.IC.FF.MEDICAL"]];
	    sId["S-G-USMT--"] = [icn["GR.IC.FF.MEDICAL THEATER"]];
	    sId["S-G-USMC--"] = [icn["GR.IC.FF.MEDICAL CORPS"]];
	    sId["S-G-USMM--"] = [
	      icn["GR.IC.FF.MEDICAL"],
	      icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"],
	    ];
	    sId["S-G-USMMT-"] = [
	      icn["GR.IC.FF.MEDICAL THEATER"],
	      icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"],
	    ];
	    sId["S-G-USMMC-"] = [
	      icn["GR.IC.FF.MEDICAL CORPS"],
	      icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"],
	    ];
	    sId["S-G-USMV--"] = [icn["GR.IC.FF.MEDICAL"], icn["GR.M2.VETERINARY"]];
	    sId["S-G-USMVT-"] = [
	      icn["GR.IC.FF.MEDICAL THEATER"],
	      icn["GR.M2.VETERINARY"],
	    ];
	    sId["S-G-USMVC-"] = [
	      icn["GR.IC.FF.MEDICAL CORPS"],
	      icn["GR.M2.VETERINARY"],
	    ];
	    sId["S-G-USMD--"] = [icn["GR.IC.FF.MEDICAL"], icn["GR.M2.DENTAL"]];
	    sId["S-G-USMDT-"] = [icn["GR.IC.FF.MEDICAL THEATER"], icn["GR.M2.DENTAL"]];
	    sId["S-G-USMDC-"] = [icn["GR.IC.FF.MEDICAL CORPS"], icn["GR.M2.DENTAL"]];
	    sId["S-G-USMP--"] = [icn["GR.IC.FF.MEDICAL"], icn["GR.M2.PSYCHOLOGICAL"]];
	    sId["S-G-USMPT-"] = [
	      icn["GR.IC.FF.MEDICAL THEATER"],
	      icn["GR.M2.PSYCHOLOGICAL"],
	    ];
	    sId["S-G-USMPC-"] = [
	      icn["GR.IC.FF.MEDICAL CORPS"],
	      icn["GR.M2.PSYCHOLOGICAL"],
	    ];
	    sId["S-G-USS---"] = [icn["GR.IC.FF.SUPPLY"]];
	    sId["S-G-USST--"] = [icn["GR.IC.FF.SUPPLY THEATER"]];
	    sId["S-G-USSC--"] = [icn["GR.IC.FF.SUPPLY CORPS"]];
	    sId["S-G-USS1--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS I"]];
	    sId["S-G-USS1T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS I"],
	    ];
	    sId["S-G-USS1C-"] = [icn["GR.IC.FF.SUPPLY CORPS"], icn["GR.IC.FF.CLASS I"]];
	    sId["S-G-USS2--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS II"]];
	    sId["S-G-USS2T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS II"],
	    ];
	    sId["S-G-USS2C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS II"],
	    ];
	    sId["S-G-USS3--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS III"]];
	    sId["S-G-USS3T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS III"],
	    ];
	    sId["S-G-USS3C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS III"],
	    ];
	    sId["S-G-USS3A-"] = [
	      icn["GR.IC.FF.SUPPLY"],
	      icn["GR.IC.FF.CLASS III"],
	      ms._translate(25, 5, ms._scale(0.5, icn["GR.IC.AVIATION ROTARY WING"])),
	    ];
	    sId["S-G-USS3AT"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS III"],
	      ms._translate(25, 5, ms._scale(0.5, icn["GR.IC.AVIATION ROTARY WING"])),
	    ];
	    sId["S-G-USS3AC"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS III"],
	      ms._translate(25, 5, ms._scale(0.5, icn["GR.IC.AVIATION ROTARY WING"])),
	    ];
	    sId["S-G-USS4--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS IV"]];
	    sId["S-G-USS4T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS IV"],
	    ];
	    sId["S-G-USS4C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS IV"],
	    ];
	    sId["S-G-USS5--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS V"]];
	    sId["S-G-USS5T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS V"],
	    ];
	    sId["S-G-USS5C-"] = [icn["GR.IC.FF.SUPPLY CORPS"], icn["GR.IC.FF.CLASS V"]];
	    sId["S-G-USS6--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VI"]];
	    sId["S-G-USS6T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS VI"],
	    ];
	    sId["S-G-USS6C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS VI"],
	    ];
	    sId["S-G-USS7--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VII"]];
	    sId["S-G-USS7T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS VII"],
	    ];
	    sId["S-G-USS7C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS VII"],
	    ];
	    sId["S-G-USS8--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VIII"]];
	    sId["S-G-USS8T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS VIII"],
	    ];
	    sId["S-G-USS8C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS VIII"],
	    ];
	    sId["S-G-USS9--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS IX"]];
	    sId["S-G-USS9T-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS IX"],
	    ];
	    sId["S-G-USS9C-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.FF.CLASS IX"],
	    ];
	    sId["S-G-USSX--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS X"]];
	    sId["S-G-USSXT-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.FF.CLASS X"],
	    ];
	    sId["S-G-USSXC-"] = [icn["GR.IC.FF.SUPPLY CORPS"], icn["GR.IC.FF.CLASS X"]];
	    sId["S-G-USSL--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.LAUNDRY/BATH"]];
	    sId["S-G-USSLT-"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.LAUNDRY/BATH"],
	    ];
	    sId["S-G-USSLC-"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.LAUNDRY/BATH"],
	    ];
	    sId["S-G-USSW--"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.WATER"]];
	    sId["S-G-USSWT-"] = [icn["GR.IC.FF.SUPPLY THEATER"], icn["GR.IC.WATER"]];
	    sId["S-G-USSWC-"] = [icn["GR.IC.FF.SUPPLY CORPS"], icn["GR.IC.WATER"]];
	    sId["S-G-USSWP-"] = [
	      icn["GR.IC.FF.SUPPLY"],
	      icn["GR.IC.WATER PURIFICATION"],
	    ];
	    sId["S-G-USSWPT"] = [
	      icn["GR.IC.FF.SUPPLY THEATER"],
	      icn["GR.IC.WATER PURIFICATION"],
	    ];
	    sId["S-G-USSWPC"] = [
	      icn["GR.IC.FF.SUPPLY CORPS"],
	      icn["GR.IC.WATER PURIFICATION"],
	    ];
	    //1.X.3.1.3.3.15  ANOTHER SIDC THAT DOESN'T WORK OUT...
	    //sId['S-G-US----'] = [icn['GR.IC.FF.SUPPLY CORPS'],icn['GR.IC.WATER PURIFICATION']];
	    sId["S-G-UST---"] = [icn["GR.IC.TRANSPORTATION"]];
	    sId["S-G-USTT--"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	    ];
	    sId["S-G-USTC--"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	    ];
	    sId["S-G-USTM--"] = [
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.MOVEMENT CONTROL CENTRE"],
	    ];
	    sId["S-G-USTMT-"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.MOVEMENT CONTROL CENTRE"],
	    ];
	    sId["S-G-USTMC-"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.MOVEMENT CONTROL CENTRE"],
	    ];
	    sId["S-G-USTR--"] = [icn["GR.IC.TRANSPORTATION"], icn["GR.M1.RAILROAD"]];
	    sId["S-G-USTRT-"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.RAILROAD"],
	    ];
	    sId["S-G-USTRC-"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.RAILROAD"],
	    ];
	    sId["S-G-USTS--"] = [icn["GR.IC.TRANSPORTATION"], icn["GR.M1.NAVAL"]];
	    sId["S-G-USTST-"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.NAVAL"],
	    ];
	    sId["S-G-USTSC-"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.NAVAL"],
	    ];
	    sId["S-G-USTA--"] = [
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.IC.AIRPORT OF DEBARKATION"],
	    ];
	    sId["S-G-USTAT-"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.IC.AIRPORT OF DEBARKATION"],
	    ];
	    sId["S-G-USTAC-"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.IC.AIRPORT OF DEBARKATION"],
	    ];
	    sId["S-G-USTI--"] = [icn["GR.IC.TRANSPORTATION"], icn["GR.M1.MISSILE"]];
	    sId["S-G-USTIT-"] = [
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.MISSILE"],
	    ];
	    sId["S-G-USTIC-"] = [
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.M1.MISSILE"],
	    ];
	    //1.X.3.1.3.4.8 SIDC BROKEN
	    //sId['S-G-UST---']
	    sId["S-G-USX---"] = [icn["GR.IC.MAINTENANCE"]];
	    sId["S-G-USXT--"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	    ];
	    sId["S-G-USXC--"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	    ];
	    sId["S-G-USXH--"] = [icn["GR.IC.MAINTENANCE"], icn["GR.M2.HEAVY"]];
	    sId["S-G-USXHT-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.M2.HEAVY"],
	    ];
	    sId["S-G-USXHC-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.M2.HEAVY"],
	    ];
	    sId["S-G-USXR--"] = [icn["GR.IC.MAINTENANCE"], icn["GR.M2.RAILROAD"]];
	    sId["S-G-USXRT-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.M2.RAILROAD"],
	    ];
	    sId["S-G-USXRC-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.M2.RAILROAD"],
	    ];
	    sId["S-G-USXO--"] = [icn["GR.IC.MAINTENANCE"], icn["GR.M1.AMMUNITION"]];
	    sId["S-G-USXOT-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.M1.AMMUNITION"],
	    ];
	    sId["S-G-USXOC-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.M1.AMMUNITION"],
	    ];
	    sId["S-G-USXOM-"] = [icn["GR.IC.MAINTENANCE"], icn["GR.M1.MISSILE"]];
	    sId["S-G-USXOMT"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.M1.MISSILE"],
	    ];
	    sId["S-G-USXOMC"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.M1.MISSILE"],
	    ];
	    sId["S-G-USXE--"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.M1.ELECTRO-OPTICAL"],
	    ];
	    sId["S-G-USXET-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.THEATRE SUPPORT"],
	      icn["GR.M1.ELECTRO-OPTICAL"],
	    ];
	    sId["S-G-USXEC-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.IC.FF.CORPS SUPPORT"],
	      icn["GR.M1.ELECTRO-OPTICAL"],
	    ];
	    sId["S-G-USXBDR"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.M2.BATTLE DAMAGE REPAIR"],
	    ];
	    sId["S-G-USXPM-"] = [
	      icn["GR.IC.MAINTENANCE"],
	      icn["GR.M2.PREVENTIVE MAINTENANCE"],
	    ];
	    sId["S-G-USXP--"] = [icn["GR.IC.PIPELINE"]];
	    sId["S-G-USXEP-"] = [icn["GR.IC.ENVIRONMENTAL PROTECTION"]];
	    sId["S-G-UH----"] = [];
	    //1.X.3.1.5 BROKEN SIDC
	    sId["S-G-UH1---"] = [icn["GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT"]];
	    //1.X.3.1.6 BROKEN SIDC
	    sId["S-G-UH2---"] = [
	      icn["GR.IC.FF.SUPPLY"],
	      icn["GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT"],
	    ];
	    sId["S-G-UHGL--"] = sId["S-G-GL----"] = [icn["GR.IC.LIAISON"]];
	  },
	};

	var equipment = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5],
	  icons: function equipment(sId, bbox, icn, _STD2525) {
	    //Adds support for equipment
	    sId["S-G-E-----"] = [];
	    sId["S-G-EW----"] = []; // N/A
	    sId["S-G-EWM---"] = [icn["GR.EQ.MISSILE LAUNCHER"]];
	    sId["S-G-EWMA--"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	    ];
	    sId["S-G-EWMAS-"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWMASR"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.SHORT RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	    ];
	    sId["S-G-EWMASE"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.SHORT RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	    ];
	    sId["S-G-EWMAI-"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWMAIR"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	    ];
	    sId["S-G-EWMAIE"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	    ];
	    sId["S-G-EWMAL-"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.LONG RANGE"],
	    ];
	    sId["S-G-EWMALR"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.LONG RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	    ];
	    sId["S-G-EWMALE"] = [
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      icn["GR.EQ.LONG RANGE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	    ];
	    sId["S-G-EWMAT-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.7, icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"])
	      ),
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR THEATRE"],
	    ];
	    sId["S-G-EWMATR"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.7, icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"])
	      ),
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR THEATRE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	    ];
	    sId["S-G-EWMATE"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.7, icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"])
	      ),
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR THEATRE"],
	      icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	    ];
	    sId["S-G-EWMS--"] = [icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"]];
	    sId["S-G-EWMSS-"] = [
	      icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWMSI-"] = [
	      icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWMSL-"] = [
	      icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	      icn["GR.EQ.LONG RANGE"],
	    ];
	    sId["S-G-EWMT--"] = [icn["GR.EQ.ANTITANK MISSILE LAUNCHER"]];
	    sId["S-G-EWMTL-"] = [
	      icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWMTM-"] = [
	      icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWMTH-"] = [
	      icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	      icn["GR.EQ.LONG RANGE"],
	    ];
	    sId["S-G-EWS---"] = [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]];
	    sId["S-G-EWSL--"] = [
	      icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWSM--"] = [
	      icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWSH--"] = [
	      icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	      icn["GR.EQ.LONG RANGE"],
	    ];
	    sId["S-G-EWX---"] = [icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"]];
	    sId["S-G-EWXL--"] = [
	      icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	      ms._translate(0, 10, icn["GR.EQ.SHORT RANGE"]),
	    ];
	    sId["S-G-EWXM--"] = [
	      icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	      ms._translate(0, 10, icn["GR.EQ.INTERMEDIATE RANGE"]),
	    ];
	    sId["S-G-EWXH--"] = [
	      icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	      ms._translate(0, 10, icn["GR.EQ.LONG RANGE"]),
	    ];
	    sId["S-G-EWT---"] = [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]];
	    sId["S-G-EWTL--"] = [
	      icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWTM--"] = [
	      icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWTH--"] = [
	      icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	      icn["GR.EQ.LONG RANGE"],
	    ];
	    sId["S-G-EWR---"] = [icn["GR.EQ.RIFLE"]];
	    sId["S-G-EWRR--"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.SHORT RANGE"]];
	    sId["S-G-EWRL--"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	    sId["S-G-EWRH--"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.LONG RANGE"]];
	    sId["S-G-EWZ---"] = [icn["GR.EQ.GRENADE LAUNCHER"]];
	    sId["S-G-EWZL--"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"]),
	    ];
	    sId["S-G-EWZM--"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"]),
	    ];
	    sId["S-G-EWZH--"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.LONG RANGE"]),
	    ];
	    sId["S-G-EWO---"] = [icn["GR.EQ.MORTAR"]];
	    sId["S-G-EWOL--"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.SHORT RANGE"]];
	    sId["S-G-EWOM--"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	    sId["S-G-EWOH--"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.LONG RANGE"]];
	    sId["S-G-EWH---"] = [icn["GR.EQ.HOWITZER"]];
	    sId["S-G-EWHL--"] = [icn["GR.EQ.HOWITZER"], icn["GR.EQ.SHORT RANGE"]];
	    sId["S-G-EWHLS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [icn["GR.EQ.HOWITZER"], icn["GR.EQ.SHORT RANGE"]])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWHM--"] = [
	      icn["GR.EQ.HOWITZER"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWHMS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [icn["GR.EQ.HOWITZER"], icn["GR.EQ.INTERMEDIATE RANGE"]])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWHH--"] = [icn["GR.EQ.HOWITZER"], icn["GR.EQ.LONG RANGE"]];
	    sId["S-G-EWHHS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [icn["GR.EQ.HOWITZER"], icn["GR.EQ.LONG RANGE"]])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWG---"] = [icn["GR.EQ.ANTITANK GUN"]];
	    sId["S-G-EWGL--"] = [icn["GR.EQ.ANTITANK GUN"], icn["GR.EQ.SHORT RANGE"]];
	    sId["S-G-EWGM--"] = [
	      icn["GR.EQ.ANTITANK GUN"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWGH--"] = [icn["GR.EQ.ANTITANK GUN"], icn["GR.EQ.LONG RANGE"]];
	    sId["S-G-EWGR--"] = [icn["GR.EQ.RECOILLESS GUN"]];
	    sId["S-G-EWD---"] = [icn["GR.EQ.DIRECT FIRE GUN"]];
	    sId["S-G-EWDL--"] = [
	      icn["GR.EQ.DIRECT FIRE GUN"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWDLS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [icn["GR.EQ.DIRECT FIRE GUN"], icn["GR.EQ.SHORT RANGE"]])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWDM--"] = [
	      icn["GR.EQ.DIRECT FIRE GUN"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWDMS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [
	          icn["GR.EQ.DIRECT FIRE GUN"],
	          icn["GR.EQ.INTERMEDIATE RANGE"],
	        ])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWDH--"] = [icn["GR.EQ.DIRECT FIRE GUN"], icn["GR.EQ.LONG RANGE"]];
	    sId["S-G-EWDHS-"] = [
	      ms._translate(
	        0,
	        -15,
	        ms._scale(0.8, [icn["GR.EQ.DIRECT FIRE GUN"], icn["GR.EQ.LONG RANGE"]])
	      ),
	      icn["GR.EQ.HOWITZER TRACKED"],
	    ];
	    sId["S-G-EWA---"] = [icn["GR.EQ.AIR DEFENCE GUN"]];
	    sId["S-G-EWAL--"] = [
	      icn["GR.EQ.AIR DEFENCE GUN"],
	      icn["GR.EQ.SHORT RANGE"],
	    ];
	    sId["S-G-EWAM--"] = [
	      icn["GR.EQ.AIR DEFENCE GUN"],
	      icn["GR.EQ.INTERMEDIATE RANGE"],
	    ];
	    sId["S-G-EWAH--"] = [icn["GR.EQ.AIR DEFENCE GUN"], icn["GR.EQ.LONG RANGE"]];

	    sId["S-G-EV----"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	    ];
	    sId["S-G-EVA---"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.ARMOURED VEHICLE"],
	    ];
	    sId["S-G-EVAT--"] = [icn["GR.EQ.TANK"]];
	    sId["S-G-EVATL-"] = [icn["GR.EQ.TANK"], icn["GR.EQ.LIGHT TANK"]];
	    sId["S-G-EVATLR"] = sId["S-G-EVATW-"] = [
	      icn["GR.EQ.TANK"],
	      icn["GR.EQ.LIGHT TANK"],
	      icn["GR.EQ.TANK RECOVERY VEHICLE"],
	    ];
	    sId["S-G-EVATM-"] = [icn["GR.EQ.TANK"], icn["GR.EQ.MEDIUM TANK"]];
	    sId["S-G-EVATMR"] = sId["S-G-EVATX-"] = [
	      icn["GR.EQ.TANK"],
	      icn["GR.EQ.MEDIUM TANK"],
	      icn["GR.EQ.TANK RECOVERY VEHICLE"],
	    ];
	    sId["S-G-EVATH-"] = [icn["GR.EQ.TANK"], icn["GR.EQ.HEAVY TANK"]];
	    sId["S-G-EVATHR"] = sId["S-G-EVATY-"] = [
	      icn["GR.EQ.TANK"],
	      icn["GR.EQ.HEAVY TANK"],
	      icn["GR.EQ.TANK RECOVERY VEHICLE"],
	    ];
	    sId["S-G-EVAA--"] = [icn["GR.EQ.ARMOURED PERSONNEL CARRIER"]];
	    sId["S-G-EVAAR-"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      icn["GR.EQ.TANK RECOVERY VEHICLE"],
	    ];
	    sId["S-G-EVAI--"] = [icn["GR.EQ.ARMOURED FIGHTING VEHICLE"]];
	    sId["S-G-EVAC--"] = [
	      icn["GR.EQ.ARMOURED FIGHTING VEHICLE (AFV) COMMAND AND CONTROL"],
	    ];
	    sId["S-G-EVAS--"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER COMBAT SERVICE SUPPORT VEHICLE"],
	    ];
	    sId["S-G-EVAL--"] = [
	      icn["GR.EQ.ARMOURED FIGHTING VEHICLE"],
	      icn["GR.EQ.CROSS-COUNTRY"],
	    ];
	    sId["S-G-EVU---"] = [icn["GR.EQ.UTILITY VEHICLE"]];
	    sId["S-G-EVUB--"] = [icn["GR.EQ.BUS"]];
	    sId["S-G-EVUS--"] = [icn["GR.EQ.SEMI-TRAILER TRUCK"]];
	    sId["S-G-EVUSL-"] = [
	      icn["GR.EQ.SEMI-TRAILER TRUCK"],
	      icn["GR.EQ.UTILITY VEHICLE LIGHT"],
	    ];
	    sId["S-G-EVUSM-"] = [
	      icn["GR.EQ.SEMI-TRAILER TRUCK"],
	      icn["GR.EQ.UTILITY VEHICLE MEDIUM"],
	    ];
	    sId["S-G-EVUSH-"] = [
	      icn["GR.EQ.SEMI-TRAILER TRUCK"],
	      icn["GR.EQ.UTILITY VEHICLE HEAVY"],
	    ];
	    sId["S-G-EVUL--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	    ];
	    sId["S-G-EVUX--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.CROSS-COUNTRY"],
	    ];
	    sId["S-G-EVUR--"] = [icn["GR.EQ.WATER VEHICLE"]];
	    sId["S-G-EVUT--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	    ];
	    sId["S-G-EVUTL-"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	      icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.LIGHT"],
	    ];
	    sId["S-G-EVUTH-"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	      icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.HEAVY"],
	    ];
	    sId["S-G-EVUA--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.MEDICAL EVACUATION"],
	    ];
	    sId["S-G-EVUAA-"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      icn["GR.EQ.MEDICAL EVACUATION"],
	    ];
	    sId["S-G-EVE---"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      ms._scale(0.7, icn["GR.IC.ENGINEER"]),
	    ];
	    sId["S-G-EVEB--"] = [icn["GR.EQ.BRIDGE"]];
	    sId["S-G-EVEE--"] = [icn["GR.EQ.EARTHMOVER"]];
	    //.X.3.2.2.3.2 .1 WRONG SIDC
	    //sId['S-G-EVEE--'] = [];
	    sId["S-G-EVEC--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	      ms._scale(0.6, icn["GR.IC.ENGINEER"]),
	    ];
	    sId["S-G-EVEM--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.MINE LAYING VEHICLE"],
	    ];
	    sId["S-G-EVEMA-"] = [
	      icn["GR.EQ.MINE CLEARING EQUIPMENT"],
	      icn["GR.EQ.TANK"],
	    ];
	    sId["S-G-EVEMV-"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      icn["GR.EQ.ARMORED CARRIER WITH VOLCANO"],
	    ];
	    sId["S-G-EVEMT-"] = [
	      icn["GR.EQ.MINE CLEARING EQUIPMENT"],
	      ms._translate(0, -10, icn["GR.EQ.LIMITED CROSS-COUNTRY"]),
	    ];
	    sId["S-G-EVEML-"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	      icn["GR.EQ.ARMORED CARRIER WITH VOLCANO"],
	    ];
	    sId["S-G-EVEA--"] = [icn["GR.EQ.MINE CLEARING EQUIPMENT"]];
	    sId["S-G-EVEAA-"] = [
	      icn["GR.EQ.MINE CLEARING EQUIPMENT"],
	      icn["GR.EQ.TANK"],
	    ];
	    sId["S-G-EVEAT-"] = [
	      icn["GR.EQ.MINE CLEARING EQUIPMENT"],
	      ms._translate(0, -10, icn["GR.EQ.LIMITED CROSS-COUNTRY"]),
	    ];
	    sId["S-G-EVEMSM"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      icn["GR.EQ.MINE SCATTERABLE"],
	    ];
	    sId["S-G-EVED--"] = [icn["GR.EQ.DOZER"]];
	    sId["S-G-EVEDA-"] = [icn["GR.EQ.DOZER ARMORED"]];
	    sId["S-G-EVES--"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      ms._scale(0.6, icn["GR.IC.ENGINEER"]),
	    ];
	    sId["S-G-EVER--"] = [
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	      ms._scale(0.6, icn["GR.IC.ENGINEER"]),
	      icn["GR.EQ.ARMOURED PERSONNEL CARRIER ENGINEER RECON VEHICLE"],
	    ];
	    sId["S-G-EVEH--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	      icn["GR.EQ.UTILITY VEHICLE BACKHOE"],
	    ];
	    sId["S-G-EVEF--"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.CROSS-COUNTRY"],
	      icn["GR.EQ.UTILITY VEHICLE FERRY TRANSPORTER"],
	    ];
	    sId["S-G-EVD---"] = [
	      icn["GR.EQ.UTILITY VEHICLE"],
	      icn["GR.EQ.CROSS-COUNTRY"],
	      ms._scale(0.7, icn["GR.IC.DRILLING"]),
	    ];
	    sId["S-G-EVT---"] = [icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	    sId["S-G-EVC---"] = [icn["GR.I.CIVILIAN"]];
	    sId["S-G-EVCA--"] = [icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"]];
	    sId["S-G-EVCAL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	    ];
	    sId["S-G-EVCAM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	    ];
	    sId["S-G-EVCAH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	    ];
	    sId["S-G-EVCO--"] = [icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"]];
	    sId["S-G-EVCOL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	    ];
	    sId["S-G-EVCOM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	    ];
	    sId["S-G-EVCOH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	    ];
	    sId["S-G-EVCM--"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	    ];
	    sId["S-G-EVCML-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	    ];
	    sId["S-G-EVCMM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	    ];
	    sId["S-G-EVCMH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	    ];
	    sId["S-G-EVCU--"] = [icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"]];
	    sId["S-G-EVCUL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	    ];
	    sId["S-G-EVCUM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	    ];
	    sId["S-G-EVCUH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	    ];
	    sId["S-G-EVCJ--"] = [icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"]];
	    sId["S-G-EVCJL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	    ];
	    sId["S-G-EVCJM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	    ];
	    sId["S-G-EVCJH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	    ];
	    sId["S-G-EVCT--"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCTL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCTM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCTH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCF--"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCFL-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCFM-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVCFH-"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	      icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	    ];
	    sId["S-G-EVM---"] = [icn["GR.EQ.PACK ANIMAL"]];
	    sId["S-G-EVS---"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.MISSILE SUPPORT"],
	    ];
	    sId["S-G-EVST--"] = _STD2525 // For some strange reason app6 uses this code for other things...
	      ? [
	          icn[
	            "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	          ],
	          icn["GR.EQ.MISSILE TRANSLOADER"],
	        ]
	      : [icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	    sId["S-G-EVSR--"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.MISSILE TRANSPORTER"],
	    ];
	    sId["S-G-EVSC--"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.MISSILE CRANE/LOADING DEVICE"],
	    ];
	    sId["S-G-EVSP--"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.MISSILE PROPELLANT TRANSPORTER"],
	    ];
	    sId["S-G-EVSW--"] = [
	      icn[
	        "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	      ],
	      icn["GR.EQ.MISSILE WARHEAD TRANSPORTER"],
	    ];
	    sId["S-G-ES----"] = [icn["GR.EQ.SENSOR"]];
	    sId["S-G-ESR---"] = [icn["GR.EQ.RADAR"]];
	    sId["S-G-ESE---"] = [icn["GR.EQ.SENSOR EMPLACED"]];
	    sId["S-G-EXI---"] = [icn["GR.EQ.IMPROVISED EXPLOSIVE DEVICE"]];
	    sId["S-G-EX----"] = []; // N/A
	    sId["S-G-EXL---"] = [icn["GR.EQ.LASER"]];
	    sId["S-G-EXN---"] = [icn["GR.EQ.CBRN EQUIPMENT"]];
	    sId["S-G-EXF---"] = [icn["GR.EQ.FLAME THROWER"]];
	    sId["S-G-EXM---"] = [icn["GR.EQ.LAND MINES"]];
	    sId["S-G-EXMC--"] = [icn["GR.EQ.ANTIPERSONNEL LAND MINE"]];
	    sId["S-G-EXML--"] = [icn["GR.EQ.ANTIPERSONNEL LAND MINE LESS THAN LETHAL"]];

	    //This sets up the bounding boxes for equipment to have the bottom at the right place. (this will be used for mobility when unframed)
	    const equipmentBottom = {
	      "E-----": 0,
	      "EWM---": 140,
	      "EWMA--": 140,
	      "EWMAS-": 140,
	      EWMASR: 140,
	      EWMASE: 140,
	      "EWMAI-": 140,
	      EWMAIR: 140,
	      EWMAIE: 140,
	      "EWMAL-": 140,
	      EWMALR: 140,
	      EWMALE: 140,
	      "EWMAT-": 153,
	      EWMATR: 153,
	      EWMATE: 153,
	      "EWMS--": 140,
	      "EWMSS-": 140,
	      "EWMSI-": 140,
	      "EWMSL-": 140,
	      "EWMT--": 140,
	      "EWMTL-": 140,
	      "EWMTM-": 140,
	      "EWMTH-": 140,
	      "EWS---": 140,
	      "EWSL--": 140,
	      "EWSM--": 140,
	      "EWSH--": 140,
	      "EWX---": 140,
	      "EWXL--": 140,
	      "EWXM--": 140,
	      "EWXH--": 140,
	      "EWT---": 140,
	      "EWTL--": 140,
	      "EWTM--": 140,
	      "EWTH--": 140,
	      "EWR---": 140,
	      "EWRL--": 140,
	      "EWRM--": 140,
	      "EWRH--": 140,
	      "EWZ---": 140,
	      "EWZL--": 140,
	      "EWZM--": 140,
	      "EWZH--": 140,
	      "EWO---": 140,
	      "EWOL--": 140,
	      "EWOM--": 140,
	      "EWOH--": 140,
	      "EWH---": 140,
	      "EWHL--": 140,
	      "EWHLS-": 130,
	      "EWHM--": 140,
	      "EWHMS-": 130,
	      "EWHH--": 140,
	      "EWHHS-": 130,
	      "EWG---": 140,
	      "EWGL--": 140,
	      "EWGM--": 140,
	      "EWGH--": 140,
	      "EWGR--": 140,
	      "EWD---": 140,
	      "EWDL--": 140,
	      "EWDLS-": 130,
	      "EWDM--": 140,
	      "EWDMS-": 130,
	      "EWDH--": 140,
	      "EWDHS-": 130,
	      "EWA---": 140,
	      "EWAL--": 140,
	      "EWAM--": 140,
	      "EWAH--": 140,
	      "EV----": 129,
	      "EVA---": 129,
	      "EVAT--": 130,
	      "EVATL-": 130,
	      EVATLR: 130,
	      "EVATM-": 130,
	      EVATMR: 130,
	      "EVATH-": 130,
	      EVATHR: 130,
	      "EVAA--": 130,
	      "EVAAR-": 130,
	      "EVAI--": 130,
	      "EVAC--": 130,
	      "EVAS--": 130,
	      "EVAL--": 140,
	      "EVU---": 130,
	      "EVAB--": 130,
	      "EVUS--": 140,
	      "EVUSL-": 140,
	      "EVUSM-": 140,
	      "EVUSH-": 140,
	      "EVUL--": 140,
	      "EVUX--": 140,
	      "EVUR--": 130,
	      "EVUTL-": 130,
	      "EVUTH-": 130,
	      "EVUA--": 130,
	      "EVUAA-": 130,
	      "EVE---": 129,
	      "EVEB--": 130,
	      "EVEE--": 130,
	      "EVEC--": 140,
	      "EVEM--": 130,
	      "EVEMA-": 130,
	      "EVEMV-": 130,
	      "EVEMT-": 130,
	      "EVEML-": 140,
	      "EVEA--": 120,
	      "EVEAA-": 130,
	      "EVEAT-": 130,
	      EVEMSM: 130,
	      "EVED--": 130,
	      "EVEDA-": 130,
	      "EVES--": 130,
	      "EVER--": 130,
	      "EVEH--": 140,
	      "EVEF--": 140,
	      "EVD---": 140,
	      "EVT--": 130,
	      "EVC---": 119,
	      "EVCA--": 132.5,
	      "EVCAL-": 132.5,
	      "EVCAM-": 132.5,
	      "EVCAH-": 132.5,
	      "EVCO--": 132.5,
	      "EVCOL-": 132.5,
	      "EVCOM-": 132.5,
	      "EVCOH-": 132.5,
	      "EVCM--": 132.5,
	      "EVCML-": 132.5,
	      "EVCMM-": 132.5,
	      "EVCMH-": 132.5,
	      "EVCU--": 132.5,
	      "EVCUL-": 132.5,
	      "EVCUM-": 132.5,
	      "EVCUH-": 132.5,
	      "EVCJ--": 132.5,
	      "EVCJL-": 132.5,
	      "EVCJM-": 132.5,
	      "EVCJH-": 132.5,
	      "EVCT--": 132.5,
	      "EVCTL-": 132.5,
	      "EVCTM-": 132.5,
	      "EVCTH-": 132.5,
	      "EVCF--": 132.5,
	      "EVCFL-": 132.5,
	      "EVCFM-": 132.5,
	      "EVCFH-": 132.5,
	      "EVM---": 125,
	      "EVS---": 129,
	      "EVST--": 129,
	      "EVSR--": 129,
	      "EVSC--": 129,
	      "EVSP--": 129,
	      "EVSW--": 129,
	      "ES----": 140,
	      "ESR---": 120,
	      "ESE---": 136,
	      "EXI---": 119,
	      "EXL---": 145,
	      "EXN---": 140,
	      "EXF---": 135,
	      "EXM---": 130,
	      "EXMC--": 122,
	      "EXML--": 122,
	    };
	    for (const key in equipmentBottom) {
	      if (!equipmentBottom.hasOwnProperty(key)) continue;
	      bbox["S-G-" + key] = {
	        x1: 50,
	        x2: 150,
	        y1: 50,
	        y2: equipmentBottom[key],
	      };
	    }
	  },
	};

	var installations = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5],
	  icons: function installations(sId, bbox, icn, _STD2525) {
	    //Adds support for installations
	    sId["S-G-I-----"] = [];
	    sId["S-G-IR----"] = [icn["GR.IN.IC.RAW MATERIAL PRODUCTION/STORAGE"]];
	    sId["S-G-IRM---"] = [icn["GR.IN.IC.MINE"]];
	    sId["S-G-IRP---"] = [icn["GR.IC.FF.CLASS III"]];
	    sId["S-G-IRN---"] = [icn["GR.IC.CBRN"]];
	    sId["S-G-IRNB--"] = [icn["GR.IC.CBRN"], icn["GR.M1.BIOLOGICAL"]];
	    sId["S-G-IRNC--"] = [icn["GR.IC.CBRN"], icn["GR.M1.CHEMICAL"]];
	    sId["S-G-IRNN--"] = [icn["GR.IC.CBRN"], icn["GR.M1.NUCLEAR"]];
	    sId["S-G-IP----"] = [icn["GR.IN.IC.PROCESSING FACILITY"]];
	    sId["S-G-IPD---"] = [icn["GR.IC.CBRN"], icn["GR.M1.DECONTAMINATION"]];
	    sId["S-G-IE----"] = [icn["GR.IC.EQUIPMENT MANUFACTURE"]];
	    sId["S-G-IU----"] = [icn["GR.IN.IC.UTILITY FACILITY"]];
	    sId["S-G-IUR---"] = [icn["GR.IN.IC.RESEARCH"]];
	    sId["S-G-IUT---"] = [icn["GR.IN.IC.TELECOMMUNICATIONS"]];
	    sId["S-G-IUE---"] = [icn["GR.IN.IC.ELECTRIC POWER"]];
	    sId["S-G-IUEN--"] = [
	      icn["GR.IN.IC.ELECTRIC POWER"],
	      icn["GR.IN.IC.ELECTRIC POWER NUCLEAR"],
	    ];
	    sId["S-G-IUED--"] = [
	      icn["GR.IN.IC.ELECTRIC POWER"],
	      icn["GR.IN.IC.ELECTRIC POWER DAM"],
	    ];
	    sId["S-G-IUEF--"] = [
	      icn["GR.IN.IC.ELECTRIC POWER"],
	      icn["GR.IN.IC.ELECTRIC POWER FOSSIL"],
	    ];
	    sId["S-G-IUP---"] = [icn["GR.IC.WATER"]];
	    sId["S-G-IM----"] = []; // N/A
	    sId["S-G-IMF---"] = [icn["GR.IN.IC.ATOMIC ENERGY"]];
	    sId["S-G-IMFA--"] = [
	      icn["GR.IN.IC.ATOMIC ENERGY"],
	      icn["GR.IN.M2.ATOMIC ENERGY REACTOR"],
	    ];
	    sId["S-G-IMFP--"] = [
	      icn["GR.IN.IC.ATOMIC ENERGY"],
	      icn["GR.IN.M2.NUCLEAR MATERIAL PRODUCTION"],
	    ];
	    sId["S-G-IMFPW-"] = [
	      icn["GR.IN.IC.ATOMIC ENERGY WEAPONS GRADE"],
	      icn["GR.IN.M2.NUCLEAR MATERIAL PRODUCTION"],
	    ];
	    sId["S-G-IMFS--"] = [
	      icn["GR.IN.IC.ATOMIC ENERGY"],
	      icn["GR.IN.M2.NUCLEAR MATERIAL STORAGE"],
	    ];
	    sId["S-G-IMA---"] = [icn["GR.IN.IC.AIRCRAFT PRODUCTION & ASSEMBLY"]];
	    sId["S-G-IME---"] = [icn["GR.IC.FF.CLASS V"]];
	    sId["S-G-IMG---"] = [icn["GR.EQ.TANK"]];
	    sId["S-G-IMV---"] = [icn["GR.IC.MAINTENANCE"]];
	    sId["S-G-IMN---"] = [icn["GR.EQ.DOZER"]];
	    sId["S-G-IMNB--"] = [icn["GR.IN.IC.BRIDGE"]];
	    sId["S-G-IMC---"] = [
	      icn["GR.IC.CBRN"],
	      icn["GR.IN.M2.CHEMICAL & BIOLOGICAL WARFARE"],
	    ];
	    sId["S-G-IMS---"] = [icn["GR.IC.NAVAL"], icn["GR.IN.M2.SHIP CONSTRUCTION"]];
	    sId["S-G-IMM---"] = [icn["GR.IC.MISSILE"]];
	    sId["S-G-IG----"] = [icn["GR.I.GOVERNMENT"]];
	    sId["S-G-IB----"] = [icn["GR.IN.IC.BASE"]];
	    sId["S-G-IBA---"] = [
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.IC.AIRPORT OF DEBARKATION"],
	    ];
	    sId["S-G-IBN---"] = [icn["GR.IC.NAVAL"]];
	    sId["S-G-IT----"] = [icn["GR.IC.TRANSPORTATION"]];
	    sId["S-G-IX----"] = [icn["GR.IC.FF.MEDICAL"]];
	    sId["S-G-IXH---"] = [icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"]];
	    sId["S-G-IRR---"] = sId["S-G-IRSR--"] = [
	      icn["GR.IN.IC.SEA SURFACE INSTALLATION, OIL RIG/PLATFORM"],
	    ];
	  },
	};

	function icons$4 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const frame = metadata.frame;
	  const affiliation = metadata.affiliation || "Friend";
	  //const baseGeometry = metadata.baseGeometry;
	  const numberSIDC = metadata.numberSIDC;
	  //const fillColor = colors.fillColor[affiliation];
	  const iconColor = colors.iconColor[affiliation];
	  const iconFillColor = colors.iconFillColor[affiliation];
	  //  const none = colors.none[affiliation];
	  const black = colors.black[affiliation];
	  const white = colors.white[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["SE.IC.MILITARY"] = text("MIL");
	  icn["SE.IC.MANUAL TRACK"] = text("MAN");
	  icn["SE.IC.COMBATANT"] = [
	    {
	      type: "path",
	      d: "m 86.9,110 c -3.6,2 -7.2,3.9 -10.8,5.9 2.1,2.9 6.7,3.9 10,2.1 2.6,-0.9 4.7,-3.8 3.1,-6.1 -0.8,-0.6 -1.5,-1.3 -2.3,-1.9 z m 26.3,0.1 c 3.6,2 7.2,3.9 10.8,5.9 -2.1,2.9 -6.7,3.9 -10,2.1 -2.6,-0.9 -4.7,-3.8 -3.1,-6.1 0.8,-0.6 1.5,-1.3 2.3,-1.9 z",
	      fill: false,
	    },
	    {
	      type: "path",
	      d: "m 112.9,110 c -5.6,-4 -11.3,-7.9 -16.1,-12.5 -4.2,-4.5 -7,-9.8 -9.2,-15.1 -0.8,4.4 -0.9,9.3 2.4,13.2 3.6,4.5 8.6,8.1 13.5,11.8 2.3,1.7 4.7,3.3 7.1,4.8 0.8,-0.7 1.5,-1.5 2.3,-2.2 m -25.7,0 c 5.6,-4 11.3,-7.9 16.1,-12.5 4.2,-4.5 7,-9.8 9.2,-15.1 0.8,4.4 0.9,9.3 -2.4,13.2 -3.6,4.5 -8.6,8.1 -13.5,11.8 -2.3,1.7 -4.7,3.3 -7.1,4.8 -0.8,-0.7 -1.5,-1.5 -2.3,-2.2",
	      fill: white,
	      strokewidth: 2,
	    },
	  ];
	  icn["SE.IC.SURFACE COMBATANT, LINE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100,120 -25,-17 15,2 0,-10 5,0 0,-5 -15,0 0,-5 15,0 0,-5 10,0 0,5 15,0 0,5 -15,0 0,5 5,0 0,10 15,-2 z",
	  };
	  icn["SE.IC.CARRIER"] = {
	    type: "path",
	    d: "m 80,100 20,20 20,-20 -20,0 0,-20 -20,0 z",
	  };
	  icn["SE.IC.BATTLESHIP"] = text("BB");
	  icn["SE.IC.CIVILIAN"] = text("CIV");
	  icn["SE.IC.CIVILIAN"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["SE.IC.CIVILIAN"].stroke = black;
	  icn["SE.IC.CIVILIAN"].strokewidth = 3;
	  icn["SE.IC.CRUISER"] = text("CC");
	  icn["SE.IC.CRUISER, GUIDED MISSILE"] = text("CG");
	  icn["SE.IC.DESTROYER"] = text("DD");
	  icn["SE.IC.FRIGATE"] = text("FF");
	  icn["SE.IC.CORVETTE"] = text("FS");
	  icn["SE.IC.LITTORAL COMBATANT SHIP"] = text("LCS");
	  icn["SE.IC.AMPHIBIOUS WARFARE SHIP"] = {
	    type: "path",
	    d: "m 100,120 20,0 m -20,0 -20,-20 10,0 0,-20 20,0 0,20 10,0 z",
	  };
	  icn["SE.IC.AMPHIBIOUS FORCE FLAGSHIP"] = text("LCC");
	  icn["SE.IC.AMPHIBIOUS ASSAULT"] = text("LA");
	  icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, GENERAL"] = text("LHA");
	  icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, MULTI-PURPOSE"] = text("LHD");
	  icn["SE.IC.AMPHIBIOUS TRANSPORT, DOCK"] = text("LPD");
	  icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, HELICOPTER"] = text("LPH");
	  icn["SE.IC.LANDING SHIP"] = text("LS");
	  icn["SE.IC.LANDING CRAFT"] = text("LC");
	  icn["SE.IC.MINE WARFARE VESSEL"] = {
	    type: "path",
	    d: "m 98.3,81 0,4.1 c -2.4,0.3 -4.6,1.4 -6.4,2.9 l -3.5,-3.5 -2.4,2.4 3.6,3.6 c -0.9,1.3 -1.5,4.9 -1.8,6.5 l -10.8,0 0,3 3,0 20,20 20,-20 3,0 0,-3 -10,0 c -1,-1.7 -2,-5.3 -3,-6.7 l 4,-3.7 -2,-2.4 -4,3.6 c -2,-1.4 -4,-2.4 -6,-2.7 l 0,-4.1 z",
	  };
	  icn["SE.IC.MINELAYER"] = text("ML");
	  icn["SE.IC.MINESWEEPER"] = text("MS");
	  icn["SE.IC.MINESWEEPER, DRONE"] = text("MSD");
	  icn["SE.IC.MINEHUNTER"] = text("MH");
	  icn["SE.IC.MINE COUNTER MEASURE SUPPORT SHIP"] = text("MCS");
	  icn["SE.IC.MINE COUNTERMEASURES"] = text("MCM");
	  icn["SE.IC.SEA SURFACE DECOY"] = {
	    type: "path",
	    d: "M 85.6,82.5 68.2,99.9 85.6,117 Z  M 109,82.5 91.4,99.9 109,117 Z  m 23,0 -17,17.4 17,17.1 z",
	  };
	  icn["SE.IC.PATROL"] = {
	    type: "path",
	    d: "m 80,100 20,20 20,-20 -10,0 0,-20 -20,0 0,20 z",
	  };
	  icn["SE.IC.PATROL CRAFT"] = text("PC");
	  icn["SE.IC.PATROL ANTI SUBMARINE WARFARE"] = {
	    type: "path",
	    d: "m 100,120 -25,-25 5,-5 10,10 5,0 0,-20 10,0 0,20 5,0 10,-10 5,5 z",
	  };
	  icn["SE.IC.PATROL ANTISHIP MISSILE"] = text("PM");
	  icn["SE.IC.PATROL TORPEDO"] = text("PT");
	  icn["SE.IC.PATROL GUN"] = text("PG");
	  icn["SE.IC.PATROL SHIP"] = [];
	  icn["SE.IC.MILITARY SPEEDBOAT"] = {
	    type: "path",
	    stroke: false,
	    d: "m 120,120 -40,0 -15,-25 15,0 5,-15 10,0 -5,15 45,0 z",
	  };
	  icn["SE.IC.MILITARY SPEEDBOAT, RIGID-HULL INFLATABLE BOAT"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "M 85 80 L 80 95 L 65 95 L 80 120 L 120 120 L 135 95 L 90 95 L 95 80 L 85 80 z M 87 100.7 L 93.1 100.7 C 94.6 100.7 95.7 100.8 96.4 101.1 C 97.1 101.3 97.7 101.8 98.1 102.4 C 98.5 103.1 98.7 103.8 98.7 104.7 C 98.7 105.8 98.4 106.7 97.8 107.4 C 97.1 108.1 96.2 108.5 94.9 108.7 C 95.6 109.1 96.1 109.4 96.5 109.9 C 96.9 110.3 97.4 111.1 98.1 112.2 L 99.9 115 L 96.4 115 L 94.3 111.9 C 93.6 110.8 93.1 110.1 92.8 109.8 C 92.5 109.5 92.2 109.3 91.9 109.2 C 91.6 109.1 91.2 109 90.5 109 L 89.9 109 L 89.9 115 L 87 115 L 87 100.7 z M 101.5 100.7 L 107.2 100.7 C 108.3 100.7 109.2 100.7 109.7 100.8 C 110.3 100.9 110.8 101.1 111.2 101.4 C 111.7 101.7 112 102.1 112.3 102.6 C 112.6 103.1 112.7 103.7 112.8 104.3 C 112.7 105 112.6 105.6 112.2 106.1 C 111.9 106.7 111.4 107.1 110.8 107.4 C 111.6 107.7 112.3 108.1 112.8 108.7 C 113.2 109.3 113.5 110 113.5 110.8 C 113.5 111.5 113.3 112.1 113 112.8 C 112.7 113.4 112.3 113.8 111.8 114.2 C 111.2 114.6 110.6 114.8 109.8 114.9 C 109.3 115 108.2 115 106.3 115 L 101.5 115 L 101.5 100.7 z M 104.3 103.1 L 104.3 106.4 L 106.3 106.4 C 107.4 106.4 108.1 106.3 108.3 106.3 C 108.8 106.3 109.2 106.1 109.5 105.8 C 109.8 105.5 109.9 105.1 109.9 104.7 C 109.9 104.2 109.8 103.9 109.6 103.6 C 109.3 103.3 109 103.2 108.5 103.1 C 108.2 103.1 107.4 103.1 106 103.1 L 104.3 103.1 z M 89.9 103.1 L 89.9 106.8 L 92 106.8 C 93.4 106.8 94.3 106.7 94.6 106.6 C 95 106.4 95.2 106.3 95.4 106 C 95.6 105.7 95.7 105.3 95.8 104.9 C 95.7 104.4 95.6 104 95.3 103.7 C 95.1 103.4 94.7 103.2 94.3 103.2 C 94 103.1 93.3 103.1 92.2 103.1 L 89.9 103.1 z M 104.3 108.8 L 104.3 112.6 L 107 112.6 C 108.1 112.6 108.7 112.6 109 112.5 C 109.4 112.4 109.8 112.2 110.1 111.9 C 110.3 111.6 110.5 111.2 110.5 110.7 C 110.5 110.3 110.4 109.9 110.2 109.6 C 109.9 109.3 109.6 109.1 109.3 109 C 108.9 108.8 108 108.8 106.7 108.8 L 104.3 108.8 z",
	    },
	    {
	      type: "path",
	      stroke: false,
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      d: "m 87,100.7 h 6.1 c 1.5,0 2.6,0.1 3.3,0.4 0.7,0.2 1.3,0.7 1.7,1.3 0.4,0.7 0.6,1.4 0.6,2.3 0,1.1 -0.3,2 -0.9,2.7 -0.7,0.7 -1.6,1.1 -2.9,1.3 0.7,0.4 1.2,0.7 1.6,1.2 0.4,0.4 0.9,1.2 1.6,2.3 l 1.8,2.8 h -3.5 l -2.1,-3.1 c -0.7,-1.1 -1.2,-1.8 -1.5,-2.1 -0.3,-0.3 -0.6,-0.5 -0.9,-0.6 -0.3,-0.1 -0.7,-0.2 -1.4,-0.2 h -0.6 v 6 H 87 Z  m 14.5,0 h 5.7 c 1.1,0 2,0 2.5,0.1 0.6,0.1 1.1,0.3 1.5,0.6 0.5,0.3 0.8,0.7 1.1,1.2 0.3,0.5 0.4,1.1 0.5,1.7 -0.1,0.7 -0.2,1.3 -0.6,1.8 -0.3,0.6 -0.8,1 -1.4,1.3 0.8,0.3 1.5,0.7 2,1.3 0.4,0.6 0.7,1.3 0.7,2.1 0,0.7 -0.2,1.3 -0.5,2 -0.3,0.6 -0.7,1 -1.2,1.4 -0.6,0.4 -1.2,0.6 -2,0.7 -0.5,0.1 -1.6,0.1 -3.5,0.1 h -4.8 z  m 2.8,2.4 v 3.3 h 2 c 1.1,0 1.8,-0.1 2,-0.1 0.5,0 0.9,-0.2 1.2,-0.5 0.3,-0.3 0.4,-0.7 0.4,-1.1 0,-0.5 -0.1,-0.8 -0.3,-1.1 -0.3,-0.3 -0.6,-0.4 -1.1,-0.5 -0.3,0 -1.1,0 -2.5,0 z  m -14.4,0 v 3.7 H 92 c 1.4,0 2.3,-0.1 2.6,-0.2 0.4,-0.2 0.6,-0.3 0.8,-0.6 0.2,-0.3 0.3,-0.7 0.4,-1.1 -0.1,-0.5 -0.2,-0.9 -0.5,-1.2 -0.2,-0.3 -0.6,-0.5 -1,-0.5 -0.3,-0.1 -1,-0.1 -2.1,-0.1 z  m 14.4,5.7 v 3.8 h 2.7 c 1.1,0 1.7,0 2,-0.1 0.4,-0.1 0.8,-0.3 1.1,-0.6 0.2,-0.3 0.4,-0.7 0.4,-1.2 0,-0.4 -0.1,-0.8 -0.3,-1.1 -0.3,-0.3 -0.6,-0.5 -0.9,-0.6 -0.4,-0.2 -1.3,-0.2 -2.6,-0.2 z",
	    },
	    /*
	    {
	      type: "text",
	      //alignmentBaseline: "middle",
	      fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	      stroke: false,
	      x: 100,
	      y: 115,
	      fontsize: 20,
	      text: "RB",
	    },*/
	  ];
	  icn["SE.IC.MILITARY JETSKI"] = {
	    type: "path",
	    stroke: false,
	    d: "m 135,105 0,15 -60,0 -10,-15 20,-25 10,0 0,10 -5,0 -5,15 z",
	  };
	  icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"] = {
	    type: "path",
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	    stroke: false,
	  };
	  icn["SE.IC.NAVY TASK ORGANIZATION UNIT"] = [
	    {
	      type: "path",
	      d: "m 110,80 15,15 0,25 M 90,80 75,95 l 0,25",
	      fill: false,
	    },
	  ];
	  //if (STD2525)
	  //  icn["SE.IC.NAVY TASK ORGANIZATION UNIT"].push({
	  //    type: "path",
	  //    d: "m 100,80 -15,15 0,25 30,0 0,-25 -15,-15"
	  //  });
	  icn["SE.IC.NAVY TASK FORCE"] = [
	    icn["SE.IC.NAVY TASK ORGANIZATION UNIT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: /*STD2525 ? 150 :*/ 110,
	      fontsize: 30,
	      text: "TF",
	    },
	  ];
	  icn["SE.IC.NAVY TASK GROUP"] = [
	    icn["SE.IC.NAVY TASK ORGANIZATION UNIT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: /*STD2525 ? 150 :*/ 110,
	      fontsize: 30,
	      text: "TG",
	    },
	  ];
	  icn["SE.IC.NAVY TASK UNIT"] = [
	    icn["SE.IC.NAVY TASK ORGANIZATION UNIT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: /*STD2525 ? 150 :*/ 110,
	      fontsize: 30,
	      text: "TU",
	    },
	  ];
	  icn["SE.IC.NAVY TASK ELEMENT"] = [
	    icn["SE.IC.NAVY TASK ORGANIZATION UNIT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: /*STD2525 ? 150 :*/ 110,
	      fontsize: 30,
	      text: "TE",
	    },
	  ];
	  icn["SE.IC.CONVOY"] = {
	    type: "path",
	    d: "m 80,115 -20,0 0,-35 80,0 0,35 -20,0 0,-20 -40,0 z",
	  };
	  icn["SE.IC.NONCOMBATANT"] = {
	    type: "path",
	    d: "m 80,100 0,-20 40,0 0,20 15,0 0,20 -70,0 0,-20 z",
	  };
	  icn["SE.IC.AUXILIARY SHIP"] = text(STD2525 && !numberSIDC ? "AR" : "AA");
	  icn["SE.IC.AMMUNITION SHIP"] = text("AE");
	  icn["SE.IC.STORES SHIP"] = text("AF");
	  icn["SE.IC.AUXILIARY FLAG OR COMMAND SHIP"] = text("AGF");
	  icn["SE.IC.INTELLIGENCE COLLECTOR"] = text("AGI");
	  icn["SE.IC.OCEAN RESEARCH SHIP"] = text("AGO");
	  icn["SE.IC.SURVEY SHIP"] = text("AGS");
	  icn["SE.IC.HOSPITAL SHIP"] = text("AH");
	  icn["SE.IC.CARGO SHIP"] = text("AK");
	  icn["SE.IC.COMBAT SUPPORT SHIP, FAST"] = text("AOE");
	  icn["SE.IC.OILER, REPLENISHMENT"] = text("AOR");
	  icn["SE.IC.REPAIR SHIP"] = text("AR");
	  icn["SE.IC.SUBMARINE TENDER"] = text("AS");
	  icn["SE.IC.TUG, OCEAN GOING"] = text("AT");
	  icn["SE.IC.SERVICE CRAFT, YARD, GENERAL"] = STD2525 ? text("YY") : text("YT");
	  icn["SE.IC.BARGE, NOT SELF-PROPELLED"] = text("YB");
	  icn["SE.IC.BARGE, SELF-PROPELLED"] = text("YS");
	  icn["SE.IC.TUG, HARBOUR"] = text("YT");
	  icn["SE.IC.LAUNCH"] = text("YFT");
	  icn["SE.IC.MERCHANT SHIP, GENERAL"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 75,100 0,-35 50,0 0,35 20,0 -15,35 -60,0 -15,-35 z",
	  };
	  icn["SE.IC.CARGO, GENERAL"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: /*STD2525 ? "CA" :*/ "A",
	    },
	  ];
	  icn["SE.IC.CONTAINER SHIP"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["SE.IC.DREDGE"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "D",
	    },
	  ];
	  icn["SE.IC.RADAR"] = {
	    type: "path",
	    d: "M72,95 l30,-25 0,25 30,-25 M70,70 c0,35 15,50 50,50",
	    fill: false,
	  };
	  icn["SE.IC.ROLL ON-ROLL OFF"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: /*STD2525 ? "30" :*/ "45",
	      text: /*STD2525 ? "RO" : */ "E",
	    },
	  ];
	  icn["SE.IC.FERRY"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: /*STD2525 ? "FE" :*/ "F",
	    },
	  ];
	  icn["SE.IC.HEAVY LIFT"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "H",
	    },
	  ];
	  icn["SE.IC.HOVERCRAFT"] = {
	    type: "path",
	    d: STD2525
	      ? "m 65,100 0,-30 5,10 60,0 5,-10 0,30 10,0 -15,35 -60,0 -15,-35 z"
	      : "m 90,80 0,15.6 C 78.4,96.9 70,100.6 70,105 c 0,5.5 13.4,10 30,10 16.6,0 30,-4.5 30,-10 0,-4.4 -8.4,-8.1 -20,-9.4 L 110,80 90,80 z m -15,40 50,0",
	  };
	  icn["SE.IC.HOVERCRAFT 2525D"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "J",
	    },
	  ];
	  icn["SE.IC.HOVERCRAFT CIVILIAN"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: STD2525
	      ? "m 65,100 0,-30 5,10 60,0 5,-10 0,30 10,0 -15,35 -60,0 -15,-35 z"
	      : "m 90,80 0,15.6 C 78.4,96.9 70,100.6 70,105 c 0,5.5 13.4,10 30,10 16.6,0 30,-4.5 30,-10 0,-4.4 -8.4,-8.1 -20,-9.4 L 110,80 90,80 z m -15,40 50,0",
	  };
	  icn["SE.IC.HOVERCRAFT NONCOMBATANT"] = [
	    {
	      type: "path",
	      d: "m 65,100 0,-30 5,10 60,0 5,-10 0,30 10,0 -15,35 -60,0 -15,-35 z",
	      strokewidth: false,
	    },
	    STD2525
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          fill: white,
	          stroke: false,
	          x: 100,
	          y: 120,
	          fontsize: 30,
	          text: "NC",
	        }
	      : [],
	  ];
	  icn["SE.IC.MERCHANT SHIP, LASH CARRIER (WITH BARGES)"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "L",
	    },
	  ];
	  icn["SE.IC.OILER/TANKER"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: /*STD2525 ? "OT" :*/ "O",
	    },
	  ];
	  icn["SE.IC.PASSENGER SHIP"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: /*STD2525 ? "PA" :*/ "P",
	    },
	  ];
	  icn["SE.IC.TUG, OCEAN GOING CIVILIAN"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: /*STD2525 ? "TU" :*/ "T",
	    },
	  ];
	  icn["SE.IC.TOW"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 35,
	      text: "TW",
	    },
	  ];
	  icn["SE.IC.TRANSPORT SHIP, HAZARDOUS MATERIAL"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 35,
	      text: "HZ",
	    },
	  ];
	  icn["SE.IC.JUNK/DHOW"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 35,
	      text: "QJ",
	    },
	  ];
	  icn["SE.IC.BARGE, NOT SELF-PROPELLED CIV"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 35,
	      text: "YB",
	    },
	  ];
	  icn["SE.IC.HOSPITAL SHIP CIV"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 95,95 0,-15 10,0 0,15 15,0 0,10 -15,0 0,15 -10,0 0,-15 -15,0 0,-10 z",
	    },
	  ];
	  icn["SE.IC.FISHING VESSEL"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 75,100 0,-15 20,0 0,15 50,0 -15,35 -60,0 -15,-35 z M 105,57.4 105,100 m 30,-35 -30,35",
	  };
	  icn["SE.IC.DRIFTER"] = [
	    icn["SE.IC.FISHING VESSEL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 30,
	      text: "DF",
	    },
	  ];
	  icn["SE.IC.TRAWLER"] = [
	    icn["SE.IC.FISHING VESSEL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 30,
	      text: "TR",
	    },
	  ];
	  icn["SE.IC.FISHING VESSEL DREDGE"] = [
	    icn["SE.IC.FISHING VESSEL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 30,
	      text: "DR",
	    },
	  ];
	  icn["SE.IC.LAW ENFORCEMENT VESSEL"] = [
	    icn["SE.IC.MERCHANT SHIP, GENERAL"],
	    { type: "path", d: "m 135,100 -15,35 -10,0 15,-35 z" },
	  ];
	  icn["SE.IC.LEISURE CRAFT, SAILING BOAT"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 105,55 0,40 35,0 z m -5,-5 0,50 m 45,0 -15,35 -60,0 -15,-35 z",
	  };
	  icn["SE.IC.LEISURE CRAFT, MOTORIZED"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 70,97.4 15,-30 10,0 -15,30 65,0 -15,35 -60,0 -15,-35 z",
	  };
	  icn["SE.IC.LEISURE CRAFT, MOTORIZED, RIGID-HULL INFLATABLE BOAT"] = [
	    icn["SE.IC.LEISURE CRAFT, MOTORIZED"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 30,
	      text: "RB",
	    },
	  ];
	  icn["SE.IC.LEISURE CRAFT, MOTORIZED, SPEEDBOAT"] = [
	    icn["SE.IC.LEISURE CRAFT, MOTORIZED"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 120,
	      fontsize: 30,
	      text: "SP",
	    },
	  ];
	  icn["SE.IC.LEISURE CRAFT, JETSKI"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 85,60 -30,45 10,15 75,0 0,-20 -60,0 10,-30 5,0 0,-10 z",
	  };
	  icn["SE.IC.UNMANNED SURFACE WATER VEHICLE (USV)"] = {
	    type: "path",
	    fill: STD2525 || numberSIDC ? iconFillColor : false,
	    stroke: black,
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	  };
	  icn["SE.IC.OWN SHIP"] = {
	    type: "path",
	    fill: false,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 50,100 100,0 m -50,-50 0,100 m 50,-50 c 0,27.6 -22.4,50 -50,50 -27.6,0 -50,-22.4 -50,-50 0,-27.6 22.4,-50 50,-50 27.6,0 50,22.4 50,50 z",
	  };
	  icn["SE.IC.DITCHED AIRCRAFT"] = {
	    type: "path",
	    fill: monoColor ? iconColor : iconFillColor,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 145,120 -15,-15 m -15,15 15,-15 m -75,15 15,-15 m 15,15 -15,-15 m 10,10 25,-30 -10,-10 10,-10 20,20 -10,35 -15,-15 -15,15 z",
	  };
	  icn["SE.IC.PERSON IN WATER"] = {
	    type: "path",
	    fill: monoColor ? iconColor : iconFillColor,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 105,110 10,-10 0,-15 5,0 0,20 -10,10 z m -10,0 -10,-10 0,-15 -5,0 0,20 10,10 z m 5,-5 0,-10 -5,0 -5,-5 0,-10 5,-5 10,0 5,5 0,10 -5,5 -5,0 m -15,25 15,-15 m 45,15 -15,-15 m -15,15 15,-15 m -75,15 15,-15 m 15,15 -15,-15 m 45,15 -15,-15",
	  };
	  icn["SE.IC.DISTRESSED VESSEL"] = {
	    type: "path",
	    fill: monoColor ? iconColor : iconFillColor,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 120,65 -20,20 20,-20 m -5,55 -35,-35 0,-20 45,45 z m -30,0 -15,-15 m -15,15 15,-15 m 45,15 15,-15 m 15,15 -15,-15 m -45,15 15,-15",
	  };
	  icn["SE.IC.SEA MINELIKE"] = {
	    type: "path",
	    fill: monoColor ? iconColor : iconFillColor,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 117.7,75 c 3.5,-3.5 7.1,-7.1 7.1,-7.1 l 7.1,7.1 -7.1,7.1 m -49.5,0 c -3.5,-3.5 -7.1,-7.1 -7.1,-7.1 l 7.1,-7.1 7.1,7.1 M 95,70 c 0,-5 0,-10 0,-10 l 10,0 0,10 m 25,30 c 0,16.6 -13.4,30 -30,30 -16.6,0 -30,-13.4 -30,-30 0,-16.6 13.4,-30 30,-30 16.6,0 30,13.4 30,30 z",
	  };
	  icn["SE.IC.NAVIGATIONAL"] = {
	    type: "path",
	    fill: false,
	    stroke: monoColor ? iconColor : "red",
	    d: "m 75,90 -10,10 70,0 -10,10",
	  };
	  icn["SE.IC.ICEBERG"] = {
	    type: "path",
	    fill: monoColor ? iconColor : iconFillColor,
	    stroke: monoColor ? iconColor : iconFillColor,
	    d: "m 75,100 25,-30 25,30 -5,15 -5,-5 -15,20 -15,-20 -5,5 z m -15,0 80,0",
	  };
	  icn["SE.IC.FUSED TRACK"] = [
	    text("?"),
	    {
	      type: "path",
	      fill: false,
	      d: "m 70,65 10,35 -10,35 60,0 -10,-35 10,-35 z",
	    },
	  ];
	  icn["SE.M1.OWN SHIP"] = textm1("OWN");
	  icn["SE.M1.ANTIAIR WARFARE"] = textm1("AAW");
	  icn["SE.M1.ANTISUBMARINE WARFARE"] = textm1("ASW");
	  icn["SE.M1.ESCORT"] = textm1("E");
	  icn["SE.M1.ELECTRONIC WARFARE"] = textm1("EW");
	  icn["SE.M1.INTELLIGENCE, SURVEILLANCE, RECONNAISSANCE"] = textm1("ISR");
	  icn["SE.M1.MINE COUNTER MEASURES"] = textm1("MCM");
	  icn["SE.M1.MISSILE DEFENSE"] = textm1("MD");
	  icn["SE.M1.MEDICAL"] = textm1("ME");
	  icn["SE.M1.MINE COUNTERMEASURES"] = textm1("MCM");
	  icn["SE.M1.MINE WARFARE"] = textm1("MIW");
	  icn["SE.M1.REMOTE MULTI-MISSION VEHIHLE"] = textm1("RMV");
	  icn["SE.M1.SPECIAL OPERATIONS FORCE"] = textm1("SOF");
	  icn["SE.M1.SURFACE WARFARE"] = textm1("SUW");
	  icn["SE.M1.BALLISTIC MISSILE"] = textm1("B");
	  icn["SE.M1.GUIDED MISSILE"] = textm1("G");
	  icn["SE.M1.OTHER GUIDED MISSILE"] = textm1("M");
	  icn["SE.M1.TORPEDO"] = textm1("T");
	  icn["SE.M1.CYBERSPACE"] = textm1("CYB");
	  icn["SE.M1.HIJACKER"] = textm1("HJ");
	  icn["SE.M2.CYBERSPACE"] = textm2("CYB");
	  icn["SE.M1.DRONE-EQUIPPED"] = {
	    type: "path",
	    stroke: false,
	    d: "m 80,65 20,13 20,-13 0,-5 -20,10 -20,-10 z",
	  };
	  icn["SE.M1.HELICOPTER-EQUIPPED"] = textm1("H");
	  icn["SE.M1.BALLISTIC MISSILE DEFENSE, SHOOTER"] = textm1("BM");
	  icn[
	    "SE.M1.BALLISTIC MISSILE DEFENSE, LONG- RANGE SURVEILLANCE AND TRACK (LRS&T)"
	  ] = textm1("ST");
	  icn["SE.M1.SEA-BASE X-BAND"] = textm1("SBX");
	  icn["SE.M1.HIJACKING/HIJACKED"] = textm1("H");
	  icn["SE.M2.ANTISUBMARINE WARFARE"] = textm2("ASW");
	  icn["SE.M2.MINE WARFARE"] = textm2("MIW");
	  icn["SE.M2.SURFACE WARFARE"] = textm2("SUW");
	  icn["SE.M2.NUCLEAR POWERED"] = textm2("N");
	  icn["SE.M2.HEAVY"] = textm2("H");
	  icn["SE.M2.LIGHT"] = textm2("L");
	  icn["SE.M2.MEDIUM"] = textm2("M");
	  icn["SE.M2.DOCK"] = textm2("D");
	  icn["SE.M2.LOGISTICS"] = textm2("LOG");
	  icn["SE.M2.TANK"] = textm2("T");
	  icn["SE.M2.VEHICLE"] = textm2("V");
	  icn["SE.M2.FAST"] = textm2("F");
	  icn["SE.M2.AIR-CUSHIONED"] = textm2("J");
	  icn["SE.M2.AIR-CUSHIONED (USA ONLY)"] = textm2("AC");
	  icn["SE.M2.HYDROFOIL"] = textm2("K");
	  icn["SE.M2.AUTONOMOUS CONTROL"] = textm2("AUT");
	  icn["SE.M2.REMOTELY PILOTED"] = textm2("RP");
	  icn["SE.M2.EXPENDABLE"] = textm2("EXP");

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var sea$1 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$4],
	  icons: function sea(sId, bbox, icn, _STD2525) {
	    // SEA ===========================================================================
	    sId["S-S-------"] = [];
	    sId["S-S-C-----"] = [icn["SE.IC.COMBATANT"]];
	    sId["S-S-CL----"] = [icn["SE.IC.SURFACE COMBATANT, LINE"]];
	    sId["S-S-CLCV--"] = [icn["SE.IC.CARRIER"]];
	    sId["S-S-CLBB--"] = [icn["SE.IC.BATTLESHIP"]];
	    sId["S-S-CLCC--"] = [icn["SE.IC.CRUISER"]];
	    sId["S-S-CLDD--"] = [icn["SE.IC.DESTROYER"]];
	    sId["S-S-CLFF--"] = [icn["SE.IC.FRIGATE"]];
	    sId["S-S-CLLL--"] = [icn["SE.IC.LITTORAL COMBATANT SHIP"]];
	    sId["S-S-CLLLAS"] = [
	      icn["SE.IC.LITTORAL COMBATANT SHIP"],
	      icn["SE.M2.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-S-CLLLMI"] = [
	      icn["SE.IC.LITTORAL COMBATANT SHIP"],
	      icn["SE.M2.MINE WARFARE"],
	    ];
	    sId["S-S-CLLLSU"] = [
	      icn["SE.IC.LITTORAL COMBATANT SHIP"],
	      icn["SE.M2.SURFACE WARFARE"],
	    ];
	    sId["S-S-CA----"] = [icn["SE.IC.AMPHIBIOUS WARFARE SHIP"]];
	    sId["S-S-CALA--"] = [
	      _STD2525
	        ? icn["SE.IC.AMPHIBIOUS ASSAULT"]
	        : icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, GENERAL"],
	    ];
	    sId["S-S-CALS--"] = [icn["SE.IC.LANDING SHIP"]];
	    sId["S-S-CALSM-"] = [icn["SE.IC.LANDING SHIP"], icn["SE.M2.MEDIUM"]];
	    sId["S-S-CALST-"] = [icn["SE.IC.LANDING SHIP"], icn["SE.M2.TANK"]];
	    sId["S-S-CALC--"] = [icn["SE.IC.LANDING CRAFT"]];
	    sId["S-S-CM----"] = [icn["SE.IC.MINE WARFARE VESSEL"]];
	    sId["S-S-CMML--"] = [icn["SE.IC.MINELAYER"]];
	    sId["S-S-CMMS--"] = [icn["SE.IC.MINESWEEPER"]];
	    sId["S-S-CMMH--"] = [icn["SE.IC.MINEHUNTER"]];
	    sId["S-S-CMMA--"] = [icn["SE.IC.MINE COUNTER MEASURE SUPPORT SHIP"]];
	    sId["S-S-CMMD--"] = [icn["SE.IC.MINESWEEPER, DRONE"]];
	    sId["S-S-CP----"] = [icn["SE.IC.PATROL"]];
	    sId["S-S-CPSB--"] = [icn["SE.IC.PATROL CRAFT"]];
	    sId["S-S-CPSU--"] = [icn["SE.IC.PATROL ANTI SUBMARINE WARFARE"]];
	    sId["S-S-CPSUM-"] = [icn["SE.IC.PATROL ANTISHIP MISSILE"]];
	    sId["S-S-CPSUT-"] = [icn["SE.IC.PATROL TORPEDO"]];
	    sId["S-S-CPSUG-"] = [icn["SE.IC.PATROL GUN"]];
	    sId["S-S-CH----"] = [icn["SE.IC.HOVERCRAFT"]];
	    //1.X.4.1.6  in 2525 listed as 1.X.4.1.7
	    sId["S-S-G-----"] = [icn["SE.IC.NAVY TASK ORGANIZATION UNIT"]];
	    //1.X.4.1.6.1  in 2525 listed as 1.X.4.1.7.1 Different SIDC listed let's support both
	    sId["S-S-GF----"] = sId["S-S-GT----"] = [icn["SE.IC.NAVY TASK FORCE"]];
	    //1.X.4.1.6.2  in 2525 listed as 1.X.4.1.7.2
	    sId["S-S-GG----"] = [icn["SE.IC.NAVY TASK GROUP"]];
	    //1.X.4.1.6.3  in 2525 listed as 1.X.4.1.7.3
	    sId["S-S-GU----"] = [icn["SE.IC.NAVY TASK UNIT"]];
	    sId["S-S-GE----"] = [icn["SE.IC.NAVY TASK ELEMENT"]];
	    //1.X.4.1.6.5  in 2525 listed as 1.X.4.1.7.4
	    sId["S-S-GC----"] = [icn["SE.IC.CONVOY"]];
	    sId["S-S-CD----"] = [icn["SE.IC.SEA SURFACE DECOY"]];
	    sId["S-S-CU----"] = [icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"]];
	    sId["S-S-CUM---"] = [
	      icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"],
	      icn["SE.M1.MINE COUNTERMEASURES"],
	    ];
	    sId["S-S-CUS---"] = [
	      icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"],
	      icn["SE.M1.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-S-CUN---"] = [
	      icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"],
	      icn["SE.M1.SURFACE WARFARE"],
	    ];
	    sId["S-S-CUR---"] = [
	      icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"],
	      icn["SE.M1.REMOTE MULTI-MISSION VEHIHLE"],
	    ];
	    sId["S-S-N-----"] = [icn["SE.IC.NONCOMBATANT"]];
	    sId["S-S-NR----"] = [icn["SE.IC.AUXILIARY SHIP"]];
	    sId["S-S-NRA---"] = [icn["SE.IC.AMMUNITION SHIP"]];
	    sId["S-S-NRO---"] = [icn["SE.IC.OILER, REPLENISHMENT"]];
	    //1.X.4.2.2 Different SIDC listed let's support both
	    sId["S-S-NF----"] = sId["S-S-NFT---"] = [icn["SE.IC.TUG, OCEAN GOING"]];
	    sId["S-S-NI----"] = [icn["SE.IC.INTELLIGENCE COLLECTOR"]];
	    sId["S-S-NM----"] = [icn["SE.IC.HOSPITAL SHIP"]];
	    sId["S-S-NS----"] = [icn["SE.IC.SERVICE CRAFT, YARD, GENERAL"]];
	    sId["S-S-NR----"] = [icn["SE.IC.REPAIR SHIP"]];
	    sId["S-S-NTS---"] = [icn["SE.IC.SUBMARINE TENDER"]];
	    sId["S-S-NH----"] = [icn["SE.IC.HOVERCRAFT NONCOMBATANT"]];
	    //sId["S-S-NS----"] = [icn["SE.IC.TUG, HARBOUR"]];
	    sId["S-S-X-----"] = []; // N/A
	    sId["S-S-XM----"] = [icn["SE.IC.MERCHANT SHIP, GENERAL"]];
	    sId["S-S-XMC---"] = [icn["SE.IC.CARGO, GENERAL"]];
	    sId["S-S-XME---"] = sId["S-S-XMR---"] = [icn["SE.IC.ROLL ON-ROLL OFF"]];
	    sId["S-S-XMO---"] = [icn["SE.IC.OILER/TANKER"]];
	    sId["S-S-XMT---"] = sId["S-S-XMTU--"] = [
	      icn["SE.IC.TUG, OCEAN GOING CIVILIAN"],
	    ];
	    sId["S-S-XMF---"] = [icn["SE.IC.FERRY"]];
	    sId["S-S-XMP---"] = [icn["SE.IC.PASSENGER SHIP"]];
	    sId["S-S-XMH---"] = [icn["SE.IC.TRANSPORT SHIP, HAZARDOUS MATERIAL"]];
	    sId["S-S-XMD---"] = [icn["SE.IC.DREDGE"]];
	    sId["S-S-XMTO--"] = [icn["SE.IC.TOW"]];
	    sId["S-S-XF----"] = [icn["SE.IC.FISHING VESSEL"]];
	    sId["S-S-XFDF--"] = [icn["SE.IC.DRIFTER"]];
	    sId["S-S-XFTR--"] = [icn["SE.IC.TRAWLER"]];
	    sId["S-S-XFDR--"] = [icn["SE.IC.FISHING VESSEL DREDGE"]];
	    sId["S-S-XR----"] = [icn["SE.IC.LEISURE CRAFT, SAILING BOAT"]];
	    sId["S-S-XL----"] = [icn["SE.IC.LAW ENFORCEMENT VESSEL"]];
	    sId["S-S-XH----"] = [icn["SE.IC.HOVERCRAFT CIVILIAN"]];
	    sId["S-S-XA----"] = [icn["SE.IC.LEISURE CRAFT, MOTORIZED"]];
	    sId["S-S-XAR---"] = [
	      icn["SE.IC.LEISURE CRAFT, MOTORIZED, RIGID-HULL INFLATABLE BOAT"],
	    ];
	    sId["S-S-XAS---"] = [icn["SE.IC.LEISURE CRAFT, MOTORIZED, SPEEDBOAT"]];
	    sId["S-S-XP----"] = [icn["SE.IC.LEISURE CRAFT, JETSKI"]];
	    sId["S-S-O-----"] = [icn["SE.IC.OWN SHIP"]];
	    sId["S-S-E-----"] = []; // N/A
	    sId["S-S-ED----"] = [icn["SE.IC.DITCHED AIRCRAFT"]];
	    sId["S-S-EP----"] = [icn["SE.IC.PERSON IN WATER"]];
	    sId["S-S-EV----"] = [icn["SE.IC.DISTRESSED VESSEL"]];
	    sId["S-S-Z-----"] = []; // N/A
	    sId["S-S-ZM----"] = [icn["SE.IC.SEA MINELIKE"]];
	    sId["S-S-ZN----"] = [icn["SE.IC.NAVIGATIONAL"]];
	    sId["S-S-ZI----"] = [icn["SE.IC.ICEBERG"]];
	  },
	};

	function icons$3 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const affiliation = metadata.affiliation || "Friend";
	  const frame = metadata.frame;
	  const numberSIDC = metadata.numberSIDC;

	  //If hostile and not monoColor, make it red, otherwise use the iconColor.
	  const iconColor = colors.iconColor[affiliation];
	  const iconFillColor = colors.iconFillColor[affiliation];
	  const white = colors.white[affiliation];
	  const black = colors.black[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["SU.IC.MILITARY"] = text("MIL");
	  icn["SU.IC.CIVILIAN"] = text("CIV");
	  icn["SU.IC.CIVILIAN"].fill =
	    STD2525 || numberSIDC ? iconFillColor : !frame ? iconFillColor : false;
	  icn["SU.IC.CIVILIAN"].stroke = black;
	  icn["SU.IC.CIVILIAN"].strokewidth = 3;
	  icn["SU.IC.MANUAL TRACK"] = text("MAN");
	  icn["SU.IC.SUBMARINE"] = {
	    type: "path",
	    d: "m 75,85 50,0 15,15 -15,15 -50,0 -15,-15 z",
	  };
	  icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"] = {
	    type: "path",
	    d: "m 75,110 -10,-10 10,-10 20,0 0,-10 10,0 0,10 20,0 10,10 -10,10 z",
	  };
	  icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION, SURFACED"] = [
	    {
	      type: "path",
	      d: "m 75,110 -10,-10 10,-10 20,0 0,-10 10,0 0,10 20,0 10,10 -10,10 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,120 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	    },
	  ];
	  icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"] = {
	    type: "path",
	    d: "m 75,110 -10,-10 10,-10 0,-10 50,0 0,10 10,10 -10,10 z",
	  };
	  icn["SU.IC.SUBMARINE NUCLEAR PROPULSION, SURFACED"] = [
	    {
	      type: "path",
	      d: "m 75,110 -10,-10 10,-10 0,-10 50,0 0,10 10,10 -10,10 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,120 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	    },
	  ];
	  icn["SU.IC.SUBMARINE ATTACK (SSN)"] = {
	    type: "text",
	    fill: white,
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "A",
	  };
	  icn["SU.IC.SUBMARINE MISSILE (TYPE UNKNOWN)"] = {
	    type: "text",
	    fill: white,
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "M",
	  };
	  icn["SU.IC.SUBMARINE GUIDED MISSILE (SSGN)"] = {
	    type: "text",
	    fill: white,
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "G",
	  };
	  icn["SU.IC.SUBMARINE BALLISTIC MISSILE (SSBN)"] = {
	    type: "text",
	    fill: white,
	    stroke: false,
	    x: 100,
	    y: 110,
	    fontsize: 30,
	    text: "B",
	  };
	  icn["SU.IC.SUBMARINE, SURFACED"] = [
	    { type: "path", d: "m 75,80 50,0 15,15 -15,15 -50,0 -15,-15 z" },
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,120 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	    },
	  ];
	  icn["SU.IC.SUBMARINE, BOTTOMED"] = [
	    { type: "path", d: "m 75,80 50,0 15,15 -15,15 -50,0 -15,-15 z" },
	    { type: "path", d: "m 70,120 0,-5 60,0 0,5 z" },
	  ];
	  icn["SU.IC.SUBMARINE, SNORKELING"] = [
	    {
	      type: "path",
	      d: "m 75,120 -10,-10 10,-10 20,0 0,-20 10,0 0,20 20,0 10,10 -10,10 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,95 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	    },
	  ];
	  icn["SU.IC.OTHER SUBMERSIBLE"] = {
	    type: "path",
	    d: "m 85,90 0,-10 30,0 0,10 m 20,10 c 0,5.5 -15.7,10 -35,10 -19.3,0 -35,-4.5 -35,-10 0,-5.5 15.7,-10 35,-10 19.3,0 35,4.5 35,10 z",
	  };
	  icn["SU.IC.OTHER SUBMERSIBLE, SURFACED"] = [
	    icn["SU.IC.OTHER SUBMERSIBLE"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,120 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	    },
	  ];
	  icn[
	    "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	  ] = {
	    type: "path",
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	    stroke: false,
	  };
	  icn["SU.IC.NON-SUBMARINE"] =
	    STD2525 && !numberSIDC
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          x: 100,
	          y: 100,
	          fontsize: 35,
	          text: "NON",
	        }
	      : [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            x: 100,
	            y: 93,
	            fontsize: 23,
	            text: "NON",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            x: 100,
	            y: 113,
	            fontsize: 23,
	            text: "SUB",
	          },
	        ];
	  icn["SU.IC.DIVER, MILITARY"] = {
	    type: "path",
	    stroke: false,
	    d: "M 100 80 C 93.7 80 88.3 82.7 85.8 88.3 L 85.8 88.3 L 77.8 88.3 L 77.8 105 L 85.8 105 L 85.8 104.8 C 87.3 108.2 88.8 110 92 111.7 L 92.1 111.7 L 84.2 120 L 115.8 120 L 107.9 111.7 L 108 111.7 C 111.1 110 112.8 108.3 114.3 105 L 122.2 105 L 122.2 88.3 L 114.3 88.3 L 114.3 88.3 C 111.7 82.8 106.3 80 100 80 z M 100 86.6 C 105.4 86.6 109.8 91.1 109.8 96.6 C 109.8 102.1 105.4 106.6 100 106.6 C 94.6 106.6 90.1 102.1 90.1 96.6 C 90.1 91.1 94.6 86.6 100 86.6 z M 100 89.6 C 96.2 89.6 93.1 92.7 93.1 96.6 C 93.1 100.5 96.2 103.6 100 103.6 C 103.8 103.6 106.8 100.5 106.8 96.6 C 106.8 92.7 103.8 89.6 100 89.6 z",
	  };
	  icn["SU.IC.SUBMERSIBLE, CIVILIAN"] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 85,90 0,-10 30,0 0,10 m 20,10 c 0,5.5 -15.7,10 -35,10 -19.3,0 -35,-4.5 -35,-10 0,-5.5 15.7,-10 35,-10 19.3,0 35,4.5 35,10 z",
	  };
	  icn[
	    "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV), CIVILIAN"
	  ] = {
	    type: "path",
	    fill: STD2525 ? iconFillColor : !frame ? iconFillColor : false,
	    d: "m 60,84 40,20 40,-20 0,8 -40,25 -40,-25 z",
	  };
	  icn["SU.M1.CYBERSPACE"] = textm1("CYB");
	  icn["SU.M1.HIJACKER"] = textm1("HJ");
	  icn["SU.M2.CYBERSPACE"] = textm2("CYB");
	  icn["SU.IC.DIVER, CIVILIAN"] = {
	    type: "path",
	    fill: iconFillColor,
	    d: "M 114.3,94 C 114.3,102.3 107.9,109 100,109 c -7.9,0 -14.2,-6.7 -14.2,-15 0,-8.3 6.4,-15 14.2,-15 7.9,0 14.3,6.7 14.3,15 z m 0,27 14.3,15 -57,0 14.3,-15 M 125.7,79 l 14.3,0 0,30 -14.3,0 m -51.3,0 -14.3,0 0,-30 14.3,0 m 54.2,15 c 0,16.6 -12.8,30 -28.5,30 -15.7,0 -28.5,-13.4 -28.5,-30 C 71.5,77.4 84.3,64 100,64 115.7,64 128.5,77.4 128.5,94 z",
	  };
	  icn["SU.IC.UNDERWATER WEAPON"] = text("WPN");
	  icn["SU.IC.TORPEDO"] = {
	    type: "path",
	    d: "m 65,105 -5,-5 5,-5 60,0 c 0,0 5,5 5,5 l 5,-5 0,10 -5,-5 -5,5 z",
	  };
	  icn["SU.IC.IMPROVISED EXPLOSIVE DEVICE (IED)"] = text("IED");
	  //Yes the color settings here looks like crap, but the person implementing 2525 mines obviously didn't read the standard so we have to make a lot of special cases...
	  icn["SU.IC.UNDERWATER DECOY"] = {
	    type: "path",
	    stroke: black,
	    d: STD2525
	      ? "M 105,110 90,95 105,80 z M 85,110 70,95 85,80 z m 40,-30 -15,15 15,15 z m -55,40 0,-5 55,0 0,5 z"
	      : "M 105,120 90,105 105,90 z M 85,120 70,105 85,90 z m 40,-30 -15,15 15,15 z m -55,-5 0,-5 55,0 0,5 z",
	    fill: STD2525 ? iconColor : iconFillColor,
	  };
	  icn["SU.IC.UNDERWATER DECOY DSymbol"] = {
	    type: "path",
	    d: "M 85 81 L 65 98 L 85 119 L 85 81 z M 110 81 L 90 98 L 110 119 L 110 81 z M 135 81 L 115 98 L 135 119 L 135 81 z",
	  };
	  icn["SU.IC.ECHO TRACKER CLASSIFIER (ETC)/POSSIBLE CONTACT (POSCON)"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    x: 100,
	    y: 120,
	    fontsize: 60,
	    text: "?",
	  };
	  icn["SU.IC.FUSED TRACK"] = [
	    text("?"),
	    {
	      type: "path",
	      fill: false,
	      d: "m 70,65 10,35 -10,35 60,0 -10,-35 10,-35",
	    },
	  ];
	  icn["SU.IC.SEA MINE"] = {
	    type: "path",
	    fill:
	      (STD2525 || numberSIDC) && !monoColor
	        ? colors.iconColor.Hostile
	        : iconFillColor,
	    stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,

	    d: "M 115.9,73 126.5,62.4 137.1,73 126.5,83.6 m -53,0 L 62.9,73 73.5,62.4 84.1,73 m 8.4,-3 0,-15 15,0 0,15 m 22.5,30 c 0,16.6 -13.4,30 -30,30 -16.6,0 -30,-13.4 -30,-30 0,-16.6 13.4,-30 30,-30 C 116.6,70 130,83.4 130,100 z",
	  };
	  icn["SU.IC.SEA MINE - BOTTOM"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Hostile
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE - MOORED"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Hostile
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,130.5 l 0,7.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE - FLOATING"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE - RISING"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "path",

	      fill:
	        numberSIDC && alternateMedal
	          ? ""
	          : (STD2525 || numberSIDC) && !monoColor
	            ? colors.iconColor.Hostile
	            : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 100,128 -10,15 20,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE (IN OTHER POSITION)"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 130,100 15,0 M 70,100 l -15,0",
	    },
	  ];
	  icn["SU.IC.SEA MINE - KINGFISHER"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 35,
	      text: "K",
	    },
	  ];
	  icn["SU.IC.SEA MINE - SMALL OBJECT"] = [
	    icn["SU.IC.SEA MINE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "SO",
	    },
	  ];
	  icn["SU.IC.SEA MINE EXERCISE MINE"] = [
	    {
	      type: "path",
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "M 115.9,73 126.5,62.4 137.1,73 126.5,83.6 m -53,0 L 62.9,73 73.5,62.4 84.1,73 m 8.4,-3 0,-15 15,0 0,15 m 22.5,30 c 0,16.6 -13.4,30 -30,30 -16.6,0 -30,-13.4 -30,-30 0,-16.6 13.4,-30 30,-30 C 116.6,70 130,83.4 130,100 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "EX",
	    },
	    numberSIDC
	      ? []
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          fill: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	          x: 150,
	          y: 36,
	          fontsize: 40,
	          text: "X",
	        },
	  ];
	  icn["SU.IC.SEA MINE EXERCISE MINE - BOTTOM"] = [
	    icn["SU.IC.SEA MINE EXERCISE MINE"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE EXERCISE MINE - MOORED"] = [
	    icn["SU.IC.SEA MINE EXERCISE MINE"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,130.5 l 0,7.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE EXERCISE MINE - FLOATING"] = [
	    icn["SU.IC.SEA MINE EXERCISE MINE"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE EXERCISE MINE - RISING"] = [
	    icn["SU.IC.SEA MINE EXERCISE MINE"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 100,128 -10,15 20,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE DECOY"] = {
	    type: "path",

	    fill:
	      (STD2525 || numberSIDC) && !monoColor
	        ? alternateMedal
	          ? black
	          : "rgb(0, 130, 24)"
	        : iconFillColor,
	    stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	    d: "m 106.6,101.6 0,26.3 -13.1,-13.1 z m -19.7,0 0,26.3 -13.1,-13.1 z m 39.4,0 0,26.3 -13.1,-13.1 13.1,-13.1 M 100,75.3 c -14.5,0 -26.3,11.8 -26.3,26.3 l 52.5,0 C 126.3,87.1 114.5,75.3 100,75.3 z m -6.6,0 0,-13.1 13.1,0 0,13.1 m -29.8,12.3 -9.3,-9.3 9.3,-9.3 9.3,9.3 m 27.9,0 9.3,-9.3 9.3,9.3 -9.3,9.3",
	  };
	  icn["SU.IC.SEA MINE DECOY, BOTTOM/GROUND"] = [
	    icn["SU.IC.SEA MINE DECOY"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE DECOY, MOORED"] = [
	    icn["SU.IC.SEA MINE DECOY"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 50,0 M 100,100 l 0,40",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEUTRALIZED"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "M 115.9,73 126.5,62.4 137.1,73 126.5,83.6 m -53,0 L 62.9,73 73.5,62.4 84.1,73 m 8.4,-3 0,-15 15,0 0,15 m 22.5,30 c 0,16.6 -13.4,30 -30,30 -16.6,0 -30,-13.4 -30,-30 0,-16.6 13.4,-30 30,-30 C 116.6,70 130,83.4 130,100 z",
	    },
	    {
	      type: "path",
	      strokewidth: 5,
	      stroke: !alternateMedal ? black : white,
	      d: "m 135,65 -70,70 m 0,-70 70,70",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEUTRALIZED - BOTTOM"] = [
	    icn["SU.IC.SEA MINE NEUTRALIZED"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEUTRALIZED - MOORED"] = [
	    icn["SU.IC.SEA MINE NEUTRALIZED"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,130.5 l 0,7.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEUTRALIZED - FLOATING"] = [
	    icn["SU.IC.SEA MINE NEUTRALIZED"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEUTRALIZED - RISING"] = [
	    icn["SU.IC.SEA MINE NEUTRALIZED"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 100,128 -10,15 20,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE (IN OTHER POSITION) NEUTRALIZED"] = [
	    icn["SU.IC.SEA MINE NEUTRALIZED"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 130,100 15,0 M 70,100 l -15,0",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILEC"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "E",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILEC - BOTTOM"] = [
	    icn["SU.IC.SEA MINE MILEC"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILEC - MOORED"] = [
	    icn["SU.IC.SEA MINE MILEC"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,128.5 l 0,9.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILEC - FLOATING"] = [
	    icn["SU.IC.SEA MINE MILEC"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE MINE ANCHOR"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : false,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 18,
	      text: "ANCR",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILCO"] = [
	    {
	      type: "path",
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,141,42)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    numberSIDC
	      ? []
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          fill: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	          x: 100,
	          y: 103,
	          fontsize: 30,
	          text: "#",
	        },
	  ];
	  icn["SU.IC.SEA MINE MILCO - BOTTOM"] = [
	    icn["SU.IC.SEA MINE MILCO"],
	    {
	      type: "path",
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,141,42)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILCO - MOORED"] = [
	    icn["SU.IC.SEA MINE MILCO"],
	    {
	      type: "path",
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,128.5 l 0,9.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILCO - FLOATING"] = [
	    icn["SU.IC.SEA MINE MILCO"],
	    {
	      type: "path",
	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 1"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: monoColor
	      ? monoColor
	      : (STD2525 || numberSIDC) && !alternateMedal
	        ? black
	        : white,
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "1",
	  };
	  icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 2"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: monoColor
	      ? monoColor
	      : (STD2525 || numberSIDC) && !alternateMedal
	        ? black
	        : white,
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "2",
	  };
	  icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 3"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: monoColor
	      ? monoColor
	      : (STD2525 || numberSIDC) && !alternateMedal
	        ? black
	        : white,
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "3",
	  };
	  icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 4"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: monoColor
	      ? monoColor
	      : (STD2525 || numberSIDC) && !alternateMedal
	        ? black
	        : white,
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "4",
	  };
	  icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 5"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: monoColor
	      ? monoColor
	      : (STD2525 || numberSIDC) && !alternateMedal
	        ? black
	        : white,
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "5",
	  };
	  icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"] = [
	    {
	      type: "path",
	      strokedasharray: "8,4",
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "NR",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - BOTTOM"] = [
	    icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - MOORED"] = [
	    icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,130.5 l 0,7.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - FLOATING"] = [
	    icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(255,255,0)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "OB",
	    },
	  ];
	  icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR NEUTRALIZED"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      stroke: false,
	      fill:
	        (STD2525 || numberSIDC) && !monoColor && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 112,
	      fontsize: 30,
	      text: "OB",
	    },
	    {
	      type: "path",
	      strokewidth: 5,
	      stroke: !alternateMedal ? black : white,
	      d: "m 135,65 -70,70 m 0,-70 70,70",
	    },
	  ];
	  icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"] = [
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 113.8,127.6 -27.6,0 -13.8,-13.8 0,-27.6 13.8,-13.8 27.6,0 13.8,13.8 0,27.6 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill: monoColor
	        ? monoColor
	        : (STD2525 || numberSIDC) && !alternateMedal
	          ? black
	          : white,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "N",
	    },
	  ];
	  icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - BOTTOM"] = [
	    icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 74.8,125.2 50.4,0 0,12.6 -50.4,0 z",
	    },
	  ];
	  icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - MOORED"] = [
	    icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"],
	    {
	      type: "path",

	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? alternateMedal
	            ? black
	            : "rgb(0, 130, 24)"
	          : iconFillColor,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75.5,136.8 49,0 M 100,128.5 l 0,9.3",
	    },
	  ];
	  icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - FLOATING"] = [
	    icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"],
	    {
	      type: "path",

	      fill: false,
	      stroke: (STD2525 || numberSIDC) && !monoColor ? black : iconColor,
	      d: "m 75,140 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10",
	    },
	  ];
	  icn["SU.IC.UNEXPLODED EXPLOSIVE ORDNANCE"] = [
	    {
	      type: "path",
	      strokedasharray: "8,4",
	      fill: false,
	      stroke:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Hostile
	          : iconColor,
	      d: "m 85,65 30,0 20,20 0,30 -20,20 -30,0 -20,-20 0,-30 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Hostile
	          : iconColor,
	      x: 100,
	      y: 103,
	      fontsize: 30,
	      text: "UXO",
	    },
	  ];
	  icn["SU.IC.ENVIRONMENTAL REPORT LOCATION"] = [
	    {
	      type: "path",

	      fill: false,
	      stroke:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconColor,
	      d: "m 70,70 0,60 60,0 0,-60 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconColor,
	      x: 100,
	      y: 107,
	      fontsize: 60,
	      text: "E",
	    },
	  ];
	  icn["SU.IC.DIVE REPORT LOCATION"] = [
	    {
	      type: "path",
	      fill: false,
	      stroke:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconColor,
	      d: "m 70,70 0,60 60,0 0,-60 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      fill:
	        (STD2525 || numberSIDC) && !monoColor
	          ? colors.iconColor.Neutral
	          : iconColor,
	      x: 100,
	      y: 107,
	      fontsize: 60,
	      text: "D",
	    },
	  ];
	  icn["SU.IC.SEABED INSTALLATION/MANMADE"] = {
	    type: "path",
	    fill: iconFillColor,
	    stroke: black,
	    d: "m 140,125 -80,0 10,-30 10,20 20,-50 20,50 10,-25 z",
	  };
	  icn["SU.IC.SEABED INSTALLATION, MAN-MADE, MILITARY"] = {
	    type: "path",
	    d: "m 75,80 0,40 50,0 0,-15 -15,0 0,-10 -20,0 0,-15 z",
	  };
	  icn["SU.IC.SEABED INSTALLATION, MAN-MADE, NON-MILITARY"] = {
	    type: "path",
	    fill: iconFillColor,
	    d: "m 75,80 0,40 50,0 0,-15 -15,0 0,-10 -20,0 0,-15 z",
	  };
	  icn["SU.IC.SEABED ROCK/STONE, OBSTACLE, OTHER"] = {
	    type: "path",
	    d: "m 140,125 -80,0 10,-30 10,20 20,-50 20,50 10,-25 z",
	  };
	  icn["SU.IC.WRECK"] = {
	    type: "path",
	    d: "m 125,85 0,30 m -50,-30 0,30 m 25,-40 0,45 m -40,-20 80,0",
	  };
	  icn["SU.IC.MARINE LIFE"] = {
	    type: "path",
	    d: "m 60,100 20,-20 45,20 15,-10 0,20 -15,-10 -45,20 z",
	  };
	  icn["SU.IC.SEA ANOMALY"] = {
	    type: "path",
	    fill: false,
	    d: "m 65,100 15,-20 20,30 20,-30 15,20 m -70,10 15,-20 20,30 20,-30 15,20",
	  };
	  icn["SU.M1.ANTISUBMARINE WARFARE"] = textm1("ASW");
	  icn["SU.M1.AUXILIARY"] = textm1("AUX");
	  icn["SU.M1.COMMAND AND CONTROL"] = textm1("C2");
	  icn["SU.M1.INTELLIGENCE, SURVEILLANCE, RECONNAISSANCE"] = textm1("ISR");
	  icn["SU.M1.MINE COUNTERMEASURES"] = textm1("MCM");
	  icn["SU.M1.MINE WARFARE"] = textm1("MIW");
	  icn["SU.M1.SURFACE WARFARE"] = textm1("SUW");
	  icn["SU.M1.ATTACK"] = textm1("A");
	  icn["SU.M1.BALLISTIC MISSILE"] = textm1("B");
	  icn["SU.M1.GUIDED MISSILE"] = textm1("G");
	  icn["SU.M1.OTHER GUIDED MISSILES (POINT DEFENCE)"] = textm1("M");
	  icn["SU.M1.SPECIAL OPERATIONS FORCE"] = textm1("SOF");
	  icn["SU.M1.POSSIBLE SUBMARINE - LOW 1"] = textm1("P1");
	  icn["SU.M1.POSSIBLE SUBMARINE - LOW 2"] = textm1("P2");
	  icn["SU.M1.POSSIBLE SUBMARINE - HIGH 3"] = textm1("P3");
	  icn["SU.M1.POSSIBLE SUBMARINE - HIGH 4"] = textm1("P4");
	  icn["SU.M1.PROBABLE SUBMARINE"] = textm1("PB");
	  icn["SU.M1.CERTAIN SUBMARINE"] = textm1("CT");
	  icn["SU.M1.ANTI-TORPEDO TORPEDO"] = textm1("ATT");
	  icn["SU.M1.HIJACKING/HIJACKED"] = textm1("H");
	  icn["SU.M2.POSSIBLE SUBMARINE - LOW 1"] = textm2("P1");
	  icn["SU.M2.POSSIBLE SUBMARINE - LOW 2"] = textm2("P2");
	  icn["SU.M2.POSSIBLE SUBMARINE - HIGH 3"] = textm2("P3");
	  icn["SU.M2.POSSIBLE SUBMARINE - HIGH 4"] = textm2("P4");
	  icn["SU.M2.PROBABLE SUBMARINE"] = textm2("PB");
	  icn["SU.M2.AIR INDEPENDENT PROPULSION"] = textm2("AI");
	  icn["SU.M2.CERTSUB"] = textm2("CT");
	  icn["SU.M2.DIESEL PROPULSION"] = textm2("D");
	  icn["SU.M2.DIESEL - TYPE 1"] = textm2("D1");
	  icn["SU.M2.DIESEL - TYPE 2"] = textm2("D2");
	  icn["SU.M2.DIESEL - TYPE 3"] = textm2("D3");
	  icn["SU.M2.NUCLEAR POWERED"] = textm2("N");
	  icn["SU.M2.NUCLEAR - TYPE 1"] = textm2("N1");
	  icn["SU.M2.NUCLEAR - TYPE 2"] = textm2("N2");
	  icn["SU.M2.NUCLEAR - TYPE 3"] = textm2("N3");
	  icn["SU.M2.NUCLEAR - TYPE 4"] = textm2("N4");
	  icn["SU.M2.NUCLEAR - TYPE 5"] = textm2("N5");
	  icn["SU.M2.NUCLEAR - TYPE 6"] = textm2("N6");
	  icn["SU.M2.NUCLEAR - TYPE 7"] = textm2("N7");
	  icn["SU.M2.AUTONOMOUS CONTROL"] = textm2("AUT");
	  icn["SU.M2.REMOTELY PILOTED"] = textm2("RP");
	  icn["SU.M2.EXPENDABLE"] = textm2("EXP");

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var subsurface$1 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$3],
	  icons: function subsurface(sId, bbox, icn, _STD2525) {
	    // SUBSURFACE ====================================================================
	    sId["S-U-------"] = [];
	    sId["S-U-S-----"] = [icn["SU.IC.SUBMARINE"]];
	    sId["S-U-SF----"] = [icn["SU.IC.SUBMARINE, SURFACED"]];
	    sId["S-U-SB----"] = [icn["SU.IC.SUBMARINE, BOTTOMED"]];
	    sId["S-U-SR----"] = [icn["SU.IC.SUBMARINE"], icn["SU.M2.CERTSUB"]];
	    sId["S-U-SX----"] = [icn["SU.IC.NON-SUBMARINE"]];
	    sId["S-U-SN----"] = [icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"]];
	    sId["S-U-SNF---"] = [icn["SU.IC.SUBMARINE NUCLEAR PROPULSION, SURFACED"]];
	    sId["S-U-SNA---"] = [
	      icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"],
	      icn["SU.IC.SUBMARINE ATTACK (SSN)"],
	    ];
	    sId["S-U-SNM---"] = [
	      icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"],
	      icn["SU.IC.SUBMARINE MISSILE (TYPE UNKNOWN)"],
	    ];
	    sId["S-U-SNG---"] = [
	      icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"],
	      icn["SU.IC.SUBMARINE GUIDED MISSILE (SSGN)"],
	    ];
	    sId["S-U-SNB---"] = [
	      icn["SU.IC.SUBMARINE NUCLEAR PROPULSION"],
	      icn["SU.IC.SUBMARINE BALLISTIC MISSILE (SSBN)"],
	    ];
	    sId["S-U-SC----"] = [icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"]];
	    sId["S-U-SCF---"] = [
	      icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION, SURFACED"],
	    ];
	    sId["S-U-SCA---"] = [
	      icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"],
	      icn["SU.IC.SUBMARINE ATTACK (SSN)"],
	    ];
	    sId["S-U-SCM---"] = [
	      icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"],
	      icn["SU.IC.SUBMARINE MISSILE (TYPE UNKNOWN)"],
	    ];
	    sId["S-U-SCG---"] = [
	      icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"],
	      icn["SU.IC.SUBMARINE GUIDED MISSILE (SSGN)"],
	    ];
	    sId["S-U-SCB---"] = [
	      icn["SU.IC.SUBMARINE CONVENTIONAL PROPULSION"],
	      icn["SU.IC.SUBMARINE BALLISTIC MISSILE (SSBN)"],
	    ];
	    sId["S-U-SO----"] = [icn["SU.IC.OTHER SUBMERSIBLE"]];
	    sId["S-U-SOF---"] = [icn["SU.IC.OTHER SUBMERSIBLE, SURFACED"]];
	    sId["S-U-SU----"] = [
	      icn[
	        "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	      ],
	    ];
	    sId["S-U-SUM---"] = [
	      icn[
	        "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	      ],
	      icn["SU.M1.MINE COUNTERMEASURES"],
	    ];
	    sId["S-U-SUS---"] = [
	      icn[
	        "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	      ],
	      icn["SU.M1.ANTISUBMARINE WARFARE"],
	    ];
	    sId["S-U-SUN---"] = [
	      icn[
	        "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	      ],
	      icn["SU.M1.SURFACE WARFARE"],
	    ];
	    sId["S-U-S1----"] = [
	      icn["SU.IC.SUBMARINE"],
	      icn["SU.M2.POSSIBLE SUBMARINE - LOW 1"],
	    ];
	    sId["S-U-S2----"] = [
	      icn["SU.IC.SUBMARINE"],
	      icn["SU.M2.POSSIBLE SUBMARINE - LOW 2"],
	    ];
	    sId["S-U-S3----"] = [
	      icn["SU.IC.SUBMARINE"],
	      icn["SU.M2.POSSIBLE SUBMARINE - HIGH 3"],
	    ];
	    sId["S-U-S4----"] = [
	      icn["SU.IC.SUBMARINE"],
	      icn["SU.M2.POSSIBLE SUBMARINE - HIGH 4"],
	    ];
	    sId["S-U-SL----"] = [
	      icn["SU.IC.SUBMARINE"],
	      icn["SU.M2.PROBABLE SUBMARINE"],
	    ];
	    sId["S-U-SK----"] = [icn["SU.IC.SUBMARINE, SNORKELING"]];
	    sId["S-U-W-----"] = [icn["SU.IC.UNDERWATER WEAPON"]];
	    sId["S-U-WT----"] = [icn["SU.IC.TORPEDO"]];
	    sId["S-U-WM----"] = [icn["SU.IC.SEA MINE"]];
	    sId["S-U-WMD---"] = [icn["SU.IC.SEA MINE NEUTRALIZED"]];
	    sId["S-U-WMG---"] = [icn["SU.IC.SEA MINE - BOTTOM"]];
	    sId["S-U-WMGD--"] = [icn["SU.IC.SEA MINE NEUTRALIZED - BOTTOM"]];
	    sId["S-U-WMGX--"] = [icn["SU.IC.SEA MINE EXERCISE MINE - BOTTOM"]];
	    sId["S-U-WMGE--"] = [icn["SU.IC.SEA MINE MILEC - BOTTOM"]];
	    sId["S-U-WMGC--"] = [icn["SU.IC.SEA MINE MILCO - BOTTOM"]];
	    sId["S-U-WMGR--"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - BOTTOM"]];
	    sId["S-U-WMGO--"] = [
	      icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - BOTTOM"],
	    ];
	    sId["S-U-WMM---"] = [icn["SU.IC.SEA MINE - MOORED"]];
	    sId["S-U-WMMD--"] = [icn["SU.IC.SEA MINE NEUTRALIZED - MOORED"]];
	    sId["S-U-WMMX--"] = [icn["SU.IC.SEA MINE EXERCISE MINE - MOORED"]];
	    sId["S-U-WMME--"] = [icn["SU.IC.SEA MINE MILEC - MOORED"]];
	    sId["S-U-WMMC--"] = [icn["SU.IC.SEA MINE MILCO - MOORED"]];
	    sId["S-U-WMMR--"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - MOORED"]];
	    sId["S-U-WMMO--"] = [
	      icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - MOORED"],
	    ];
	    sId["S-U-WMF---"] = [icn["SU.IC.SEA MINE - FLOATING"]];
	    sId["S-U-WMFD--"] = [icn["SU.IC.SEA MINE NEUTRALIZED - FLOATING"]];
	    sId["S-U-WMFX--"] = [icn["SU.IC.SEA MINE EXERCISE MINE - FLOATING"]];
	    sId["S-U-WMFE--"] = [icn["SU.IC.SEA MINE MILEC - FLOATING"]];
	    sId["S-U-WMFC--"] = [icn["SU.IC.SEA MINE MILCO - FLOATING"]];
	    sId["S-U-WMFR--"] = [
	      icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - FLOATING"],
	    ];
	    sId["S-U-WMFO--"] = [
	      icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - FLOATING"],
	    ];
	    sId["S-U-WMO---"] = [icn["SU.IC.SEA MINE (IN OTHER POSITION)"]];
	    sId["S-U-WMOD--"] = [icn["SU.IC.SEA MINE (IN OTHER POSITION) NEUTRALIZED"]];
	    sId["S-U-WMX---"] = [icn["SU.IC.SEA MINE EXERCISE MINE"]];
	    sId["S-U-WME---"] = [icn["SU.IC.SEA MINE MILEC"]];
	    sId["S-U-WMA---"] = [icn["SU.IC.SEA MINE MINE ANCHOR"]];
	    sId["S-U-WMC---"] = [icn["SU.IC.SEA MINE MILCO"]];
	    sId["S-U-WMR---"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"]];
	    sId["S-U-WMB---"] = [icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR"]];
	    sId["S-U-WMBD--"] = [icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR NEUTRALIZED"]];
	    sId["S-U-WMN---"] = [icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"]];
	    sId["S-U-WMS---"] = [icn["SU.IC.SEA MINE - RISING"]];
	    sId["S-U-WMSX--"] = [icn["SU.IC.SEA MINE EXERCISE MINE - RISING"]];
	    sId["S-U-WMSD--"] = [icn["SU.IC.SEA MINE NEUTRALIZED - RISING"]];
	    sId["S-U-WV----"] = [
	      icn[
	        "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	      ],
	    ];
	    sId["S-U-WD----"] = [icn["SU.IC.UNDERWATER DECOY"]];
	    sId["S-U-WDM---"] = [icn["SU.IC.SEA MINE DECOY"]];
	    sId["S-U-WDMG--"] = [icn["SU.IC.SEA MINE DECOY, BOTTOM/GROUND"]];
	    sId["S-U-WDMM--"] = [icn["SU.IC.SEA MINE DECOY, MOORED"]];
	    sId["S-U-N-----"] = [icn["SU.IC.NON-SUBMARINE"]];
	    sId["S-U-ND----"] = [icn["SU.IC.DIVER, CIVILIAN"]];
	    sId["S-U-NB----"] = []; // N/A
	    sId["S-U-E-----"] = [icn["SU.IC.ENVIRONMENTAL REPORT LOCATION"]];
	    sId["S-U-V-----"] = [icn["SU.IC.DIVE REPORT LOCATION"]];
	    sId["S-U-X-----"] = [icn["SU.IC.UNEXPLODED EXPLOSIVE ORDNANCE"]];
	    sId["S-U-NBS---"] = [icn["SU.IC.SEABED INSTALLATION/MANMADE"]];
	    sId["S-U-NBR---"] = [icn["SU.IC.SEABED ROCK/STONE, OBSTACLE, OTHER"]];
	    sId["S-U-NBW---"] = [icn["SU.IC.WRECK"]];
	    sId["S-U-NM----"] = [icn["SU.IC.MARINE LIFE"]];
	    sId["S-U-NA----"] = [icn["SU.IC.SEA ANOMALY"]];
	  },
	};

	var sof = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5, icons$6],
	  icons: function sof(sId, bbox, icn, _STD2525) {
	    // SOF ===========================================================================
	    sId["S-F-------"] = [icn["GR.IC.SPECIAL OPERATIONS FORCES"]];
	    sId["S-F-A-----"] = [
	      icn["AR.I.MILITARY ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-AF----"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-AFA---"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.ATTACK"],
	    ];
	    sId["S-F-AFK---"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.REFUEL"],
	    ];
	    sId["S-F-AFU---"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.UTILITY"],
	    ];
	    sId["S-F-AFUL--"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.LIGHT"],
	    ];
	    sId["S-F-AFUM--"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.MEDIUM"],
	    ];
	    sId["S-F-AFUH--"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.HEAVY"],
	    ];
	    sId["S-F-AV----"] = [
	      icn["AR.I.MILITARY FIXED WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.VSTOL"],
	    ];
	    sId["S-F-AH----"] = _STD2525
	      ? [
	          icn["GR.IC.AVIATION ROTARY WING"],
	          icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	          icn["GR.IC.AVIATION ROTARY WING 2525C"],
	        ]
	      : [
	          icn["GR.IC.AVIATION ROTARY WING"],
	          icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	        ];
	    sId["S-F-AHH---"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.COMBAT SEARCH AND RESCUE"],
	    ];
	    sId["S-F-AHA---"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.ATTACK"],
	    ];
	    sId["S-F-AHU---"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["SOF.M2.UTILITY"],
	    ];
	    sId["S-F-AHUL--"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.LIGHT"],
	    ];
	    sId["S-F-AHUM--"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.MEDIUM"],
	    ];
	    sId["S-F-AHUH--"] = [
	      icn["GR.IC.AVIATION ROTARY WING"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	      icn["AIR.M2.HEAVY"],
	    ];
	    sId["S-F-SN----"] = sId["S-F-N-----"] = [
	      icn["GR.IC.NAVAL"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-SNS---"] = sId["S-F-NS----"] = [icn["GR.IC.SEA-AIR-LAND"]];
	    sId["S-F-SNU---"] = sId["S-F-NU----"] = [
	      icn["SOF.IC.UNDERWATER DEMOLITION TEAM"],
	    ];
	    sId["S-F-SNB---"] = sId["S-F-NB----"] = [
	      icn["GR.IC.COMBATANT"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-SNN---"] = sId["S-F-NN----"] = [
	      icn["GR.IC.SUBMARINE NUCLEAR PROPULSION"],
	      icn["AIR.M1.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-G-----"] = [
	      icn["GR.IC.FF.INFANTRY"],
	      icn["GR.IC.SPECIAL OPERATIONS FORCES"],
	    ];
	    sId["S-F-GS----"] = [icn["GR.IC.SPECIAL FORCES"]];
	    sId["S-F-GR----"] = sId["S-F-GSR---"] = [
	      icn["GR.IC.FF.INFANTRY"],
	      icn["AIR.M1.RECONNAISSANCE"],
	      icn["GR.M2.AIRBORNE"],
	    ];
	    sId["S-F-GP----"] = sId["S-F-GSP---"] = [
	      icn["GR.EQ.PSYCHOLOGICAL OPERATIONS EQUIPMENT"],
	    ];
	    sId["S-F-GPA---"] = sId["S-F-GSPA--"] = [
	      icn["GR.EQ.PSYCHOLOGICAL OPERATIONS EQUIPMENT"],
	      ms._translate(0, -30, ms._scale(0.7, icn["AR.I.MILITARY FIXED WING"])),
	    ];
	    sId["S-F-GC----"] = sId["S-F-GCA---"] = [icn["GR.IC.CIVIL AFFAIRS"]];
	    sId["S-F-GB----"] = sId["S-F-B-----"] = [
	      icn["GR.IC.SPECIAL OPERATIONS FORCES"],
	      icn["GR.M2.SUPPORT"],
	    ];
	  },
	};

	function icons$2(
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const affiliation = metadata.affiliation || "Friend";
	  //If hostile and not monoColor, make it red, otherwise use the iconColor.
	  const iconColor = colors.iconColor[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  // SIGNALS INTELLIGENCE ==========================================================
	  //if(symbol.codingscheme == "I"){
	  icn["SI.IC.COMMUNICATIONS"] = {
	    type: "path",
	    d:
	      "m 93,120 14,0 0,0 m -7,-27 0,27 m 2,-25 8,2 -5,5 13,3 m -20,-10 -8,2 5,5 -14,3 m 21,-13 8,-2 -5,-5 13,-3 m -37,0 14,3 -5,5 8,2",
	    fill: false,
	  };
	  icn["SI.IC.RADAR"] = {
	    type: "path",
	    d: "m 115,90 -15,15 0,-15 -15,15 M 80,85 c 0,25 15,35 35,35",
	    fill: false,
	  };
	  icn["SI.I.JAMMER / ELECTRONIC COUNTER-MEASURES"] = text("J");

	  icn["SI.M1.ANTI-AIRCRAFT FIRE CONTROL"] = textm1("AA");
	  icn["SI.M1.AIRBORNE SEARCH AND BOMBING"] = textm1("AB");
	  icn["SI.M1.AIRBORNE INTERCEPT"] = textm1("AI");
	  icn["SI.M1.ALTIMETER"] = textm1("AL");
	  icn["SI.M1.AIRBORNE RECONNAISSANCE AND MAPPING"] = textm1("AM");
	  icn["SI.M1.AIR TRAFFIC CONTROL"] = textm1("AT");
	  icn["SI.M1.BEACON TRANSPONDER (NOT IFF)"] = textm1("BN");
	  icn["SI.M1.BATTLEFIELD SURVEILLANCE"] = textm1("BS");
	  icn["SI.M1.CONTROLLED APPROACH"] = textm1("CA");
	  icn["SI.M1.CONTROLLED INTERCEPT"] = textm1("CI");
	  icn["SI.M1.CELLULAR/MOBILE"] = textm1("CM");
	  icn["SI.M1.COASTAL SURVEILLANCE"] = textm1("CS");
	  icn["SI.M1.CYBER"] = textm1("CYB");
	  icn["SI.M1.DECOY/MIMIC"] = textm1("DC");
	  icn["SI.M1.DATA TRANSMISSION"] = textm1("DT");
	  icn["SI.M1.EARTH SURVEILLANCE"] = textm1("ES");
	  icn["SI.M1.EARLY WARNING"] = textm1("EW");
	  icn["SI.M1.FIRE CONTROL"] = textm1("FC");
	  icn["SI.M1.GROUND MAPPING"] = textm1("GM");
	  icn["SI.M1.HEIGHT FINDING"] = textm1("HF");
	  icn["SI.M1.HARBOR SURVEILLANCE"] = textm1("HS");
	  icn["SI.M1.IDENTIFICATION, FRIEND OR FOE (INTERROGATOR)"] = textm1("IF");
	  icn["SI.M1.INSTRUMENT LANDING SYSTEM"] = textm1("IL");
	  icn["SI.M1.IONOSPHERIC SOUNDING"] = textm1("IS");
	  icn["SI.M1.IDENTIFICATION, FRIEND OR FOE (TRANSPONDER)"] = textm1("IT");
	  icn["SI.M1.BARRAGE JAMMER"] = textm1("JB");
	  icn["SI.M1.CLICK JAMMER"] = textm1("JC");
	  icn["SI.M1.DECEPTIVE JAMMER"] = textm1("JD");
	  icn["SI.M1.FREQUENCY SWEPT JAMMER"] = textm1("JF");
	  icn["SI.M1.JAMMER (GENERAL)"] = textm1("JG");
	  icn["SI.M1.NOISE JAMMER"] = textm1("JN");
	  icn["SI.M1.PULSED JAMMER"] = textm1("JP");
	  icn["SI.M1.REPEATER JAMMER"] = textm1("JR");
	  icn["SI.M1.SPOT NOISE JAMMER"] = textm1("JS");
	  icn["SI.M1.TRANSPONDER JAMMER"] = textm1("JT");
	  icn["SI.M1.MISSILE ACQUISITION"] = textm1("MA");
	  icn["SI.M1.MISSILE CONTROL"] = textm1("MC");
	  icn["SI.M1.MISSILE DOWNLINK"] = textm1("MD");
	  icn["SI.M1.METEOROLOGICAL"] = textm1("ME");
	  icn["SI.M1.MULTI-FUNCTION"] = textm1("MF");
	  icn["SI.M1.MISSILE GUIDANCE"] = textm1("MG");
	  icn["SI.M1.MISSILE HOMING"] = textm1("MH");
	  icn["SI.M1.MISSILE TRACKING"] = textm1("MT");
	  icn["SI.M1.NAVIGATIONAL/GENERAL"] = textm1("NA");
	  icn["SI.M1.NAVIGATIONAL/DISTANCE MEASURING EQUIPMENT"] = textm1("ND");
	  icn["SI.M1.NAVIGATION/TERRAIN FOLLOWING"] = textm1("NT");
	  icn["SI.M1.NAVIGATIONAL/WEATHER AVOIDANCE"] = textm1("NW");
	  icn["SI.M1.OMNI-LINE OF SIGHT (LOS)"] = textm1("OL");
	  icn["SI.M1.PROXIMITY USE"] = textm1("PF");
	  icn["SI.M1.POINT-TO-POINT LINE OF SIGHT (LOS)"] = textm1("PP");
	  icn["SI.M1.INSTRUMENTATION"] = textm1("RI");
	  icn["SI.M1.RANGE ONLY"] = textm1("RO");
	  icn["SI.M1.SONOBUOY"] = textm1("SB");
	  icn["SI.M1.SATELLITE DOWNLINK"] = textm1("SD");
	  icn["SI.M1.SPACE"] = textm1("SP");
	  icn["SI.M1.SURFACE SEARCH"] = textm1("SS");
	  icn["SI.M1.SHELL TRACKING"] = textm1("ST");
	  icn["SI.M1.SATELLITE UPLINK"] = textm1("SU");
	  icn["SI.M1.TARGET ACQUISITION"] = textm1("TA");
	  icn["SI.M1.TARGET ILLUMINATION"] = textm1("TI");
	  icn["SI.M1.TROPOSPHERIC SCATTER"] = textm1("TS");
	  icn["SI.M1.TARGET TRACKING"] = textm1("TT");
	  icn["SI.M1.UNKNOWN"] = textm1("UN");
	  icn["SI.M1.VIDEO REMOTING"] = textm1("VR");
	  icn["SI.M1.EXPERIMENTAL"] = textm1("XP");
	  icn["SI.M1.ALPHA"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "A",
	  };
	  icn["SI.M1.BRAVO"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "B",
	  };
	  icn["SI.M1.CHARLIE"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "C",
	  };
	  icn["SI.M1.DELTA"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "D",
	  };
	  icn["SI.M1.ECHO"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "E",
	  };
	  icn["SI.M1.FOXTROT"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "F",
	  };
	  icn["SI.M1.HOTEL"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "H",
	  };
	  icn["SI.M1.INDY"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "I",
	  };
	  icn["SI.M1.MIKE"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "M",
	  };
	  icn["SI.M1.OSCAR"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "O",
	  };
	  icn["SI.M1.PAPA"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "P",
	  };
	  icn["SI.M1.SIERRA"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "S",
	  };
	  icn["SI.M1.TANGO"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "T",
	  };
	  icn["SI.M1.UNIFORM"] = {
	    type: "text",
	    stroke: false,
	    x: 68,
	    y: 110,
	    fontsize: 25,
	    text: "U",
	  };
	  icn["SI.M2.ALPHA"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "A",
	  };
	  icn["SI.M2.BRAVO"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "B",
	  };
	  icn["SI.M2.CHARLIE"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "C",
	  };
	  icn["SI.M2.CYBER"] = textm2("CYB");
	  icn["SI.M2.DELTA"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "D",
	  };
	  icn["SI.M2.ECHO"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "E",
	  };
	  icn["SI.M2.FOXTROT"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "F",
	  };
	  icn["SI.M2.GOLF"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "G",
	  };
	  icn["SI.M2.INDY"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "I",
	  };
	  icn["SI.M2.LIMA"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "L",
	  };
	  icn["SI.M2.MIKE"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "M",
	  };
	  icn["SI.M2.NOVEMBER"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "N",
	  };
	  icn["SI.M2.PAPA"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "P",
	  };
	  icn["SI.M2.SIERRA"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "S",
	  };
	  icn["SI.M2.TANGO"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "T",
	  };
	  icn["SI.M2.UNIFORM"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "U",
	  };
	  icn["SI.M2.WHISKEY"] = {
	    type: "text",
	    stroke: false,
	    x: 132,
	    y: 110,
	    fontsize: 25,
	    text: "W",
	  };
	  icn["SI.M3.SPACE"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 75,
	    fontsize: 25,
	    text: "S",
	  };
	  icn["SI.M3.GROUND"] = {
	    type: "text",
	    stroke: false,
	    x: 100,
	    y: 75,
	    fontsize: 25,
	    text: "G",
	  };

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var signalsIntelligence = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$2],
	  icons: function signalsIntelligence(sId, bbox, icn, _STD2525) {
	    //Adds support for 2525C Signals Intelligence
	    sId["I-P-S-----"] = []; // N/A
	    sId["I-P-SC----"] = []; // N/A
	    sId["I-P-SCD---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.DELTA"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SR----"] = []; // N/A
	    sId["I-P-SRD---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.DELTA"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRE---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ECHO"],
	      icn["SI.M2.SIERRA"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRI---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.INDY"],
	      icn["SI.M2.FOXTROT"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRM---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.FOXTROT"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRT---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.ALPHA"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRS---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.PAPA"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-P-SRU---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.UNIFORM"],
	      icn["SI.M2.NOVEMBER"],
	      icn["SI.M3.SPACE"],
	    ];
	    sId["I-A-S-----"] = []; // N/A
	    sId["I-A-SC----"] = []; // N/A
	    sId["I-A-SCC---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.MIKE"],
	    ];
	    sId["I-A-SCO---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.OSCAR"],
	      icn["SI.M2.LIMA"],
	    ];
	    sId["I-A-SCP---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.PAPA"],
	      icn["SI.M2.PAPA"],
	    ];
	    sId["I-A-SCS---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.UNIFORM"],
	    ];
	    sId["I-A-SR----"] = []; // N/A
	    sId["I-A-SRAI--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.INDY"],
	    ];
	    sId["I-A-SRAS--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.BRAVO"],
	    ];
	    sId["I-A-SRC---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.INDY"],
	    ];
	    sId["I-A-SRD---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.DELTA"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-A-SRE---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ECHO"],
	      icn["SI.M2.WHISKEY"],
	    ];
	    sId["I-A-SRF---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.FOXTROT"],
	      icn["SI.M2.CHARLIE"],
	    ];
	    sId["I-A-SRI---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.INDY"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-A-SRMA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-A-SRMD--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.DELTA"],
	    ];
	    sId["I-A-SRMG--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.GOLF"],
	    ];
	    sId["I-A-SRMT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-A-SRMF--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-A-SRTI--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.INDY"],
	    ];
	    sId["I-A-SRTA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-A-SRTT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-A-SRU---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.UNIFORM"],
	      icn["SI.M2.NOVEMBER"],
	    ];
	    sId["I-G-S-----"] = []; // N/A
	    sId["I-G-SC----"] = []; // N/A
	    sId["I-G-SCC---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.MIKE"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SCO---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.OSCAR"],
	      icn["SI.M2.LIMA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SCP---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.PAPA"],
	      icn["SI.M2.PAPA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SCS---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.UNIFORM"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SCT---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.SIERRA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SR----"] = []; // N/A
	    sId["I-G-SRAT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRAA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.ALPHA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRB---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.BRAVO"],
	      icn["SI.M2.SIERRA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRCS--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.SIERRA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRCA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.ALPHA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRD---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.DELTA"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRE---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ECHO"],
	      icn["SI.M2.WHISKEY"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRF---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.FOXTROT"],
	      icn["SI.M2.CHARLIE"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRH---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.HOTEL"],
	      icn["SI.M2.FOXTROT"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRI---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.INDY"],
	      icn["SI.M2.FOXTROT"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRMM--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.ECHO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRMA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.ALPHA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRMG--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.GOLF"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRMT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRMF--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.FOXTROT"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRS---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRTA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.ALPHA"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRTI--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.INDY"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRTT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.TANGO"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-G-SRU---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.UNIFORM"],
	      icn["SI.M2.NOVEMBER"],
	      icn["SI.M3.GROUND"],
	    ];
	    sId["I-S-S-----"] = []; // N/A
	    sId["I-S-SC----"] = []; // N/A
	    sId["I-S-SCC---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.MIKE"],
	    ];
	    sId["I-S-SCO---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.OSCAR"],
	      icn["SI.M2.LIMA"],
	    ];
	    sId["I-S-SCP---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.PAPA"],
	      icn["SI.M2.PAPA"],
	    ];
	    sId["I-S-SCS---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.UNIFORM"],
	    ];
	    sId["I-S-SR----"] = []; // N/A
	    sId["I-S-SRAT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-S-SRAA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ALPHA"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-S-SRCA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-S-SRCI--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.CHARLIE"],
	      icn["SI.M2.INDY"],
	    ];
	    sId["I-S-SRD---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.DELTA"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-S-SRE---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ECHO"],
	      icn["SI.M2.WHISKEY"],
	    ];
	    sId["I-S-SRF---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.FOXTROT"],
	      icn["SI.M2.CHARLIE"],
	    ];
	    sId["I-S-SRH---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.HOTEL"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-S-SRI---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.INDY"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-S-SRMM--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.ECHO"],
	    ];
	    sId["I-S-SRMA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-S-SRMG--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.GOLF"],
	    ];
	    sId["I-S-SRMT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-S-SRMF--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-S-SRS---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.SIERRA"],
	    ];
	    sId["I-S-SRTA--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-S-SRTI--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.INDY"],
	    ];
	    sId["I-S-SRTT--"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-S-SRU---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.UNIFORM"],
	      icn["SI.M2.NOVEMBER"],
	    ];
	    sId["I-U-S-----"] = []; // N/A
	    sId["I-U-SC----"] = []; // N/A
	    sId["I-U-SCO---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.OSCAR"],
	      icn["SI.M2.LIMA"],
	    ];
	    sId["I-U-SCP---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.PAPA"],
	      icn["SI.M2.PAPA"],
	    ];
	    sId["I-U-SCS---"] = [
	      icn["SI.IC.COMMUNICATIONS"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.UNIFORM"],
	    ];
	    sId["I-U-SR----"] = []; // N/A
	    sId["I-U-SRD---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.DELTA"],
	      icn["SI.M2.TANGO"],
	    ];
	    sId["I-U-SRE---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.ECHO"],
	      icn["SI.M2.WHISKEY"],
	    ];
	    sId["I-U-SRM---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.MIKE"],
	      icn["SI.M2.FOXTROT"],
	    ];
	    sId["I-U-SRS---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.SIERRA"],
	      icn["SI.M2.SIERRA"],
	    ];
	    sId["I-U-SRT---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.TANGO"],
	      icn["SI.M2.ALPHA"],
	    ];
	    sId["I-U-SRU---"] = [
	      icn["SI.IC.RADAR"],
	      icn["SI.M1.UNIFORM"],
	      icn["SI.M2.NOVEMBER"],
	    ];
	  },
	};

	var stabilityoperations = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5],
	  icons: function stabilityoperations(sId, bbox, icn, _STD2525) {
	    //Adds support for 2525C Stability Operations
	    sId["O-V-A-----"] = [icn["ST.IC.ARSON/FIRE"]];
	    sId["O-V-M-----"] = [icn["ST.IC.KILLING VICTIM"]];
	    sId["O-V-MA----"] = [icn["ST.IC.KILLING VICTIM"], icn["ST.M1.MURDER"]];
	    sId["O-V-MB----"] = [
	      icn["ST.IC.KILLING VICTIM"],
	      icn["ST.M1.EXECUTION (WRONGFUL KILLING)"],
	    ];
	    sId["O-V-MC----"] = [
	      icn["ST.IC.KILLING VICTIM"],
	      icn["ST.M1.ASSASSINATION"],
	    ];
	    sId["O-V-B-----"] = [icn["ST.IC.BOMB"]];
	    sId["O-V-Y-----"] = [icn["ST.IC.BOOBY TRAP"]];
	    sId["O-V-D-----"] = [icn["ST.IC.DRIVE-BY SHOOTING"]];
	    sId["O-V-S-----"] = [icn["ST.IC.SNIPING"]];
	    sId["O-V-P-----"] = [icn["ST.IC.POISONING"]];
	    sId["O-V-E-----"] = [icn["ST.IC.EXPLOSION"]];
	    sId["O-V-EI----"] = [icn["ST.IC.EXPLOSION"], icn["ST.IC.IED"]];
	    sId["O-L-B-----"] = [icn["ST.IC.BLACK LIST LOCATION"]];
	    sId["O-L-G-----"] = [icn["ST.IC.GRAY LIST LOCATION"]];
	    sId["O-L-W-----"] = [icn["ST.IC.WHITE LIST LOCATION"]];
	    sId["O-L-M-----"] = [icn["ST.IC.MASS GRAVE LOCATION"]];
	    sId["O-O-P-----"] = [icn["ST.IC.PATROLLING"]];
	    sId["O-O-R-----"] = []; // N/A
	    sId["O-O-RW----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.WILLING"]];
	    sId["O-O-RC----"] = [
	      icn["ST.IC.INDIVIDUAL"],
	      icn["ST.M1.COERCED/IMPRESSED"],
	    ];
	    sId["O-O-D-----"] = [icn["ST.IC.DEMONSTRATION"]];
	    sId["O-O-M-----"] = [icn["ST.IC.MINE LAYING"]];
	    sId["O-O-Y-----"] = [icn["ST.IC.PSYCHOLOGICAL OPERATIONS"]];
	    sId["O-O-YT----"] = [
	      icn["ST.IC.RADIO AND TELEVISION PSYCHOLOGICAL OPERATIONS"],
	    ];
	    sId["O-O-YW----"] = [
	      icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	      icn["ST.M1.WRITTEN PSYCHOLOGICAL OPERATIONS"],
	    ];
	    sId["O-O-YH----"] = [
	      icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	      icn["ST.M1.HOUSE-TO-HOUSE"],
	    ];
	    sId["O-O-F-----"] = [icn["ST.IC.SEARCHING"]];
	    sId["O-O-S-----"] = [icn["ST.IC.SPY"]];
	    sId["O-O-O-----"] = [icn["ST.IC.FOOD DISTRIBUTION"]];
	    sId["O-O-E-----"] = [icn["ST.IC.EXTORTION"]];
	    sId["O-O-H-----"] = []; // N/A
	    sId["O-O-HT----"] = [
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["O-O-HA----"] = [
	      icn["ST.IC.HIJACKING (AIRPLANE)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["O-O-HV----"] = [
	      icn["ST.IC.HIJACKING (BOAT)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["O-O-K-----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.KIDNAPPING"]];
	    sId["O-O-KA----"] = [
	      icn["ST.IC.INDIVIDUAL"],
	      icn["ST.M1.KIDNAPPING"],
	      icn["ST.IC.ATTEMPTED CRIMINAL ACTIVITY"],
	    ];
	    sId["O-O-A-----"] = [icn["ST.IC.ARREST"]];
	    sId["O-O-U-----"] = [icn["ST.IC.DRUG RELATED ACTIVITIES"]];
	    sId["O-O-C-----"] = [icn["ST.IC.COMPOSITE LOSS"]];
	    sId["O-O-CA----"] = [icn["ST.IC.COMPOSITE LOSS"], icn["ST.M1.COMBAT"]];
	    sId["O-O-CB----"] = [icn["ST.IC.COMPOSITE LOSS"], icn["ST.M1.ACCIDENT"]];
	    sId["O-O-CC----"] = [icn["ST.IC.COMPOSITE LOSS"], icn["ST.M1.OTHER"]];
	    sId["O-I-R-----"] = [icn["ST.IC.GROUP"]];
	    sId["O-I-S-----"] = [icn["ST.IC.SAFE HOUSE"]];
	    sId["O-I-G-----"] = [icn["ST.IC.GRAFFITI"]];
	    sId["O-I-V-----"] = [icn["ST.IC.VANDALISM/LOOT/RANSACK/PLUNDER/SACK"]];
	    sId["O-I-I-----"] = [icn["ST.IC.KNOWN INSURGENT VEHICLE"]];
	    sId["O-I-D-----"] = [
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	      icn["ST.M1.DRUG"],
	    ];
	    sId["O-I-F-----"] = [icn["ST.IC.INTERNAL SECURITY FORCE"]];
	    sId["O-P-------"] = [icn["ST.IC.INDIVIDUAL"]];
	    sId["O-P-A-----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.LEADER"]];
	    sId["O-P-B-----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.TARGETED"]];
	    sId["O-P-C-----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.TERRORIST"]];
	    sId["O-G-------"] = [icn["ST.IC.GROUP"]];
	    sId["O-G-A-----"] = [
	      icn["ST.IC.GROUP"],
	      icn["ST.M1.DISPLACED PERSONS, REFUGEES, AND EVACUEES"],
	    ];
	    sId["O-G-B-----"] = [
	      icn["ST.IC.GROUP"],
	      icn["ST.M1.NONGOVERNMENTAL ORGANIZATION (NGO)"],
	    ];
	    sId["O-G-C-----"] = [icn["ST.IC.GROUP"], icn["ST.M1.TERRORIST"]];
	    sId["O-G-D-----"] = [icn["ST.IC.GROUP"], icn["ST.M1.RELIGIOUS"]];
	    sId["O-G-E-----"] = [icn["ST.IC.GROUP"], icn["ST.M1.FOREIGN FIGHTERS"]];
	    sId["O-G-F-----"] = [icn["ST.IC.GROUP"], icn["ST.M1.GANG"]];
	    sId["O-R-------"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.RAPE"]];
	    sId["O-R-A-----"] = [
	      icn["ST.IC.INDIVIDUAL"],
	      icn["ST.M1.RAPE"],
	      icn["ST.IC.ATTEMPTED CRIMINAL ACTIVITY"],
	    ];
	  },
	};

	function icons$1 (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  // Tactical points icon parts
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const affiliation = metadata.affiliation || "Friend";
	  //If hostile and not monoColor, make it red, otherwise use the iconColor.
	  const iconColor =
	    affiliation == "Hostile" && !monoColor
	      ? "rgb(255, 0, 0)"
	      : colors.iconColor[affiliation];
	  const fillColor =
	    affiliation == "Hostile" && !monoColor
	      ? "rgb(255, 0, 0)"
	      : colors.fillColor[affiliation];
	  const numberSIDC = metadata.numberSIDC;
	  //const white = colors.white[affiliation];
	  const icn = {};

	  icn["TP.DESTROY"] =
	    !STD2525 && !numberSIDC
	      ? {
	          type: "path",
	          fill: false,
	          strokedasharray: "12,5",
	          d: "M 0,155 200,45 M 0,45 200,155",
	        }
	      : [
	          {
	            type: "path",
	            fill: false,
	            d: "m 0,45 85,46.75 m 30,16.5 85,46.75 M 0,155 85,108.25 M 115,91.75 200,45",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 103,
	            fontsize: 45,
	            text: "D",
	          },
	        ];
	  icn["TP.INTERDICT"] =
	    !STD2525 && !numberSIDC
	      ? {
	          type: "path",
	          fill: false,
	          d: "m 0,100 200,0 M 0,155 200,45.2 M 185,85 l 15,15 -15,15 m 9.2,-49.3 5.5,-20.5 -20.5,-5.5",
	        }
	      : [
	          {
	            type: "path",
	            fill: false,
	            d: "m 194.203,65.6674 5.49,-20.4904 -20.49,-5.4904 M 115,91.75 200,45 M 0,155 85,108.25 M 185,85 l 15,15 -15,15 m -70,-15 85,0 m -200,0 85,0",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 103,
	            fontsize: 45,
	            text: "I",
	          },
	        ];
	  icn["TP.NEUTRALIZE"] =
	    !STD2525 && !numberSIDC
	      ? [
	          { type: "path", fill: false, d: "M 0,45 200,155" },
	          {
	            type: "path",
	            fill: false,
	            strokedasharray: "12,5",
	            d: "M 0,155 200,45",
	          },
	        ]
	      : [
	          {
	            type: "path",
	            fill: false,
	            d: "M 115,108.25 200,155 M 0,45 85,91.75",
	          },
	          {
	            type: "path",
	            fill: false,
	            strokedasharray: "12,5",
	            d: "M 115,91.75 200,45 M 0,155 85,108.25",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 103,
	            fontsize: 45,
	            text: "N",
	          },
	        ];
	  icn["TP.SUPPRESS"] =
	    !STD2525 && !numberSIDC
	      ? [
	          { type: "path", fill: false, d: "M 0,45 200,155" },
	          {
	            type: "path",
	            fill: false,
	            strokedasharray: "12,5",
	            d: "M 0,155 200,45",
	          },
	        ]
	      : [
	          {
	            type: "path",
	            fill: false,
	            strokedasharray: "12,5",
	            d: "M 115,108.25 200,155 M 0,45 85,91.75",
	          },
	          {
	            type: "path",
	            fill: false,
	            strokedasharray: "12,5",
	            d: "M 115,91.75 200,45 M 0,155 85,108.25",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 103,
	            fontsize: 45,
	            text: "S",
	          },
	        ];
	  icn["TP.DATUM"] = [
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100,50 0,50 50,0 C 150,72.3858 127.614,50 100,50 Z m 0,50 -50,0 c 0,27.614 22.3858,50 50,50 z",
	    },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	  ];
	  icn["TP.BRIEF CONTACT"] = [
	    { type: "path", d: "m 65,0 70,0 m -35,80 0,-80 m 0,100 -45,-20 90,0 z" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 75,
	      y: 45,
	      fontsize: 45,
	      text: "B",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 125,
	      y: 45,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["TP.LOST CONTACT"] = [
	    { type: "path", d: "m 65,0 70,0 m -35,80 0,-80 m 0,100 -45,-20 90,0 z" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 75,
	      y: 45,
	      fontsize: 45,
	      text: "L",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 125,
	      y: 45,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["TP.SINKER"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,15 0,65 M 60,15 80,0 100,15 120,0 140,15",
	    },
	    { type: "path", d: "M 100,100 55,80 145,80 Z" },
	  ];
	  icn["TP.TRIAL TRACK"] = [
	    { type: "path", d: "m 65,0 70,0 m -35,80 0,-80 m 0,100 -45,-20 90,0 z" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 75,
	      y: 45,
	      fontsize: 45,
	      text: "T",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 125,
	      y: 45,
	      fontsize: 45,
	      text: "T",
	    },
	  ];
	  icn["TP.SONOBUOY"] = [
	    { type: "path", fill: false, d: "M 100,60 l 0,-35 10,10 0,-45" },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 40 },
	  ];
	  icn["TP.SONOBUOY PATTERN CENTER"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "P",
	    },
	  ];
	  icn["TP.SONOBUOY DIFAR"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "D",
	    },
	  ];
	  icn["TP.SONOBUOY LOFAR"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "L",
	    },
	  ];
	  icn["TP.SONOBUOY CASS"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["TP.SONOBUOY DICASS"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "S",
	    },
	  ];
	  icn["TP.SONOBUOY BT"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "B",
	    },
	  ];
	  icn["TP.SONOBUOY ANM"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "A",
	    },
	  ];
	  icn["TP.SONOBUOY VLAD"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "V",
	    },
	  ];
	  icn["TP.SONOBUOY ATAC"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "T",
	    },
	  ];
	  icn["TP.SONOBUOY BARRA"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "BR",
	    },
	  ];
	  icn["TP.SONOBUOY BATHYTHERMOGRAPH TRANSMITTING SONOBUOY (BT)"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "B",
	    },
	  ];
	  icn["TP.SONOBUOY COMMAND ACTIVE MULTIBEAM SONOBUOY (CAMBS)"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "CM",
	    },
	  ];
	  icn["TP.SONOBUOY EXPENDABLE RELIABLE ACOUSTIC PATH SONOBUOY (ERAPS)"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "E",
	    },
	  ];
	  icn["TP.SONOBUOY RO"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "R",
	    },
	  ];
	  icn["TP.SONOBUOY KINGPIN"] = [
	    icn["TP.SONOBUOY"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "K",
	    },
	  ];
	  icn["TP.SONOBUOY EXPIRED"] = [
	    icn["TP.SONOBUOY"],
	    { type: "path", fill: false, d: "M 40,60 l 120,80 M 40,140 l 120,-80" },
	  ];
	  icn["TP.SEARCH"] = {
	    type: "path",
	    d: "m 80,80 20,20 -20,20 40,0 -20,-20 20,-20 z M 50,150 150,50 M 50,50 150,150",
	  };
	  icn["TP.SEARCH AREA"] = [
	    icn["TP.SEARCH"],
	    !STD2525 && !numberSIDC
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "end",
	          x: 75,
	          y: 103,
	          fontsize: 40,
	          text: "SA",
	        }
	      : [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 60,
	            y: 103,
	            fontsize: 45,
	            text: "S",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 140,
	            y: 103,
	            fontsize: 45,
	            text: "A",
	          },
	        ],
	  ];
	  icn["TP.DIP POSITION"] = [
	    icn["TP.SEARCH"],
	    !STD2525 && !numberSIDC
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "end",
	          x: 75,
	          y: 103,
	          fontsize: 40,
	          text: "DIP",
	        }
	      : [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 60,
	            y: 103,
	            fontsize: 45,
	            text: "D",
	          },
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 140,
	            y: 103,
	            fontsize: 45,
	            text: "P",
	          },
	        ],
	  ];
	  icn["TP.SEARCH CENTER"] = {
	    type: "path",
	    stroke: false,
	    d: "m 100,100 -50,10 0,-20 z m 0,0 10,50 -20,0 z m 0,0 50,-10 0,20 z m 0,0 -10,-50 20,0 z",
	  };
	  icn["TP.REFERENCE POINT"] = [
	    { type: "path", fill: false, d: "M 160,160 40,160 40,40 160,40 Z" },
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.NAVIGATIONAL REFERENCE"] =
	    !numberSIDC && STD2525
	      ? {
	          type: "path",
	          fill: false,
	          d: "M 160,160 40,160 40,40 160,40 Z M 160,160 40,40 M 40,160 160,40",
	        }
	      : { type: "path", fill: false, d: "M 160,160 40,40 M 40,160 160,40" };
	  icn["TP.SPECIAL POINT"] = [
	    icn["TP.NAVIGATIONAL REFERENCE"],
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.AIRFIELD"] = [
	    { type: "path", fill: false, d: "M 35,125 165,60 m -135,40 140,0" },
	  ];
	  icn["TP.DLRP"] = [
	    icn["TP.SPECIAL POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "D",
	    },
	  ];
	  icn["TP.POINT OF INTENDED MOVEMENT"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "P",
	    },
	  ];
	  icn["TP.PRE-LANDFALL WAYPOINT"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "PL",
	    },
	  ];
	  icn["TP.MARSHALL POINT"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "M",
	    },
	  ];
	  icn["TP.REFERENCE POINT WAYPOINT"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "W",
	    },
	  ];
	  icn["TP.CORRIDOR TAB"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "C",
	    },
	  ];
	  icn["TP.ENEMY POINT"] = [
	    icn["TP.REFERENCE POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "ENY",
	    },
	  ];
	  icn["TP.POINT OF INTEREST"] = [
	    {
	      type: "path",
	      d: "M 129.021,41.957 C 121.48,49.9458 110.986,54.4816 100,54.5 89.0432,54.4928 78.569,49.9914 71.0234,42.0469 L 100,100 Z",
	    },
	    { type: "circle", fill: false, cx: 100, cy: 15, r: 40 },
	  ];
	  icn["POINT OF INTEREST – LAUNCH EVENT"] = [
	    icn["TP.POINT OF INTEREST"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 20,
	      fontsize: 40,
	      fontweight: "bold",
	      text: "LE",
	    },
	  ];
	  icn["TP.SHIP AREA OF INTEREST (AEGIS ONLY)"] = {
	    type: "circle",
	    fill: false,
	    cx: 100,
	    cy: 100,
	    r: 50,
	  };
	  icn["TP.ACTIVE MANOEUVRE AREA (AEGIS ONLY)"] = {
	    type: "circle",
	    fill: false,
	    stroke: "rgb(254,203,47)",
	    cx: 100,
	    cy: 100,
	    r: 60,
	  };
	  icn["TP.PLAN SHIP"] = [
	    {
	      type: "circle",
	      fill: fillColor,
	      stroke: fillColor,
	      cx: 100,
	      cy: 100,
	      r: 15,
	    },
	    {
	      type: "circle",
	      stroke: fillColor,
	      cx: 100,
	      cy: 100,
	      r: 45,
	      fill: false,
	    },
	  ];
	  icn["TP.AIM POINT"] = [
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	    { type: "circle", cx: 100, cy: 100, r: 35, fill: false },
	    { type: "circle", cx: 100, cy: 100, r: 45, fill: false },
	  ];
	  icn["TP.DEFENDED ASSET"] = {
	    type: "path",
	    fill: false,
	    d: "m 90,135 0,-30 20,0 0,30 m -50,0 0,-50 -10,0 0,-20 20,0 0,10 20,0 0,-10 20,0 0,10 20,0 0,-10 20,0 0,20 -10,0 0,50 z",
	  };
	  icn["TP.CHEMICAL EVENT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "C",
	    },
	  ];
	  icn["TP.CHEMICAL – TOXIC INDUSTRIAL MATERIAL"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "C",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 75,
	      fontsize: 30,
	      text: "T",
	    },
	  ];

	  icn["TP.BIOLOGICAL EVENT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "B",
	    },
	  ];
	  icn["TP.BIOLOGICAL – TOXIC INDUSTRIAL MATERIAL"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "B",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 75,
	      fontsize: 30,
	      text: "T",
	    },
	  ];

	  icn["TP.NUCLEAR EVENT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "N",
	    },
	  ];
	  icn["TP.RADIOLOGICAL EVENT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "R",
	    },
	  ];
	  icn["TP.RADIOLOGICAL – TOXIC INDUSTRIAL MATERIAL"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 110,60 C 110,40 115,25 80,20 M 90,60 C 90,40 85,25 120,20 m -20,80 -60,-110 120,0 z",
	    },
	    {
	      type: "path",
	      d: "m 120,20 c 10,0 10,15 0,15 -10,0 -10,-15 0,-15 z M 80,35 c 10,0 10,-15 0,-15 -10,0 -10,15 0,15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 30,
	      text: "R",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 75,
	      fontsize: 30,
	      text: "T",
	    },
	  ];
	  icn["TP.DROP POINT"] = {
	    type: "path",
	    fill: false,
	    d: "m 130,100 0,-40 m -60,40 0,-40 m 60,40 0,0 c 0,8.284 -6.716,15 -15,15 -8.284,0 -15,-6.716 -15,-15 m 0,0 0,0 c 0,8.284 -6.7157,15 -15,15 -8.2843,0 -15,-6.716 -15,-15 m 30,-40 0,40",
	  };
	  icn["TP.ENTRY POINT"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,100 0,-50 m -35,15 35,35 35,-35 m -85,35 100,0",
	  };
	  icn["TP.AIR DETONATION"] = {
	    type: "path",
	    d: "m 55,150 90,0 m -35,-95 5,20 15,-10 0,15 15,5 -15,10 15,10 -15,5 5,15 -20,-5 -5,20 -10,-15 -10,20 -5,-25 -20,10 5,-15 L 55,105 70,95 60,85 70,80 70,65 85,75 90,55 100,70 Z",
	    fill: false,
	  };
	  icn["TP.GROUND ZERO"] = {
	    type: "path",
	    stroke: false,
	    d: "M 100 28 C 100 28 65.4398 29.8261 61.6543 55 C 60.2826 64.1213 75.0115 70.4884 82.2363 71.6543 C 89.4611 72.8201 91.7277 55.3462 98.5098 56.0371 L 93 90 C 93 90 70 90 67 97 C 65.0304 101.596 100 100 100 100 C 100 100 134.97 101.596 133 97 C 130 90 107 90 107 90 L 101.49 56.0371 C 108.272 55.3462 110.539 72.8201 117.764 71.6543 C 124.988 70.4884 139.718 64.1213 138.346 55 C 134.56 29.8261 100 28 100 28 z",
	  };
	  icn["TP.LAUNCHED TORPEDO (AEGIS ONLY)"] = {
	    type: "path",
	    d: "m 150,90 0,20 m -10,-10 10,0 m -97,-10 84,0 c 1.662,0 3,1.338 3,3 l 0,14 c 0,1.662 -1.338,3 -3,3 l -84,0 c -1.662,0 -3,-1.338 -3,-3 l 0,-14 c 0,-1.662 1.338,-3 3,-3 z",
	  };
	  icn["TP.MSL DETECT POINT"] = {
	    type: "path",
	    d: "m 95,100 0,-55 -10,0 15,-15 15,15 -10,0 0,55 m -55,0 100,0",
	  };
	  icn["TP.ACOUSTIC COUNTER MEASURE (DECOY)"] = {
	    type: "path",
	    d: "M 107.5,55 92.5518,70 107.5,85 Z M 50,30 150,30 m -90,70 0,-5 80,0 0,5 z m 70,-45 -15,15 15,15 z M 85,55 70,70 85,85 Z m 15,-25 0,33",
	  };
	  icn["TP.ELECTRONIC COUNTER MEASURES (ECM) DECOY"] = [
	    {
	      type: "path",
	      d: "m 80,120 -20,10 20,10 z m 30,0 -20,10 20,10 0,-20 z m 30,0 -20,10 20,10 z m -25,-20 c 0,10 -10,18 -19.4,14 -9.4,-2 -13.8,-14.7 -8,-22.5 5.2,-8.2 18.4,-8.7 24.4,-0.8 2,2.6 3,5.9 3,9.3 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 50,50 0,100 100,0 0,-100 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 70,
	      fontsize: 30,
	      text: "ECM",
	    },
	  ];
	  icn["TP.IMPACT POINT"] = {
	    type: "path",
	    d: "m 50,100 40,-10 10,-40 10,40 40,10 -40,10 -10,40 -10,-40 -40,-10",
	  };
	  icn["TP.PREDICTED IMPACT POINT"] = {
	    type: "path",
	    fill: false,
	    strokedasharray: "12,5",
	    d: "m 50,100 40,-10 10,-40 10,40 40,10 -40,10 -10,40 -10,-40 -40,-10",
	  };
	  icn["TP.FORMATION"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,50 0,100 m -50,-50 100,0",
	  };
	  icn["TP.HARBOR"] = {
	    type: "path",
	    fill: false,
	    d: "M 80,140 50,60 150,60 120,140",
	  };
	  icn["TP.HARBOR POINT Q"] = [
	    icn["TP.HARBOR"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "Q",
	    },
	  ];
	  icn["TP.HARBOR POINT A"] = [
	    icn["TP.HARBOR"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "A",
	    },
	  ];
	  icn["TP.HARBOR POINT Y"] = [
	    icn["TP.HARBOR"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "Y",
	    },
	  ];
	  icn["TP.HARBOR POINT X"] = [
	    icn["TP.HARBOR"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "X",
	    },
	  ];
	  icn["TP.ROUTE"] = {
	    type: "path",
	    fill: false,
	    d: "m 138.484,76.82 c 0,-7.4823 6.066,-13.5478 13.548,-13.548 7.483,-3e-4 13.549,6.0653 13.549,13.548 m -27.097,0 0,0 c 0,6.9484 -5.634,12.5807 -12.582,12.58 -6.948,-4e-4 -12.58,-5.6324 -12.58,-12.58 m -27.097,0 c 2e-4,-7.4823 6.0657,-13.5478 13.548,-13.548 7.483,-3e-4 13.549,6.0653 13.549,13.548 m -79.3554,0 c 2e-4,-7.4824 6.066,-13.548 13.5484,-13.548 7.4824,0 13.5482,6.0656 13.5484,13.548 m 25.1616,0 0,0 C 86.2246,83.7681 80.5918,89.4003 73.6437,89.4 66.696,89.3998 61.0638,83.7677 61.0634,76.82 m 77.4206,47.328 c 0,-7.482 6.066,-13.548 13.548,-13.548 7.483,0 13.549,6.065 13.549,13.548 m -27.097,0 0,0 c 0,6.948 -5.634,12.581 -12.582,12.58 -6.948,0 -12.58,-5.632 -12.58,-12.58 m -27.097,0 c 2e-4,-7.482 6.0657,-13.548 13.548,-13.548 7.483,0 13.549,6.065 13.549,13.548 m -79.3554,0 c 2e-4,-7.482 6.066,-13.548 13.5484,-13.548 7.4824,0 13.5482,6.066 13.5484,13.548 m 25.1616,0 0,0 c -4e-4,6.948 -5.6332,12.58 -12.5813,12.58 -6.9477,0 -12.5799,-5.632 -12.5803,-12.58 m -27.0968,-23.664 132.5184,0",
	  };
	  icn["TP.ROUTE RENDEZVOUS"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "R",
	    },
	  ];
	  icn["TP.ROUTE DIVERSIONS"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "D",
	    },
	  ];
	  icn["TP.ROUTE WAYPOINT"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "W",
	    },
	  ];
	  icn["TP.ROUTE PIM"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "M",
	    },
	  ];
	  icn["TP.ROUTE POINT R"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "P",
	    },
	  ];
	  icn["TP.PICKET ROUTE"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "PK",
	    },
	  ];
	  icn["TP.POINT R ROUTE"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "R",
	    },
	  ];
	  icn["TP.RENDEZVOUS ROUTE"] = [
	    icn["TP.ROUTE"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 160,
	      fontsize: 45,
	      text: "RZ",
	    },
	  ];
	  icn["TP.AIR CONTROL"] = {
	    type: "path",
	    fill: false,
	    d: "m 140,165 0,-130 m -80,0 0,130",
	  };
	  icn["TP.AIR CONTROL POINT"] = [
	    icn["TP.AIR CONTROL"],
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.COMBAT AIR PATROL (CAP)"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["TP.AIRBORNE EARLY WARNING (AEW)"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "W",
	    },
	  ];
	  /*
	  icn["TP.TANKING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "K",
	    },
	    !numberSIDC && !STD2525 ? { type: "circle", cx: 100, cy: 100, r: 15 } : [],
	  ];
	  */
	  icn["TP.ASW FIXED WING"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "F",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 65,
	            fontsize: 32,
	            text: STD2525 ? "ASW" : "AS",
	          },
	          {
	            type: "path",
	            d: STD2525
	              ? "m 100,81.3203 c -1.5135,-0 -2.5365,2.6426 -2.5365,2.6426 l -0.1365,14.1465 -28.3641,29.9996 0.1484,4.604 28.5162,-18.748 -0.2929,24.43 -6.3073,6.017 -0.096,3.766 8.0313,-3.524 1.0312,3.326 0,0.02 0,-0.01 0,0.01 0,-0.02 1.0312,-3.326 8.031,3.524 -0.09,-3.766 -6.309,-6.017 -0.293,-24.43 28.518,18.748 0.146,-4.604 -28.364,-29.9996 -0.136,-14.1465 c 0,0 -1.014,-2.6416 -2.528,-2.6426 z"
	              : "M 80,88.3 C 60,80 60,120 80,111.4 L 100.2,99.9 120,111.3 C 140,120 140,80 120,88.6 l -19.8,11.3 z",
	            stroke: false,
	          },
	        ],
	  ];
	  icn["TP.ASW ROTARY WING"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "H",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 65,
	            fontsize: 32,
	            text: "ASW",
	          },
	          {
	            type: "path",
	            d: "m 65,80 0,40 70,-40 0,40 -70,-40",
	            stroke: false,
	          },
	        ],
	  ];
	  icn["TP.SUCAP - FIXED WING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 75,
	      fontsize: 32,
	      text: "SUW",
	    },
	    {
	      type: "path",
	      d: STD2525
	        ? "m 100,81.3203 c -1.5135,-0 -2.5365,2.6426 -2.5365,2.6426 l -0.1365,14.1465 -28.3641,29.9996 0.1484,4.604 28.5162,-18.748 -0.2929,24.43 -6.3073,6.017 -0.096,3.766 8.0313,-3.524 1.0312,3.326 0,0.02 0,-0.01 0,0.01 0,-0.02 1.0312,-3.326 8.031,3.524 -0.09,-3.766 -6.309,-6.017 -0.293,-24.43 28.518,18.748 0.146,-4.604 -28.364,-29.9996 -0.136,-14.1465 c 0,0 -1.014,-2.6416 -2.528,-2.6426 z"
	        : "M 80,88.3 C 60,80 60,120 80,111.4 L 100.2,99.9 120,111.3 C 140,120 140,80 120,88.6 l -19.8,11.3 z",
	      stroke: false,
	    },
	  ];
	  icn["TP.SUCAP - ROTARY WING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 32,
	      text: "SUW",
	    },
	    { type: "path", d: "m 65,80 0,40 70,-40 0,40 -70,-40", stroke: false },
	  ];
	  icn["TP.MIW - FIXED WING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 32,
	      text: STD2525 ? "MIW" : "MW",
	    },
	    {
	      type: "path",
	      d: STD2525
	        ? "m 100,81.3203 c -1.5135,-0 -2.5365,2.6426 -2.5365,2.6426 l -0.1365,14.1465 -28.3641,29.9996 0.1484,4.604 28.5162,-18.748 -0.2929,24.43 -6.3073,6.017 -0.096,3.766 8.0313,-3.524 1.0312,3.326 0,0.02 0,-0.01 0,0.01 0,-0.02 1.0312,-3.326 8.031,3.524 -0.09,-3.766 -6.309,-6.017 -0.293,-24.43 28.518,18.748 0.146,-4.604 -28.364,-29.9996 -0.136,-14.1465 c 0,0 -1.014,-2.6416 -2.528,-2.6426 z"
	        : "M 80,88.3 C 60,80 60,120 80,111.4 L 100.2,99.9 120,111.3 C 140,120 140,80 120,88.6 l -19.8,11.3 z",
	      stroke: false,
	    },
	  ];
	  icn["TP.MIW - ROTARY WING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 32,
	      text: STD2525 ? "MIW" : "MW",
	    },
	    { type: "path", d: "m 65,80 0,40 70,-40 0,40 -70,-40", stroke: false },
	  ];
	  icn["TP.STRIKE IP"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "S",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "middle",
	          x: 100,
	          y: 103,
	          fontsize: 45,
	          text: "S",
	        },
	  ];
	  icn["TP.CORRIDOR TAB POINT"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 145,
	      fontsize: 45,
	      text: "C",
	    },
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.AIR CONTROL RENDEZVOUS"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "RZ",
	    },
	  ];
	  icn["TP.CAP STATION"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "C",
	    },
	  ];
	  icn["TP.AEW STATION"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "W",
	    },
	  ];
	  icn["TP.TACAN"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "T",
	    },
	    !numberSIDC && !STD2525 ? { type: "circle", cx: 100, cy: 100, r: 15 } : [],
	  ];
	  icn["TP.REPLENISHMENT STATION"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "RP",
	    },
	  ];
	  icn["TP.TANKING"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: !numberSIDC && !STD2525 ? 145 : 103,
	      fontsize: 45,
	      text: "K",
	    },
	  ];
	  icn["TP.TOMCAT"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "O",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "middle",
	          x: 100,
	          y: 103,
	          fontsize: 45,
	          text: "TC",
	        },
	  ];
	  icn["TP.RESCUE"] = [
	    icn["TP.AIR CONTROL"],
	    numberSIDC
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "middle",
	          x: 100,
	          y: 103,
	          fontsize: 45,
	          text: "RS",
	        }
	      : !STD2525
	        ? [
	            {
	              type: "text",
	              alignmentBaseline: "middle",
	              stroke: false,
	              textanchor: "middle",
	              x: 100,
	              y: 145,
	              fontsize: 45,
	              text: "R",
	            },
	            { type: "circle", cx: 100, cy: 100, r: 15 },
	          ]
	        : {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 103,
	            fontsize: 45,
	            text: "RC",
	          },
	  ];
	  icn["TP.REPLENISH"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "F",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "middle",
	          x: 100,
	          y: 103,
	          fontsize: 45,
	          text: "RP",
	        },
	  ];
	  icn["TP.MARSHALL"] = [
	    icn["TP.AIR CONTROL"],
	    !numberSIDC && !STD2525
	      ? [
	          {
	            type: "text",
	            alignmentBaseline: "middle",
	            stroke: false,
	            textanchor: "middle",
	            x: 100,
	            y: 145,
	            fontsize: 45,
	            text: "M",
	          },
	          { type: "circle", cx: 100, cy: 100, r: 15 },
	        ]
	      : {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "middle",
	          x: 100,
	          y: 103,
	          fontsize: 45,
	          text: "M",
	        },
	  ];
	  icn["TP.UNMANNED AERIAL SYSTEM"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 70,85 30,15 30,-15 0,15 -30,15 -30,-15 z",
	    },
	  ];
	  icn["TP.VTUA"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 70,95 30,15 30,-15 0,30 -30,-15 -30,15 z m 0,-25 30,15 30,-15 0,15 -30,15 -30,-15 z",
	    },
	  ];
	  icn["TP.ORBIT"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "O",
	    },
	  ];
	  icn["TP.ORBIT - FIGURE EIGHT"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "O",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "F8",
	    },
	  ];
	  icn["TP.ORBIT - RACE TRACK"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "O",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "RT",
	    },
	  ];
	  icn["TP.ORBIT - RANDOM, CLOSED"] = [
	    icn["TP.AIR CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "O",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 40,
	      text: "RC",
	    },
	  ];
	  icn["TP.ISOLATED PERSONNEL LOCATION"] = [
	    { type: "circle", cx: 100, cy: 35, r: 10 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,100 h 50  M 100,55 v 45  M 70,25 100,55 130,25",
	    },
	  ];
	  icn["TP.ACTION POINT"] = {
	    type: "path",
	    fill: false,
	    d: "m 60,45 80,0 m -40,55 -40,-55 0,-105 80,0 0,105 z",
	  };
	  icn["TP.ACTION CHECK POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "CKP",
	    },
	  ];
	  icn["TP.CONTACT POINT"] = numberSIDC
	    ? {
	        type: "path",
	        fill: false,
	        d: "M 50,50 150,50 150,150 50,150z",
	      }
	    : {
	        type: "path",
	        fill: false,
	        d: "m 100,100 0,-35 -45,0 0,-75 90,0 0,75 -45,0",
	      };

	  icn["TP.CENTRE OF MAIN EFFORT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 155,100 0,-35 M 45,100 45,65 m 88,0 0,35 m -22,-35 0,35 m -22,-35 0,35 m -22,0 0,-35 m -37,70 0,-35 140,0 0,40",
	    },
	  ];
	  icn["TP.COORDINATION POINT"] = [
	    { type: "path", fill: false, d: "m 65,135 70,-70 m -70,0 70,70" },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	  ];
	  icn["TP.DECISION POINT"] = {
	    type: "path",
	    fill: false,
	    d: "M 99.9998,25.5886 117.061,76.5192 170.77,77.0054 127.604,108.968 143.738,160.2 100,129.024 56.2624,160.2 72.3967,108.968 29.2306,77.0059 82.9403,76.5192 Z",
	  };
	  icn["TP.DISTRESS CALL"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "SOS",
	    },
	  ];
	  icn["TP.ENTRY CONTROL POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "EC",
	    },
	  ];

	  icn["TP.FLY-TO-POINT (SONOBUOY)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "FTP",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      text: "SBY",
	    },
	  ];
	  icn["TP.FLY-TO-POINT (WEAPON)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "FTP",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      text: "WPN",
	    },
	  ];
	  icn["TP.FLY-TO-POINT (NORMAL)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "FTP",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      text: "NRM",
	    },
	  ];
	  icn["TP.ACTION LINKUP POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "LU",
	    },
	  ];
	  icn["TP.ACTION PASSAGE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "PP",
	    },
	  ];
	  icn["TP.ACTION RALLY POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "RLY",
	    },
	  ];
	  icn["TP.ACTION RELEASE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "RP",
	    },
	  ];
	  icn["TP.ACTION START POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "SP",
	    },
	  ];
	  icn["TP.ACTION AMNESTY POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "AMN",
	    },
	  ];
	  icn["TP.WAYPOINT"] = {
	    type: "path",
	    fill: false,
	    strokewidth: 8,
	    d: "m 65,135 70,-70 m -70,0 70,70",
	  };
	  icn["TP.COMBATANT STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "CBT",
	    },
	  ];
	  icn["TP.PICKET STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "PKT",
	    },
	  ];
	  icn["TP.ASW SHIP STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "ASW",
	    },
	  ];
	  icn["TP.REPLENISHMENT AT SEA (RAS) STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "RAS",
	    },
	  ];
	  icn["TP.RESCUE STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "RSC",
	    },
	  ];
	  icn["TP.SUBMARINE STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "SUB",
	    },
	  ];
	  icn["TP.ASW SUBMARINE STATION"] = [
	    icn["TP.WAYPOINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 75,
	      y: 103,
	      fontsize: 40,
	      text: "ASW/SUB",
	    },
	  ];
	  icn["TP.SEA SURFACE CONTROL"] = {
	    type: "path",
	    fill: false,
	    d: "m 30,60 140,0 m -140,80 140,0",
	  };
	  icn["TP.SEA SURFACE CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.(USV) CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100,115 45,-20 0,-15 -45,20 -45,-20 0,15 z",
	    },
	  ];
	  icn["TP.(USV)"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 55,100 45,20 45,-20 0,15 -45,20 -45,-20 z",
	    },
	  ];
	  icn["TP.(RMV) USV CONTROL STATION"] = [
	    icn["TP.(USV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "RMV",
	    },
	  ];
	  icn["TP.USV - ASW CONTROL STATION"] = [
	    icn["TP.(USV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "ASW",
	    },
	  ];
	  icn["TP.MINE WARFARE UNMANNED UNDERWATER VEHICLE SURFACE STATION"] = [
	    icn["TP.(USV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "MW",
	    },
	  ];
	  icn["TP.USV - SUW CONTROL STATION"] = [
	    icn["TP.(USV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "SUW",
	    },
	  ];
	  icn["TP.USV - MIW CONTROL STATION"] = [
	    icn["TP.(USV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "MIW",
	    },
	  ];
	  icn["TP.ASW CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "ASW",
	    },
	  ];
	  icn["TP.MINE WARFARE SURFACE STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "MW",
	    },
	  ];
	  icn["TP.NON-COMBATANT SURFACE STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "NC",
	    },
	  ];
	  icn["TP.SUW CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "SUW",
	    },
	  ];
	  icn["TP.MIW CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "MIW",
	    },
	  ];
	  icn["TP.PICKET CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "PK",
	    },
	  ];
	  icn["TP.RENDEZVOUS CONTROL POINT"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "RZ",
	    },
	  ];
	  icn["TP.REPLENISHMENT AT SEA SURFACE STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "RAS",
	    },
	  ];
	  icn["TP.RESCUE CONTROL POINT"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "RS",
	    },
	  ];
	  icn["TP.REPLENISHMENT CONTROL POINT"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "RP",
	    },
	  ];
	  icn["TP.NONCOMBATANT CONTROL STATION"] = [
	    icn["TP.SEA SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 45,
	      text: "NC",
	    },
	  ];
	  icn["TP.SUB SURFACE CONTROL"] = [
	    { type: "path", fill: false, d: "m 30,140 140,0" },
	    { type: "path", fill: false, strokedasharray: "12,4", d: "m 30,60 140,0" },
	  ];
	  icn["TP.SUB SURFACE CONTROL STATION"] = [
	    icn["TP.SUB SURFACE CONTROL"],
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	  ];
	  icn["TP.(UUV) CONTROL STATION"] = [
	    icn["TP.SUB SURFACE CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100,115 45,-20 0,-15 -45,20 -45,-20 0,15 z",
	    },
	  ];
	  icn["TP.(UUV)"] = [
	    icn["TP.SUB SURFACE CONTROL"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 55,100 45,20 45,-20 0,15 -45,20 -45,-20 z",
	    },
	  ];
	  icn["TP.UUV - ASW CONTROL STATION"] = [
	    icn["TP.(UUV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "ASW",
	    },
	  ];
	  icn["TP.MINE WARFARE UNMANNED UNDERWATER VEHICLE SUBSURFACE STATION"] = [
	    icn["TP.(UUV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "MW",
	    },
	  ];
	  icn["TP.UUV - SUW CONTROL STATION"] = [
	    icn["TP.(UUV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "SUW",
	    },
	  ];
	  icn["TP.UUV - MIW CONTROL STATION"] = [
	    icn["TP.(UUV)"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 85,
	      fontsize: 40,
	      text: "MIW",
	    },
	  ];
	  icn["TP.SUBMARINE CONTROL STATION"] = [
	    icn["TP.SUB SURFACE CONTROL"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 120,
	      fontsize: 35,
	      text: "SS",
	    },
	    { type: "path", d: "m 75,95 0,-20 50,0 0,20 z m 25,-30 0,40" },
	  ];
	  icn["TP.ASW SUBMARINE CONTROL STATION"] = [
	    icn["TP.SUB SURFACE CONTROL"],
	    {
	      type: "path",
	      d: "m 68.75,105 -12.5,12.5 12.5,12.5 62.5,0 12.5,-12.5 -12.5,-12.5 z M 75,95 l 0,-20 50,0 0,20 z m 25,-30 0,40",
	    },
	  ];
	  icn["TP.AIR CONTROL POINT (ACP)"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 80,
	      fontsize: 30,
	      text: "ACP",
	    },
	  ];
	  icn["TP.COMMUNICATIONS CHECKPOINT"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 80,
	      fontsize: 30,
	      text: "CCP",
	    },
	  ];
	  icn["TP.PULL-UP POINT"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 103,
	      fontsize: 40,
	      text: "PUP",
	    },
	    { type: "path", fill: false, d: "m 65,80 0,40 70,-40 0,40 z" },
	  ];
	  icn["TP.DOWNED AIRCREW PICKUP POINT"] = [
	    icn["TP.ACTION POINT"],
	    { type: "circle", cx: 100, cy: -35, r: 12 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,35 50,0 m -25,-45 0,45 m -30,-75 30,30 30,-30",
	    },
	  ];
	  icn["TP.DUMMY MINEFIELD"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,100 c 0,5.523 -4.4772,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.5228,0 10,4.4772 10,10 z m 70,0 c 0,5.523 -4.477,10 -10,10 -5.523,0 -10,-4.477 -10,-10 0,-5.5228 4.477,-10 10,-10 5.523,0 10,4.4772 10,10 z m -35,0 c 0,5.523 -4.477,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z m -70,-40 0,80 120,0 0,-80 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "15,10",
	      d: "M 160,60 100,-5 M 40,60 100,-5",
	    },
	  ];
	  icn["TP.TARGET REFERENCE"] = {
	    type: "path",
	    fill: false,
	    d: "m 50,100 100,0 m -50,-50 0,100",
	  };
	  icn["TP.OBSERVATION POST/OUTPOST"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,45 47.6,82.5 -95.2,0 z",
	  };
	  icn["TP.COMBAT OUTPOST"] = {
	    type: "path",
	    fill: false,
	    d: "m 140,140 0,-12.5 m -16,12.5 0,-12.5 m -16,12.5 0,-12.5 m -48.0001,12.5 3e-4,-12.5 m 15.9993,12.5 4e-4,-12.501 m 16,12.501 3e-4,-12.5 m -46.43,-12.493 10.8256,6.25 m -2.8256,-20.107 10.8256,6.251 m -2.8257,-20.1071 10.8257,6.2506 m 13.1743,-47.8198 10.8257,6.2506 m -18.8253,7.6056 10.8256,6.2506 m -18.826,7.606 10.8257,6.2506 M 114.43,45.725 l -10.826,6.25 m 18.826,7.6064 -10.826,6.25 m 18.826,7.6064 -10.826,6.25 m 34.826,35.3192 -10.826,6.25 m 2.826,-20.106 -10.826,6.25 m 2.826,-20.1068 -10.826,6.25 M 99.9998,45 l 47.6312,82.5 -95.2623,0 z",
	  };
	  icn["TP.OBSERVATION POST/RECONNAISSANCE"] = {
	    type: "path",
	    fill: false,
	    d: "M 52.3687,127.5 123.816,86.2499 M 99.9998,45 l 47.6312,82.5 -95.2623,0 z",
	  };
	  icn["TP.FORWARD OBSERVER POSITION"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,45 48,83 H 52.4 Z",
	    },
	    {
	      type: "path",
	      d: "m 115,100 c 0,8.284 -6.716,15 -15,15 -8.2843,0 -15,-6.716 -15,-15 0,-8.2843 6.7157,-15 15,-15 8.284,0 15,6.7157 15,15 z",
	    },
	  ];
	  icn["TP.SENSOR OUTPOST"] = numberSIDC
	    ? [
	        {
	          type: "path",
	          fill: false,
	          d: "M 99.9998,45 l 47.6312,82.5 -95.2623,0 z",
	        },
	        {
	          type: "path",
	          stroke: false,
	          d: "m 100,80 c 0,7.5 12.5,20 20,20 -7.5,0 -20,12.5 -20,20 0,-7.5 -12.5,-20 -20,-20 7.5,0 20,-12.5 20,-20 z",
	        },
	      ]
	    : {
	        type: "path",
	        fill: false,
	        d: "m 61.1738,112.25 23.6601,0 m 30.3321,0 23.66,0 M 80,105 l 10,15 20,0 10,-15 z m 19.9998,-60 47.6312,82.5 -95.2623,0 z",
	      };
	  icn["TP.CBRN OBSERVATION POST"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 99.9998,45 47.6312,82.5 -95.2623,0 z M 88,119 c 2.1824,-13.288 7.7157,-24.22 22,-29 m 1.829,29 C 109.664,105.712 104.173,94.78 90,90 M 52.3687,127.5 123.816,86.2499",
	    },
	    {
	      type: "path",
	      d: "m 91,92 c 0,2.7614 -2.2386,5 -5,5 -2.7614,0 -5,-2.2386 -5,-5 0,-2.7614 2.2386,-5 5,-5 2.7614,0 5,2.2386 5,5 z m 28.011,0 c 0,2.7678 -2.243,5.0117 -5.011,5.012 -2.768,-3e-4 -5.011,-2.2442 -5.011,-5.012 0,-2.7676 2.243,-5.0112 5.011,-5.0115 2.768,3e-4 5.011,2.2439 5.011,5.0115 z",
	    },
	  ];
	  icn["TP.POINT OF DEPARTURE"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "PD",
	    },
	  ];
	  icn["TP.FIXED AND PREFABRICATED"] = {
	    type: "path",
	    d: "m 60,100 40,-65 40,65 z",
	  };
	  icn["TP.TETRAHEDRONS"] = {
	    type: "path",
	    fill: false,
	    d: "m 60,100 40,-65 40,65",
	  };
	  icn["TP.TETRAHEDRONS MOVABLE"] = {
	    type: "path",
	    fill: false,
	    d: "m 60,100 40,-65 40,65 z",
	  };
	  icn["TP.BOOBY TRAP"] = {
	    type: "path",
	    fill: false,
	    d: "M 77.2413,87.9311 100,50 122.781,87.9687 M 130,100 c 0,10.24 -13.431,18.541 -30,18.541 -16.5685,0 -30,-8.301 -30,-18.541 0,-10.2399 13.4315,-18.541 30,-18.541 16.569,0 30,8.3011 30,18.541 z",
	  };
	  icn["TP.UNSPECIFIED MINE"] = {
	    type: "path",
	    fill: false,
	    d: "m 129,100 c 0,16.016 -12.984,29 -29,29 -16.0163,0 -29,-12.984 -29,-29 0,-16.0163 12.9837,-29 29,-29 16.016,0 29,12.9837 29,29 z",
	  };
	  icn["TP.ANTITANK MINE (AT)"] = {
	    type: "path",
	    d: "m 129,100 c 0,16.016 -12.984,29 -29,29 -16.0163,0 -29,-12.984 -29,-29 0,-16.0163 12.9837,-29 29,-29 16.016,0 29,12.9837 29,29 z",
	  };
	  icn["TP.(AT) ANTIHANDLING DEVICE"] = [
	    icn["TP.ANTITANK MINE (AT)"],
	    { type: "path", fill: false, d: "m 100,130 0,65 15,-15" },
	  ];
	  icn["TP.(AT) DIRECTIONAL"] = [
	    icn["TP.ANTITANK MINE (AT)"],
	    { type: "path", fill: false, strokedasharray: "5,5", d: "m 100,70 0,-60" },
	    { type: "path", fill: false, d: "m 90,20 10,-10 10,10" },
	  ];
	  icn["TP.ANTIPERSONNEL (AP) MINES"] = [
	    icn["TP.ANTITANK MINE (AT)"],
	    { type: "path", fill: false, d: "m 50,50 29.5,29.5 m 41,0 L 150,50" },
	  ];
	  icn["TP.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS"] = [
	    icn["TP.ANTITANK MINE (AT)"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 131,100 10,0 M 50,50 79.5,79.5 m 41,0 L 150,50 m -4,50 10,0 m 5,0 10,0 m -10,-10 10,10 -10,10",
	    },
	  ];
	  icn["TP.WIDE AREA MINES"] = [
	    icn["TP.ANTITANK MINE (AT)"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 50,110 25,40 12,-24 M 113,126 125,150 150,110",
	    },
	  ];
	  icn["TP.PLANNED MINEFIELD"] = [
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "15,15",
	      d: "m 40,65 0,70 120,0 0,-70 z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,100 c 0,5.523 -4.4772,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.5228,0 10,4.4772 10,10 z m 70,0 c 0,5.523 -4.477,10 -10,10 -5.523,0 -10,-4.477 -10,-10 0,-5.5228 4.477,-10 10,-10 5.523,0 10,4.4772 10,10 z m -35,0 c 0,5.523 -4.477,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z",
	    },
	  ];
	  icn["TP.MINEFIELDS STATIC"] = {
	    type: "path",
	    fill: false,
	    d: "m 40,65 0,70 120,0 0,-70 z m 70,35 c 0,5.523 -4.477,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z m 35,0 c 0,5.523 -4.477,10 -10,10 -5.523,0 -10,-4.477 -10,-10 0,-5.5228 4.477,-10 10,-10 5.523,0 10,4.4772 10,10 z m -70,0 c 0,5.523 -4.4772,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.5228,0 10,4.4772 10,10 z",
	  };
	  icn["TP.MINEFIELD, STATIC"] = {
	    type: "path",
	    fill: false,
	    d: "m 25,65 0,70 150,0 0,-70 z",
	  };
	  //This is to solve anticipated minefields... Don't we just love special cases...
	  if (metadata.notpresent)
	    icn["TP.MINEFIELDS STATIC"] = icn["TP.PLANNED MINEFIELD"];
	  icn["TP.ANTITANK (AT) MINEFIELD"] = [
	    { type: "path", fill: false, d: "m 40,65 0,70 120,0 0,-70 z" },
	    {
	      type: "path",
	      d: "m 75,100 c 0,5.523 -4.4772,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.5228,0 10,4.4772 10,10 z m 70,0 c 0,5.523 -4.477,10 -10,10 -5.523,0 -10,-4.477 -10,-10 0,-5.5228 4.477,-10 10,-10 5.523,0 10,4.4772 10,10 z m -35,0 c 0,5.523 -4.477,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z",
	    },
	  ];
	  icn["TP.SCATTERABLE MINES"] = [
	    icn["TP.MINEFIELDS STATIC"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 50,
	      fontsize: 35,
	      text: "S",
	    },
	  ];
	  icn["TP.ANTIPERSONNEL (AP) MINEFIELD"] = [
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 50,
	      fontsize: 35,
	      text: "+S",
	    },
	    { type: "path", fill: false, d: "m 40,65 0,70 120,0 0,-70 z" },
	    {
	      type: "path",
	      d: "M 72.0703,92.9297 80,82.3622 m -30,0 7.9297,10.5675 m 49.1403,0 7.93,-10.5675 m -30,0 7.9297,10.5675 m 49.1403,0 7.93,-10.5675 m -30,0 7.93,10.5675 M 110,100 c 0,5.523 -4.477,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z m 35,0 c 0,5.523 -4.477,10 -10,10 -5.523,0 -10,-4.477 -10,-10 0,-5.5228 4.477,-10 10,-10 5.523,0 10,4.4772 10,10 z m -70,0 c 0,5.523 -4.4772,10 -10,10 -5.5228,0 -10,-4.477 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.5228,0 10,4.4772 10,10 z",
	    },
	  ];
	  icn["TP.SCATTERABLE MINEFIELD WITH SELF-DESTRUCT"] = [
	    icn["TP.ANTITANK (AT) MINEFIELD"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 50,
	      fontsize: 35,
	      text: "S",
	    },
	  ];
	  icn["TP.VOLCANO MINEFIELD"] = [
	    icn["TP.ANTITANK (AT) MINEFIELD"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 50,
	      fontsize: 35,
	      text: "V",
	    },
	  ];
	  icn["TP.TOWER LOW"] = [
	    { type: "circle", stroke: false, cx: 100, cy: 100, r: 7 },
	    { type: "path", fill: false, strokewidth: 8, d: "m 75,105 25,-65 25,65" },
	  ];
	  icn["TP.TOWER HIGH"] = [
	    { type: "circle", stroke: false, cx: 100, cy: 100, r: 7 },
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 8,
	      d: "m 100,40 c 2.358,31.6754 7.162,59.2531 25,64.999 M 100,40 c -2.358,31.6754 -7.1624,59.2531 -25,65",
	    },
	  ];
	  icn["TP.ENGINEER REGULATING POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ERP",
	    },
	  ];
	  icn["TP.EARTHWORK/FORTIFICATION"] = {
	    type: "path",
	    d: "m 65,65 0,70 70,0 0,-70 -70,0z",
	  };
	  icn["TP.FORT"] = {
	    type: "path",
	    fill: false,
	    d: "m 135,65 15,-15 m -15,85 15,15 M 65,135 50,150 m 15,-85 0,70 70,0 0,-70 -70,0 -15,-15",
	  };
	  icn["TP.SURFACE SHELTER"] = {
	    type: "path",
	    d: "m 135,135 15,0 m -100,0 15,0 m 0,-70 0,70 70,0 0,-70 -70,0",
	  };
	  icn["TP.UNDERGROUND SHELTER"] = {
	    type: "path",
	    d: "m 135,65 15,0 m -100,0 15,0 m 0,70 0,-70 70,0 0,70 -70,0",
	  };
	  icn["TP.NUCLEAR DETONATIONS GROUND ZERO"] = [
	    {
	      type: "path",
	      fill: !monoColor ? "rgb(255,255,0)" : false,
	      d: "m 85,25 0,75 30,0 0,-75 m -50,0 c 0,-50 70,-50 70,0 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 35,
	      text: "N",
	    },
	  ];
	  icn["TP.NUCLEAR DETONATIONS GROUND ZERO PLANNED"] = [
	    {
	      type: "path",
	      strokedasharray: "5,5",
	      fill: !monoColor ? "rgb(255,255,0)" : false,
	      d: "m 85,25 0,75 30,0 0,-75 m -50,0 c 0,-50 70,-50 70,0 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 35,
	      text: "N",
	    },
	  ];
	  icn["TP.NUCLEAR FALLOUT PRODUCING"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 120,85 -15,15 m -25,0 40,-35 M 80,80 120,40 M 80,55 115,25 M 80,40 95,25 m -40,0 c 0,-60 90,-60 90,0 z m 25,0 0,75 40,0 0,-75",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 65,
	      fontsize: 35,
	      text: "N",
	    },
	  ];
	  icn["TP.RELEASE EVENTS BIOLOGICAL"] = [
	    {
	      type: "path",
	      fill: !monoColor ? "rgb(255,255,0)" : false,
	      d: "m 85,-15 0,60 -25,55 80,0 -25,-55 0,-60 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 75,
	      fontsize: 35,
	      text: "B",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 50,
	      fontsize: 35,
	      text: "BIO",
	    },
	  ];
	  icn["TP.RELEASE EVENTS CHEMICAL"] = [
	    {
	      type: "path",
	      fill: !monoColor ? "rgb(255,255,0)" : false,
	      d: "m 85,-15 0,59.0625 C 75.7313,49.4137 70.0154,59.2975 70,70 c 0,16.5685 13.4315,30 30,30 16.569,0 30,-13.4315 30,-30 -0.01,-10.7067 -5.728,-20.5959 -15,-25.9492 L 115,-15 Z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 70,
	      fontsize: 35,
	      text: "C",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 50,
	      fontsize: 35,
	      text: "CML",
	    },
	  ];
	  icn["TP.DECON SITE/POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "DCN",
	    },
	  ];
	  icn["TP.ALTERNATE DECON SITE/POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "ALT",
	    },
	  ];
	  icn["TP.DECON SITE/POINT (TROOPS)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "T",
	    },
	  ];
	  icn["TP.DECON SITE/POINT (EQUIPMENT)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "E",
	    },
	  ];
	  icn["TP.DECON SITE/POINT (EQUIPMENT AND TROOPS)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "E/T",
	    },
	  ];
	  icn["TP.DECON SITE/POINT (OPERATIONAL DECONTAMINATION)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "O",
	    },
	  ];
	  icn["TP.DECON SITE/POINT (THOROUGH DECONTAMINATION)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "TH",
	    },
	  ];
	  icn["TP.MAIN EQUIPMENT DECONTAMINATION POINT/SITE"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 30,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 25,
	      text: "(M)",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 3,
	      fontsize: 25,
	      text: "E",
	    },
	  ];
	  icn["TP.FORWARD TROOP DECONTAMINATION POINT/SITE"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 30,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 25,
	      text: "(F)",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 3,
	      fontsize: 25,
	      text: "T",
	    },
	  ];
	  icn["TP.WOUNDED PERSONNEL DECONTAMINATION SITE"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -10,
	      fontsize: 35,
	      text: "W",
	    },
	  ];
	  icn["TP.AMBULANCE CONTROL POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ACP",
	    },
	  ];
	  icn["TP.AMBULANCE LOAD POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ALP",
	    },
	  ];
	  icn["TP.AMBULANCE RELAY POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ARP",
	    },
	  ];
	  icn["TP.DECON POINT (MAIN) EQUIPMENT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 0,
	      fontsize: 35,
	      text: "(M)E",
	    },
	  ];
	  icn["TP.DECON POINT (FORWARD) TROOPS"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "DCN",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 0,
	      fontsize: 35,
	      text: "(F)T",
	    },
	  ];
	  icn["TP.POINT/SINGLE TARGET"] = {
	    type: "path",
	    fill: false,
	    d: "m 50,100 100,0 m -50,-50 0,100",
	  };
	  icn["TP.KNOWN POINT"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 50,100 100,0 m -50,-50 0,100",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 110,
	      y: 70,
	      fontsize: 30,
	      text: "KNP",
	    },
	  ];
	  icn["TP.NUCLEAR TARGET"] = {
	    type: "path",
	    fill: false,
	    d: "m 90,100 -40,0 m 50,10 0,40 m 10,-50 40,0 m -50,-10 0,-40 m 2.5,50 c 0,1.381 -1.119,2.5 -2.5,2.5 -1.3807,0 -2.5,-1.119 -2.5,-2.5 0,-1.3807 1.1193,-2.5 2.5,-2.5 1.381,0 2.5,1.1193 2.5,2.5 z",
	  };
	  icn["TP.TARGETRECORDED (AEGIS ONLY)"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 0,50 0,100 200,0 0,-100 z",
	    },
	    {
	      type: "path",
	      stroke: false,
	      d: "m 100,90 -10,10 10,10 10,-10 z",
	    },
	  ];
	  icn["TP.FIRE SUPPORT STATION"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "M 50,50 150,150 M 50,150 150,50",
	    },
	    numberSIDC
	      ? {
	          type: "text",
	          alignmentBaseline: "middle",
	          stroke: false,
	          textanchor: "left",
	          x: 120,
	          y: 100,
	          fontsize: 35,
	          text: "FSS",
	        }
	      : [],
	  ];
	  icn["TP.SURVEY CONTROL POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "SCP",
	    },
	  ];
	  icn["TP.FIRING POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "FP",
	    },
	  ];
	  icn["TP.RELOAD POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "RLP",
	    },
	  ];
	  icn["TP.HIDE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "HP",
	    },
	  ];
	  icn["TP.LAUNCH POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "LP",
	    },
	  ];
	  icn["TP.AMBULANCE EXCHANGE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "AXP",
	    },
	  ];
	  icn["TP.CANNIBALIZATION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "CAN",
	    },
	  ];
	  icn["TP.CASUALTY COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "CCP",
	    },
	  ];
	  icn["TP.CIVILIAN COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "CIV",
	    },
	  ];
	  icn["TP.DETAINEE COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "DET",
	    },
	  ];
	  icn["TP.EPW COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "EPW",
	    },
	  ];
	  icn["TP.LOGISTICS RELEASE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "LRP",
	    },
	  ];
	  icn["TP.MAINTENANCE COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "MCP",
	    },
	  ];
	  icn["TP.MEDICAL EVACUATION (MEDEVAC) PICKUP POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -40,
	      fontsize: 30,
	      text: "MEP",
	    },
	    {
	      type: "path",
	      stroke: false,
	      d: "m 95,-25 0,10 -10,0 0,10 10,0 0,10 10,0 0,-10 10,0 0,-10 -10,0 0,-10 z",
	    },
	  ];
	  icn["TP.REARM, REFUEL AND RESUPPLY POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "R3P",
	    },
	  ];
	  icn["TP.REFUEL ON THE MOVE POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ROM",
	    },
	  ];
	  icn["TP.TRAFFIC CONTROL POST"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "TCP",
	    },
	  ];
	  icn["TP.TRAILER TRANSFER POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "TTP",
	    },
	  ];
	  icn["TP.UNIT MAINTENANCE COLLECTION POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 25,
	      text: "UMCP",
	    },
	  ];
	  icn["TP.SUPPLY POINT"] = {
	    type: "path",
	    fill: false,
	    d: "m 60,30 80,0 m -80,15 80,0 m -40,55 -40,-55 0,-105 80,0 0,105 z",
	  };
	  icn["TP.NATO CLASS I"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 45,
	      text: "I",
	    },
	  ];
	  icn["TP.NATO CLASS II"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 45,
	      text: "II",
	    },
	  ];
	  icn["TP.NATO CLASS III"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 45,
	      text: "III",
	    },
	  ];
	  icn["TP.NATO CLASS IV"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 45,
	      text: "IV",
	    },
	  ];
	  icn["TP.NATO CLASS V"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 80,-10 40,0 m -32,0 0,-26.7 c 0,-17.8 24,-17.8 24,0 L 112,-10",
	    },
	  ];
	  icn["TP.SP CLASS I"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 115,-50 c -45,5 -45,65 0,70 -20,-25 -20,-50 0,-70 z",
	    },
	  ];
	  icn["TP.SP CLASS II"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      stroke: false,
	      d: "m 101.143,3.91602 q 3.662,-0.26368 4.746,-1.08399 1.084,-0.84961 1.084,-4.33594 l 0,-26.68949 q 0,-3.3105 -1.084,-4.248 -1.084,-0.9668 -4.746,-1.1426 l 0,-1.1133 17.753,0 0,1.1133 q -3.662,0.1758 -4.746,1.1426 -1.084,0.9375 -1.084,4.248 l 0,26.68949 q 0,3.48633 1.084,4.33594 1.084,0.82031 4.746,1.08399 l 0,1.08398 -17.753,0 0,-1.08398 z m 8.877,-38.61332 0,0 z M 81.1035,3.91602 q 3.6621,-0.26368 4.7461,-1.08399 1.084,-0.84961 1.084,-4.33594 l 0,-26.68949 q 0,-3.3105 -1.084,-4.248 -1.084,-0.9668 -4.7461,-1.1426 l 0,-1.1133 17.7539,0 0,1.1133 q -3.6621,0.1758 -4.7461,1.1426 -1.084,0.9375 -1.084,4.248 l 0,26.68949 q 0,3.48633 1.084,4.33594 1.084,0.82031 4.7461,1.08399 l 0,1.08398 -17.7539,0 0,-1.08398 z m 8.877,-38.61332 0,0 z",
	    },
	  ];
	  icn["TP.SP CLASS III"] = [
	    icn["TP.SUPPLY POINT"],
	    { type: "path", fill: false, d: "m 100,20 0,-30 -20,-40 40,0 -20,40" },
	  ];
	  icn["TP.SP CLASS IV"] = [
	    icn["TP.SUPPLY POINT"],
	    { type: "path", fill: false, d: "m 100,-40 0,20 m -25,10 0,-30 50,0 0,30" },
	  ];
	  icn["TP.SP CLASS V"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 80,15 0,-50 c 0,-20 40,-20 40,0 l 0,50 m -50,0 60,0",
	    },
	  ];
	  icn["TP.SP CLASS VI"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 75,-20 50,0 m -25,15 15,25 m -15,-50 0,25 -20,25 m 30,-60 c 0,5.5228 -4.477,10 -10,10 -5.5228,0 -10,-4.4772 -10,-10 0,-5.5228 4.4772,-10 10,-10 5.523,0 10,4.4772 10,10 z",
	    },
	  ];
	  icn["TP.SP CLASS VII"] = [
	    icn["TP.SUPPLY POINT"],
	    { type: "path", fill: false, d: "m 85,-25 c 10,-10 20,-10 30,0" },
	    {
	      type: "path",
	      d: "m 129.6,-20 c 0,5.3019 -4.298,9.5999 -9.6,9.5998 -5.302,10e-5 -9.6,-4.2979 -9.6,-9.5998 0,-5.3019 4.298,-9.5999 9.6,-9.5998 5.302,-1e-4 9.6,4.2979 9.6,9.5998 z m -40.4886,0 c 0,5.0321 -4.0793,9.1114 -9.1114,9.1114 -5.0321,0 -9.1114,-4.0793 -9.1114,-9.1114 0,-5.0321 4.0793,-9.1114 9.1114,-9.1114 5.0321,0 9.1114,4.0793 9.1114,9.1114 z",
	    },
	  ];
	  icn["TP.SP CLASS VIII"] = [
	    icn["TP.SUPPLY POINT"],
	    { type: "path", fill: false, d: "m 60,-15 80,0 m -40,-45 0,90" },
	  ];
	  icn["TP.SP CLASS IX"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 121.213,-36.2132 -7.08,7.0802 M 85.8669,-0.866982 78.7868,6.2132 m 0,-42.4264 7.0801,7.0802 m 28.2661,28.266018 7.08,7.080182 M 100,-45 l 0,10 m 0,40 0,10 m -30,-30 10,0 m 40,0 10,0 m -10,0 c 0,11.04569 -8.954,20 -20,20 -11.0457,0 -20,-8.95431 -20,-20 0,-11.0457 8.9543,-20 20,-20 11.046,0 20,8.9543 20,20 z",
	    },
	  ];
	  icn["TP.SP CLASS X"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 40,
	      text: "CA",
	    },
	  ];
	  icn["TP.MEDICAL SUPPLY POINT"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,-20 0,-40 m -40,25 80,0",
	    },
	  ];
	  icn["TP.MORTUARY AFFAIRS COLLECTION POINT"] = [
	    icn["TP.SUPPLY POINT"],
	    {
	      type: "path",
	      fill: false,
	      d: "m 113,-50 v 21  M 75,-40 h 50  M 67,-54 h 66 v 30 H 67 Z",
	    },
	  ];
	  icn["TP.AMMUNITION SUPPLY POINT (ASP)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ASP",
	    },
	  ];
	  icn["TP.AMMUNITION TRANSFER POINT (ATP)"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -30,
	      fontsize: 35,
	      text: "ATP",
	    },
	  ];
	  icn["TP.TARGET HANDOVER"] = [
	    {
	      type: "path",
	      strokedasharray: "10,5",
	      fill: false,
	      d: "m 100,45 -15,40 -40,15 40,15 15,40 15,-40 40,-15 -40,-15 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 100,
	      fontsize: 30,
	      text: "TH",
	    },
	  ];
	  icn["TP.KEY TERRAIN"] = [
	    {
	      type: "path",
	      fill: false,
	      stroke: "rgb(128,0,128)",
	      strokewidth: 6,
	      d: "m 145,100 a 45,45 0 0 1 -45,45 45,45 0 0 1 -45,-45 45,45 0 0 1 45,-45 45,45 0 0 1 45,45 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 80,
	      y: 100,
	      fontsize: 35,
	      text: "K",
	      fill: "rgb(128,0,128)",
	    },
	  ];
	  icn["TP.CONTROL POINT"] = [
	    icn["TP.ACTION POINT"],
	    {
	      type: "path",
	      d: "m 131,-35 -5,-5 v 10 z  m -31.1,16 -4.8,-5 h 9.9 z  m 0,-33 -5,5 H 105 Z  m -29.9,17 5,-5 v 10 z  m 30,-16.3 V -19  M 70,-35 h 60",
	    },
	  ];
	  icn["TP.VITAL GROUND"] = [
	    {
	      type: "path",
	      fill: false,
	      stroke: "rgb(128,0,128)",
	      strokewidth: 6,
	      d: "m 145,100 a 45,45 0 0 1 -45,45 45,45 0 0 1 -45,-45 45,45 0 0 1 45,-45 45,45 0 0 1 45,45 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 100,
	      fontsize: 35,
	      text: "VG",
	      fill: "rgb(128,0,128)",
	    },
	  ];
	  icn["TP.BT BOUY DROP"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 65,45 0,110 70,0 0,-110 m -35,95 0,-95 m -35,0 70,0",
	    },
	    {
	      type: "path",
	      d: "m 104,100 c 0,2 -3,2 -4.8,2 -1.4,0 -4.1,-1 -2.7,-2.9 1.9,-1.4 4.5,-1.4 6.5,-0.4 1,0.3 1,0.7 1,1.3 z m 0,40 c 0,2 -3,2 -4.8,2 -1.4,0 -4.1,-1 -2.7,-3 1.9,-1 4.5,-1 6.5,0 1,0 1,0 1,1 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 80,
	      y: 100,
	      fontsize: 35,
	      text: "B",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 120,
	      y: 100,
	      fontsize: 35,
	      text: "T",
	    },
	  ];
	  icn["TP.REPORTED BOTTOMED SUB"] = {
	    type: "path",
	    fill: false,
	    d: "M 129,122.4 70.9,78.8 m 0,43.6 58.1,-43.6 m -80,-14.5 0,43.6 29,0 0,29 43.6,0 0,-29 29,0 0,-43.6",
	  };
	  icn["TP.MOVING HAVEN"] = {
	    type: "path",
	    d: "M 108.142,100 A 8.14167,8.14167 0 0 1 100,108.142 8.14167,8.14167 0 0 1 91.8583,100 8.14167,8.14167 0 0 1 100,91.8583 8.14167,8.14167 0 0 1 108.142,100 Z M 45,55 l 0,90 m 110,-90 0,90 m -110,-45 110,0",
	  };
	  icn["TP.SCREEN CENTRE"] = {
	    type: "path",
	    d: "m 100,55 0,90 m 8.142,-45 A 8.14167,8.14167 0 0 1 100,108.142 8.14167,8.14167 0 0 1 91.8583,100 8.14167,8.14167 0 0 1 100,91.8583 8.14167,8.14167 0 0 1 108.142,100 Z",
	  };
	  icn["TP.SHORE CONTROL STATION"] = {
	    type: "path",
	    fill: false,
	    d: "m 30,155 140,0 m -27,-20 2,-10 -10,5 m -78,5 -2,-10 10,5 m 35,-55 0,68 m 7.5,-76 A 7.5,7.5 0 0 1 100,74.5 7.5,7.5 0 0 1 92.5,67 7.5,7.5 0 0 1 100,59.5 7.5,7.5 0 0 1 107.5,67 Z m -52.5,8 90,0 m -90,50 c 15,25 75,25 90,0 M 40,45 50,55 60,45 70,55 80,45 l 10,10 10,-10 10,10 10,-10 10,10 10,-10 10,10 10,-10",
	  };
	  icn["TP.DITCHED AIRCRAFT"] = {
	    type: "path",
	    d: "m 145,120 -15,-15 m -15,15 15,-15 m -75,15 15,-15 m 15,15 -15,-15 m 10,10 25,-30 -10,-10 10,-10 20,20 -10,35 -15,-15 -15,15 z",
	  };
	  icn["TP.PERSON IN WATER"] = {
	    type: "path",
	    d: "m 105,110 10,-10 0,-15 5,0 0,20 -10,10 z m -10,0 -10,-10 0,-15 -5,0 0,20 10,10 z m 5,-5 0,-10 -5,0 -5,-5 0,-10 5,-5 10,0 5,5 0,10 -5,5 -5,0 m -15,25 15,-15 m 45,15 -15,-15 m -15,15 15,-15 m -75,15 15,-15 m 15,15 -15,-15 m 45,15 -15,-15",
	  };
	  icn["TP.CLUTTER, STATIONARY OR CEASE REPORTING"] = {
	    type: "path",
	    fill: false,
	    d: "m 65,135 c 23.3,-23 47,-46.7 70,-70 m -70,0 c 23.3,23.3 47,47 70,70 m -35,-4 c -19.7,0 -47.8,-8 -50,-31 3,-24.9 33.9,-32 55,-30.7 19,0.8 46,10.9 45,33.7 -5,21 -31,28 -50,28 z m 31,-31 c 0,20 -8,48 -31,50 C 75.1,147 68,116 69.3,95 70.1,76.2 80.2,48.6 103,50.2 c 21,4.9 28,31.1 28,49.8 z",
	  };
	  icn["TP.TENTATIVE OR PROVISIONAL TRACK"] = {
	    type: "path",
	    fill: false,
	    d: "M 130.902,100 A 30.9017,50 0 0 1 100,150 30.9017,50 0 0 1 69.0983,100 30.9017,50 0 0 1 100,50 30.9017,50 0 0 1 130.902,100 Z M 100,130.902 A 50,30.9017 0 0 1 50,100 50,30.9017 0 0 1 100,69.0983 50,30.9017 0 0 1 150,100 50,30.9017 0 0 1 100,130.902 Z",
	  };
	  icn["TP.DISTRESSED VESSEL"] = {
	    type: "path",
	    d: "m 120,65 -20,20 20,-20 m -5,55 -35,-35 0,-20 45,45 z m -30,0 -15,-15 m -15,15 15,-15 m 45,15 15,-15 m 15,15 -15,-15 m -45,15 15,-15",
	  };
	  icn["TP.SEA MINELIKE"] = {
	    type: "path",
	    d: "M 75,75 55,55 m 45,-15 0,25 m 25,10 20,-20 m -80,60 0,-30 20,-20 30,0 20,20 0,30 -20,20 -30,0 z",
	  };
	  icn["TP.ICEBERG"] = {
	    type: "path",
	    d: "m 75,100 25,-30 25,30 -5,15 -5,-5 -15,20 -15,-20 -5,5 z m -15,0 80,0",
	  };
	  icn["TP.OIL RIG/PLATFORM"] = [
	    {
	      type: "path",
	      d: "m 55,100 0,-50 m 75,50 0,40 m 20,-40 0,40 m -115,0 0,-40 130,0",
	      fill: false,
	    },
	    { type: "path", d: "m 55,100 0,-15 25,0 0,15 z" },
	  ];
	  icn["TP.BOTTOM RETURN"] = {
	    type: "path",
	    d: "m 50,100 15,-35 15,30 20,-55 20,55 15,-35 15,40 z",
	  };
	  icn["TP.INSTALLATION/MANMADE"] = {
	    type: "path",
	    fill: false,
	    d: "m 50,100 15,-35 15,30 20,-55 20,55 15,-35 15,40 z",
	  };
	  icn["TP.WRECK, NON DANGEROUS"] = {
	    type: "path",
	    fill: false,
	    d: "m 135,85 0,30 m -85,-15 100,0 m -85,-15 0,30 m 35,-40 0,50",
	  };
	  icn["TP.WRECK, DANGEROUS"] = [
	    icn["TP.WRECK, NON DANGEROUS"],
	    {
	      type: "path",
	      strokedasharray: "5,5",
	      fill: false,
	      d: "m 156.547,100 c 0,16.382 -25.162,29.662 -56.202,29.662 -31.0395,0 -56.2019,-13.28 -56.2017,-29.662 0,-16.3818 25.1624,-29.6618 56.2017,-29.6618 31.039,-1e-4 56.202,13.28 56.202,29.6618 z",
	    },
	  ];
	  icn["TP.MARINE LIFE"] = {
	    type: "path",
	    stroke: false,
	    d: "m 132,75 0,50 83,-37.5 0,25 L 132,75 m -32,25 25.5,-25 0,50 z",
	  };
	  icn["TP.SEA ANOMALY"] = {
	    type: "path",
	    fill: false,
	    d: "M 150,80 130,35 100,100 70,35 50,80 m 0,20 20,-45 30,65 30,-65 20,45",
	  };
	  icn["TP.FIX ACOUSTIC"] = {
	    type: "path",
	    fill: false,
	    d: "M 50,150 150,50 M 50,50 150,150 m -50,-100 0,100",
	  };
	  icn["TP.FIX ELECTRO-MAGNETIC"] = {
	    type: "path",
	    fill: false,
	    d: "m 50,90 15,20 5,-20 15,20 5,-20 20,20 5,-20 15,20 5,-20 15,20 M 50,150 150,50 M 50,50 150,150 m -50,-100 0,100",
	  };
	  icn["TP.ELECTRO MAGNETIC - MAGNETIC ANOMALY DETECTION (MAD)"] = [
	    icn["TP.FIX ELECTRO-MAGNETIC"],
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 170,
	      fontsize: 35,
	      text: "MAD",
	    },
	  ];
	  icn["TP.FIX ELECTRO-OPTICAL"] = {
	    type: "path",
	    fill: false,
	    d: "m 150,100 c 0,6.904 -22.386,12.5 -50,12.5 -27.6142,0 -50,-5.596 -50,-12.5 0,-6.9036 22.3858,-12.5 50,-12.5 27.614,0 50,5.5964 50,12.5 z M 50,150 150,50 M 50,50 150,150 m -50,-100 0,100",
	  };
	  //APP6-B stuff
	  icn["TP.FIRE"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    fill: colors.iconColor[affiliation],
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "FIRE",
	  };
	  icn["TP.INDIRECT FIRE"] = {
	    type: "path",
	    stroke: colors.iconColor[affiliation],
	    fill: false,
	    d: "m 100,60 0,80 m -40,-40 80,0",
	  };
	  icn["TP.AMBUSH"] = {
	    type: "path",
	    stroke: colors.iconColor[affiliation],
	    fill: false,
	    d: "m 77.5,106 20,0 m -20,-12 20,0 M 75,82 95,82 m -20,36 20,0 m -25,12 20,0 M 70,70 90,70 M 80,60 c 25,15 25,65 0,80 m 45,-50 10,10 -10,10 m -25,-10 35,0",
	  };
	  icn["TP.ROAD BLOCK"] = {
	    type: "path",
	    stroke: colors.iconColor[affiliation],
	    fill: false,
	    d: "m 73,133 60,-60 m -66,54 60,-60 m -54,0 60,60 m -66,-54 60,60",
	  };
	  icn["TP.ROAD BLOCK (UNDER CONSTRUCTION)"] = [
	    {
	      type: "path",
	      stroke: colors.iconColor[affiliation],
	      fill: false,
	      strokedasharray: "5,5",
	      d: "m 73,67 60,60 m -66,-54 60,60",
	    },
	    {
	      type: "path",
	      stroke: colors.iconColor[affiliation],
	      fill: false,
	      d: "M 73,133 133,73 M 67,127 127,67",
	    },
	  ];
	  icn["TP.VITAL AREA CENTRE"] = [
	    {
	      type: "path",
	      fill: false,
	      d: "m 45,100 110,0 m 0,-40 0,85 M 45,60 l 0,80 m 55,-80 0,80",
	    },
	  ];
	  icn["TP.ESTIMATED POSITION (EP)"] = [
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "12,5",
	      d: "M 160,160 40,160 40,40 160,40 Z",
	    },
	    {
	      type: "path",
	      fill: false,
	      d: "m 140,100 c 1,26 -27,47 -51.8,38 C 63.1,131 51.5,98.3 67,77.4 c 13.8,-21.9 49,-23.2 64,-2.3 6,7 9,15.9 9,24.9 z",
	    },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 103,
	      fontsize: 35,
	      text: "EP",
	    },
	  ];

	  icn["FORWARD OBSERVER / SPOTTER POSITION"] = [
	    { type: "circle", cx: 100, cy: 100, r: 3 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 40,135 60,-75 60,75 z",
	    },
	  ];

	  icn["MAN MADE SPACE DEBRIS SMALL"] = [
	    { type: "circle", cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "path",
	      fill: false,
	      d: "M 60,110 75,100 60,90 m 50,50 -10,-15 -10,15 m 50,-50 -15,10 15,10 M 90,60 100,75 110,60",
	    },
	  ];
	  icn["MAN MADE SPACE DEBRIS MEDIUM"] = [
	    { type: "circle", cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	  ];
	  icn["MAN MADE SPACE DEBRIS BIG"] = [
	    { type: "circle", cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 90,75 10,-15 10,15 M 75,110 60,100 75,90 m 35,35 -10,15 -10,-15 m 35,-35 15,10 -15,10",
	    },
	  ];

	  icn["NATURAL SPACE DEBRIS SMALL"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "path",
	      fill: false,
	      d: "M 60,110 75,100 60,90 m 50,50 -10,-15 -10,15 m 50,-50 -15,10 15,10 M 90,60 100,75 110,60",
	    },
	  ];
	  icn["NATURAL SPACE DEBRIS MEDIUM"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	  ];
	  icn["NATURAL SPACE DEBRIS BIG"] = [
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 17 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 50 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 90,75 10,-15 10,15 M 75,110 60,100 75,90 m 35,35 -10,15 -10,-15 m 35,-35 15,10 -15,10",
	    },
	  ];

	  icn["TP.M1.UNSPECIFIED"] = [
	    { type: "circle", fill: false, cx: 55, cy: 100, r: 15 },
	    { type: "circle", fill: false, cx: 100, cy: 100, r: 15 },
	    { type: "circle", fill: false, cx: 145, cy: 100, r: 15 },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE 1"] = [
	    { type: "circle", cx: 55, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 35,75 10.6,13.3 m 18.8,0 10.6,-13.3",
	    },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE 2"] = [
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 80,75 10.6,13.3 m 18.8,0 10.6,-13.3",
	    },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE 3"] = [
	    { type: "circle", cx: 145, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 125,75 10.6,13.3 m 18.8,0 10.6,-13.3",
	    },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"] = [
	    { type: "circle", cx: 55, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "M 64.4,88.3 75,75 m -40,0 10.6,13.3 m 32.4,10 2,1.7 -2,2 z m -8,1.7 3.3,0",
	    },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"] = [
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "M 109,88.3 120,75 m -40,0 10.6,13.3 m 32.4,10 2,1.7 -2,2 z m -8,1.7 3,0",
	    },
	  ];
	  icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"] = [
	    { type: "circle", cx: 145, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "M 154,88.3 165,75 m -40,0 11,13.3 m 32,10 2,1.7 -2,2 z m -8,1.7 3,0",
	    },
	  ];
	  icn["TP.M1.ANTITANK MINE 1"] = [{ type: "circle", cx: 55, cy: 100, r: 15 }];
	  icn["TP.M1.ANTITANK MINE 2"] = [{ type: "circle", cx: 100, cy: 100, r: 15 }];
	  icn["TP.M1.ANTITANK MINE 3"] = [{ type: "circle", cx: 145, cy: 100, r: 15 }];
	  icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 1"] = [
	    { type: "circle", cx: 55, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 55,115 0,13 6,-6",
	    },
	  ];
	  icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"] = [
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 100,115 0,13 6,-6",
	    },
	  ];
	  icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"] = [
	    { type: "circle", cx: 145, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 145,115 0,13 6,-6",
	    },
	  ];
	  icn["TP.M1.WIDE AREA ANTITANK MINE 1"] = [
	    { type: "circle", cx: 55, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 35,115 8,10 5.5,-11 m 13,0 5.5,11 8,-10",
	    },
	  ];
	  icn["TP.M1.WIDE AREA ANTITANK MINE 2"] = [
	    { type: "circle", cx: 100, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 80,115 8,10 5.5,-11 m 13,0 5.5,11 8,-10",
	    },
	  ];
	  icn["TP.M1.WIDE AREA ANTITANK MINE 3"] = [
	    { type: "circle", cx: 145, cy: 100, r: 15 },
	    {
	      type: "path",
	      fill: false,
	      d: "m 125,115 8,10 5.5,-11 m 13,0 5.5,11 8,-10",
	    },
	  ];
	  icn["TP.M1.MINE CLUSTER 1"] = [
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "7.5,5",
	      d: "m 73,110 -36,0 c 0,-10 3,-20 18,-20 15,0 18,10 18,20 z",
	    },
	  ];
	  icn["TP.M1.MINE CLUSTER 2"] = [
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "7.5,5",
	      d: "m 118,110 -36,0 c 0,-10 3,-20 18,-20 15,0 18,10 18,20 z",
	    },
	  ];
	  icn["TP.M1.MINE CLUSTER 3"] = [
	    {
	      type: "path",
	      fill: false,
	      strokedasharray: "7.5,5",
	      d: "m 163,110 -36,0 c 0,-10 3,-20 18,-20 15,0 18,10 18,20 z",
	    },
	  ];

	  icn["TP.M1.DISMOUNTED"] = [
	    {
	      type: "path",
	      fill: false,
	      strokewidth: 8,
	      d: "m 140,100 -20,35 -40,0 -20,-35 20,-34.6 40,0 z",
	    },
	  ];
	  icn["TP.M2.URBAN"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "URBAN",
	  };
	  icn["TP.M2.WATER"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "WATER",
	  };
	  icn["TP.M2.GROUND"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "GROUND",
	  };
	  icn["TP.M2.VEGETATION"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "VEGETATION",
	  };
	  icn["TP.M2.OBSTACLES"] = {
	    type: "text",
	    alignmentBaseline: "middle",
	    stroke: false,
	    textanchor: "middle",
	    x: 100,
	    y: 103,
	    fontsize: 35,
	    text: "OBSTACLES",
	  };
	  /*
	  function defaultProperties(instructions) {
	    if (typeof instructions === "object") {
	      if (Array.isArray(instructions)) {
	        for (let i = 0; i < instructions.length; i++) {
	          defaultProperties.call(this, instructions[i]);
	        }
	        return;
	      }
	      instructions.icon = true;
	      if (!instructions.hasOwnProperty("fill")) instructions.fill = iconColor;
	      if (!instructions.hasOwnProperty("stroke"))
	        instructions.stroke = iconColor;
	      return;
	    }
	  }
	//*/
	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var emergencymanagementsymbols = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$5, icons$1],
	  icons: function emergencymanagementsymbols(sId, bbox, icn, _STD2525) {
	    //Adds support for 2525C Emergency Management Symbols
	    sId["E-I-A-----"] = [icn["AC.IC.CRIMINAL.CIVIL DISTURBANCE"]];
	    sId["E-I-AC----"] = [icn["ST.IC.GROUP"], icn["AC.M1.RIOT"]];
	    sId["E-I-B-----"] = [icn["AC.IC.CRIMINAL.ACTIVITY.INCIDENT"]];
	    sId["E-I-BA----"] = [icn["ST.IC.BOMB"], icn["AC.M1.THREAT"]];
	    sId["E-I-BC----"] = [
	      icn["ST.IC.EXPLOSION"],
	      ms._scale(0.6, icn["ST.IC.BOMB"]),
	    ];
	    sId["E-I-BD----"] = [icn["ST.IC.GROUP"], icn["ST.M1.LOOT"]];
	    sId["E-I-BF----"] = [icn["AC.IC.SHOOTING"]];
	    sId["E-I-C-----"] = [icn["AC.IC.FIRE EVENT"]];
	    sId["E-I-CA----"] = [icn["AC.IC.HOT SPOT"]];
	    sId["E-I-CB----"] = [icn["AC.IC.NON-REsIdENTIAL FIRE"]];
	    sId["E-I-CC----"] = [icn["AC.IC.FIRE ORIGIN"]];
	    sId["E-I-CD----"] = [icn["AC.IC.REsIdENTIAL FIRE"]];
	    sId["E-I-CE----"] = [icn["AC.IC.SCHOOL FIRE"]];
	    sId["E-I-CF----"] = [icn["AC.IC.SMOKE"]];
	    sId["E-I-CG----"] = [icn["AC.IC.SPECIAL NEEDS FIRE"]];
	    sId["E-I-CH----"] = [icn["AC.IC.WILD FIRE"]];
	    sId["E-I-D-----"] = [icn["AC.IC.HAZARDOUS MATERIALS INCIDENT"]];
	    sId["E-I-DA----"] = [icn["AC.IC.CHEMICAL AGENT"]];
	    sId["E-I-DB----"] = [icn["AC.IC.CORROSIVE MATERIAL"]];
	    sId["E-I-DC----"] = [icn["AC.IC.HAZARDOUS WHEN WET"]];
	    sId["E-I-DD----"] = [icn["AC.IC.EXPLOSIVE MATERIAL"]];
	    sId["E-I-DE----"] = [icn["AC.IC.FLAMMABLE GAS"]];
	    sId["E-I-DF----"] = [icn["AC.IC.FLAMMABLE LIQUID"]];
	    sId["E-I-DG----"] = [icn["AC.IC.FLAMMABLE SOLID"]];
	    sId["E-I-DH----"] = [icn["AC.IC.NON-FLAMMABLE GAS"]];
	    sId["E-I-DI----"] = [icn["AC.IC.ORGANIC PEROXIDE"]];
	    sId["E-I-DJ----"] = [icn["AC.IC.OXIDIZER"]];
	    sId["E-I-DK----"] = [icn["AC.IC.RADIOACTIVE MATERIAL"]];
	    sId["E-I-DL----"] = [icn["AC.IC.SPONTANEOUSLY COMBUSTIBLE MATERIAL"]];
	    sId["E-I-DM----"] = [icn["AC.IC.TOXIC GAS"]];
	    sId["E-I-DN----"] = [icn["AC.IC.TOXIC INFECTIOUS MATERIAL"]];
	    sId["E-I-DO----"] = [icn["AC.IC.UNEXPLODED ORDNANCE"]];
	    sId["E-I-E-----"] = [
	      icn["ST.M1.INCIDENT"],
	      icn["ST.IC.HIJACKING (AIRPLANE)"],
	    ];
	    sId["E-I-EA----"] = [
	      icn["ST.M1.ACCIDENT"],
	      icn["ST.IC.HIJACKING (AIRPLANE)"],
	    ];
	    sId["E-I-F-----"] = [icn["ST.M1.INCIDENT"], icn["ST.IC.HIJACKING (BOAT)"]];
	    sId["E-I-FA----"] = [icn["ST.M1.ACCIDENT"], icn["ST.IC.HIJACKING (BOAT)"]];
	    sId["E-I-G-----"] = [icn["ST.M1.INCIDENT"], icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	    sId["E-I-GA----"] = [icn["ST.M1.ACCIDENT"], icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	    sId["E-I-GB----"] = [
	      icn["GR.EQ.TRAIN LOCOMOTIVE"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["E-I-H-----"] = [
	      icn["ST.M1.INCIDENT"],
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	    ];
	    sId["E-I-HA----"] = [
	      icn["ST.M1.ACCIDENT"],
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	    ];
	    sId["E-N-A-----"] = []; // N/A
	    sId["E-N-AA----"] = [icn["AC.IC.AFTERSHOCK"]];
	    sId["E-N-AB----"] = [icn["AC.IC.AVALANCHE"]];
	    sId["E-N-AC----"] = [icn["AC.IC.EARTHQUAKE EPICENTER"]];
	    sId["E-N-AD----"] = [icn["AC.IC.LANDSLIDE"]];
	    sId["E-N-AE----"] = [icn["AC.IC.SUBSIDENCE"]];
	    sId["W-S-WSVE--"] = [icn["AC.IC.VOLCANIC ERUPTION"]];
	    sId["E-N-AG----"] = [icn["AC.IC.VOLCANIC THREAT"]];
	    sId["W-S-WSD-LI"] = [icn["ATMOSPHERIC.IC.DRIZZLE.INTERMITTENT LIGHT"]];
	    sId["E-N-B-----"] = []; // N/A
	    sId["E-N-BB----"] = [icn["AC.IC.DROUGHT"]];
	    sId["E-N-BC----"] = [icn["AC.IC.FLOOD"]];
	    sId["W-S-WSFGSO"] = [icn["ATMOSPHERIC.IC.FOG.SKY OBSCURED"]];
	    sId["W-S-WSGRL-"] = [
	      icn["ATMOSPHERIC.IC.HAIL.LIGHT NOT ASSOCIATED WITH THUNDER"],
	    ];
	    sId["E-N-BF----"] = [icn["AC.IC.INVERSION"]];
	    sId["W-S-WSR-LI"] = [icn["ATMOSPHERIC.IC.RAIN.INTERMITTENT LIGHT"]];
	    sId["W-S-WSDSLM"] = [icn["ATMOSPHERIC.IC.DUST OR SAND.LIGHT TO MODERATE"]];
	    sId["W-S-WSS-LI"] = [icn["ATMOSPHERIC.IC.SNOW.INTERMITTENT LIGHT"]];
	    sId["W-S-WSTMH-"] = [
	      icn["ATMOSPHERIC.IC.STORMS.THUNDERSTORM LIGHT TO MODERATE - WITH HAIL"],
	    ];
	    sId["W-S-WST-FC"] = [
	      icn["ATMOSPHERIC.IC.STORMS.FUNNEL CLOUD (TORNADO/WATERSPOUT)"],
	    ];
	    sId["W-S-WSTSS-"] = [
	      icn["ATMOSPHERIC.IC.TROPICAL STORM SYSTEMS.TROPICAL STORM"],
	    ];
	    sId["E-N-BM----"] = [icn["AC.IC.TSUNAMI"]];
	    sId["E-N-C-----"] = []; // N/A
	    sId["E-N-CA----"] = [icn["AC.IC.BIRD"]];
	    sId["E-N-CB----"] = [icn["AC.IC.INSECT"]];
	    sId["E-N-CC----"] = [icn["AC.IC.MICROBIAL"]];
	    sId["E-N-CD----"] = [icn["AC.IC.REPTILE"]];
	    sId["E-N-CE----"] = [icn["AC.IC.RODENT"]];
	    sId["E-O-A-----"] =
	      sId["E-O-AA----"] =
	      sId["E-O-AB----"] =
	      sId["E-O-AC----"] =
	      sId["E-O-AD----"] =
	        [icn["GR.IC.EMERGENCY MEDICAL OPERATION"]];
	    sId["E-O-AE----"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	      icn["GR.M1.MEDEVAC"],
	    ];
	    sId["E-O-AF----"] = [
	      ms._translate(0, 10, ms._scale(0.8, icn["GR.I.FF.CIVILIAN ROTARY WING"])),
	      icn["GR.M1.MEDEVAC"],
	    ];
	    sId["E-O-AG----"] = [icn["AC.IC.HEALTH DEPARTMENT FACILITY"]];
	    sId["E-O-AJ----"] = [icn["AC.IC.MEDICAL FACILITIES OUTPATIENT"]];
	    sId["E-O-AK----"] = [icn["AC.IC.OPERATION/EMERGENCY MEDICAL OPERATION"]];
	    sId["E-O-AL----"] = [icn["AC.IC.PHARMACY"]];
	    sId["E-O-AM----"] = [icn["AC.IC.TRIAGE"]];
	    sId["E-O-B-----"] =
	      sId["E-O-BA----"] =
	      sId["E-O-BB----"] =
	      sId["E-O-BC----"] =
	        [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	    sId["E-O-BD----"] = [
	      ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	      icn["AC.M1.EMERGENCY COLLECTION EVACUATION POINT"],
	    ];
	    sId["E-O-BE----"] = [
	      ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	      icn["AC.M1.EMERGENCY INCIDENT COMMAND CENTER"],
	    ];
	    sId["E-O-BF----"] = [
	      ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	      icn["AC.M1.EMERGENCY OPERATIONS CENTER"],
	    ];
	    sId["E-O-BG----"] = [icn["AC.IC.EMERGENCY PUBLIC INFORMATION CENTER"]];
	    sId["E-O-BH----"] = [
	      ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	      icn["AC.M1.EMERGENCY SHELTER"],
	    ];
	    sId["E-O-BI----"] = [
	      ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	      icn["AC.M1.EMERGENCY STAGING AREA"],
	    ];
	    sId["E-O-BJ----"] = [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	    sId["E-O-BK----"] = sId["S-G-USSW--"];
	    sId["E-O-BL----"] = [
	      icn["ST.IC.FOOD DISTRIBUTION"],
	      icn["AC.M1.EMERGENCY"],
	    ];
	    sId["E-O-C-----"] =
	      sId["E-O-CA----"] =
	      sId["E-O-CB----"] =
	      sId["E-O-CE----"] =
	        [icn["GR.IC.FIRE PROTECTION"]];
	    sId["E-O-CC----"] = [icn["AC.IC.FIRE HYDRANT"]];
	    sId["E-O-CD----"] = [icn["AC.IC.OTHER WATER SUPPLY LOCATION"]];
	    sId["E-O-D-----"] =
	      sId["E-O-DA----"] =
	      sId["E-O-DB----"] =
	      sId["E-O-DC----"] =
	        [icn["GR.IC.FF.LAW ENFORCEMENT"]];
	    sId["E-O-DD----"] =
	      sId["E-O-DDA---"] =
	      sId["E-O-DDB---"] =
	      sId["E-O-DDC---"] =
	        [
	          icn[
	            "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	          ],
	        ];
	    sId["E-O-DE----"] =
	      sId["E-O-DEA---"] =
	      sId["E-O-DEB---"] =
	      sId["E-O-DEC---"] =
	        [icn["GR.IC.FF.BORDER PATROL"]];
	    sId["E-O-DF----"] =
	      sId["E-O-DFA---"] =
	      sId["E-O-DFB---"] =
	      sId["E-O-DFC---"] =
	        [icn["GR.IC.FF.CUSTOMS SERVICE"]];
	    sId["E-O-DG----"] =
	      sId["E-O-DGA---"] =
	      sId["E-O-DGB---"] =
	      sId["E-O-DGC---"] =
	        [icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"]];
	    sId["E-O-DH----"] =
	      sId["E-O-DHA---"] =
	      sId["E-O-DHB---"] =
	      sId["E-O-DHC---"] =
	        [icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"]];
	    sId["E-O-DI----"] =
	      sId["E-O-DIA---"] =
	      sId["E-O-DIB---"] =
	      sId["E-O-DIC---"] =
	        [icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"]];
	    sId["E-O-DJ----"] =
	      sId["E-O-DJB---"] =
	      sId["E-O-DJC---"] =
	        [icn["GR.IC.LAW ENFORCEMENT"]];
	    sId["E-O-DK----"] = [icn["GR.IC.FF.PRISON"]];
	    sId["E-O-DL----"] =
	      sId["E-O-DLA---"] =
	      sId["E-O-DLB---"] =
	      sId["E-O-DLC---"] =
	        [icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"]];
	    sId["E-O-DM----"] =
	      sId["E-O-DMA---"] =
	      sId["E-O-DMB---"] =
	      sId["E-O-DMC---"] =
	        [icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"]];
	    sId["E-O-DN----"] =
	      sId["E-O-DNA---"] =
	      sId["E-O-DNC---"] =
	        [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	    sId["E-O-DO----"] =
	      sId["E-O-DOA---"] =
	      sId["E-O-DOB---"] =
	      sId["E-O-DOC---"] =
	        [icn["GR.IC.FF.US MARSHALS SERVICE"]];
	    sId["E-O-EA----"] = [
	      ms._scale(0.6, icn["GR.EQ.SENSOR"]),
	      icn["GR.M1.BIOLOGICAL"],
	    ];
	    sId["E-O-EB----"] = [
	      ms._scale(0.6, icn["GR.EQ.SENSOR"]),
	      icn["GR.M1.CHEMICAL"],
	    ];
	    sId["E-O-EC----"] = [
	      ms._scale(0.6, icn["GR.EQ.SENSOR"]),
	      icn["GR.M1.INTRUSION"],
	    ];
	    sId["E-O-ED----"] = [
	      ms._scale(0.6, icn["GR.EQ.SENSOR"]),
	      icn["GR.M1.NUCLEAR"],
	    ];
	    sId["E-O-EE----"] = [
	      ms._scale(0.6, icn["GR.EQ.SENSOR"]),
	      icn["GR.M1.RADIOLOGICAL"],
	    ];
	    sId["E-F-A-----"] = [icn["GR.IN.IC.AGRICULTURE AND FOOD INFRASTRUCTURE"]];
	    sId["E-F-AA----"] = [icn["GR.IN.IC.AGRICULTURAL LABORATORY"]];
	    sId["E-F-AB----"] = [icn["GR.IN.IC.ANIMAL FEEDLOT"]];
	    sId["E-F-AC----"] = [
	      icn["ST.IC.FOOD DISTRIBUTION"],
	      icn["AC.M1.COMMERCIAL"],
	    ];
	    sId["E-F-AD----"] = [icn["GR.IN.IC.FARM/RANCH"]];
	    sId["E-F-AE----"] = [
	      icn["ST.IC.FOOD DISTRIBUTION"],
	      icn["AC.M1.PRODUCTION"],
	    ];
	    sId["E-F-AF----"] = [icn["ST.IC.FOOD DISTRIBUTION"], icn["AC.M1.RETAIL"]];
	    sId["E-F-AG----"] = [icn["GR.IN.IC.GRAIN STORAGE"]];
	    sId["E-F-B-----"] = [
	      icn["AC.IC.BANKING FINANCE AND INSURANCE INFRASTRUCTURE"],
	    ];
	    sId["E-F-BA----"] = [icn["GR.IN.IC.ATM"]];
	    sId["E-F-BB----"] = [icn["GR.IN.IC.BANK"]];
	    sId["E-F-BC----"] = [icn["GR.IN.IC.BULLION STORAGE"]];
	    sId["E-F-BD----"] = [icn["GR.IN.IC.FEDERAL RESERVE BANK"]];
	    sId["E-F-BE----"] = [icn["GR.IN.IC.FINANCIAL EXCHANGE"]];
	    sId["E-F-BF----"] = [icn["GR.IN.IC.FINANCIAL SERVICES, OTHER"]];
	    sId["E-F-C-----"] = [icn["GR.IN.IC.COMMERCIAL INFRASTRUCTURE"]];
	    sId["E-F-CA----"] = [icn["GR.IN.IC.CHEMICAL PLANT"]];
	    sId["E-F-CB----"] = [icn["GR.IN.IC.FIREARMS MANUFACTURER"]];
	    sId["E-F-CC----"] = [icn["GR.IN.IC.FIREARMS RETAILER"]];
	    sId["E-F-CD----"] = [icn["GR.IN.IC.HAZARDOUS MATERIAL PRODUCTION"]];
	    sId["E-F-CE----"] = [icn["GR.IN.IC.HAZARDOUS MATERIAL STORAGE"]];
	    sId["E-F-CF----"] = [icn["GR.IN.IC.INDUSTRIAL SITE"]];
	    sId["E-F-CG----"] = [icn["GR.IN.IC.LANDFILL"]];
	    sId["E-F-CH----"] = [icn["GR.IN.IC.PHARMACEUTICAL MANUFACTURER"]];
	    sId["E-F-CI----"] = [icn["GR.IN.IC.CONTAMINATED HAZARDOUS WASTE SITE"]];
	    sId["E-F-CJ----"] = [icn["GR.IN.IC.TOXIC RELEASE INVENTORY"]];
	    sId["E-F-D-----"] = [icn["GR.IN.IC.EDUCATIONAL FACILITIES INFRASTRUCTURE"]];
	    sId["E-F-DA----"] = [icn["GR.IN.IC.COLLEGE/UNIVERSITY"]];
	    sId["E-F-DB----"] = [icn["GR.IN.IC.SCHOOL"]];
	    sId["E-F-EA----"] = [
	      ms._translate(
	        0,
	        15,
	        ms._scale(0.75, icn["GR.IN.IC.ELECTRIC POWER"], true)
	      ),
	      icn["AC.M1.GENERATION STATION"],
	    ];
	    sId["E-F-EB----"] = [icn["GR.IN.IC.NATURAL GAS FACILITY"]];
	    sId["E-F-EE----"] = [icn["GR.IN.IC.PROPANE FACILITY"]];
	    sId["E-F-F-----"] = [icn["GR.IN.IC.GOVERNMENT SITE INFRASTRUCTURE"]];
	    sId["E-F-G-----"] = [icn["GR.IN.IC.MILITARY INFRASTRUCTURE"]];
	    sId["E-F-GA----"] = [icn["GR.IN.IC.BASE"], icn["AC.M1.MILITARY ARMORY"]];
	    sId["E-F-H-----"] = [icn["GR.IN.IC.POSTAL SERVICE INFRASTRUCTURE"]];
	    sId["E-F-HA----"] = [icn["GR.IN.IC.POSTAL DISTRIBUTION CENTER"]];
	    sId["E-F-HB----"] = [icn["GR.IN.IC.POST OFFICE"]];
	    sId["E-F-I-----"] = [icn["GR.IN.IC.PUBLIC VENUES INFRASTRUCTURE"]];
	    sId["E-F-IA----"] = [icn["GR.IN.IC.ENCLOSED FACITLITY (PUBLIC VENUE)"]];
	    sId["E-F-IB----"] = [icn["GR.IN.IC.OPEN FACILITY (OPEN VENUE)"]];
	    sId["E-F-IC----"] = [icn["GR.IN.IC.RECREATIONAL AREA"]];
	    sId["E-F-ID----"] = [icn["GR.IN.IC.RELIGIOUS INSTITUTION"]];
	    sId["E-F-J-----"] = [icn["GR.IN.IC.SPECIAL NEEDS INFRASTRUCTURE"]];
	    sId["E-F-JA----"] = [icn["GR.IN.IC.ADULT DAY CARE"]];
	    sId["E-F-JB----"] = [icn["GR.IN.IC.CHILD DAY CARE"]];
	    sId["E-F-JC----"] = [icn["GR.IN.IC.ELDER CARE"]];
	    sId["E-F-K-----"] = [icn["GR.IN.IC.TELECOMMUNICATIONS INFRASTRUCTURE"]];
	    sId["E-F-KB----"] = [icn["GR.IN.IC.TELECOMMUNICATIONS TOWER"]];
	    sId["E-F-LA----"] = [icn["GR.IN.IC.AIR TRAFFIC CONTROL FACILITY"]];
	    sId["G-M-BCB---"] = [icn["GR.IN.IC.BRIDGE"]];
	    bbox["G-M-BCB---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sId["E-F-LD----"] = [
	      icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	    ];
	    sId["E-F-LE----"] = [icn["GR.IC.FERRY"]];
	    sId["E-F-LF----"] = [icn["GR.IN.IC.HELICOPTER LANDING SITE"]];
	    sId["W-S-ML----"] = [icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE LOCK"]];
	    sId["E-F-LH----"] = [icn["GR.IC.MAINTENANCE"]];
	    sId["E-F-LJ----"] = [icn["GR.IC.RAILHEAD"]];
	    sId["E-F-LK----"] = [icn["GR.IN.IC.REST STOP"]];
	    sId["W-S-HPBA--"] = [
	      icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE SHIP ANCHORAGE"],
	    ];
	    sId["E-F-LM----"] = [icn["GR.IN.IC.TOLL FACILITY"]];
	    /*sId["G-S-PO----"] = [
	      icn["GR.IN.IC.TRANSPORTATION INFRASTRUCTURE.TRAFFIC CONTROL POINT"]
	    ];*/
	    sId["G-S-PO----"] = icn["TP.TRAFFIC CONTROL POST"]; //TACGRP.CSS.PNT.TCP
	    bbox["G-S-PO----"] = { x1: 60, x2: 140, y1: -60 };
	    sId["E-F-LO----"] = [icn["GR.IN.IC.TRAFFIC INSPECTION FACILITY"]];
	    sId["E-F-LP----"] = [icn["GR.IN.IC.TUNNEL"]];
	    sId["E-F-MA----"] = [icn["GR.IN.IC.CONTROL VALVE"]];
	    sId["E-F-MB----"] = [icn["GR.IN.IC.DAM"]];
	    sId["E-F-MC----"] = [icn["GR.IN.IC.DISCHARGE OUTFALL"]];
	    sId["E-F-MD----"] = [icn["GR.IN.IC.GROUND WATER WELL"]];
	    sId["E-F-ME----"] = [icn["GR.IN.IC.PUMPING STATION"]];
	    sId["E-F-MF----"] = [icn["GR.IN.IC.RESERVOIR"]];
	    sId["E-F-MG----"] = [icn["GR.IN.IC.STORAGE TOWER"]];
	    sId["E-F-MH----"] = [icn["GR.IN.IC.SURFACE WATER INTAKE"]];
	    sId["E-F-MI----"] = [icn["GR.IN.IC.WASTEWATER TREATMENT FACILITY"]];

	    // In other apendixes as well...
	    sId["O-O-D-----"] = [icn["ST.IC.DEMONSTRATION"]];
	    sId["O-I-R-----"] = [icn["ST.IC.GROUP"]];
	    sId["O-V-B-----"] = [icn["ST.IC.BOMB"]];
	    sId["O-V-P-----"] = [icn["ST.IC.POISONING"]];
	    sId["O-O-HA----"] = [
	      icn["ST.IC.HIJACKING (AIRPLANE)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["O-O-HV----"] = [
	      icn["ST.IC.HIJACKING (BOAT)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];
	    sId["O-O-HT----"] = [
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ];

	    sId["S-G-IXH---"] = [icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"]];
	    sId["S-S-NM----"] = [icn["GR.IC.HOSPITAL SHIP"]];
	    sId["E-O-BK----"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.WATER"]];
	    sId["S-G-UULC--"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	    sId["S-S-XL----"] = [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	    sId["S-G-ES----"] = [icn["GR.EQ.SENSOR"]];
	    sId["S-G-IUE---"] = [icn["GR.IN.IC.ELECTRIC POWER"]];
	    sId["S-G-IUEN--"] = [
	      icn["GR.IN.IC.ELECTRIC POWER"],
	      icn["GR.IN.IC.ELECTRIC POWER NUCLEAR"],
	    ];
	    sId["S-G-IRP---"] = [icn["GR.IC.FF.CLASS III"]];
	    sId["S-G-IB----"] = [icn["GR.IN.IC.BASE"]];
	    sId["S-G-IUT---"] = [icn["GR.IN.IC.TELECOMMUNICATIONS"]];
	    sId["S-G-IT----"] = [icn["GR.IC.TRANSPORTATION"]];
	    sId["S-G-IBA---"] = [
	      icn["GR.IC.TRANSPORTATION"],
	      icn["GR.IC.AIRPORT OF DEBARKATION"],
	    ];
	    sId["S-G-IBN---"] = [icn["GR.IC.NAVAL"]];
	    sId["S-G-IUP---"] = [icn["GR.IC.WATER"]];
	  },
	};

	function std2525bicons (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  //  2525B extra icon parts
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  const affiliation = metadata.affiliation || "Friend";
	  //If hostile and not monoColor, make it red, otherwise use the iconColor.
	  const iconColor = colors.iconColor[affiliation];

	  //var numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["2525B.ASWSUB"] = {
	    type: "path",
	    d: "m 80,85 40,0 0,-20 -40,0 z m 20,-30 0,40 m -40,15 15,15 50,0 15,-15 -15,-15 -50,0 z",
	  }; //WAR.SBSUF.SUB.STN.ASWSUB
	  icn["2525B.NCBTT.STN"] = [
	    { type: "path", fill: false, d: "m 70,85 60,0 0,30 -60,0 z m 30,-15 0,60" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 135,
	      fontsize: 30,
	      text: "NC",
	    },
	  ]; //WAR.SSUF.NCBTT.STN
	  icn["2525B.STN.ASWSHP"] = [
	    { type: "path", fill: false, d: "m 70,85 60,0 0,30 -60,0 z m 30,-15 0,60" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 135,
	      fontsize: 30,
	      text: "AS",
	    },
	  ]; //WAR.SSUF.CBTT.STN.ASWSHP
	  icn["2525B.STN.PKT"] = [
	    { type: "path", fill: false, d: "m 70,85 60,0 0,30 -60,0 z m 30,-15 0,60" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 135,
	      fontsize: 30,
	      text: "PK",
	    },
	  ]; //WAR.SSUF.CBTT.STN.PKT
	  icn["2525B.STN.RSC"] = [
	    { type: "path", fill: false, d: "m 70,85 60,0 0,30 -60,0 z m 30,-15 0,60" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 135,
	      fontsize: 30,
	      text: "RS",
	    },
	  ]; //WAR.SSUF.NCBTT.STN.RSC
	  icn["2525B.STN"] = {
	    type: "path",
	    fill: false,
	    d: "m 70,85 c 20,0 40,0 60,0 0,10 0,20 0,30 -20,0 -40,0 -60,0 0,-10 0,-20 0,-30 z m 30,-15 c 0,20 0,40 0,60 m 35,-5 C 120,148 82.7,149 66.8,126 49.2,105 59.1,69.2 85.2,60.1 103,53.1 124,59.4 135,74.8",
	  }; //WAR.SSUF.CBTT.STN
	  icn["2525B.SUB.STN"] = [
	    { type: "path", d: "m 70,85 60,0 0,30 -60,0 z m 30,-15 0,60" },
	    {
	      type: "text",
	      alignmentBaseline: "middle",
	      stroke: false,
	      x: 100,
	      y: 135,
	      fontsize: 30,
	      text: "SS",
	    },
	  ]; //WAR.SBSUF.SUB.STN

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var std2525bextra = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [std2525bicons],
	  icons: function std2525b(sId, bbox, icn, _STD2525) {
	    // These symbols are in 2525B but not in 2525C and because of this they need to be added
	    // The icons are in iconparts/2525b.js

	    sId["S-S-S-----"] = icn["2525B.STN"]; //WAR.SSUF.CBTT.STN
	    sId["S-S-SP----"] = icn["2525B.STN.PKT"]; //WAR.SSUF.CBTT.STN.PKT
	    sId["S-S-SA----"] = icn["2525B.STN.ASWSHP"]; //WAR.SSUF.CBTT.STN.ASWSHP
	    sId["S-S-NN----"] = icn["2525B.NCBTT.STN"]; //WAR.SSUF.NCBTT.STN
	    sId["S-S-NNR---"] = icn["2525B.STN.RSC"]; //WAR.SSUF.NCBTT.STN.RSC

	    sId["S-U-SS----"] = icn["2525B.SUB.STN"]; //WAR.SBSUF.SUB.STN
	    sId["S-U-SSA---"] = icn["2525B.ASWSUB"]; //WAR.SBSUF.SUB.STN.ASWSUB

	    // Tactical points
	    sId["G-O-SBWD--"] = icn["TP.WRECK, DANGEROUS"]; //TACGRP.OTH.SSUBSR.BTMRTN.WRKD
	    bbox["G-O-SBXD--"] = { x1: 35, x2: 165, y1: 70, y2: 130 };
	  },
	};

	// Label overrides for tactical points
	function tacticalPoints$2(sidc) {
	  // Tactical Point Symbols =========================================================================
	  sidc["G-T-D-----"] = {}; //TACGRP.TSK.DSTY
	  sidc["G-T-I-----"] = {}; //TACGRP.TSK.ITDT
	  sidc["G-T-N-----"] = {}; //TACGRP.TSK.NEUT
	  sidc["G-G-GPUUD-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.UH2.DTM
	  sidc["G-G-GPUUB-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.UH2.BCON
	  sidc["G-G-GPUUL-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.UH2.LCON
	  sidc["G-G-GPUUS-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.UH2.SNK
	  sidc["G-G-GPUY--"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY
	  sidc["G-G-GPUYP-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.PTNCTR
	  sidc["G-G-GPUYD-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.DIFAR
	  sidc["G-G-GPUYL-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.LOFAR
	  sidc["G-G-GPUYC-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.CASS
	  sidc["G-G-GPUYS-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.DICASS
	  sidc["G-G-GPUYB-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.BT
	  sidc["G-G-GPUYA-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.ANM
	  sidc["G-G-GPUYV-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.VLAD
	  sidc["G-G-GPUYT-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.ATAC
	  sidc["G-G-GPUYR-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.RO
	  sidc["G-G-GPUYK-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.KGP
	  sidc["G-G-GPUYX-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SNBY.EXP
	  sidc["G-G-GPUS--"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SRH
	  sidc["G-G-GPUSA-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SRH.ARA
	  sidc["G-G-GPUSD-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SRH.DIPPSN
	  sidc["G-G-GPUSC-"] = {}; //TACGRP.C2GM.GNL.PNT.USW.SRH.CTR
	  sidc["G-G-GPR---"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT
	  sidc["G-G-GPRN--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.NAVREF
	  sidc["G-G-GPRS--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.SPLPNT
	  sidc["G-G-GPRD--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.DLRP
	  sidc["G-G-GPRP--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.PIM
	  sidc["G-G-GPRM--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.MRSH
	  sidc["G-G-GPRW--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.WAP
	  sidc["G-G-GPRC--"] = {}; //TACGRP.C2GM.GNL.PNT.REFPNT.CRDRTB
	  sidc["G-G-GPRI--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 30,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.REFPNT.PNTINR
	  sidc["G-G-GPWA--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.AIMPNT
	  sidc["G-G-GPWD--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.DRPPNT
	  sidc["G-G-GPWE--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.ENTPNT
	  sidc["G-G-GPWG--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.GRDZRO
	  sidc["G-G-GPWM--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.MSLPNT
	  sidc["G-G-GPWI--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.IMTPNT
	  sidc["G-G-GPWP--"] = {}; //TACGRP.C2GM.GNL.PNT.WPN.PIPNT
	  sidc["G-G-GPF---"] = {}; //TACGRP.C2GM.GNL.PNT.FRMN
	  sidc["G-G-GPH---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 115,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.HBR
	  sidc["G-G-GPHQ--"] = {}; //TACGRP.C2GM.GNL.PNT.HBR.PNTQ
	  sidc["G-G-GPHA--"] = {}; //TACGRP.C2GM.GNL.PNT.HBR.PNTA
	  sidc["G-G-GPHY--"] = {}; //TACGRP.C2GM.GNL.PNT.HBR.PNTY
	  sidc["G-G-GPHX--"] = {}; //TACGRP.C2GM.GNL.PNT.HBR.PNTX
	  sidc["G-G-GPO---"] = {}; //TACGRP.C2GM.GNL.PNT.RTE
	  sidc["G-G-GPOZ--"] = {}; //TACGRP.C2GM.GNL.PNT.RTE.RDV
	  sidc["G-G-GPOD--"] = {}; //TACGRP.C2GM.GNL.PNT.RTE.DVSN
	  sidc["G-G-GPOW--"] = {}; //TACGRP.C2GM.GNL.PNT.RTE.WAP
	  sidc["G-G-GPOP--"] = {}; //TACGRP.C2GM.GNL.PNT.RTE.PIM
	  sidc["G-G-GPOR--"] = {}; //TACGRP.C2GM.GNL.PNT.RTE.PNTR
	  sidc["G-G-GPA---"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL
	  sidc["G-G-GPAP--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.CAP
	  sidc["G-G-GPAW--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ABNEW
	  sidc["G-G-GPAK--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.TAK
	  sidc["G-G-GPAA--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ASBWF
	  sidc["G-G-GPAH--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ASBWR
	  sidc["G-G-GPAB--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.SUWF
	  sidc["G-G-GPAC--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.SUWR
	  sidc["G-G-GPAD--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.MIWF
	  sidc["G-G-GPAE--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.MIWR
	  sidc["G-G-GPAS--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.SKEIP
	  sidc["G-G-GPAT--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.TCN
	  sidc["G-G-GPAO--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.TMC
	  sidc["G-G-GPAR--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.RSC
	  sidc["G-G-GPAL--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.RPH
	  sidc["G-G-GPAF--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.UA
	  sidc["G-G-GPAG--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.VTUA
	  sidc["G-G-GPAI--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ORB
	  sidc["G-G-GPAJ--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ORBF8
	  sidc["G-G-GPAM--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ORBRT
	  sidc["G-G-GPAN--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTL.ORBRD
	  sidc["G-G-GPP---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    additionalInformation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT
	  sidc["G-G-GPPK--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPC--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 40,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT
	  sidc["G-G-GPPO--"] = {}; //TACGRP.C2GM.GNL.PNT.ACTPNT.CRDPNT
	  sidc["G-G-GPPD--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 115,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.DCNPNT
	  sidc["G-G-GPPL--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPP--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPR--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPE--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPS--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPA--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-G-GPPW--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 117,
	      fontsize: 50,
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  //TACGRP.C2GM.GNL.PNT.ACTPNT.WAP
	  sidc["G-G-GPC---"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL
	  sidc["G-G-GPCU--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.USV
	  sidc["G-G-GPCUR-"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.USV.RMV
	  sidc["G-G-GPCUA-"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.USV.ASW
	  sidc["G-G-GPCUS-"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.USV.SUW
	  sidc["G-G-GPCUM-"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.USV.MIW
	  sidc["G-G-GPCA--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.ASW
	  sidc["G-G-GPCS--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.SUW
	  sidc["G-G-GPCM--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.MIW
	  sidc["G-G-GPCP--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.PKT
	  sidc["G-G-GPCR--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.RDV
	  sidc["G-G-GPCC--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.RSC
	  sidc["G-G-GPCE--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.REP
	  sidc["G-G-GPCN--"] = {}; //TACGRP.C2GM.GNL.PNT.SCTL.NCBTT
	  sidc["G-G-GPB---"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL
	  sidc["G-G-GPBU--"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.UUV
	  sidc["G-G-GPBUA-"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.ASW
	  sidc["G-G-GPBUS-"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.SUW
	  sidc["G-G-GPBUM-"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.MIW
	  sidc["G-G-GPBS--"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.SBSTN
	  sidc["G-G-GPBSA-"] = {}; //TACGRP.C2GM.GNL.PNT.UCTL.SBSTN.ASW
	  //TACGRP.C2GM.AVN.PNT.ACP
	  sidc["G-G-APP---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  //TACGRP.C2GM.AVN.PNT.COMMCP
	  sidc["G-G-APC---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  sidc["G-G-APU---"] = {}; //TACGRP.C2GM.AVN.PNT.PUP
	  sidc["G-G-APD---"] = {}; //TACGRP.C2GM.AVN.PNT.DAPP
	  sidc["G-G-PN----"] = {}; //TACGRP.C2GM.DCPN.DMYMS
	  //TACGRP.C2GM.DEF.PNT.TGTREF
	  sidc["G-G-DPT---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 115,
	      y: 85,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  sidc["G-G-DPO---"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST
	  sidc["G-G-DPOC--"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST.CBTPST
	  sidc["G-G-DPOR--"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST.RECON
	  sidc["G-G-DPOF--"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST.FWDOP
	  sidc["G-G-DPOS--"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST.SOP
	  sidc["G-G-DPON--"] = {}; //TACGRP.C2GM.DEF.PNT.OBSPST.CBRNOP
	  sidc["G-G-OPP---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  sidc["G-M-OAOF--"] = {}; //TACGRP.MOBSU.OBST.ATO.TDTSM.FIXPFD
	  sidc["G-M-OAOM--"] = {}; //TACGRP.MOBSU.OBST.ATO.TDTSM.MVB
	  sidc["G-M-OAOP--"] = {}; //TACGRP.MOBSU.OBST.ATO.TDTSM.MVBPFD
	  sidc["G-M-OB----"] = {}; //TACGRP.MOBSU.OBST.BBY
	  sidc["G-M-OMU---"] = {}; //TACGRP.MOBSU.OBST.MNE.USPMNE
	  sidc["G-M-OMT---"] = {}; //TACGRP.MOBSU.OBST.MNE.ATMNE
	  sidc["G-M-OMD---"] = {}; //TACGRP.MOBSU.OBST.MNE.ATMAHD
	  sidc["G-M-OME---"] = {}; //TACGRP.MOBSU.OBST.MNE.ATMDIR
	  sidc["G-M-OMP---"] = {}; //TACGRP.MOBSU.OBST.MNE.APMNE
	  sidc["G-M-OMW---"] = {}; //TACGRP.MOBSU.OBST.MNE.WAMNE
	  //TACGRP.MOBSU.OBST.MNEFLD.STC
	  sidc["G-M-OFS---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 55,
	      fontsize: 40,
	    },
	    hostile: [
	      {
	        stroke: false,
	        textanchor: "end",
	        x: 35,
	        y: 110,
	        fontsize: 30,
	        fontweight: "bold",
	      },
	      {
	        stroke: false,
	        textanchor: "start",
	        x: 165,
	        y: 110,
	        fontsize: 30,
	        fontweight: "bold",
	      },
	    ],
	    dtg: { stroke: false, textanchor: "middle", x: 100, y: 175, fontsize: 40 },
	  };
	  //TACGRP.MOBSU.OBST.AVN.TWR.LOW
	  sidc["G-M-OHTL--"] = {
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 60,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT
	  //TACGRP.MOBSU.OBST.AVN.TWR.HIGH
	  sidc["G-M-OHTH--"] = {
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "start",
	      x: 115,
	      y: 60,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  //TACGRP.MOBSU.OBSTBP.CSGSTE.ERP
	  sidc["G-M-BCP---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  sidc["G-M-SE----"] = {}; //TACGRP.MOBSU.SU.ESTOF
	  sidc["G-M-SF----"] = {}; //TACGRP.MOBSU.SU.FRT
	  sidc["G-M-SS----"] = {}; //TACGRP.MOBSU.SU.SUFSHL
	  sidc["G-M-SU----"] = {}; //TACGRP.MOBSU.SU.UGDSHL
	  //TACGRP.MOBSU.CBRN.NDGZ
	  sidc["G-M-NZ----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    type: { stroke: false, textanchor: "end", x: 50, y: 60, fontsize: 35 },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  };
	  sidc["G-M-NF----"] = {}; //TACGRP.MOBSU.CBRN.FAOTP
	  //TACGRP.MOBSU.CBRN.REEVNT.BIO
	  sidc["G-M-NEB---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  };
	  //TACGRP.MOBSU.CBRN.REEVNT.CML
	  sidc["G-M-NEC---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  };
	  //TACGRP.MOBSU.CBRN.DECONP.USP
	  sidc["G-M-NDP---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.MOBSU.CBRN.DECONP.ALTUSP
	  sidc["G-M-NDA---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.MOBSU.CBRN.DECONP.TRP
	  sidc["G-M-NDT---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.MOBSU.CBRN.DECONP.EQT
	  sidc["G-M-NDE---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.MOBSU.CBRN.DECONP.EQTTRP
	  sidc["G-M-NDB---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.MOBSU.CBRN.DECONP.OPDECN
	  sidc["G-M-NDO---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.MOBSU.CBRN.DECONP.TRGH
	  sidc["G-M-NDD---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.FSUPP.PNT.TGT.PTGT
	  sidc["G-F-PTS---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 145,
	      fontsize: 40,
	    },
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "end",
	      x: 80,
	      y: 145,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	    },
	  };

	  //TACGRP.FSUPP.PNT.TGT.NUCTGT
	  sidc["G-F-PTN---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  //TACGRP.FSUPP.PNT.C2PNT.FSS
	  sidc["G-F-PCF---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 125,
	      y: 115,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT

	  //TACGRP.FSUPP.PNT.C2PNT.SCP
	  sidc["G-F-PCS---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.FSUPP.PNT.C2PNT.FP
	  sidc["G-F-PCB---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.FSUPP.PNT.C2PNT.RP
	  sidc["G-F-PCR---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.FSUPP.PNT.C2PNT.HP
	  sidc["G-F-PCH---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.FSUPP.PNT.C2PNT.LP
	  sidc["G-F-PCL---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.CSS.PNT.AEP
	  sidc["G-S-PX----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //TACGRP.C2GM.GNL.PNT.ACTPNT
	  //TACGRP.CSS.PNT.CBNP
	  sidc["G-S-PC----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.CCP
	  sidc["G-S-PY----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.CVP
	  sidc["G-S-PT----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.DCP
	  sidc["G-S-PD----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.EPWCP
	  sidc["G-S-PE----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.LRP
	  sidc["G-S-PL----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.MCP
	  sidc["G-S-PM----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.RRRP
	  sidc["G-S-PR----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.ROM
	  sidc["G-S-PU----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.TCP
	  sidc["G-S-PO----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.TTP
	  sidc["G-S-PI----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.UMC
	  sidc["G-S-PN----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  sidc["G-S-PS----"] = {}; //TACGRP.CSS.PNT.SPT
	  //TACGRP.CSS.PNT.SPT.GNL
	  sidc["G-S-PSZ---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS1
	  sidc["G-S-PSA---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS2
	  sidc["G-S-PSB---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS3
	  sidc["G-S-PSC---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS4
	  sidc["G-S-PSD---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS5
	  sidc["G-S-PSE---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS6
	  sidc["G-S-PSF---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS7
	  sidc["G-S-PSG---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };

	  //TACGRP.CSS.PNT.SPT.CLS8
	  sidc["G-S-PSH---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.CSS.PNT.SPT.CLS9
	  sidc["G-S-PSI---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.CSS.PNT.SPT.CLS10
	  sidc["G-S-PSJ---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-S-PA----"] = {}; //TACGRP.CSS.PNT.AP
	  //TACGRP.CSS.PNT.AP.ASP
	  sidc["G-S-PAS---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  //TACGRP.CSS.PNT.AP.ATP
	  sidc["G-S-PAT---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["G-O-ED----"] = {}; //TACGRP.OTH.ER.DTHAC
	  sidc["G-O-EP----"] = {}; //TACGRP.OTH.ER.PIW
	  sidc["G-O-EV----"] = {}; //TACGRP.OTH.ER.DSTVES
	  sidc["G-O-HM----"] = {}; //TACGRP.OTH.HAZ.SML
	  sidc["G-O-HI----"] = {}; //TACGRP.OTH.HAZ.IB
	  sidc["G-O-HO----"] = {}; //TACGRP.OTH.HAZ.OLRG
	  sidc["G-O-SB----"] = {}; //TACGRP.OTH.SSUBSR.BTMRTN
	  sidc["G-O-SBM---"] = {}; //TACGRP.OTH.SSUBSR.BTMRTN.INS
	  sidc["G-O-SBN---"] = {}; //TACGRP.OTH.SSUBSR.BTMRTN.SBRSOO
	  sidc["G-O-SBW---"] = {}; //TACGRP.OTH.SSUBSR.BTMRTN.WRKND
	  sidc["G-O-SBX---"] = {}; //TACGRP.OTH.SSUBSR.BTMRTN.WRKD
	  sidc["G-O-SM----"] = {}; //TACGRP.OTH.SSUBSR.MARLFE
	  sidc["G-O-SS----"] = {}; //TACGRP.OTH.SSUBSR.SA
	  sidc["G-O-FA----"] = {}; //TACGRP.OTH.FIX.ACU
	  sidc["G-O-FE----"] = {}; //TACGRP.OTH.FIX.EM
	  sidc["G-O-FO----"] = {}; //TACGRP.OTH.FIX.EOP
	}

	var tacticalpoints2525 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$1],
	  labels: tacticalPoints$2,
	  icons: function tacticalPoints(sidc, bbox, icn, std2525) {
	    // Tactical Point Symbols =========================================================================
	    sidc["G-T-D-----"] = icn["TP.DESTROY"]; //TACGRP.TSK.DSTY
	    bbox["G-T-D-----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-T-I-----"] = icn["TP.INTERDICT"]; //TACGRP.TSK.ITDT
	    bbox["G-T-I-----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-T-N-----"] = icn["TP.NEUTRALIZE"]; //TACGRP.TSK.NEUT
	    bbox["G-T-N-----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-G-GPUUD-"] = icn["TP.DATUM"]; //TACGRP.C2GM.GNL.PNT.USW.UH2.DTM
	    bbox["G-G-GPUUD-"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPUUB-"] = icn["TP.BRIEF CONTACT"]; //TACGRP.C2GM.GNL.PNT.USW.UH2.BCON
	    bbox["G-G-GPUUB-"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-G-GPUUL-"] = icn["TP.LOST CONTACT"]; //TACGRP.C2GM.GNL.PNT.USW.UH2.LCON
	    bbox["G-G-GPUUL-"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-G-GPUUS-"] = icn["TP.SINKER"]; //TACGRP.C2GM.GNL.PNT.USW.UH2.SNK
	    bbox["G-G-GPUUS-"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-G-GPUY--"] = icn["TP.SONOBUOY"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY
	    bbox["G-G-GPUY--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYP-"] = icn["TP.SONOBUOY PATTERN CENTER"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.PTNCTR
	    bbox["G-G-GPUYP-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYD-"] = icn["TP.SONOBUOY DIFAR"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.DIFAR
	    bbox["G-G-GPUYD-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYL-"] = icn["TP.SONOBUOY LOFAR"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.LOFAR
	    bbox["G-G-GPUYL-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYC-"] = icn["TP.SONOBUOY CASS"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.CASS
	    bbox["G-G-GPUYC-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYS-"] = icn["TP.SONOBUOY DICASS"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.DICASS
	    bbox["G-G-GPUYS-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYB-"] = icn["TP.SONOBUOY BT"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.BT
	    bbox["G-G-GPUYB-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYA-"] = icn["TP.SONOBUOY ANM"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.ANM
	    bbox["G-G-GPUYA-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYV-"] = icn["TP.SONOBUOY VLAD"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.VLAD
	    bbox["G-G-GPUYV-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYT-"] = icn["TP.SONOBUOY ATAC"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.ATAC
	    bbox["G-G-GPUYT-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYR-"] = icn["TP.SONOBUOY RO"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.RO
	    bbox["G-G-GPUYR-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYK-"] = icn["TP.SONOBUOY KINGPIN"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.KGP
	    bbox["G-G-GPUYK-"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-G-GPUYX-"] = icn["TP.SONOBUOY EXPIRED"]; //TACGRP.C2GM.GNL.PNT.USW.SNBY.EXP
	    bbox["G-G-GPUYX-"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	    sidc["G-G-GPUS--"] = icn["TP.SEARCH"]; //TACGRP.C2GM.GNL.PNT.USW.SRH
	    bbox["G-G-GPUS--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPUSA-"] = icn["TP.SEARCH AREA"]; //TACGRP.C2GM.GNL.PNT.USW.SRH.ARA
	    bbox["G-G-GPUSA-"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPUSD-"] = icn["TP.DIP POSITION"]; //TACGRP.C2GM.GNL.PNT.USW.SRH.DIPPSN
	    bbox["G-G-GPUSD-"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPUSC-"] = icn["TP.SEARCH CENTER"]; //TACGRP.C2GM.GNL.PNT.USW.SRH.CTR
	    bbox["G-G-GPUSC-"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPR---"] = icn["TP.REFERENCE POINT"]; //TACGRP.C2GM.GNL.PNT.REFPNT
	    bbox["G-G-GPR---"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRN--"] = icn["TP.NAVIGATIONAL REFERENCE"]; //TACGRP.C2GM.GNL.PNT.REFPNT.NAVREF
	    bbox["G-G-GPRN--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRS--"] = icn["TP.SPECIAL POINT"]; //TACGRP.C2GM.GNL.PNT.REFPNT.SPLPNT
	    bbox["G-G-GPRS--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRD--"] = icn["TP.DLRP"]; //TACGRP.C2GM.GNL.PNT.REFPNT.DLRP
	    bbox["G-G-GPRD--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRP--"] = icn["TP.POINT OF INTENDED MOVEMENT"]; //TACGRP.C2GM.GNL.PNT.REFPNT.PIM
	    bbox["G-G-GPRP--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRM--"] = icn["TP.MARSHALL POINT"]; //TACGRP.C2GM.GNL.PNT.REFPNT.MRSH
	    bbox["G-G-GPRM--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRW--"] = icn["TP.REFERENCE POINT WAYPOINT"]; //TACGRP.C2GM.GNL.PNT.REFPNT.WAP
	    bbox["G-G-GPRW--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRC--"] = icn["TP.CORRIDOR TAB"]; //TACGRP.C2GM.GNL.PNT.REFPNT.CRDRTB
	    bbox["G-G-GPRC--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-G-GPRI--"] = icn["TP.POINT OF INTEREST"]; //TACGRP.C2GM.GNL.PNT.REFPNT.PNTINR
	    bbox["G-G-GPRI--"] = { x1: 50, x2: 150, y1: -25 };
	    sidc["G-G-GPWA--"] = icn["TP.AIM POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.AIMPNT
	    bbox["G-G-GPWA--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPWD--"] = icn["TP.DROP POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.DRPPNT
	    bbox["G-G-GPWD--"] = { x1: 50, x2: 150, y1: 50, y2: 120 };
	    sidc["G-G-GPWE--"] = icn["TP.ENTRY POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.ENTPNT
	    bbox["G-G-GPWE--"] = { x1: 50, x2: 150, y1: 50 };
	    sidc["G-G-GPWG--"] = icn["TP.GROUND ZERO"]; //TACGRP.C2GM.GNL.PNT.WPN.GRDZRO
	    bbox["G-G-GPWG--"] = { x1: 50, x2: 150, y1: 30 };
	    sidc["G-G-GPWM--"] = icn["TP.MSL DETECT POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.MSLPNT
	    bbox["G-G-GPWM--"] = { x1: 50, x2: 150, y1: 30 };
	    sidc["G-G-GPWI--"] = icn["TP.IMPACT POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.IMTPNT
	    bbox["G-G-GPWI--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPWP--"] = icn["TP.PREDICTED IMPACT POINT"]; //TACGRP.C2GM.GNL.PNT.WPN.PIPNT
	    bbox["G-G-GPWP--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPF---"] = icn["TP.FORMATION"]; //TACGRP.C2GM.GNL.PNT.FRMN
	    bbox["G-G-GPF---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPH---"] = icn["TP.HARBOR"]; //TACGRP.C2GM.GNL.PNT.HBR
	    bbox["G-G-GPH---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPHQ--"] = icn["TP.HARBOR POINT Q"]; //TACGRP.C2GM.GNL.PNT.HBR.PNTQ
	    bbox["G-G-GPHQ--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPHA--"] = icn["TP.HARBOR POINT A"]; //TACGRP.C2GM.GNL.PNT.HBR.PNTA
	    bbox["G-G-GPHA--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPHY--"] = icn["TP.HARBOR POINT Y"]; //TACGRP.C2GM.GNL.PNT.HBR.PNTY
	    bbox["G-G-GPHY--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPHX--"] = icn["TP.HARBOR POINT X"]; //TACGRP.C2GM.GNL.PNT.HBR.PNTX
	    bbox["G-G-GPHX--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPO---"] = icn["TP.ROUTE"]; //TACGRP.C2GM.GNL.PNT.RTE
	    bbox["G-G-GPO---"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPOZ--"] = icn["TP.ROUTE RENDEZVOUS"]; //TACGRP.C2GM.GNL.PNT.RTE.RDV
	    bbox["G-G-GPOZ--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-G-GPOD--"] = icn["TP.ROUTE DIVERSIONS"]; //TACGRP.C2GM.GNL.PNT.RTE.DVSN
	    bbox["G-G-GPOD--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-G-GPOW--"] = icn["TP.ROUTE WAYPOINT"]; //TACGRP.C2GM.GNL.PNT.RTE.WAP
	    bbox["G-G-GPOW--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-G-GPOP--"] = icn["TP.ROUTE PIM"]; //TACGRP.C2GM.GNL.PNT.RTE.PIM
	    bbox["G-G-GPOP--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-G-GPOR--"] = icn["TP.ROUTE POINT R"]; //TACGRP.C2GM.GNL.PNT.RTE.PNTR
	    bbox["G-G-GPOR--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-G-GPA---"] = icn["TP.AIR CONTROL POINT"]; //TACGRP.C2GM.GNL.PNT.ACTL
	    bbox["G-G-GPA---"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAP--"] = icn["TP.COMBAT AIR PATROL (CAP)"]; //TACGRP.C2GM.GNL.PNT.ACTL.CAP
	    bbox["G-G-GPAP--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAW--"] = icn["TP.AIRBORNE EARLY WARNING (AEW)"]; //TACGRP.C2GM.GNL.PNT.ACTL.ABNEW
	    bbox["G-G-GPAW--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAK--"] = icn["TP.TANKING"]; //TACGRP.C2GM.GNL.PNT.ACTL.TAK
	    bbox["G-G-GPAK--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAA--"] = icn["TP.ASW FIXED WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.ASBWF
	    bbox["G-G-GPAA--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAH--"] = icn["TP.ASW ROTARY WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.ASBWR
	    bbox["G-G-GPAH--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAB--"] = icn["TP.SUCAP - FIXED WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.SUWF
	    bbox["G-G-GPAB--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAC--"] = icn["TP.SUCAP - ROTARY WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.SUWR
	    bbox["G-G-GPAC--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAD--"] = icn["TP.MIW - FIXED WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.MIWF
	    bbox["G-G-GPAD--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAE--"] = icn["TP.MIW - ROTARY WING"]; //TACGRP.C2GM.GNL.PNT.ACTL.MIWR
	    bbox["G-G-GPAE--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-G-GPAS--"] = icn["TP.STRIKE IP"]; //TACGRP.C2GM.GNL.PNT.ACTL.SKEIP
	    bbox["G-G-GPAS--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAT--"] = icn["TP.TACAN"]; //TACGRP.C2GM.GNL.PNT.ACTL.TCN
	    bbox["G-G-GPAT--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAO--"] = icn["TP.TOMCAT"]; //TACGRP.C2GM.GNL.PNT.ACTL.TMC
	    bbox["G-G-GPAO--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAR--"] = icn["TP.RESCUE"]; //TACGRP.C2GM.GNL.PNT.ACTL.RSC
	    bbox["G-G-GPAR--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAL--"] = icn["TP.REPLENISH"]; //TACGRP.C2GM.GNL.PNT.ACTL.RPH
	    bbox["G-G-GPAL--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAF--"] = icn["TP.UNMANNED AERIAL SYSTEM"]; //TACGRP.C2GM.GNL.PNT.ACTL.UA
	    bbox["G-G-GPAF--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAG--"] = icn["TP.VTUA"]; //TACGRP.C2GM.GNL.PNT.ACTL.VTUA
	    bbox["G-G-GPAG--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAI--"] = icn["TP.ORBIT"]; //TACGRP.C2GM.GNL.PNT.ACTL.ORB
	    bbox["G-G-GPAI--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAJ--"] = icn["TP.ORBIT - FIGURE EIGHT"]; //TACGRP.C2GM.GNL.PNT.ACTL.ORBF8
	    bbox["G-G-GPAJ--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAM--"] = icn["TP.ORBIT - RACE TRACK"]; //TACGRP.C2GM.GNL.PNT.ACTL.ORBRT
	    bbox["G-G-GPAM--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPAN--"] = icn["TP.ORBIT - RANDOM, CLOSED"]; //TACGRP.C2GM.GNL.PNT.ACTL.ORBRD
	    bbox["G-G-GPAN--"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	    sidc["G-G-GPP---"] = icn["TP.ACTION POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT
	    bbox["G-G-GPP---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPK--"] = icn["TP.ACTION CHECK POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.CHKPNT
	    bbox["G-G-GPPK--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPC--"] = icn["TP.CONTACT POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.CONPNT
	    bbox["G-G-GPPC--"] = { x1: 55, x2: 145, y1: -10 };
	    sidc["G-G-GPPO--"] = icn["TP.COORDINATION POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.CRDPNT
	    bbox["G-G-GPPO--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-GPPD--"] = icn["TP.DECISION POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.DCNPNT
	    bbox["G-G-GPPD--"] = { x1: 30, x2: 170, y1: 25, y2: 160 };
	    sidc["G-G-GPPL--"] = icn["TP.ACTION LINKUP POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.LNKUPT
	    bbox["G-G-GPPL--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPP--"] = icn["TP.ACTION PASSAGE POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.PSSPNT
	    bbox["G-G-GPPP--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPR--"] = icn["TP.ACTION RALLY POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.RAYPNT
	    bbox["G-G-GPPR--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPE--"] = icn["TP.ACTION RELEASE POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.RELPNT
	    bbox["G-G-GPPE--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPS--"] = icn["TP.ACTION START POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.STRPNT
	    bbox["G-G-GPPS--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPA--"] = icn["TP.ACTION AMNESTY POINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.AMNPNT
	    bbox["G-G-GPPA--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-GPPW--"] = icn["TP.WAYPOINT"]; //TACGRP.C2GM.GNL.PNT.ACTPNT.WAP
	    bbox["G-G-GPPW--"] = { x1: 60, x2: 140, y1: 60, y2: 140 };
	    sidc["G-G-GPC---"] = icn["TP.SEA SURFACE CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL
	    bbox["G-G-GPC---"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCU--"] = icn["TP.(USV) CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.USV
	    bbox["G-G-GPCU--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCUR-"] = icn["TP.(RMV) USV CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.USV.RMV
	    bbox["G-G-GPCUR-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCUA-"] = icn["TP.USV - ASW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.USV.ASW
	    bbox["G-G-GPCUA-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCUS-"] = icn["TP.USV - SUW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.USV.SUW
	    bbox["G-G-GPCUS-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCUM-"] = icn["TP.USV - MIW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.USV.MIW
	    bbox["G-G-GPCUM-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCA--"] = icn["TP.ASW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.ASW
	    bbox["G-G-GPCA--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCS--"] = icn["TP.SUW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.SUW
	    bbox["G-G-GPCS--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCM--"] = icn["TP.MIW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.MIW
	    bbox["G-G-GPCM--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCP--"] = icn["TP.PICKET CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.PKT
	    bbox["G-G-GPCP--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCR--"] = icn["TP.RENDEZVOUS CONTROL POINT"]; //TACGRP.C2GM.GNL.PNT.SCTL.RDV
	    bbox["G-G-GPCR--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCC--"] = icn["TP.RESCUE CONTROL POINT"]; //TACGRP.C2GM.GNL.PNT.SCTL.RSC
	    bbox["G-G-GPCC--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCE--"] = icn["TP.REPLENISHMENT CONTROL POINT"]; //TACGRP.C2GM.GNL.PNT.SCTL.REP
	    bbox["G-G-GPCE--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPCN--"] = icn["TP.NONCOMBATANT CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.SCTL.NCBTT
	    bbox["G-G-GPCN--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPB---"] = icn["TP.SUB SURFACE CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL
	    bbox["G-G-GPB---"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBU--"] = icn["TP.(UUV) CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.UUV
	    bbox["G-G-GPBU--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBUA-"] = icn["TP.UUV - ASW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.ASW
	    bbox["G-G-GPBUA-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBUS-"] = icn["TP.UUV - SUW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.SUW
	    bbox["G-G-GPBUS-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBUM-"] = icn["TP.UUV - MIW CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.UUV.MIW
	    bbox["G-G-GPBUM-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBS--"] = icn["TP.SUBMARINE CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.SBSTN
	    bbox["G-G-GPBS--"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-GPBSA-"] = icn["TP.ASW SUBMARINE CONTROL STATION"]; //TACGRP.C2GM.GNL.PNT.UCTL.SBSTN.ASW
	    bbox["G-G-GPBSA-"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-G-APP---"] = icn["TP.AIR CONTROL POINT (ACP)"]; //TACGRP.C2GM.AVN.PNT.ACP
	    bbox["G-G-APP---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-APC---"] = icn["TP.COMMUNICATIONS CHECKPOINT"]; //TACGRP.C2GM.AVN.PNT.COMMCP
	    bbox["G-G-APC---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-G-APU---"] = icn["TP.PULL-UP POINT"]; //TACGRP.C2GM.AVN.PNT.PUP
	    bbox["G-G-APU---"] = { x1: 50, x2: 240, y1: 50, y2: 150 };
	    sidc["G-G-APD---"] = icn["TP.DOWNED AIRCREW PICKUP POINT"]; //TACGRP.C2GM.AVN.PNT.DAPP
	    bbox["G-G-APD---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-G-PN----"] = icn["TP.DUMMY MINEFIELD"]; //TACGRP.C2GM.DCPN.DMYMS
	    bbox["G-G-PN----"] = { x1: 40, x2: 160, y1: -10, y2: 140 };
	    sidc["G-G-DPT---"] = icn["TP.TARGET REFERENCE"]; //TACGRP.C2GM.DEF.PNT.TGTREF
	    sidc["G-G-DPO---"] = icn["TP.OBSERVATION POST/OUTPOST"]; //TACGRP.C2GM.DEF.PNT.OBSPST
	    bbox["G-G-DPO---"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-DPOC--"] = icn["TP.COMBAT OUTPOST"]; //TACGRP.C2GM.DEF.PNT.OBSPST.CBTPST
	    bbox["G-G-DPOC--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-DPOR--"] = icn["TP.OBSERVATION POST/RECONNAISSANCE"]; //TACGRP.C2GM.DEF.PNT.OBSPST.RECON
	    bbox["G-G-DPOR--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-DPOF--"] = icn["TP.FORWARD OBSERVER POSITION"]; //TACGRP.C2GM.DEF.PNT.OBSPST.FWDOP
	    bbox["G-G-DPOF--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-DPOS--"] = icn["TP.SENSOR OUTPOST"]; //TACGRP.C2GM.DEF.PNT.OBSPST.SOP
	    bbox["G-G-DPOS--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-DPON--"] = icn["TP.CBRN OBSERVATION POST"]; //TACGRP.C2GM.DEF.PNT.OBSPST.CBRNOP
	    bbox["G-G-DPON--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-G-OPP---"] = icn["TP.POINT OF DEPARTURE"]; //TACGRP.C2GM.OFF.PNT.PNTD
	    bbox["G-G-OPP---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-OAOF--"] = icn["TP.FIXED AND PREFABRICATED"]; //TACGRP.MOBSU.OBST.ATO.TDTSM.FIXPFD
	    bbox["G-M-OAOF--"] = { x1: 60, x2: 140, y1: 30 };
	    sidc["G-M-OAOM--"] = icn["TP.TETRAHEDRONS"]; //TACGRP.MOBSU.OBST.ATO.TDTSM.MVB
	    bbox["G-M-OAOM--"] = { x1: 60, x2: 140, y1: 30 };
	    sidc["G-M-OAOP--"] = icn["TP.TETRAHEDRONS MOVABLE"]; //TACGRP.MOBSU.OBST.ATO.TDTSM.MVBPFD
	    bbox["G-M-OAOP--"] = { x1: 60, x2: 140, y1: 30 };
	    sidc["G-M-OB----"] = icn["TP.BOOBY TRAP"]; //TACGRP.MOBSU.OBST.BBY
	    sidc["G-M-OMU---"] = icn["TP.UNSPECIFIED MINE"]; //TACGRP.MOBSU.OBST.MNE.USPMNE
	    sidc["G-M-OMT---"] = icn["TP.ANTITANK MINE (AT)"]; //TACGRP.MOBSU.OBST.MNE.ATMNE
	    sidc["G-M-OMD---"] = icn["TP.(AT) ANTIHANDLING DEVICE"]; //TACGRP.MOBSU.OBST.MNE.ATMAHD
	    bbox["G-M-OMD---"] = { x1: 60, x2: 140, y1: 40, y2: 195 };
	    sidc["G-M-OME---"] = icn["TP.(AT) DIRECTIONAL"]; //TACGRP.MOBSU.OBST.MNE.ATMDIR
	    bbox["G-M-OME---"] = { x1: 60, x2: 140, y1: 10, y2: 140 };
	    sidc["G-M-OMP---"] = icn["TP.ANTIPERSONNEL (AP) MINES"]; //TACGRP.MOBSU.OBST.MNE.APMNE
	    sidc["G-M-OMW---"] = icn["TP.WIDE AREA MINES"]; //TACGRP.MOBSU.OBST.MNE.WAMNE
	    sidc["G-M-OFS---"] = icn["TP.MINEFIELDS STATIC"]; //TACGRP.MOBSU.OBST.MNEFLD.STC
	    bbox["G-M-OFS---"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	    sidc["G-M-OHTL--"] = icn["TP.TOWER LOW"]; //TACGRP.MOBSU.OBST.AVN.TWR.LOW
	    bbox["G-M-OHTL--"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	    sidc["G-M-OHTH--"] = icn["TP.TOWER HIGH"]; //TACGRP.MOBSU.OBST.AVN.TWR.HIGH
	    bbox["G-M-OHTH--"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	    sidc["G-M-BCP---"] = icn["TP.ENGINEER REGULATING POINT"]; //TACGRP.MOBSU.OBSTBP.CSGSTE.ERP
	    bbox["G-M-BCP---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-SE----"] = icn["TP.EARTHWORK/FORTIFICATION"]; //TACGRP.MOBSU.SU.ESTOF
	    sidc["G-M-SF----"] = icn["TP.FORT"]; //TACGRP.MOBSU.SU.FRT
	    sidc["G-M-SS----"] = icn["TP.SURFACE SHELTER"]; //TACGRP.MOBSU.SU.SUFSHL
	    sidc["G-M-SU----"] = icn["TP.UNDERGROUND SHELTER"]; //TACGRP.MOBSU.SU.UGDSHL
	    sidc["G-M-NZ----"] = icn["TP.NUCLEAR DETONATIONS GROUND ZERO"]; //TACGRP.MOBSU.CBRN.NDGZ
	    bbox["G-M-NZ----"] = { x1: 60, x2: 140, y1: -20 };
	    sidc["G-M-NF----"] = icn["TP.NUCLEAR FALLOUT PRODUCING"]; //TACGRP.MOBSU.CBRN.FAOTP
	    bbox["G-M-NF----"] = { x1: 50, x2: 150, y1: -20 };
	    sidc["G-M-NEB---"] = icn["TP.RELEASE EVENTS BIOLOGICAL"]; //TACGRP.MOBSU.CBRN.REEVNT.BIO
	    bbox["G-M-NEB---"] = { x1: -10, x2: 140, y1: -20 };
	    sidc["G-M-NEC---"] = icn["TP.RELEASE EVENTS CHEMICAL"]; //TACGRP.MOBSU.CBRN.REEVNT.CML
	    bbox["G-M-NEC---"] = { x1: -20, x2: 140, y1: -20 };
	    sidc["G-M-NDP---"] = icn["TP.DECON SITE/POINT"]; //TACGRP.MOBSU.CBRN.DECONP.USP
	    bbox["G-M-NDP---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDA---"] = icn["TP.ALTERNATE DECON SITE/POINT"]; //TACGRP.MOBSU.CBRN.DECONP.ALTUSP
	    bbox["G-M-NDA---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDT---"] = icn["TP.DECON SITE/POINT (TROOPS)"]; //TACGRP.MOBSU.CBRN.DECONP.TRP
	    bbox["G-M-NDT---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDE---"] = icn["TP.DECON SITE/POINT (EQUIPMENT)"]; //TACGRP.MOBSU.CBRN.DECONP.EQT
	    bbox["G-M-NDE---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDB---"] = icn["TP.DECON SITE/POINT (EQUIPMENT AND TROOPS)"]; //TACGRP.MOBSU.CBRN.DECONP.EQTTRP
	    bbox["G-M-NDB---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDO---"] =
	      icn["TP.DECON SITE/POINT (OPERATIONAL DECONTAMINATION)"]; //TACGRP.MOBSU.CBRN.DECONP.OPDECN
	    bbox["G-M-NDO---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-M-NDD---"] = icn["TP.DECON SITE/POINT (THOROUGH DECONTAMINATION)"]; //TACGRP.MOBSU.CBRN.DECONP.TRGH
	    bbox["G-M-NDD---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-F-PTS---"] = icn["TP.POINT/SINGLE TARGET"]; //TACGRP.FSUPP.PNT.TGT.PTGT
	    sidc["G-F-PTN---"] = icn["TP.NUCLEAR TARGET"]; //TACGRP.FSUPP.PNT.TGT.NUCTGT
	    sidc["G-F-PCF---"] = icn["TP.FIRE SUPPORT STATION"]; //TACGRP.FSUPP.PNT.C2PNT.FSS
	    sidc["G-F-PCS---"] = icn["TP.SURVEY CONTROL POINT"]; //TACGRP.FSUPP.PNT.C2PNT.SCP
	    bbox["G-F-PCS---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-F-PCB---"] = icn["TP.FIRING POINT"]; //TACGRP.FSUPP.PNT.C2PNT.FP
	    bbox["G-F-PCB---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-F-PCR---"] = icn["TP.RELOAD POINT"]; //TACGRP.FSUPP.PNT.C2PNT.RP
	    bbox["G-F-PCR---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-F-PCH---"] = icn["TP.HIDE POINT"]; //TACGRP.FSUPP.PNT.C2PNT.HP
	    bbox["G-F-PCH---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-F-PCL---"] = icn["TP.LAUNCH POINT"]; //TACGRP.FSUPP.PNT.C2PNT.LP
	    bbox["G-F-PCL---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PX----"] = icn["TP.AMBULANCE EXCHANGE POINT"]; //TACGRP.CSS.PNT.AEP
	    bbox["G-S-PX----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PC----"] = icn["TP.CANNIBALIZATION POINT"]; //TACGRP.CSS.PNT.CBNP
	    bbox["G-S-PC----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PY----"] = icn["TP.CASUALTY COLLECTION POINT"]; //TACGRP.CSS.PNT.CCP
	    bbox["G-S-PY----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PT----"] = icn["TP.CIVILIAN COLLECTION POINT"]; //TACGRP.CSS.PNT.CVP
	    bbox["G-S-PT----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PD----"] = icn["TP.DETAINEE COLLECTION POINT"]; //TACGRP.CSS.PNT.DCP
	    bbox["G-S-PD----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PE----"] = icn["TP.EPW COLLECTION POINT"]; //TACGRP.CSS.PNT.EPWCP
	    bbox["G-S-PE----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PL----"] = icn["TP.LOGISTICS RELEASE POINT"]; //TACGRP.CSS.PNT.LRP
	    bbox["G-S-PL----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PM----"] = icn["TP.MAINTENANCE COLLECTION POINT"]; //TACGRP.CSS.PNT.MCP
	    bbox["G-S-PM----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PR----"] = icn["TP.REARM, REFUEL AND RESUPPLY POINT"]; //TACGRP.CSS.PNT.RRRP
	    bbox["G-S-PR----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PU----"] = icn["TP.REFUEL ON THE MOVE POINT"]; //TACGRP.CSS.PNT.ROM
	    bbox["G-S-PU----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PO----"] = icn["TP.TRAFFIC CONTROL POST"]; //TACGRP.CSS.PNT.TCP
	    bbox["G-S-PO----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PI----"] = icn["TP.TRAILER TRANSFER POINT"]; //TACGRP.CSS.PNT.TTP
	    bbox["G-S-PI----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PN----"] = icn["TP.UNIT MAINTENANCE COLLECTION POINT"]; //TACGRP.CSS.PNT.UMC
	    bbox["G-S-PN----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSZ---"] = icn["TP.SUPPLY POINT"]; //TACGRP.CSS.PNT.SPT.GNL
	    bbox["G-S-PSZ---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSA---"] = icn["TP.SP CLASS I"]; //TACGRP.CSS.PNT.SPT.CLS1
	    bbox["G-S-PSA---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSB---"] = icn["TP.SP CLASS II"]; //TACGRP.CSS.PNT.SPT.CLS2
	    bbox["G-S-PSB---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSC---"] = icn["TP.SP CLASS III"]; //TACGRP.CSS.PNT.SPT.CLS3
	    bbox["G-S-PSC---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSD---"] = icn["TP.SP CLASS IV"]; //TACGRP.CSS.PNT.SPT.CLS4
	    bbox["G-S-PSD---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSE---"] = icn["TP.SP CLASS V"]; //TACGRP.CSS.PNT.SPT.CLS5
	    bbox["G-S-PSE---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSF---"] = icn["TP.SP CLASS VI"]; //TACGRP.CSS.PNT.SPT.CLS6
	    bbox["G-S-PSF---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSG---"] = icn["TP.SP CLASS VII"]; //TACGRP.CSS.PNT.SPT.CLS7
	    bbox["G-S-PSG---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSH---"] = icn["TP.SP CLASS VIII"]; //TACGRP.CSS.PNT.SPT.CLS8
	    bbox["G-S-PSH---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSI---"] = icn["TP.SP CLASS IX"]; //TACGRP.CSS.PNT.SPT.CLS9
	    bbox["G-S-PSI---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PSJ---"] = icn["TP.SP CLASS X"]; //TACGRP.CSS.PNT.SPT.CLS10
	    bbox["G-S-PSJ---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PAS---"] = icn["TP.AMMUNITION SUPPLY POINT (ASP)"]; //TACGRP.CSS.PNT.AP.ASP
	    bbox["G-S-PAS---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-S-PAT---"] = icn["TP.AMMUNITION TRANSFER POINT (ATP)"]; //TACGRP.CSS.PNT.AP.ATP
	    bbox["G-S-PAT---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-O-ED----"] = icn["TP.DITCHED AIRCRAFT"]; //TACGRP.OTH.ER.DTHAC
	    sidc["G-O-EP----"] = icn["TP.PERSON IN WATER"]; //TACGRP.OTH.ER.PIW
	    sidc["G-O-EV----"] = icn["TP.DISTRESSED VESSEL"]; //TACGRP.OTH.ER.DSTVES
	    sidc["G-O-HM----"] = icn["TP.SEA MINELIKE"]; //TACGRP.OTH.HAZ.SML
	    bbox["G-O-HM----"] = { x1: 40, x2: 160, y1: 40, y2: 150 };
	    sidc["G-O-HI----"] = icn["TP.ICEBERG"]; //TACGRP.OTH.HAZ.IB
	    bbox["G-O-HI----"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-O-HO----"] = icn["TP.OIL RIG/PLATFORM"]; //TACGRP.OTH.HAZ.OLRG
	    bbox["G-O-HO----"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-O-SB----"] = icn["TP.BOTTOM RETURN"]; //TACGRP.OTH.SSUBSR.BTMRTN
	    bbox["G-O-SB----"] = { x1: 40, x2: 160, y1: 40, y2: 100 };
	    sidc["G-O-SBM---"] = icn["TP.INSTALLATION/MANMADE"]; //TACGRP.OTH.SSUBSR.BTMRTN.INS
	    bbox["G-O-SBM---"] = { x1: 40, x2: 160, y1: 40, y2: 100 };
	    sidc["G-O-SBN---"] = icn["TP.BOTTOM RETURN"]; //TACGRP.OTH.SSUBSR.BTMRTN.SBRSOO
	    bbox["G-O-SBN---"] = { x1: 40, x2: 160, y1: 40, y2: 100 };
	    sidc["G-O-SBW---"] = icn["TP.WRECK, NON DANGEROUS"]; //TACGRP.OTH.SSUBSR.BTMRTN.WRKND
	    bbox["G-O-SBW---"] = { x1: 40, x2: 160, y1: 70, y2: 130 };
	    sidc["G-O-SBX---"] = icn["TP.WRECK, DANGEROUS"]; //TACGRP.OTH.SSUBSR.BTMRTN.WRKD
	    bbox["G-O-SBX---"] = { x1: 40, x2: 160, y1: 70, y2: 130 };
	    sidc["G-O-SM----"] = icn["TP.MARINE LIFE"]; //TACGRP.OTH.SSUBSR.MARLFE
	    bbox["G-O-SM----"] = { x1: 100, x2: 220, y1: 70, y2: 130 };
	    sidc["G-O-SS----"] = icn["TP.SEA ANOMALY"]; //TACGRP.OTH.SSUBSR.SA
	    bbox["G-O-SS----"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	    sidc["G-O-FA----"] = icn["TP.FIX ACOUSTIC"]; //TACGRP.OTH.FIX.ACU
	    sidc["G-O-FE----"] = icn["TP.FIX ELECTRO-MAGNETIC"]; //TACGRP.OTH.FIX.EM
	    sidc["G-O-FO----"] = icn["TP.FIX ELECTRO-OPTICAL"]; //TACGRP.OTH.FIX.EOP
	  },
	};

	// Label overrides for tactical points
	function tacticalPoints$1(sidc) {
	  // Tactical Point Symbols =========================================================================
	  sidc["G-T-GD----"] = {}; //2.X.1.1.9 DESTROY
	  sidc["G-T-GI----"] = {}; //2.X.1.1.13 INTERDICT
	  sidc["G-T-GN----"] = {}; //2.X.1.1.15 NEUTRALIZE
	  sidc["G-C-MGPFE-"] = {}; //2.X.2.1.1.1.1.1 ELECTRO-MAGNETIC
	  sidc["G-C-MGPFA-"] = {}; //2.X.2.1.1.1.1.2 ACOUSTIC
	  sidc["G-C-MGPFO-"] = {}; //2.X.2.1.1.1.1.3 ELECTRO-OPTICAL
	  sidc["G-C-MGPI--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 30,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.1.1.1.2 POINT OF INTEREST
	  sidc["G-C-MAAP--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.1.2.1.1 AIR CONTROL POINT (ACP)
	  sidc["G-C-MAAC--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.1.2.1.2 COMMUNICATIONS CHECKPOINT (CCP)
	  sidc["G-C-MAAU--"] = {}; //2.X.2.1.2.1.3 POP UP POINT (PUP)
	  sidc["G-C-MAAD--"] = {}; //2.X.2.1.2.1.4 DOWNED AIRCREW PICK UP POINT
	  sidc["G-C-MDN---"] = {}; //2.X.2.1.3.6 DUMMY MINEFIELD
	  sidc["G-C-MMPT--"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 115,
	      y: 85,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.1.4.1.1 TARGET REFERENCE POINT (TRP)
	  sidc["G-C-MMPO--"] = {}; //2.X.2.1.4.1.4 OBSERVATION POST/OUTPOST
	  sidc["G-C-MMPOC-"] = {}; //2.X.2.1.4.1.4.1 COMBAT OUTPOST
	  sidc["G-C-MMPOR-"] = {}; //2.X.2.1.4.1.4.2 OBSERVATION POST OCCUPIED BY DISMOUNTED SCOUTS OR RECONNAISSANCE
	  sidc["G-C-MMPOF-"] = {}; //2.X.2.1.4.1.4.3 FORWARD OBSERVER POSITION
	  sidc["G-C-MMPOS-"] = {}; //2.X.2.1.4.1.4.4 SENSOR OUTPOST/LISTENING POST (OP/LP)
	  sidc["G-C-MMPON-"] = {}; //2.X.2.1.4.1.4.5 CBRN OBSERVATION POST (DISMOUNTED)
	  sidc["G-C-MMPON-"] = {}; //2.X.2.1.4.1.4.6 FORWARD AIR CONTROLLER (FAC)
	  sidc["G-C-MMPON-"] = {}; //2.X.2.1.4.1.4.7 TACTICAL AIR CONTROL PARTY (TACP)
	  sidc["G-C-MOPD--"] = {}; //2.X.2.1.5.1.1 POINT OF DEPARTURE
	  sidc["G-C-BOATD-"] = {}; //2.X.2.2.1.3.3 ANTITANK OBSTACLES, TETRAHEDRONS, DRAGON'S TEETH AND OTHER SIMILAR OBSTACLES
	  sidc["G-C-BOAB--"] = {}; //2.X.2.2.1.4 BOOBY TRAP
	  sidc["G-C-BOAMA-"] = {}; //2.X.2.2.1.5.1 ANTIPERSONNEL (AP) MINE
	  sidc["G-C-BOAMT-"] = {}; //2.X.2.2.1.5.2 ANTITANK (AT) MINE
	  sidc["G-C-BOAMD-"] = {}; //2.X.2.2.1.5.3 ANTITANK MINE WITH ANTIHANDLING DEVISE
	  sidc["G-C-BOAMC-"] = {}; //2.X.2.2.1.5.4 ANTITANK MINE (ARROW SHOWS EFFECTS) "CLAYMORE MINE"
	  sidc["G-C-BOAMU-"] = {}; //2.X.2.2.1.5.5 UNSPECIFIED MINE
	  sidc["G-C-BOAMN-"] = {}; //2.X.2.2.1.5.6 MINE CLUSTER
	  sidc["G-C-BOAIP-"] = {}; //2.X.2.2.1.6.1 PLANNED MINEFIELD
	  sidc["G-C-BOAIC-"] = {}; //2.X.2.2.1.6.2 COMPLETED MINEFIELD
	  sidc["G-C-BOAIN-"] = {}; //2.X.2.2.1.6.5 ANTITANK (AT) MINEFIELD
	  sidc["G-C-BOAIS-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 165,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.2.1.6.6 SCATTERABLE MINES
	  sidc["G-C-BOAIH-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 165,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.2.1.6.7 ANTIPERSONNEL (AP) MINEFIELD REINFORCED WITH SCATTERABLE WITH SELF-DESTRUCT DATE-TIME-GROUP
	  sidc["G-C-BOAID-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 165,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.2.1.6.8 SCATTERABLE MINEFIELD WITH SELF-DESTRUCT DATE-TIME-GROUP
	  sidc["G-C-BOAV--"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 165,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.2.1.6.8 SCATTERABLE MINEFIELD WITH SELF-DESTRUCT DATE-TIME-GROUP
	  sidc["G-C-BYCG--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.2.2.8 ENGINEER REGULATING POINT
	  sidc["G-C-BSE---"] = {}; //2.X.2.2.3.1 EARTHWORK, SMALL TRENCH OR FORTIFICATION
	  sidc["G-C-BSF---"] = {}; //2.X.2.2.3.2 FORT
	  sidc["G-C-BSH---"] = {}; //2.X.2.2.3.6 SURFACE SHELTER
	  sidc["G-C-BSU---"] = {}; //2.X.2.2.3.7 UNDERGROUND SHELTER
	  sidc["G-C-BWN---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    type: { stroke: false, textanchor: "end", x: 50, y: 60, fontsize: 35 },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  }; //2.X.2.2.4.2 NUCLEAR DETONATIONS FRIENDLY GROUND ZERO
	  sidc["G-C-BWE---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    type: { stroke: false, textanchor: "end", x: 50, y: 60, fontsize: 35 },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  }; //2.X.2.2.4.3 ENEMY KNOWN GROUND ZERO
	  sidc["G-C-BWI---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    type: { stroke: false, textanchor: "end", x: 50, y: 60, fontsize: 35 },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  }; //2.X.2.2.4.4 ENEMY TEMPLATED
	  sidc["G-C-BWF---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 20,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 20, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 100,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 140,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 35,
	    },
	    type: { stroke: false, textanchor: "end", x: 50, y: 60, fontsize: 35 },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 50,
	      y: 100,
	      fontsize: 35,
	    },
	  }; //2.X.2.2.4.5 FRIENDLY PLANNED OR ON-ORDER
	  sidc["G-C-BWP---"] = {}; //2.X.2.2.4.6 FALLOUT PRODUCING
	  sidc["G-C-BWDP--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.1 DECON SITE/POINT (UNSPECIFIED)
	  sidc["G-C-BWDA--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.2 ALTERNATE DECON SITE/POINT (UNSPECIFIED)
	  sidc["G-C-BWDT--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.3 DECON SITE/POINT (TROOPS)
	  sidc["G-C-BWDE--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.4 DECON SITE/POINT (EQUIPMENT)
	  sidc["G-C-BWDS--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.5 DECON SITE/POINT (EQUIPMENT AND TROOPS)
	  sidc["G-C-BWDO--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.6 DECON SITE/POINT (OPERATIONAL DECONTAMINATION)
	  sidc["G-C-BWDG--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.7 DECON SITE/POINT (THOROUGH DECONTAMINATION)
	  sidc["G-C-BWDEM-"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.8 DECON POINT (MAIN) EQUIPMENT
	  sidc["G-C-BWDTF-"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.2.4.11.9 DECON POINT (FORWARD) TROOPS
	  sidc["G-C-FSTP--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 145,
	      fontsize: 40,
	    },
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "end",
	      x: 80,
	      y: 145,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	    },
	  }; //2.X.2.3.1.1.1 POINT /SINGLE TARGET
	  sidc["G-C-FSS---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 125,
	      y: 115,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //2.X.2.3.1.2 FIRE SUPPORT STATION
	  sidc["G-C-FAU---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //2.X.2.3.3.9 NUCLEAR TARGET
	  sidc["G-C-SPA---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.1 AMBULANCE EXCHANGE POINT
	  sidc["G-C-SPC---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.2 CANNIBALIZATION POINT
	  sidc["G-C-SPY---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.3 CASUALTY COLLECTION POINT
	  sidc["G-C-SPT---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.4 CIVILIAN COLLECTION POINT
	  sidc["G-C-SPD---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.5 DETAINEE COLLECTION POINT
	  sidc["G-C-SPE---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.6 ENEMY PRISONER OF WAR (EPW) COLLECTION POINT
	  sidc["G-C-SPL---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.7 LOGISTICS RELEASE POINT (LRP)
	  sidc["G-C-SPM---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.8 MAINTENANCE COLLECTION POINT
	  sidc["G-C-SPR---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.9 REARM, REFUEL AND RE-SUPPLY POINT
	  sidc["G-C-SPU---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.10 REFUEL ON THE MOVE (ROM) POINT
	  sidc["G-C-SPO---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.11 TRAFFIC CONTROL POST (TCP)
	  sidc["G-C-SPI---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.12 TRAILER TRANSFER POINT
	  sidc["G-C-SPN---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.13 UNIT MAINTENANCE COLLECTION POINT
	  sidc["G-C-SPQT--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.1 GENERAL
	  sidc["G-C-SPQA--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.2 CLASS I
	  sidc["G-C-SPQB--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.3 CLASS II
	  sidc["G-C-SPQC--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.4 CLASS III
	  sidc["G-C-SPQD--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.5 CLASS IV
	  sidc["G-C-SPQE--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.6 CLASS V
	  sidc["G-C-SPQF--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.7 CLASS VI
	  sidc["G-C-SPQG--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.8 CLASS VII
	  sidc["G-C-SPQH--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.9 CLASS VIII
	  sidc["G-C-SPQI--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.10 CLASS IX
	  sidc["G-C-SPQJ--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.14.11 CLASS X
	  sidc["G-C-SPMA--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.15.1 AMMUNITION SUPPLY POINT (ASP)
	  sidc["G-C-SPMT--"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.4.1.15.2 AMMUNITION TRANSFER POINT (ATP)
	  sidc["G-C-OX----"] = {}; //2.X.2.5.1 SPECIAL POINT
	  sidc["G-C-OXRN--"] = {}; //2.X.2.5.1.1.1 NAV REFERENCE
	  sidc["G-C-OXRD--"] = {}; //2.X.2.5.1.1.2 DLRP
	  sidc["G-C-OXUD--"] = {}; //2.X.2.5.1.2.1 DATUM
	  sidc["G-C-OXUB--"] = {}; //2.X.2.5.1.2.2 BRIEF CONTACT
	  sidc["G-C-OXUL--"] = {}; //2.X.2.5.1.2.3 LOST CONTACT
	  sidc["G-C-OXUS--"] = {}; //2.X.2.5.1.2.4 SINKER
	  sidc["G-C-OXWA--"] = {}; //2.X.2.5.1.3.1 AIM POINT
	  sidc["G-C-OXWD--"] = {}; //2.X.2.5.1.3.2 DROP POINT
	  sidc["G-C-OXWE--"] = {}; //2.X.2.5.1.3.3 ENTRY POINT
	  sidc["G-C-OXWG--"] = {}; //2.X.2.5.1.3.4 GROUND ZERO
	  sidc["G-C-OXWM--"] = {}; //2.X.2.5.1.3.5 MSL DETECT POINT
	  sidc["G-C-OXWI--"] = {}; //2.X.2.5.1.3.6 IMPACT POINT
	  sidc["G-C-OXWP--"] = {}; //2.X.2.5.1.3.7 PREDICTED IMPACT POINT
	  sidc["G-C-OXY---"] = {}; //2.X.2.5.1.4 SONOBUOY
	  sidc["G-C-OXYP--"] = {}; //2.X.2.5.1.4.1 PATTERN CENTRE
	  sidc["G-C-OXYD--"] = {}; //2.X.2.5.1.4.2 DIFAR
	  sidc["G-C-OXYL--"] = {}; //2.X.2.5.1.4.3 LOFAR
	  sidc["G-C-OXYC--"] = {}; //2.X.2.5.1.4.4 CASS
	  sidc["G-C-OXYS--"] = {}; //2.X.2.5.1.4.5 DICASS
	  sidc["G-C-OXYB--"] = {}; //2.X.2.5.1.4.6 BT
	  sidc["G-C-OXYA--"] = {}; //2.X.2.5.1.4.7 ANM
	  sidc["G-C-OXYV--"] = {}; //2.X.2.5.1.4.8 VLAD
	  sidc["G-C-OXYT--"] = {}; //2.X.2.5.1.4.9 ATAC
	  sidc["G-C-OXYR--"] = {}; //2.X.2.5.1.4.10 RO
	  sidc["G-C-OXYK--"] = {}; //2.X.2.5.1.4.11 KINGPIN
	  sidc["G-C-OXN---"] = {}; //2.X.2.5.1.5 FORMATION
	  sidc["G-C-OXH---"] = {}; //2.X.2.5.1.6 HARBOUR
	  sidc["G-C-OXHQ--"] = {}; //2.X.2.5.1.6.1 POINT Q
	  sidc["G-C-OXHA--"] = {}; //2.X.2.5.1.6.2 POINT A
	  sidc["G-C-OXHY--"] = {}; //2.X.2.5.1.6.3 POINT Y
	  sidc["G-C-OXHX--"] = {}; //2.X.2.5.1.6.4 POINT X
	  sidc["G-C-OXR---"] = {}; //2.X.2.5.1.7 ROUTE
	  sidc["G-C-OXRR--"] = {}; //2.X.2.5.1.7.1 RENDEZVOUS
	  sidc["G-C-OXRD--"] = {}; //2.X.2.5.1.7.2 DIVERSIONS
	  sidc["G-C-OXRW--"] = {}; //2.X.2.5.1.7.3 WAYPOINT
	  sidc["G-C-OXRP--"] = {}; //2.X.2.5.1.7.4 PIM
	  sidc["G-C-OXRT--"] = {}; //2.X.2.5.1.7.5 POINT R
	  sidc["G-C-OXSTC-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.1 COMBATANT STATION
	  sidc["G-C-OXSTCP"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.1.1 PICKET STATION
	  sidc["G-C-OXSTCA"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.1.2 ASW SHIP STATION
	  sidc["G-C-OXSTR-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.2 REPLENISHMENT AT SEA (RAS) STATION
	  sidc["G-C-OXSTH-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.3 RESCUE STATION
	  sidc["G-C-OXSTS-"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.4 SUBMARINE STATION
	  sidc["G-C-OXSTSA"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 92,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 128,
	      fontsize: 30,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.1.8.5 ASW SUBMARINE STATION
	  sidc["G-C-OXS---"] = {}; //2.X.2.5.1.9 SEARCH
	  sidc["G-C-OXSA--"] = {}; //2.X.2.5.1.9.1 SEARCH AREA
	  sidc["G-C-OXSD--"] = {}; //2.X.2.5.1.9.2 DIP POSITION
	  sidc["G-C-OXSC--"] = {}; //2.X.2.5.1.9.3 SEARCH CENTRE
	  sidc["G-C-OXAC--"] = {}; //2.X.2.5.1.10.1 COMBAT AIR PATROL (CAP)
	  sidc["G-C-OXAA--"] = {}; //2.X.2.5.1.10.2 AIRBORNE EARLY WARNING (AEW)
	  sidc["G-C-OXAT--"] = {}; //2.X.2.5.1.10.3 TACAN
	  sidc["G-C-OXAK--"] = {}; //2.X.2.5.1.10.4 TANKING
	  sidc["G-C-OXAF--"] = {}; //2.X.2.5.1.10.5 ANTISUBMARINE WARFARE FIXED WING
	  sidc["G-C-OXAH--"] = {}; //2.X.2.5.1.10.6 ANTISUBMARINE WARFARE ROTARY WING
	  sidc["G-C-OXAO--"] = {}; //2.X.2.5.1.10.7 TOMCAT
	  sidc["G-C-OXAR--"] = {}; //2.X.2.5.1.10.8 RESCUE
	  sidc["G-C-OXAP--"] = {}; //2.X.2.5.1.10.9 REPLENISH
	  sidc["G-C-OXAM--"] = {}; //2.X.2.5.1.10.10 MARSHALL
	  sidc["G-C-OXAS--"] = {}; //2.X.2.5.1.10.11 STRIKE IP
	  sidc["G-C-OXAD--"] = {}; //2.X.2.5.1.10.12 CORRIDOR TAB
	  sidc["G-C-OG----"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2 GENERAL OR UNSPECIFIED COMMAND AND CONTROL POINT
	  sidc["G-C-OGC---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.1 CHECKPOINT
	  sidc["G-C-OGP---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 40,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.2.2 CONTACT POINT
	  sidc["G-C-OGT---"] = {}; //2.X.2.5.2.3 COORDINATION POINT
	  sidc["G-C-OGD---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 115,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //2.X.2.5.2.4 DECISION POINT
	  sidc["G-C-OGL---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.5 LINKUP POINT
	  sidc["G-C-OGN---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.6 PASSAGE POINT
	  sidc["G-C-OGR---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.7 RALLY POINT
	  sidc["G-C-OGS---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.8 RELEASE POINT
	  sidc["G-C-OGI---"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //2.X.2.5.2.9 START POINT
	  sidc["G-C-OGW---"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 117,
	      fontsize: 50,
	    },
	  }; //2.X.2.5.2.10 WAY POINT
	  sidc["G-O-VA----"] = {}; //2.X.3.1.1 ARSON/FIRE
	  sidc["G-O-VR----"] = {}; //2.X.3.1.2 ARTILLERY/ARTILLERY FIRE
	  sidc["G-O-VE----"] = {}; //2.X.3.1.3 ASSASSINA TION/MURDER/ EXECUTION
	  sidc["G-O-VB----"] = {}; //2.X.3.1.4 BOMB/BOMBING
	  sidc["G-O-VY----"] = {}; //2.X.3.1.5 BOOBYTRAP
	  sidc["G-O-VD----"] = {}; //2.X.3.1.6 DRIVE-BY SHOOTING
	  sidc["G-O-VI----"] = {}; //2.X.3.1.7 INDIRECT FIRE (UNSPECIFIED TYPE)
	  sidc["G-O-VM----"] = {}; //2.X.3.1.8 MORTAR/MORTAR FIRE
	  sidc["G-O-VK----"] = {}; //2.X.3.1.9 ROCKET/ROCKET FIRE
	  sidc["G-O-VS----"] = {}; //2.X.3.1.10 SNIPING
	  sidc["G-O-VP----"] = {}; //2.X.3.1.11 POISONING
	  sidc["G-O-VU----"] = {}; //2.X.3.1.12 AMBUSH
	  sidc["G-O-VC----"] = {}; //2.X.3.1.13 AMMUNITION CACHE
	  sidc["G-O-VH----"] = {}; //2.X.3.1.14 HELICOPTER (CIVILIAN BEING USED BY HOSTILE OR INSURGENTS
	  sidc["G-O-VF----"] = {}; //2.X.3.1.15 HOSTILE OR INSURGENT MOTORIZED INFANTRY
	  sidc["G-O-VO----"] = {}; //2.X.3.1.16 HOSTILE OR INSURGENT INFANTRY
	  sidc["G-O-VL----"] = {}; //2.X.3.1.17 RECONNAISSANCE/SURVEILLANC E
	  sidc["G-O-VX----"] = {}; //2.X.3.1.18 SIGNAL/RADIO STATION
	  sidc["G-O-VZ----"] = {}; //2.X.3.1.19 SUPPLY CACHE
	  sidc["G-O-LB----"] = {}; //2.X.3.2.1 BLACK LIST LOCATION
	  sidc["G-O-LG----"] = {}; //2.X.3.2.2 GRAY LIST LOCATION
	  sidc["G-O-LW----"] = {}; //2.X.3.2.3 WHITE LIST LOCATION
	  sidc["G-O-PR----"] = {}; //2.X.3.3.1 ROAD BLOCK
	  sidc["G-O-PRB---"] = {}; //2.X.3.3.1.1 ROAD BLOCK (UNDER CONSTRUCTION)
	  sidc["G-O-PT----"] = {}; //2.X.3.3.2 PATROLLING
	  sidc["G-O-PC----"] = {}; //2.X.3.3.3 RECRUITMENT (WILLING)
	  sidc["G-O-PCU---"] = {}; //2.X.3.3.3.1 RECRUITMENT (COERCED/IMPRESSED)
	  sidc["G-O-PD----"] = {}; //2.X.3.3.4 DEMONSTRATION
	  sidc["G-O-PM----"] = {}; //2.X.3.3.5 MINELAYING
	  sidc["G-O-PH----"] = {}; //2.X.3.3.6 PSYCHOLOGICAL OPERATIONS (PSYOP)
	  sidc["G-O-PHY---"] = {}; //2.X.3.3.6.1 PSYOP (TV AND RADIO PROPAGANDA)
	  sidc["G-O-PHW---"] = {}; //2.X.3.3.6.2 PSYOP (WRITTEN PROPAGANDA)
	  sidc["G-O-PHG---"] = {}; //2.X.3.3.6.3 WRITTEN PROPAGANDA
	  sidc["G-O-PHT---"] = {}; //2.X.3.3.6.4 HOUSE-TO-HOUSE PROPAGANDA
	  sidc["G-O-PG----"] = {}; //2.X.3.3.7 FORAGING/SEARCHING
	  sidc["G-O-PS----"] = {}; //2.X.3.3.8 SPY
	  sidc["G-O-PF----"] = {}; //2.X.3.3.9 FOOD DISTRIBUTION
	  sidc["G-O-PI----"] = {}; //2.X.3.3.10 MEDICAL TREATMENT FACILITY
	  sidc["G-O-PE----"] = {}; //2.X.3.3.11 ELECTRONIC WARFARE INTERCEPT
	  sidc["G-O-PX----"] = {}; //2.X.3.3.12 EXTORTION
	  sidc["G-O-PJV---"] = {}; //2.X.3.3.13.1 HIJACKING (VEHICLE)
	  sidc["G-O-PJA---"] = {}; //2.X.3.3.13.2 HIJACKING (AIRPLANE)
	  sidc["G-O-PJB---"] = {}; //2.X.3.3.13.3 HIJACKING (BOAT)
	  sidc["G-O-PK----"] = {}; //2.X.3.3.14 KIDNAPPING
	  sidc["G-O-PA----"] = {}; //2.X.3.3.15 ARREST
	  sidc["G-O-PO----"] = {}; //2.X.3.3.16 DRUG OPERATION
	  sidc["G-O-IR----"] = {}; //2.X.3.4.1 REFUGEES
	  sidc["G-O-IS----"] = {}; //2.X.3.4.2 SAFE HOUSE
	  sidc["G-O-IG----"] = {}; //2.X.3.4.3 GRAFFITI
	  sidc["G-O-IV----"] = {}; //2.X.3.4.4 V ANDALISM/RAPE/LOOT/ RANSACK/PLUNDER/SACK
	  sidc["G-O-IK----"] = {}; //2.X.3.4.5 KNOWN INSURGENT VEHICLE
	  sidc["G-O-ID----"] = {}; //2.X.3.4.6 DRUG VEHICLE
	  sidc["G-O-IF----"] = {}; //2.X.3.4.7 INTERNAL SECURITY FORCE
	}

	var tacticalpointsapp6 = {
	  type: "letter",
	  getMetadata: metadata$1,
	  getIcons: geticons$1,
	  iconParts: [icons$1],
	  labels: tacticalPoints$1,
	  icons: function tacticalPoints(sidc, bbox, icn, std2525) {
	    // Tactical Point Symbols =========================================================================
	    sidc["G-T-GD----"] = icn["TP.DESTROY"]; //2.X.1.1.9
	    bbox["G-T-GD----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-T-GI----"] = icn["TP.INTERDICT"]; //2.X.1.1.13
	    bbox["G-T-GI----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-T-GN----"] = icn["TP.NEUTRALIZE"]; //2.X.1.1.15
	    bbox["G-T-GN----"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	    sidc["G-C-MGPFE-"] = icn["TP.FIX ELECTRO-MAGNETIC"]; //2.X.2.1.1.1.1.2
	    sidc["G-C-MGPFA-"] = icn["TP.FIX ACOUSTIC"]; //2.X.2.1.1.1.1.2
	    sidc["G-C-MGPFO-"] = icn["TP.FIX ELECTRO-OPTICAL"]; //2.X.2.1.1.1.1.3
	    sidc["G-C-MGPI--"] = icn["TP.POINT OF INTEREST"]; //2.X.2.1.1.1.2
	    bbox["G-C-MGPI--"] = { x1: 50, x2: 150, y1: -25 };
	    sidc["G-C-MAAP--"] = icn["TP.AIR CONTROL POINT (ACP)"]; //2.X.2.1.2.1.1
	    bbox["G-C-MAAP--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-MAAC--"] = icn["TP.COMMUNICATIONS CHECKPOINT"]; //2.X.2.1.2.1.2
	    bbox["G-C-MAAC--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-MAAU--"] = icn["TP.PULL-UP POINT"]; //2.X.2.1.2.1.3
	    bbox["G-C-MAAU--"] = { x1: 50, x2: 240, y1: 50, y2: 150 };
	    sidc["G-C-MAAD--"] = icn["TP.DOWNED AIRCREW PICKUP POINT"]; //2.X.2.1.2.1.4
	    bbox["G-C-MAAD--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-MDN---"] = icn["TP.DUMMY MINEFIELD"]; //2.X.2.1.3.6
	    bbox["G-C-MDN---"] = { x1: 40, x2: 160, y1: -10, y2: 140 };
	    sidc["G-C-MMPT--"] = icn["TP.TARGET REFERENCE"]; //2.X.2.1.4.1.1
	    sidc["G-C-MMPO--"] = icn["TP.OBSERVATION POST/OUTPOST"]; //2.X.2.1.4.1.4
	    bbox["G-C-MMPO--"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-C-MMPOC-"] = icn["TP.COMBAT OUTPOST"]; //2.X.2.1.4.1.4.1
	    bbox["G-C-MMPOC-"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-C-MMPOR-"] = icn["TP.OBSERVATION POST/RECONNAISSANCE"]; //2.X.2.1.4.1.4.2
	    bbox["G-C-MMPOR-"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-C-MMPOF-"] = icn["TP.FORWARD OBSERVER POSITION"]; //2.X.2.1.4.1.4.3
	    bbox["G-C-MMPOF-"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-C-MMPOS-"] = icn["TP.SENSOR OUTPOST"]; //2.X.2.1.4.1.4.4
	    bbox["G-C-MMPOS-"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    sidc["G-C-MMPON-"] = icn["TP.CBRN OBSERVATION POST"]; //2.X.2.1.4.1.4.5
	    bbox["G-C-MMPON-"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	    // Go home APP6 you are drunk sidc['G-C-MMPON-'] = [];//2.X.2.1.4.1.4.6
	    // Go home APP6 you are drunk sidc['G-C-MMPON-'] = [];//2.X.2.1.4.1.4.7
	    sidc["G-C-MOPD--"] = icn["TP.POINT OF DEPARTURE"]; //2.X.2.1.5.1.1
	    bbox["G-C-MOPD--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BOATD-"] = icn["TP.FIXED AND PREFABRICATED"]; //2.X.2.2.1.3.3
	    bbox["G-C-BOATD-"] = { x1: 60, x2: 140, y1: 30 };
	    sidc["G-C-BOAB--"] = icn["TP.BOOBY TRAP"]; //2.X.2.2.1.4
	    sidc["G-C-BOAMA-"] = icn["TP.ANTIPERSONNEL (AP) MINES"]; //2.X.2.2.1.5.1
	    sidc["G-C-BOAMT-"] = icn["TP.ANTITANK MINE (AT)"]; //2.X.2.2.1.5.2
	    sidc["G-C-BOAMD-"] = icn["TP.(AT) ANTIHANDLING DEVICE"]; //2.X.2.2.1.5.3
	    bbox["G-C-BOAMD-"] = { x1: 60, x2: 140, y1: 40, y2: 195 };
	    sidc["G-C-BOAMC-"] = icn["TP.(AT) DIRECTIONAL"]; //2.X.2.2.1.5.4
	    bbox["G-C-BOAMC-"] = { x1: 60, x2: 140, y1: 10, y2: 140 };
	    sidc["G-C-BOAMU-"] = icn["TP.UNSPECIFIED MINE"]; //2.X.2.2.1.5.5
	    sidc["G-C-BOAMW-"] = icn["TP.WIDE AREA MINES"]; //2.X.2.2.1.5.7
	    sidc["G-C-BOAIP-"] = icn["TP.PLANNED MINEFIELD"]; //2.X.2.2.1.6.1
	    bbox["G-C-BOAIP-"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	    sidc["G-C-BOAIC-"] = icn["TP.MINEFIELDS STATIC"]; //2.X.2.2.1.6.2
	    bbox["G-C-BOAIC-"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	    sidc["G-C-BOAIN-"] = icn["TP.ANTITANK (AT) MINEFIELD"]; //2.X.2.2.1.6.5
	    bbox["G-C-BOAIN-"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	    sidc["G-C-BOAIS-"] = icn["TP.SCATTERABLE MINES"]; //2.X.2.2.1.6.6
	    bbox["G-C-BOAIS-"] = { x1: 40, x2: 160, y1: 20, y2: 140 };
	    sidc["G-C-BOAIH-"] = icn["TP.ANTIPERSONNEL (AP) MINEFIELD"]; //2.X.2.2.1.6.7 ANTIPERSONNEL (AP) MINEFIELD REINFORCED WITH SCATTERABLE WITH SELF-DESTRUCT DATE-TIME-GROUP
	    bbox["G-C-BOAIH-"] = { x1: 40, x2: 160, y1: 20, y2: 140 };
	    sidc["G-C-BOAID-"] = icn["TP.SCATTERABLE MINEFIELD WITH SELF-DESTRUCT"]; //2.X.2.2.1.6.8 SCATTERABLE MINEFIELD WITH SELF-DESTRUCT DATE-TIME-GROUP
	    bbox["G-C-BOAID-"] = { x1: 40, x2: 160, y1: 20, y2: 140 };
	    sidc["G-C-BOAV--"] = icn["TP.VOLCANO MINEFIELD"]; //2.X.2.2.1.7
	    bbox["G-C-BOAV--"] = { x1: 40, x2: 160, y1: 20, y2: 140 };
	    sidc["G-C-BYCG--"] = icn["TP.ENGINEER REGULATING POINT"]; //2.X.2.2.2.2.8
	    bbox["G-C-BYCG--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BSE---"] = icn["TP.EARTHWORK/FORTIFICATION"]; //2.X.2.2.3.1
	    sidc["G-C-BSF---"] = icn["TP.FORT"]; //2.X.2.2.3.2
	    sidc["G-C-BSH---"] = icn["TP.SURFACE SHELTER"]; //2.X.2.2.3.6
	    sidc["G-C-BSU---"] = icn["TP.UNDERGROUND SHELTER"]; //2.X.2.2.3.7
	    sidc["G-C-BWN---"] = icn["TP.NUCLEAR DETONATIONS GROUND ZERO"]; //2.X.2.2.4.2
	    bbox["G-C-BWN---"] = { x1: 60, x2: 140, y1: -20 };
	    sidc["G-C-BWE---"] = icn["TP.NUCLEAR DETONATIONS GROUND ZERO"]; //2.X.2.2.4.2
	    bbox["G-C-BWE---"] = { x1: 60, x2: 140, y1: -20 };
	    sidc["G-C-BWI---"] = icn["TP.NUCLEAR DETONATIONS GROUND ZERO PLANNED"]; //2.X.2.2.4.4
	    bbox["G-C-BWI---"] = { x1: 60, x2: 140, y1: -20 };
	    sidc["G-C-BWF---"] = icn["TP.NUCLEAR DETONATIONS GROUND ZERO PLANNED"]; //2.X.2.2.4.5
	    bbox["G-C-BWF---"] = { x1: 60, x2: 140, y1: -20 };
	    sidc["G-C-BWP---"] = icn["TP.NUCLEAR FALLOUT PRODUCING"]; //2.X.2.2.4.6
	    bbox["G-C-BWP---"] = { x1: 50, x2: 150, y1: -20 };
	    sidc["G-C-BWDP--"] = icn["TP.DECON SITE/POINT"]; //2.X.2.2.4.11.1
	    bbox["G-C-BWDP--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDA--"] = icn["TP.ALTERNATE DECON SITE/POINT"]; //2.X.2.2.4.11.2
	    bbox["G-C-BWDA--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDT--"] = icn["TP.DECON SITE/POINT (TROOPS)"]; //2.X.2.2.4.11.3
	    bbox["G-C-BWDT--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDE--"] = icn["TP.DECON SITE/POINT (EQUIPMENT)"]; //2.X.2.2.4.11.4
	    bbox["G-C-BWDE--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDS--"] = icn["TP.DECON SITE/POINT (EQUIPMENT AND TROOPS)"]; //2.X.2.2.4.11.5
	    bbox["G-C-BWDS--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDO--"] =
	      icn["TP.DECON SITE/POINT (OPERATIONAL DECONTAMINATION)"]; //2.X.2.2.4.11.6
	    bbox["G-C-BWDO--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDG--"] = icn["TP.DECON SITE/POINT (THOROUGH DECONTAMINATION)"]; //2.X.2.2.4.11.7
	    bbox["G-C-BWDG--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDEM-"] = icn["TP.DECON POINT (MAIN) EQUIPMENT"]; //2.X.2.2.4.11.8
	    bbox["G-C-BWDEM-"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-BWDTF-"] = icn["TP.DECON POINT (FORWARD) TROOPS"]; //2.X.2.2.4.11.9
	    bbox["G-C-BWDTF-"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-FSTP--"] = icn["TP.POINT/SINGLE TARGET"]; //2.X.2.3.1.1.1
	    sidc["G-C-FSS---"] = icn["TP.FIRE SUPPORT STATION"]; //2.X.2.3.1.2
	    sidc["G-C-FAU---"] = icn["TP.NUCLEAR TARGET"]; //2.X.2.3.3.9
	    sidc["G-C-SPA---"] = icn["TP.AMBULANCE EXCHANGE POINT"]; //2.X.2.4.1.1
	    bbox["G-C-SPA---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPC---"] = icn["TP.CANNIBALIZATION POINT"]; //2.X.2.4.1.2
	    bbox["G-C-SPC---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPY---"] = icn["TP.CASUALTY COLLECTION POINT"]; //2.X.2.4.1.3
	    bbox["G-C-SPY---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPT---"] = icn["TP.CIVILIAN COLLECTION POINT"]; //2.X.2.4.1.4
	    bbox["G-C-SPT---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPD---"] = icn["TP.DETAINEE COLLECTION POINT"]; //2.X.2.4.1.5
	    bbox["G-C-SPD---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPE---"] = icn["TP.EPW COLLECTION POINT"]; //2.X.2.4.1.6
	    bbox["G-C-SPE---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPL---"] = icn["TP.LOGISTICS RELEASE POINT"]; //2.X.2.4.1.7
	    bbox["G-C-SPL---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPM---"] = icn["TP.MAINTENANCE COLLECTION POINT"]; //2.X.2.4.1.8
	    bbox["G-C-SPM---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPR---"] = icn["TP.REARM, REFUEL AND RESUPPLY POINT"]; //2.X.2.4.1.9
	    bbox["G-C-SPR---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPU---"] = icn["TP.REFUEL ON THE MOVE POINT"]; //2.X.2.4.1.10
	    bbox["G-C-SPU---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPO---"] = icn["TP.TRAFFIC CONTROL POST"]; //2.X.2.4.1.11
	    bbox["G-C-SPO---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPI---"] = icn["TP.TRAILER TRANSFER POINT"]; //2.X.2.4.1.12
	    bbox["G-C-SPI---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPN---"] = icn["TP.UNIT MAINTENANCE COLLECTION POINT"]; //2.X.2.4.1.13
	    bbox["G-C-SPN---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQT--"] = icn["TP.SUPPLY POINT"]; //2.X.2.4.1.14.1
	    bbox["G-C-SPQT--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQA--"] = icn["TP.SP CLASS I"]; //2.X.2.4.1.14.2
	    bbox["G-C-SPQA--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQB--"] = icn["TP.SP CLASS II"]; //2.X.2.4.1.14.3
	    bbox["G-C-SPQB--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQC--"] = icn["TP.SP CLASS III"]; //2.X.2.4.1.14.4
	    bbox["G-C-SPQC--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQD--"] = icn["TP.SP CLASS IV"]; //2.X.2.4.1.14.5
	    bbox["G-C-SPQD--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQE--"] = icn["TP.SP CLASS V"]; //2.X.2.4.1.14.6
	    bbox["G-C-SPQE--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQF--"] = icn["TP.SP CLASS VI"]; //2.X.2.4.1.14.7
	    bbox["G-C-SPQF--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQG--"] = icn["TP.SP CLASS VII"]; //2.X.2.4.1.14.8
	    bbox["G-C-SPQG--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQH--"] = icn["TP.SP CLASS VIII"]; //2.X.2.4.1.14.9
	    bbox["G-C-SPQH--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQI--"] = icn["TP.SP CLASS IX"]; //2.X.2.4.1.14.10
	    bbox["G-C-SPQI--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPQJ--"] = icn["TP.SP CLASS X"]; //2.X.2.4.1.14.11
	    bbox["G-C-SPQJ--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPMA--"] = icn["TP.AMMUNITION SUPPLY POINT (ASP)"]; //2.X.2.4.1.15.1
	    bbox["G-C-SPMA--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-SPMT--"] = icn["TP.AMMUNITION TRANSFER POINT (ATP)"]; //2.X.2.4.1.15.2
	    bbox["G-C-SPMT--"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OX----"] = icn["TP.SPECIAL POINT"]; //2.X.2.5.1
	    bbox["G-C-OX----"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    sidc["G-C-OXRN--"] = icn["TP.NAVIGATIONAL REFERENCE"]; //2.X.2.5.1.1.1
	    bbox["G-C-OXRN--"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	    // Go home APP6 you are drunk sidc['G-C-OXRD--'] = [];//2.X.2.5.1.1.2 WRONG SIDC IN STANDARD
	    sidc["G-C-OXUD--"] = icn["TP.DATUM"]; //2.X.2.5.1.2.1
	    bbox["G-C-OXUD--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXUB--"] = icn["TP.BRIEF CONTACT"]; //2.X.2.5.1.2.2
	    bbox["G-C-OXUB--"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-C-OXUL--"] = icn["TP.LOST CONTACT"]; //2.X.2.5.1.2.3
	    bbox["G-C-OXUL--"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-C-OXUS--"] = icn["TP.SINKER"]; //2.X.2.5.1.2.4
	    bbox["G-C-OXUS--"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	    sidc["G-C-OXWA--"] = icn["TP.AIM POINT"]; //2.X.2.5.1.3.1
	    bbox["G-C-OXWA--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXWD--"] = icn["TP.DROP POINT"]; //2.X.2.5.1.3.2
	    bbox["G-C-OXWD--"] = { x1: 50, x2: 150, y1: 50, y2: 120 };
	    sidc["G-C-OXWE--"] = icn["TP.ENTRY POINT"]; //2.X.2.5.1.3.3
	    bbox["G-C-OXWE--"] = { x1: 50, x2: 150, y1: 50 };
	    sidc["G-C-OXWG--"] = icn["TP.GROUND ZERO"]; //2.X.2.5.1.3.4
	    bbox["G-C-OXWG--"] = { x1: 50, x2: 150, y1: 30 };
	    sidc["G-C-OXWM--"] = icn["TP.MSL DETECT POINT"]; //2.X.2.5.1.3.5
	    bbox["G-C-OXWM--"] = { x1: 50, x2: 150, y1: 30 };
	    sidc["G-C-OXWI--"] = icn["TP.IMPACT POINT"]; //2.X.2.5.1.3.6
	    bbox["G-C-OXWI--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXWP--"] = icn["TP.PREDICTED IMPACT POINT"]; //2.X.2.5.1.3.7
	    bbox["G-C-OXWP--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXY---"] = icn["TP.SONOBUOY"]; //2.X.2.5.1.4
	    bbox["G-C-OXY---"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYP--"] = icn["TP.SONOBUOY PATTERN CENTER"]; //2.X.2.5.1.4.1
	    bbox["G-C-OXYP--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYD--"] = icn["TP.SONOBUOY DIFAR"]; //2.X.2.5.1.4.2
	    bbox["G-C-OXYD--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYL--"] = icn["TP.SONOBUOY LOFAR"]; //2.X.2.5.1.4.3
	    bbox["G-C-OXYL--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYC--"] = icn["TP.SONOBUOY CASS"]; //2.X.2.5.1.4.4
	    bbox["G-C-OXYC--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYS--"] = icn["TP.SONOBUOY DICASS"]; //2.X.2.5.1.4.5
	    bbox["G-C-OXYS--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYB--"] = icn["TP.SONOBUOY BT"]; //2.X.2.5.1.4.6
	    bbox["G-C-OXYB--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYA--"] = icn["TP.SONOBUOY ANM"]; //2.X.2.5.1.4.7
	    bbox["G-C-OXYA--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYV--"] = icn["TP.SONOBUOY VLAD"]; //2.X.2.5.1.4.8
	    bbox["G-C-OXYV--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYT--"] = icn["TP.SONOBUOY ATAC"]; //2.X.2.5.1.4.9
	    bbox["G-C-OXYT--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYR--"] = icn["TP.SONOBUOY RO"]; //2.X.2.5.1.4.10
	    bbox["G-C-OXYR--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXYK--"] = icn["TP.SONOBUOY KINGPIN"]; //2.X.2.5.1.4.11
	    bbox["G-C-OXYK--"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	    sidc["G-C-OXN---"] = icn["TP.FORMATION"]; //2.X.2.5.1.5
	    bbox["G-C-OXN---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXH---"] = icn["TP.HARBOR"]; //2.X.2.5.1.6
	    bbox["G-C-OXH---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXHQ--"] = icn["TP.HARBOR POINT Q"]; //2.X.2.5.1.6.1
	    bbox["G-C-OXHQ--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXHA--"] = icn["TP.HARBOR POINT A"]; //2.X.2.5.1.6.2
	    bbox["G-C-OXHA--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXHY--"] = icn["TP.HARBOR POINT Y"]; //2.X.2.5.1.6.3
	    bbox["G-C-OXHY--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXHX--"] = icn["TP.HARBOR POINT X"]; //2.X.2.5.1.6.4
	    bbox["G-C-OXHX--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXR---"] = icn["TP.ROUTE"]; //2.X.2.5.1.7
	    bbox["G-C-OXR---"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	    sidc["G-C-OXRR--"] = icn["TP.ROUTE RENDEZVOUS"]; //2.X.2.5.1.7.1
	    bbox["G-C-OXRR--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-C-OXRD--"] = icn["TP.ROUTE DIVERSIONS"]; //2.X.2.5.1.7.2
	    bbox["G-C-OXRD--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-C-OXRW--"] = icn["TP.ROUTE WAYPOINT"]; //2.X.2.5.1.7.3
	    bbox["G-C-OXRW--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-C-OXRP--"] = icn["TP.ROUTE PIM"]; //2.X.2.5.1.7.4
	    bbox["G-C-OXRP--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-C-OXRT--"] = icn["TP.ROUTE POINT R"]; //2.X.2.5.1.7.5
	    bbox["G-C-OXRT--"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	    sidc["G-C-OXSTC-"] = icn["TP.COMBATANT STATION"]; //2.X.2.5.1.8.1
	    bbox["G-C-OXSTC-"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTCP"] = icn["TP.PICKET STATION"]; //2.X.2.5.1.8.1.1
	    bbox["G-C-OXSTCP"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTCA"] = icn["TP.ASW SHIP STATION"]; //2.X.2.5.1.8.1.2
	    bbox["G-C-OXSTCA"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTR-"] = icn["TP.REPLENISHMENT AT SEA (RAS) STATION"]; //2.X.2.5.1.8.2
	    bbox["G-C-OXSTR-"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTH-"] = icn["TP.RESCUE STATION"]; //2.X.2.5.1.8.3
	    bbox["G-C-OXSTH-"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTS-"] = icn["TP.SUBMARINE STATION"]; //2.X.2.5.1.8.4
	    bbox["G-C-OXSTS-"] = { x1: -15, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXSTSA"] = icn["TP.ASW SUBMARINE STATION"]; //2.X.2.5.1.8.5
	    bbox["G-C-OXSTSA"] = { x1: -115, x2: 140, y1: 60, y2: 140 };
	    sidc["G-C-OXS---"] = icn["TP.SEARCH"]; //2.X.2.5.1.9
	    bbox["G-C-OXS---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXSA--"] = icn["TP.SEARCH AREA"]; //2.X.2.5.1.9.1 TODO
	    bbox["G-C-OXSA--"] = { x1: 20, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXSD--"] = icn["TP.DIP POSITION"]; //2.X.2.5.1.9.2 TODO
	    bbox["G-C-OXSD--"] = { x1: 10, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXSC--"] = icn["TP.SEARCH CENTER"]; //2.X.2.5.1.9.3
	    bbox["G-C-OXSC--"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OXAC--"] = icn["TP.COMBAT AIR PATROL (CAP)"]; //2.X.2.5.1.10.1
	    bbox["G-C-OXAC--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAA--"] = icn["TP.AIRBORNE EARLY WARNING (AEW)"]; //2.X.2.5.1.10.2
	    bbox["G-C-OXAA--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAT--"] = icn["TP.TACAN"]; //2.X.2.5.1.10.3
	    bbox["G-C-OXAT--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAK--"] = icn["TP.TANKING"]; //2.X.2.5.1.10.4
	    bbox["G-C-OXAK--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAF--"] = icn["TP.ASW FIXED WING"]; //2.X.2.5.1.10.5
	    bbox["G-C-OXAF--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAH--"] = icn["TP.ROTARY WING"]; //2.X.2.5.1.10.6
	    bbox["G-C-OXAH--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAO--"] = icn["TP.TOMCAT"]; //2.X.2.5.1.10.7
	    bbox["G-C-OXAO--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAR--"] = icn["TP.RESCUE"]; //2.X.2.5.1.10.8
	    bbox["G-C-OXAR--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAP--"] = icn["TP.REPLENISH"]; //2.X.2.5.1.10.9
	    bbox["G-C-OXAP--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAM--"] = icn["TP.MARSHALL"]; //2.X.2.5.1.10.10
	    bbox["G-C-OXAM--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAS--"] = icn["TP.STRIKE IP"]; //2.X.2.5.1.10.11
	    bbox["G-C-OXAS--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OXAD--"] = icn["TP.CORRIDOR TAB POINT"]; //2.X.2.5.1.10.12
	    bbox["G-C-OXAD--"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	    sidc["G-C-OG----"] = icn["TP.ACTION POINT"]; //2.X.2.5.2
	    bbox["G-C-OG----"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGC---"] = icn["TP.ACTION POINT"]; //2.X.2.5.2.1
	    bbox["G-C-OGC---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGP---"] = icn["TP.CONTACT POINT"]; //2.X.2.5.2.2
	    bbox["G-C-OGP---"] = { x1: 55, x2: 145, y1: -10 };
	    sidc["G-C-OGT---"] = icn["TP.COORDINATION POINT"]; //2.X.2.5.2.3
	    bbox["G-C-OGT---"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	    sidc["G-C-OGD---"] = icn["TP.DECISION POINT"]; //2.X.2.5.2.4
	    bbox["G-C-OGD---"] = { x1: 30, x2: 170, y1: 25, y2: 160 };
	    sidc["G-C-OGL---"] = icn["TP.ACTION LINKUP POINT"]; //2.X.2.5.2.5
	    bbox["G-C-OGL---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGN---"] = icn["TP.ACTION PASSAGE POINT"]; //2.X.2.5.2.6
	    bbox["G-C-OGN---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGR---"] = icn["TP.ACTION RALLY POINT"]; //2.X.2.5.2.7
	    bbox["G-C-OGR---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGS---"] = icn["TP.ACTION RELEASE POINT"]; //2.X.2.5.2.8
	    bbox["G-C-OGS---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGI---"] = icn["TP.ACTION START POINT"]; //2.X.2.5.2.9
	    bbox["G-C-OGI---"] = { x1: 60, x2: 140, y1: -60 };
	    sidc["G-C-OGW---"] = icn["TP.WAYPOINT"]; //2.X.2.5.2.10
	    bbox["G-C-OGW---"] = { x1: 60, x2: 140, y1: 60, y2: 140 };
	    sidc["G-O-VA----"] = icn["TP.FIRE"]; //2.X.3.1.1
	    sidc["G-O-VR----"] = icn["GR.EQ.HOWITZER"]; //2.X.3.1.2
	    sidc["G-O-VE----"] = icn["ST.IC.KILLING VICTIM"]; //2.X.3.1.3
	    sidc["G-O-VB----"] = icn["AIR.MISSILE.IC.BOMB"]; //2.X.3.1.4
	    sidc["G-O-VY----"] = icn["ST.IC.BOOBY TRAP"]; //2.X.3.1.5
	    sidc["G-O-VD----"] = icn["ST.IC.DRIVE-BY SHOOTING"]; //2.X.3.1.6
	    sidc["G-O-VI----"] = icn["TP.INDIRECT FIRE"]; //2.X.3.1.7
	    sidc["G-O-VM----"] = icn["GR.EQ.MORTAR"]; //2.X.3.1.8
	    sidc["G-O-VK----"] = icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"]; //2.X.3.1.9
	    sidc["G-O-VS----"] = icn["ST.IC.SNIPING"]; //2.X.3.1.10
	    sidc["G-O-VP----"] = icn["ST.IC.POISONING"]; //2.X.3.1.11
	    sidc["G-O-VU----"] = icn["TP.AMBUSH"]; //2.X.3.1.12
	    sidc["G-O-VC----"] = icn["GR.IC.FF.CLASS V"]; //2.X.3.1.13
	    sidc["G-O-VH----"] = icn["AR.I.FF.CIVILIAN ROTARY WING"]; //2.X.3.1.14
	    sidc["G-O-VF----"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.FF.MOTORIZED"]]; //2.X.3.1.15
	    sidc["G-O-VO----"] = icn["GR.IC.FF.INFANTRY"]; //2.X.3.1.16
	    sidc["G-O-VL----"] = icn["GR.IC.FF.RECONNAISSANCE"]; //2.X.3.1.17
	    sidc["G-O-VX----"] = icn["GR.IC.FF.SIGNAL"]; //2.X.3.1.18
	    sidc["G-O-VZ----"] = icn["GR.IC.FF.SUPPLY"]; //2.X.3.1.19
	    sidc["G-O-LB----"] = icn["ST.IC.BLACK LIST LOCATION"]; //2.X.3.2.1
	    sidc["G-O-LG----"] = icn["ST.IC.GRAY LIST LOCATION"]; //2.X.3.2.2
	    sidc["G-O-LW----"] = icn["ST.IC.WHITE LIST LOCATION"]; //2.X.3.2.3
	    sidc["G-O-PR----"] = icn["TP.ROAD BLOCK"]; //2.X.3.3.1
	    sidc["G-O-PRB---"] = icn["TP.ROAD BLOCK (UNDER CONSTRUCTION)"]; //2.X.3.3.1.1
	    sidc["G-O-PT----"] = icn["ST.IC.PATROLLING"]; //2.X.3.3.2
	    sidc["G-O-PC----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.WILLING"]]; //2.X.3.3.3
	    sidc["G-O-PCU---"] = [
	      icn["ST.IC.INDIVIDUAL"],
	      icn["ST.M1.COERCED/IMPRESSED"],
	    ]; //2.X.3.3.3.1
	    sidc["G-O-PD----"] = icn["ST.IC.DEMONSTRATION"]; //2.X.3.3.4
	    sidc["G-O-PM----"] = icn["ST.IC.MINE LAYING"]; //2.X.3.3.5
	    sidc["G-O-PH----"] = icn["ST.IC.PSYCHOLOGICAL OPERATIONS"]; //2.X.3.3.6
	    sidc["G-O-PHY---"] =
	      icn["ST.IC.RADIO AND TELEVISION PSYCHOLOGICAL OPERATIONS"]; //2.X.3.3.6.1
	    sidc["G-O-PHW---"] = [
	      icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	      icn["ST.M1.WRITTEN PSYCHOLOGICAL OPERATIONS"],
	    ]; //2.X.3.3.6.2
	    sidc["G-O-PHG---"] = [
	      icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	      icn["ST.M1.WRITTEN PSYCHOLOGICAL OPERATIONS"],
	    ]; //2.X.3.3.6.3
	    sidc["G-O-PHT---"] = [
	      icn["ST.IC.PSYCHOLOGICAL OPERATIONS"],
	      icn["ST.M1.HOUSE-TO-HOUSE"],
	    ]; //2.X.3.3.6.4
	    sidc["G-O-PG----"] = icn["ST.IC.SEARCHING"]; //2.X.3.3.7
	    sidc["G-O-PS----"] = icn["ST.IC.SPY"]; //2.X.3.3.8
	    sidc["G-O-PF----"] = icn["ST.IC.FOOD DISTRIBUTION"]; //2.X.3.3.9
	    sidc["G-O-PI----"] = icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"]; //2.X.3.3.10
	    sidc["G-O-PE----"] = [
	      icn["GR.IC.ELECTRONIC WARFARE"],
	      icn["GR.IC.FF.INTERCEPT"],
	    ]; //2.X.3.3.11
	    sidc["G-O-PX----"] = icn["ST.IC.EXTORTION"]; //2.X.3.3.12
	    sidc["G-O-PJV---"] = [
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ]; //2.X.3.3.13.1
	    sidc["G-O-PJA---"] = [
	      icn["ST.IC.HIJACKING (AIRPLANE)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ]; //2.X.3.3.13.2
	    sidc["G-O-PJB---"] = [
	      icn["ST.IC.HIJACKING (BOAT)"],
	      icn["ST.M1.HIJACKING/HIJACKED"],
	    ]; //2.X.3.3.13.3
	    sidc["G-O-PK----"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.KIDNAPPING"]]; //2.X.3.3.14
	    sidc["G-O-PA----"] = icn["ST.IC.ARREST"]; //2.X.3.3.15
	    sidc["G-O-PO----"] = icn["ST.IC.DRUG RELATED ACTIVITIES"]; //2.X.3.3.16
	    sidc["G-O-IR----"] = icn["ST.IC.GROUP"]; //2.X.3.4.1
	    sidc["G-O-IS----"] = icn["ST.IC.SAFE HOUSE"]; //2.X.3.4.2
	    sidc["G-O-IG----"] = icn["ST.IC.GRAFFITI"]; //2.X.3.4.3
	    sidc["G-O-IV----"] = icn["ST.IC.VANDALISM/LOOT/RANSACK/PLUNDER/SACK"]; //2.X.3.4.4
	    sidc["G-O-IK----"] = icn["ST.IC.KNOWN INSURGENT VEHICLE"]; //2.X.3.4.5
	    sidc["G-O-ID----"] = [
	      icn["ST.IC.KNOWN INSURGENT VEHICLE"],
	      icn["ST.M1.DRUG"],
	    ]; //2.X.3.4.6
	    sidc["G-O-IF----"] = icn["ST.IC.INTERNAL SECURITY FORCE"]; //2.X.3.4.7
	  },
	};

	/* ***************************************************************************************
	Letter based SIDC
	*************************************************************************************** */

	const app6b = [
	  space$1,
	  air$1,
	  ground,
	  equipment,
	  installations,
	  sea$1,
	  subsurface$1,
	  sof,
	  tacticalpointsapp6,
	];
	const std2525b = [
	  space$1,
	  air$1,
	  ground,
	  equipment,
	  installations,
	  sea$1,
	  subsurface$1,
	  sof,
	  signalsIntelligence,
	  stabilityoperations,
	  std2525bextra,
	  tacticalpoints2525,
	];
	const std2525c = [
	  space$1,
	  air$1,
	  ground,
	  equipment,
	  installations,
	  sea$1,
	  subsurface$1,
	  sof,
	  signalsIntelligence,
	  stabilityoperations,
	  emergencymanagementsymbols,
	  tacticalpoints2525,
	];

	//import { ms } from "../ms.js";
	function metadata(ms, metadata, mapping) {
	  const version = this.options.sidc.substr(0, 2);
	  //metadata.v13 = version > 13;
	  const standardIdentity1 = this.options.sidc.substr(2, 1);
	  const standardIdentity2 = this.options.sidc.substr(3, 1);
	  const symbolSet = this.options.sidc.substr(4, 2);
	  const status = this.options.sidc.substr(6, 1);
	  const headquartersTaskForceDummy = this.options.sidc.substr(7, 1);
	  const echelonMobility = this.options.sidc.substr(8, 2);
	  const frameshape = this.options.sidc.substr(22, 1) || "0";

	  const affiliationMapping = {
	    0: "Unknown",
	    1: "Unknown",
	    2: "Friend",
	    3: "Friend",
	    4: "Neutral",
	    5: "Hostile",
	    6: "Hostile"
	  };

	  if (version == "10" || version == "11" || version == "12") {
	    metadata.edition = "D";
	  }
	  if (version == "13" || version == "14") {
	    metadata.edition = "E";
	  }

	  if (version >= 13 && standardIdentity2 == 5) {
	    metadata.suspect = true;
	  }

	  const dimensionMapping = {
	    "00": "Sea",
	    "01": "Air",
	    "02": "Air",
	    "05": "Air",
	    "06": "Air",
	    10: "Ground",
	    11: "Ground",
	    12: "Ground",
	    15: "Ground",
	    20: "Ground",
	    30: "Sea",
	    35: "Subsurface",
	    36: "Subsurface",
	    39: "Subsurface",
	    40: "Ground",
	    50: "Air",
	    51: "Air",
	    52: "Ground",
	    53: "Sea",
	    54: "Subsurface",
	    60: "Ground"
	  };

	  const functionid = (metadata.functionid = this.options.sidc.substr(10, 10));
	  metadata._modifier1 =
	    (this.options.sidc.substr(20, 1) || "0") +
	    (functionid.substr(6, 2) || "00");
	  metadata._modifier2 =
	    (this.options.sidc.substr(21, 1) || "0") +
	    (functionid.substr(8, 2) || "00");

	  metadata.context = mapping.context[parseInt(this.options.sidc.substr(2, 1))];
	  metadata.affiliation = affiliationMapping[standardIdentity2];
	  metadata.dimension = dimensionMapping[symbolSet] || "";

	  // Not equipment symbolsets
	  if (
	    symbolSet == "10" ||
	    symbolSet == "11" ||
	    symbolSet == "25" ||
	    symbolSet == "27" ||
	    symbolSet == "40"
	  )
	    metadata.unit = true;

	  //SymbolSets in Space
	  if (symbolSet == "05" || symbolSet == "06" || symbolSet == "50")
	    metadata.space = true;
	  //SymbolSets that are Activities
	  if (symbolSet == "40") metadata.activity = true;
	  //SymbolSets that are landequipment
	  if (symbolSet == "15") metadata.landequipment = true;
	  //SymbolSets that are Installations
	  if (symbolSet == "20") metadata.installation = true;
	  //SymbolSets that are control-measure
	  if (symbolSet == "25") metadata.controlMeasure = true;
	  //SymbolSets in Cyberpace
	  if (symbolSet == "60") metadata.cyberspace = true;
	  //Sea Mines with MEDAL icn
	  if (symbolSet == "36" && this.style.alternateMedal === false)
	    metadata.fill = false;
	  //Sea own track
	  if (symbolSet == "30" && functionid.substr(0, 6) == 150000)
	    metadata.frame = false;

	  //Planned/Anticipated/Suspect symbols should have a dashed outline
	  if (status == "1") metadata.notpresent = ms._dashArrays.anticipated;
	  if (
	    standardIdentity2 == "0" ||
	    standardIdentity2 == "2" ||
	    standardIdentity2 == "5"
	  )
	    metadata.notpresent = ms._dashArrays.pending;

	  //All ETC/POSCON tracks shall have a pending standard identity frame.
	  //All fused tracks shall have a pending standard identity frame.
	  if (symbolSet == "30" && functionid.substr(0, 6) == 160000)
	    metadata.notpresent = ms._dashArrays.pending;
	  if (symbolSet == "35" && functionid.substr(0, 6) == 140000)
	    metadata.notpresent = ms._dashArrays.pending;
	  if (symbolSet == "35" && functionid.substr(0, 6) == 150000)
	    metadata.notpresent = ms._dashArrays.pending;

	  //Should it have a Condition Bar
	  if (status == "2" || status == "3" || status == "4" || status == "5")
	    metadata.condition = mapping.status[parseInt(status)];

	  //First save the dimensionType and affiliationType before we modifies it...
	  metadata.baseDimension = metadata.dimension;
	  metadata.baseAffilation = metadata.affiliation;

	  //Joker and faker should have the shape of friendly
	  if (standardIdentity2 == "5" && standardIdentity1 == "1")
	    metadata.joker = true;
	  if (standardIdentity2 == "6" && standardIdentity1 == "1")
	    metadata.faker = true;
	  if (metadata.joker || metadata.faker) {
	    metadata.affiliation = mapping.affiliation[1];
	  }

	  if (symbolSet == "00") metadata.dimensionUnknown = true;

	  //If battle dimension is unknown, standard identity is Exersize and other than Unknown we should not have a symbol
	  if (
	    symbolSet == "00" &&
	    standardIdentity1 == "1" &&
	    metadata.affiliation != "Unknown"
	  )
	    metadata.affiliation = "";

	  //Land Dismounted Individual should have special icons
	  if (symbolSet == "27") {
	    metadata.dimension = "LandDismountedIndividual";
	    metadata.dismounted = true;
	  }

	  //Ground Equipment should have the same geometry as sea Friend...
	  //Signal INTELLIGENCE Ground should have the same geometry as sea Friend...
	  if (symbolSet == "15" || symbolSet == "52")
	    metadata.dimension = mapping.dimension[2];

	  //Civilian stuff
	  if (
	    (symbolSet == "01" && functionid.substring(0, 2) == "12") ||
	    (symbolSet == "05" && functionid.substring(0, 2) == "12") ||
	    symbolSet == "11" ||
	    (symbolSet == "12" && functionid.substring(0, 2) == "12") ||
	    (symbolSet == "15" && functionid.substring(0, 2) == "16") ||
	    (symbolSet == "30" && functionid.substring(0, 2) == "14") ||
	    (symbolSet == "35" && functionid.substring(0, 2) == "12")
	  ) {
	    metadata.civilian = true;
	  }

	  // Frame shape overrides 2525E
	  if (frameshape != "0") {
	    metadata.civilian = false;
	    metadata.cyberspace = false;
	    metadata.installation = false;
	    metadata.landequipment = false;
	    metadata.activity = false;
	    metadata.space = false;
	    metadata.unit = false;
	    metadata.cyberspace = false;
	    switch (frameshape) {
	      case "1": // Space
	        metadata.dimension = "Air";
	        metadata.space = true;
	        break;
	      case "2": // Air
	        metadata.dimension = "Air";
	        break;
	      case "3": // Land Unit
	        metadata.dimension = "Ground";
	        metadata.unit = true;
	        break;
	      case "4": // Land Equipment/Sea Surface
	        metadata.dimension = "Sea";
	        metadata.landequipment = true;
	        break;
	      case "5": // Land Installation
	        metadata.dimension = "Ground";
	        metadata.installation = true;
	        break;
	      case "6": // Dismounted Individuals
	        metadata.dimension = "LandDismountedIndividual";
	        metadata.dismounted = true;
	        break;
	      case "7": // Sea Subsurface
	        metadata.dimension = "Subsurface";
	        break;
	      case "8": // Activity/Event
	        metadata.dimension = "Ground";
	        metadata.activity = true;
	        metadata.unit = true;
	        break;
	      case "9": // Cyberspace
	        metadata.dimension = "Ground";
	        metadata.cyberspace = false;
	        metadata.unit = true;
	        break;
	    }
	  }
	  if (frameshape == "A") metadata.frame = false;

	  //Setting up Headquarters/task force/dummy
	  if (["1", "3", "5", "7"].indexOf(headquartersTaskForceDummy) > -1)
	    metadata.feintDummy = true;
	  if (["2", "3", "6", "7"].indexOf(headquartersTaskForceDummy) > -1)
	    metadata.headquarters = true;
	  if (["4", "5", "6", "7"].indexOf(headquartersTaskForceDummy) > -1)
	    metadata.taskForce = true;

	  //Setting up Echelon/Mobility/Towed Array Amplifier
	  if (echelonMobility <= 30) {
	    metadata.echelon = mapping.echelonMobility[echelonMobility];
	  }
	  if (echelonMobility >= 30 && echelonMobility < 70) {
	    metadata.mobility = mapping.echelonMobility[echelonMobility];
	  }
	  if (echelonMobility >= 70 && echelonMobility < 80) {
	    metadata.leadership = mapping.echelonMobility[echelonMobility];
	  }

	  return metadata;
	}

	function geticons(ms, symbolSet, iconParts, STD2525, edition) {
	  const iconSIDC = {};
	  const iconModifier1 = {};
	  const iconModifier2 = {};
	  const iconBbox = {};

	  for (const i in ms._iconSIDC.number) {
	    if (!ms._iconSIDC.number.hasOwnProperty(i)) continue;
	    ms._iconSIDC.number[i].call(
	      this,
	      iconSIDC,
	      iconModifier1,
	      iconModifier2,
	      iconBbox,
	      symbolSet,
	      iconParts,
	      STD2525,
	      edition
	    );
	  }
	  return {
	    icons: iconSIDC,
	    m1: iconModifier1,
	    m2: iconModifier2,
	    bbox: iconBbox,
	  };
	}

	function icons (
	  iconParts,
	  metadata,
	  colors,
	  STD2525,
	  monoColor,
	  alternateMedal
	) {
	  /*
	  iconParts
	  The existing object of icon parts
	  
	  metadata
	  properties object
	  
	  colors
	  color object
	  
	  STD2525
	  Is it 2525 then true, otherwise false
	  
	  alternateMedal
	  true/false for sea mine stuff
	  */

	  //const frame = metadata.frame;
	  const affiliation = metadata.affiliation || "Friend";
	  //const baseGeometry = metadata.baseGeometry;
	  //const numberSIDC = metadata.numberSIDC;
	  //const fillColor = colors.fillColor[affiliation];
	  const iconColor = colors.iconColor[affiliation];
	  //const iconFillColor = colors.iconFillColor[affiliation];
	  //  const none = colors.none[affiliation];
	  //const black = colors.black[affiliation];
	  //const white = colors.white[affiliation];

	  //const numberSIDC = metadata.numberSIDC;
	  const icn = {};

	  icn["COM.M1.UNMANNED AERIAL VEHICLE(UAV)"] = {
	    type: "path",
	    stroke: false,
	    d: "m 80,65 20,13 20,-13 0,-5 -20,10 -20,-10 z",
	  };
	  //Robotic
	  icn["COM.M1.ROBOTIC"] = {
	    type: "path",
	    d: "m 100,52.7 14.9,14.8 c 0.4,-0.3 0.9,-0.4 1.4,-0.4 1.5,0 2.7,1.2 2.7,2.7 0,1.4 -1.2,2.7 -2.7,2.7 -1.5,0 -2.7,-1.3 -2.7,-2.7 0,-0.4 0.1,-0.7 0.2,-1 l -10.4,-5.2 -2.5,8.6 c 0.2,0.1 0.4,0.2 0.6,0.3 0.7,0.5 1.2,1.3 1.2,2.3 0,1.5 -1.2,2.7 -2.7,2.7 -0.55,0 -1.06,-0.2 -1.49,-0.5 -0.73,-0.4 -1.22,-1.3 -1.22,-2.2 0,-1.2 0.77,-2.2 1.85,-2.6 l -2.53,-8.6 -10.42,5.2 c 0.12,0.3 0.18,0.6 0.18,1 0,1.5 -1.21,2.7 -2.7,2.7 -1.49,0 -2.7,-1.2 -2.7,-2.7 0,-1.5 1.21,-2.7 2.7,-2.7 0.52,0 1.01,0.1 1.42,0.4 l 14.9,-14.8 0,0 0,0 z",
	    stroke: false,
	  };
	  //Fixed Wing
	  icn["COM.M1.FIXED WING"] = {
	    type: "path",
	    d: "m 100,70 22,-8.7 c 11,0 11,17.4 0,17.4 L 100,70 78,78.7 c -10.9,0 -10.9,-17.4 0,-17.4 z",
	  };
	  //Rotary Wing
	  icn["COM.M1.ROTARY WING"] = { type: "path", d: "m 75,60 0,15 50,-15 0,15 z" };
	  //Tilt-Rotor
	  icn["COM.M1.TILT ROTOR"] = textm1("TR");
	  icn["COM.M1.VTOL"] = textm1("VTOL");
	  icn["COM.M1.ATTACK"] = textm1("A");
	  icn["COM.M1.ARMORED"] = {
	    type: "path",
	    fill: false,
	    d: "m 90,60 20,0 c 10,0 10,15 0,15 L 90,75 C 80,75 80,60 90,60",
	  };

	  icn["COM.M1.BALLISTIC MISSILE"] = textm1("BM");
	  icn["COM.M1.CARGO"] = {
	    type: "path",
	    fill: false,
	    d: "m 100,60 0,15 -15,0 0,-15 30,0 0,15 -15,0",
	  };
	  icn["COM.M1.UTILITY"] = textm1("U");
	  icn["COM.M1.LIGHT"] = textm1("L");
	  icn["COM.M1.MEDIUM"] = textm1("M");
	  icn["COM.M1.HEAVY"] = textm1("H");
	  icn["COM.M1.CYBERSPACE"] = textm1("CYB");
	  icn["COM.M1.COMMAND POST NODE"] = textm1("CPN");
	  icn["COM.M1.JOINT NETWORK NODE"] = textm1("JNN");
	  icn["COM.M1.RETRANSMISSION SITE"] = textm1("RTNS");
	  icn["COM.M1.BRIGADE"] = {
	    type: "path",
	    fill: false,
	    d: "m 107.5,62.5 -15,15  m 0,-15 15,15",
	  };
	  icn["COM.M1.BRIDGE"] = {
	    type: "path",
	    fill: false,
	    d: "m 121,78 -7,-6 H 86 l -7,6  m 42,-18 -7,7 H 86 l -7,-7",
	  };
	  icn["COM.M1.CLOSE PROTECTION"] = textm1("CLP");
	  icn["COM.M1.COMBAT"] = textm1("CBT");
	  icn["COM.M1.COMMAND AND CONTROL"] = textm1("C2");
	  icn["COM.M1.CROWD AND RIOT CONTROL"] = textm1("CRC");
	  icn["COM.M1.EOD"] = textm1("EOD");
	  icn["COM.M1.ISR"] = textm1("ISR");
	  icn["COM.MQ.LASER"] = {
	    type: "path",
	    fill: false,
	    d: "M 132,70.8 H 114 L 110,78 108,63.6 104,78 100,63.6 96.5,70.8 H 85.7 L 82.1,78 78.5,63.6 74.9,78 71.3,63.6 67.7,78  m 56.3,-14.4 8,7.2 -8,7.2",
	  };
	  icn["COM.M1.MAINTENANCE"] = {
	    type: "path",
	    fill: false,
	    d: "m 83,70 h 34  m 8,-7 c -10,0 -10,14 0,14  M 75,63 c 10,0 10,14 0,14",
	  };
	  icn["COM.M1.MEDICAL"] = {
	    type: "path",
	    stroke: false,
	    d: "m 95.3,55 h 9.7 v 6.8 h 7 v 9.4 h -7 V 78 h -9.7 v -6.8 h -6.8 v -9.4 h 6.8 z",
	  };

	  icn["COM.M1.SEARCH AND RESCUE"] = textm1("SAR");
	  icn["COM.M1.SECURITY"] = textm1("SEC");
	  icn["COM.M1.SNIPER"] = {
	    type: "path",
	    d: "m 75,62 h 20  m 5,16 V 62.1  M 125,62 h -20",
	    fill: false,
	  };
	  icn["COM.M1.SPECIAL OPERATION FORCES"] = textm1("SOF");
	  icn["COM.M1.SWAT"] = textm1("SWAT");
	  icn["COM.M1.GUIDED MISSILE"] = textm1("G");
	  icn["COM.M1.OTHER GUIDED MISSILE"] = textm1("GM");
	  icn["COM.M1.PETROLEUM"] = {
	    type: "path",
	    d: "M 100,79 V 69 L 91,57 h 18 l -9,12",
	    fill: false,
	  };
	  icn["COM.M1.WATER"] = {
	    type: "path",
	    d: "m 92,59 h 16  m -8,9.7 V 59  M 75,69 h 40 c 10,0 15,5 15,10",
	    fill: false,
	  };
	  icn["COM.M1.WEAPON"] = textm1("WPN");
	  icn["COM.M1.CHEMICAL"] = textm1("C");
	  icn["COM.M1.BIOLOGICAL"] = textm1("B");
	  icn["COM.M1.RADIOLOGICAL"] = textm1("R");
	  icn["COM.M1.NUKLEAR"] = textm1("N");
	  icn["COM.M1.DECONTAMINATION"] = textm1("D");
	  icn["COM.M1.CIVILIAN"] = textm1("CIV");
	  icn["COM.M1.GOVERNMENT"] = textm1("GO");
	  icn["COM.M1.ACCIDENT"] = textm1("ACC");
	  icn["COM.M1.ASSASSINATION"] = textm1("AS");
	  icn["COM.M1.EXECUTION"] = textm1("EX");
	  icn["COM.M1.KIDNAPPING"] = textm1("KNP");
	  icn["COM.M1.PIRACY"] = textm1("PI");
	  icn["COM.M1.RAPE"] = textm1("RA");
	  icn["COM.M1.ANTISUBMARINE WARFARE"] = textm1("ASW");
	  icn["COM.M1.ESCORT"] = textm1("E");
	  icn["COM.M1.MINE COUNTERMEASURES"] = textm1("MCM");
	  icn["COM.M1.MINE WARFARE"] = textm1(STD2525 ? "MIW" : "MW");
	  icn["COM.M1.SURFACE WARFARE"] = textm1("SUW");
	  icn["COM.M1.INDEPENDENT COMMAND"] = {
	    type: "path",
	    d: "m 110,59 v 16  m -8,-8 h 16  M 90,59 v 16  m 8,-8 H 82",
	    fill: false,
	  };
	  icn["COM.M1.COMPANY"] = {
	    type: "path",
	    fill: false,
	    d: "M 100,59.6 V 78",
	  };
	  icn["COM.M1.PLATOON"] = [
	    { type: "circle", stroke: false, cx: 80, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 100, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 120, cy: 68, r: 8 },
	  ];
	  icn["COM.M1.REGIMENT"] = {
	    type: "path",
	    fill: false,
	    d: "m 110,60 v 18 0  M 90,60 v 18  m 10,-18 v 18",
	  };
	  icn["COM.M1.SECTION"] = [
	    { type: "circle", stroke: false, cx: 90, cy: 68, r: 8 },
	    { type: "circle", stroke: false, cx: 110, cy: 68, r: 8 },
	  ];
	  icn["COM.M1.SQUAD"] = {
	    type: "circle",
	    stroke: false,
	    cx: 100,
	    cy: 68,
	    r: 8,
	  };
	  icn["COM.M1.TEAM"] = [
	    { type: "circle", fill: false, cx: 100, cy: 65, r: 10 },
	    { type: "path", d: "m 90,75 l20,-20" },
	  ];
	  icn["COM.M1.BATTALION"] = {
	    type: "path",
	    fill: false,
	    d: "m 105,60 v 18 0  M 95,60 v 18",
	  };
	  icn["COM.M1.HIJACKER"] = textm1("HIJ");
	  icn["COM.M1.ELECTROMAGNETIC WARFARE"] = textm1("EW");

	  icn["COM.M2.AIRBORNE"] = {
	    type: "path",
	    d: "M75,140 C75,125 100,125 100,140 C100,125 125,125 125,140",
	    fill: false,
	  };
	  icn["COM.M2.BICYCLE EQUIPPED"] = {
	    type: "circle",
	    cx: 100,
	    cy: 132,
	    r: 11,
	    fill: false,
	  };
	  icn["COM.M2.RAILROAD"] = [
	    { type: "path", d: "M65,125 l70,0", fill: false },
	    { type: "circle", fill: false, cx: 70, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 80, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 120, cy: 130, r: 5 },
	    { type: "circle", fill: false, cx: 130, cy: 130, r: 5 },
	  ];
	  icn["COM.M2.FIXED WING"] = {
	    type: "path",
	    d: "m 100,130 22,-9 c 11,0 11,18 0,18 l -22,-9 -22,9 c -10.9,0 -10.9,-18 0,-18 z",
	  };
	  //Rotary Wing
	  icn["COM.M2.ROTARY WING"] = {
	    type: "path",
	    d: "m 75,122 v 15 l 50,-15 v 15 z",
	  };
	  icn["COM.M2.SKI"] = {
	    type: "path",
	    d: "m 95,145 -9,-8  m 28,0 -9,8  m -15,-24 21,22  m -1,-22 -21,22",
	    fill: false,
	  };
	  icn["COM.M2.TRACKED"] = {
	    type: "path",
	    d: "m 90,125 h 20 c 10,0 10,15 0,15 H 90 c -10,0 -10,-15 0,-15",
	    fill: false,
	  };
	  icn["COM.M2.WHEELED LIMITED"] = [
	    { type: "circle", cx: 80, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 120, cy: 130, r: 7, fill: false },
	  ];
	  icn["COM.M2.WHEELED"] = [
	    { type: "circle", cx: 75, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 100, cy: 130, r: 7, fill: false },
	    { type: "circle", cx: 125, cy: 130, r: 7, fill: false },
	  ];
	  icn["COM.M2.ROBOTIC"] = {
	    type: "path",
	    d: "M100,121.68L114.895,136.459C115.309,136.201 115.798,136.052 116.321,136.052C117.812,136.052 119.022,137.262 119.022,138.753C119.022,140.243 117.812,141.454 116.321,141.454C114.831,141.454 113.62,140.243 113.62,138.753C113.62,138.407 113.686,138.076 113.805,137.772L103.378,132.6L100.851,141.224C101.072,141.298 101.28,141.4 101.471,141.526C102.211,142.008 102.701,142.843 102.701,143.791C102.701,145.281 101.491,146.492 100,146.492C99.451,146.492 98.939,146.327 98.512,146.045C97.776,145.562 97.29,144.73 97.29,143.785C97.29,142.592 98.064,141.579 99.138,141.222L96.613,132.606L86.186,137.778C86.305,138.082 86.37,138.413 86.37,138.759C86.37,140.25 85.16,141.46 83.669,141.46C82.179,141.46 80.969,140.25 80.969,138.759C80.969,137.268 82.179,136.058 83.669,136.058C84.193,136.058 84.681,136.207 85.095,136.465L99.991,121.671L100,121.662L100,121.68Z",
	    stroke: false,
	  };

	  icn["COM.M2.AUTONOMOUS CONTROL"] = textm2("AUT");
	  icn["COM.M2.REMOTELY PILOTED"] = textm2("RP");
	  icn["COM.M2.EXPENDABLE"] = textm2("EXP");
	  icn["COM.M2.MOUNTAIN"] = {
	    type: "path",
	    stroke: false,
	    d: "m 87,142 10,-20 5,10 3,-5 8,15",
	  };
	  icn["COM.M2.LONG RANGE"] = textm2("LR");
	  icn["COM.M2.MEDIUM RANGE"] = textm2("MR");
	  icn["COM.M2.SHORT RANGE"] = textm2("SR");
	  icn["COM.M2.CLOSE RANGE"] = textm2("CR");
	  icn["COM.M2.HEAVY"] = textm2("H");
	  icn["COM.M2.MEDIUM"] = textm2("M");
	  icn["COM.M2.LIGHT AND MEDIUM"] = textm2("L/M");
	  icn["COM.M2.LIGHT"] = textm2("L");
	  icn["COM.M2.CYBERSPACE"] = textm2("CYB");
	  icn["COM.M2.SECURITY FORCE ASSISTANCE"] = textm2("SFA");
	  icn["COM.M2.BED"] = {
	    type: "path",
	    fill: false,
	    d: "m 107,125 8,6  m 15,-7 v 13  m -23,-16 v 16  m 0,-6 h 23",
	  };
	  icn["COM.M2.MULTIFUNCTIONAL"] = textm2("MF");

	  for (const key in icn) {
	    if (!icn.hasOwnProperty(key)) continue;
	    if (iconParts.hasOwnProperty(key)) console.warn("Override of: " + key);
	    defaultProperties.call(this, icn[key], iconColor);
	    iconParts[key] = icn[key];
	  }
	}

	var common = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons,
	  icons: function landequipment(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    // Common modifiers

	    //sIdm1["01"] = [icn["SE.M1.OWN SHIP"]];

	    sIdm1["100"] = [icn["COM.M1.UNMANNED AERIAL VEHICLE(UAV)"]];
	    //Robotic
	    sIdm1["101"] = [icn["COM.M1.ROBOTIC"]];
	    //Fixed Wing
	    sIdm1["102"] = [icn["COM.M1.FIXED WING"]];
	    //Rotary Wing
	    sIdm1["103"] = [icn["COM.M1.ROTARY WING"]];
	    //Tilt-Rotor
	    sIdm1["104"] = [icn["COM.M1.TILT ROTOR"]];
	    sIdm1["105"] = [icn["COM.M1.VTOL"]];
	    sIdm1["106"] = [icn["COM.M1.ATTACK"]];
	    sIdm1["107"] = [icn["COM.M1.ARMORED"]];
	    sIdm1["108"] = [icn["COM.M1.BALLISTIC MISSILE"]];
	    sIdm1["109"] = [icn["COM.M1.BRIDGE"]];
	    sIdm1["110"] = [icn["COM.M1.CARGO"]];
	    sIdm1["111"] = [icn["COM.M1.UTILITY"]];
	    sIdm1["112"] = [icn["COM.M1.LIGHT"]];
	    sIdm1["113"] = [icn["COM.M1.MEDIUM"]];
	    sIdm1["114"] = [icn["COM.M1.HEAVY"]];
	    sIdm1["115"] = [icn["COM.M1.CYBERSPACE"]];
	    sIdm1["116"] = [icn["COM.M1.COMMAND POST NODE"]];
	    sIdm1["117"] = [icn["COM.M1.JOINT NETWORK NODE"]];
	    sIdm1["118"] = [icn["COM.M1.RETRANSMISSION SITE"]];
	    sIdm1["119"] = [icn["COM.M1.BRIGADE"]];
	    sIdm1["120"] = [icn["COM.M1.CLOSE PROTECTION"]];
	    sIdm1["121"] = [icn["COM.M1.COMBAT"]];
	    sIdm1["122"] = [icn["COM.M1.COMMAND AND CONTROL"]];
	    sIdm1["123"] = [icn["COM.M1.CROWD AND RIOT CONTROL"]];
	    sIdm1["124"] = [icn["COM.M1.EOD"]];
	    sIdm1["125"] = [icn["COM.M1.ISR"]];
	    sIdm1["126"] = [icn["COM.M1.MAINTENANCE"]];
	    sIdm1["127"] = [icn["COM.M1.MEDICAL"]];
	    sIdm1["128"] = [icn["COM.M1.SEARCH AND RESCUE"]];
	    sIdm1["129"] = [icn["COM.M1.SECURITY"]];
	    sIdm1["130"] = [icn["COM.M1.SNIPER"]];
	    sIdm1["131"] = [icn["COM.M1.SPECIAL OPERATION FORCES"]];
	    sIdm1["132"] = [icn["COM.M1.SWAT"]];
	    sIdm1["133"] = [icn["COM.M1.GUIDED MISSILE"]];
	    sIdm1["134"] = [icn["COM.M1.OTHER GUIDED MISSILE"]];
	    sIdm1["135"] = [icn["COM.M1.PETROLEUM"]];
	    sIdm1["136"] = [icn["COM.M1.WATER"]];
	    sIdm1["137"] = [icn["COM.M1.WEAPON"]];
	    sIdm1["138"] = [icn["COM.M1.CHEMICAL"]];
	    sIdm1["139"] = [icn["COM.M1.BIOLOGICAL"]];
	    sIdm1["140"] = [icn["COM.M1.RADIOLOGICAL"]];
	    sIdm1["141"] = [icn["COM.M1.NUKLEAR"]];
	    sIdm1["142"] = [icn["COM.M1.DECONTAMINATION"]];
	    sIdm1["143"] = [icn["COM.M1.CIVILIAN"]];
	    sIdm1["144"] = [icn["COM.M1.GOVERNMENT"]];
	    sIdm1["145"] = [icn["COM.M1.ACCIDENT"]];
	    sIdm1["146"] = [icn["COM.M1.ASSASSINATION"]];
	    sIdm1["147"] = [icn["COM.M1.EXECUTION"]];
	    sIdm1["148"] = [icn["COM.M1.KIDNAPPING"]];
	    sIdm1["149"] = [icn["COM.M1.PIRACY"]];
	    sIdm1["150"] = [icn["COM.M1.RAPE"]];
	    sIdm1["151"] = [icn["COM.M1.ANTISUBMARINE WARFARE"]];
	    sIdm1["152"] = [icn["COM.M1.ESCORT"]];
	    sIdm1["153"] = [icn["COM.M1.MINE COUNTERMEASURES"]];
	    sIdm1["154"] = [icn["COM.M1.MINE WARFARE"]];
	    sIdm1["155"] = [icn["COM.M1.SURFACE WARFARE"]];
	    sIdm1["156"] = [icn["COM.M1.INDEPENDENT COMMAND"]];
	    sIdm1["157"] = [icn["COM.M1.COMPANY"]];
	    sIdm1["158"] = [icn["COM.M1.PLATOON"]];
	    sIdm1["159"] = [icn["COM.M1.REGIMENT"]];
	    sIdm1["160"] = [icn["COM.M1.SECTION"]];
	    sIdm1["161"] = [icn["COM.M1.SQUAD"]];
	    sIdm1["162"] = [icn["COM.M1.TEAM"]];
	    sIdm1["163"] = [icn["COM.M1.BATTALION"]];
	    sIdm1["164"] = [icn["COM.MQ.LASER"]];
	    sIdm1["165"] = [icn["COM.M1.HIJACKER"]];
	    sIdm1["166"] = [icn["COM.M1.ELECTROMAGNETIC WARFARE"]];

	    sIdm2["100"] = [icn["COM.M2.AIRBORNE"]];
	    sIdm2["101"] = [icn["COM.M2.BICYCLE EQUIPPED"]];
	    sIdm2["102"] = [icn["COM.M2.RAILROAD"]];
	    sIdm2["103"] = [icn["COM.M2.SKI"]];
	    sIdm2["104"] = [icn["COM.M2.TRACKED"]];
	    sIdm2["105"] = [icn["COM.M2.WHEELED LIMITED"]];
	    sIdm2["106"] = [icn["COM.M2.WHEELED"]];
	    sIdm2["107"] = [icn["COM.M2.FIXED WING"]];
	    sIdm2["108"] = [icn["COM.M2.ROTARY WING"]];
	    sIdm2["109"] = [icn["COM.M2.ROBOTIC"]];
	    sIdm2["110"] = [icn["COM.M2.AUTONOMOUS CONTROL"]];
	    sIdm2["111"] = [icn["COM.M2.REMOTELY PILOTED"]];
	    sIdm2["112"] = [icn["COM.M2.EXPENDABLE"]];
	    sIdm2["113"] = [icn["COM.M2.MOUNTAIN"]];
	    sIdm2["114"] = [icn["COM.M2.LONG RANGE"]];
	    sIdm2["115"] = [icn["COM.M2.MEDIUM RANGE"]];
	    sIdm2["116"] = [icn["COM.M2.SHORT RANGE"]];
	    sIdm2["117"] = [icn["COM.M2.CLOSE RANGE"]];
	    sIdm2["118"] = [icn["COM.M2.HEAVY"]];
	    sIdm2["119"] = [icn["COM.M2.MEDIUM"]];
	    sIdm2["120"] = [icn["COM.M2.LIGHT AND MEDIUM"]];
	    sIdm2["121"] = [icn["COM.M2.LIGHT"]];
	    sIdm2["122"] = [icn["COM.M2.CYBERSPACE"]];
	    sIdm2["123"] = [icn["COM.M2.SECURITY FORCE ASSISTANCE"]];
	    sIdm2["124"] = [icn["COM.M2.BED"]];
	    sIdm2["125"] = [icn["COM.M2.MULTIFUNCTIONAL"]];
	  },
	};

	var air = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$6,
	  icons: function air(sId, sIdm1, sIdm2, bbox, symbolSet, icn, _STD2525) {
	    //Air
	    if (symbolSet == "01") {
	      sId["110000"] = [icn["AR.I.MILITARY"]];
	      sId["110100"] = [icn["AR.I.FIXED-WING DSymbol"]];
	      sId["110101"] = [icn["AR.I.MEDICAL EVACUATION"]];
	      sId["110102"] = [icn["AR.I.ATTACK/STRIKE"]];
	      sId["110103"] = [icn["AR.I.BOMBER"]];
	      sId["110104"] = [icn["AR.I.FIGHTER"]];
	      sId["110105"] = [icn["AR.I.FIGHTER/BOMBER"]];
	      sId["110106"] = []; //{Reserved for Future Use}
	      sId["110107"] = [icn["AR.I.CARGO"]];
	      sId["110108"] = [icn["AR.I.JAMMER / ELECTRONIC COUNTER-MEASURES"]];
	      sId["110109"] = [icn["AR.I.TANKER"]];
	      sId["110110"] = [icn["AR.I.PATROL"]];
	      sId["110111"] = [icn["AR.I.RECONNAISSANCE"]];
	      sId["110112"] = [icn["AR.I.TRAINER"]];
	      sId["110113"] = [icn["AR.I.UTILITY"]];
	      sId["110114"] = [icn["AR.I.VSTOL"]];
	      sId["110115"] = [icn["AR.I.AIRBORNE COMMAND POST"]];
	      sId["110116"] = [icn["AR.I.AIRBORNE EARLY WARNING"]];
	      sId["110117"] = [icn["AR.I.ANTISURFACE WARFARE"]];
	      sId["110118"] = [icn["AR.I.ANTISUBMARINE WARFARE"]];
	      sId["110119"] = [icn["AR.I.COMMUNICATIONS"]];
	      sId["110120"] = [icn["AR.I.COMBAT SEARCH AND RESCUE"]];
	      sId["110121"] = [icn["AR.I.ELECTRONIC SUPPORT"]];
	      sId["110122"] = [icn["AR.I.GOVERNMENT"]];
	      sId["110123"] = [icn["AR.I.MINE COUNTERMEASURES"]];
	      sId["110124"] = [icn["AR.I.PERSONNEL RECOVERY DSymbol"]];
	      sId["110125"] = [icn["AR.I.SEARCH AND RESCUE"]];
	      sId["110126"] = [icn["AR.I.SPECIAL OPERATIONS FORCES"]];
	      sId["110127"] = [icn["AR.I.ULTRA LIGHT"]];
	      sId["110128"] = [icn["AR.I.PHOTOGRAPHIC RECONNAISSANCE"]];
	      sId["110129"] = [icn["AR.I.VIP"]];
	      sId["110130"] = [icn["AR.I.SUPRESSION OF ENEMY AIR DEFENCE"]];
	      sId["110131"] = [icn["AR.I.PASSENGER"]];
	      sId["110132"] = [icn["AR.I.ESCORT"]];
	      sId["110133"] = [icn["AR.I.ELECTRONIC ATTACK (EA)"]];
	      sId["110200"] = [icn["AR.I.MILITARY ROTARY WING"]];
	      sId["110300"] = [icn["AR.I.UNMANNED AERIAL VEHICLE"]];
	      sId["110400"] = [icn["AR.I.VERTICAL-TAKEOFF UAV (VT-UAV)"]];
	      sId["110500"] = [icn["AR.I.MILITARY BALLOON"]];
	      sId["110600"] = [icn["AR.I.MILITARY AIRSHIP"]];
	      sId["110700"] = [icn["AR.I.TETHERED LIGHTER THAN AIR"]];
	      sId["120000"] = [icn["AR.I.CIVILIAN"]];
	      sId["120100"] = [icn["AR.I.CIVILIAN FIXED-WING DSymbol"]];
	      sId["120200"] = [icn["AR.I.CIVILIAN ROTARY WING"]];
	      sId["120300"] = [icn["AR.I.CIVILIAN UNMANNED AERIAL VEHICLE"]];
	      sId["120400"] = [icn["AR.I.CIVILIAN BALLOON"]];
	      sId["120500"] = [icn["AR.I.CIVILIAN AIRSHIP"]];
	      sId["120600"] = [icn["AR.I.CIVILIAN TETHERED LIGHTER THAN AIR"]];
	      sId["120700"] = [icn["AR.I.CIVILIAN MEDICAL EVACUATION"]];
	      sId["130000"] = [icn["AR.I.WEAPON"]];
	      sId["130100"] = [icn["AR.I.BOMB"]];
	      sId["130200"] = [icn["AR.I.UNDERWATER DECOY DSymbol"]];
	      sId["140000"] = [icn["AR.I.MANUAL TRACK"]];

	      sIdm1["01"] = [icn["AIR.M1.ATTACK"]];
	      sIdm1["02"] = [icn["AIR.M1.BOMBER"]];
	      sIdm1["03"] = [icn["AIR.M1.CARGO"]];
	      sIdm1["04"] = [icn["AIR.M1.FIGHTER"]];
	      sIdm1["05"] = [icn["AIR.M1.INTERCEPTOR"]];
	      sIdm1["06"] = [icn["AIR.M1.TANKER"]];
	      sIdm1["07"] = [icn["AIR.M1.UTILITY"]];
	      sIdm1["08"] = [icn["AIR.M1.VSTOL"]];
	      sIdm1["09"] = [icn["AIR.M1.PASSENGER"]];
	      sIdm1["10"] = [icn["AIR.M1.ULTRA LIGHT"]];
	      sIdm1["11"] = [icn["AIR.M1.AIRBORNE COMMAND POST"]];
	      sIdm1["12"] = [icn["AIR.M1.AIRBORNE EARLY WARNING"]];
	      sIdm1["13"] = [icn["AIR.M1.GOVERNMENT"]];
	      sIdm1["14"] = [icn["AIR.M1.MEDEVAC"]];
	      sIdm1["15"] = [icn["AIR.M1.ESCORT"]];
	      sIdm1["16"] = [icn["AIR.M1.JAMMER / ELECTRONIC COUNTER-MEASURES"]];
	      sIdm1["17"] = [icn["AIR.M1.PATROL"]];
	      sIdm1["18"] = [icn["AIR.M1.RECONNAISSANCE"]];
	      sIdm1["19"] = [icn["AIR.M1.TRAINER"]];
	      sIdm1["20"] = [icn["AIR.M1.PHOTOGRAPHIC"]];
	      sIdm1["21"] = [icn["AIR.M1.PERSONNEL RECOVERY"]];
	      sIdm1["22"] = [icn["AIR.M1.ANTISUBMARINE WARFARE"]];
	      sIdm1["23"] = [icn["AIR.M1.COMMUNICATIONS"]];
	      sIdm1["24"] = [icn["AIR.M1.ELECTRONIC SUPPORT (ES)"]];
	      sIdm1["25"] = [icn["AIR.M1.MINE COUNTERMEASURES"]];
	      sIdm1["26"] = [icn["AIR.M1.SEARCH AND RESCUE"]];
	      sIdm1["27"] = [icn["AIR.M1.SPECIAL OPERATIONS FORCES"]];
	      sIdm1["28"] = [icn["AIR.M1.SURFACE WARFARE"]];
	      sIdm1["29"] = [icn["AIR.M1.VIP"]];
	      sIdm1["30"] = [icn["AIR.M1.COMBAT SEARCH AND RESCUE"]];
	      sIdm1["31"] = [icn["AIR.M1.SUPRESSION OF ENEMY AIR DEFENCE"]];
	      sIdm1["32"] = [icn["AIR.M1.ANTISURFACE WARFARE"]];
	      sIdm1["33"] = [icn["AIR.M1.FIGHTER/BOMBER"]];
	      sIdm1["34"] = [icn["AIR.M1.INTENSIVE CARE"]];
	      sIdm1["35"] = [icn["AIR.M1.ELECTRONIC ATTACK (EA)"]];
	      sIdm1["36"] = [icn["AIR.M1.MULTIMISSION"]];
	      sIdm1["37"] = [icn["AIR.M1.HIJACKING"]];
	      sIdm1["38"] = [icn["AIR.M1.ASW HELO-LAMPS"]];
	      sIdm1["39"] = [icn["AIR.M1.ASW HELO - SH-60R"]];
	      sIdm1["40"] = [icn["AIR.M1.HIJACKER"]];
	      sIdm1["41"] = [icn["AIR.M1.CYBERSPACE"]];

	      sIdm2["01"] = [icn["AIR.M2.HEAVY"]];
	      sIdm2["02"] = [icn["AIR.M2.MEDIUM"]];
	      sIdm2["03"] = [icn["AIR.M2.LIGHT"]];
	      sIdm2["04"] = [icn["AIR.M2.BOOM-ONLY"]];
	      sIdm2["05"] = [icn["AIR.M2.DROUGE-ONLY"]];
	      sIdm2["06"] = [icn["AIR.M2.BOOM AND DROUGE"]];
	      sIdm2["07"] = [icn["AIR.M2.CLOSE RANGE"]];
	      sIdm2["08"] = [icn["AIR.M2.SHORT RANGE"]];
	      sIdm2["09"] = [icn["AIR.M2.MEDIUM RANGE"]];
	      sIdm2["10"] = [icn["AIR.M2.LONG RANGE"]];
	      sIdm2["11"] = [icn["AIR.M2.DOWNLINKED"]];
	      sIdm2["12"] = [icn["AIR.M2.CYBERSPACE"]];
	    }
	  },
	};

	var airmissile = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$6,
	  icons: function airmissile(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Air Missile
	    if (symbolSet == "02") {
	      sId["110000"] = [icn["AIR.MISSILE.ICON"]];

	      sIdm1["01"] = [icn["AIR.MISSILE.M1.AIR"]];
	      sIdm1["02"] = [icn["AIR.MISSILE.M1.SURFACE"]];
	      sIdm1["03"] = [icn["AIR.MISSILE.M1.SUBSURFACE"]];
	      sIdm1["04"] = [icn["AIR.MISSILE.M1.SPACE"]];
	      sIdm1["05"] = [icn["AIR.MISSILE.M1.ANTI-BALLISTIC"]];
	      sIdm1["06"] = [icn["AIR.MISSILE.M1.BALLISTIC"]];
	      sIdm1["07"] = [icn["AIR.MISSILE.M1.CRUISE"]];
	      sIdm1["08"] = [icn["AIR.MISSILE.M1.INTERCEPTOR"]];
	      sIdm1["09"] = [icn["AIR.M1.HYPERSONIC"]];

	      sIdm2["01"] = [icn["AIR.MISSILE.M2.AIR"]];
	      sIdm2["02"] = [icn["AIR.MISSILE.M2.SURFACE"]];
	      sIdm2["03"] = [icn["AIR.MISSILE.M2.SUBSURFACE"]];
	      sIdm2["04"] = [icn["AIR.MISSILE.M2.SPACE"]];
	      sIdm2["05"] = [icn["AIR.MISSILE.M2.LAUNCHED"]];
	      sIdm2["06"] = [icn["AIR.MISSILE.M2.MISSILE"]];
	      sIdm2["07"] = [icn["AIR.MISSILE.M2.PATRIOT"]];
	      sIdm2["08"] = [icn["AIR.MISSILE.M2.STANDARD MISSILE - 2 (SM-2)"]];
	      sIdm2["09"] = [icn["AIR.MISSILE.M2.STANDARD MISSILE - 6 (SM-6)"]];
	      sIdm2["10"] = [icn["AIR.MISSILE.M2.EVOLVED SEA SPARROW MISSILE (ESSM)"]];
	      sIdm2["11"] = [icn["AIR.MISSILE.M2.ROLLING AIRFRAME MISSILE (RAM)"]];
	      sIdm2["12"] = [icn["AIR.MISSILE.M2.SHORT RANGE"]];
	      sIdm2["13"] = [icn["AIR.MISSILE.M2.MEDIUM RANGE"]];
	      sIdm2["14"] = [icn["AIR.MISSILE.M2.INTERMEDIATE RANGE"]];
	      sIdm2["15"] = [icn["AIR.MISSILE.M2.LONG RANGE"]];
	      sIdm2["16"] = [icn["AIR.MISSILE.M2.INTERCONTINENTAL"]];
	    }
	  },
	};

	var space = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$7,
	  icons: function spaceunit(sId, sIdm1, sIdm2, bbox, symbolSet, icn, _STD2525) {
	    //Space
	    if (symbolSet == "05") {
	      sId["110000"] = [icn["SP.I.MILITARY"]];
	      sId["110100"] = [icn["SP.I.SPACE VEHICLE"]];
	      sId["110200"] = [icn["SP.I.RE-ENTRY VEHICLE"]];
	      sId["110300"] = [icn["SPACE.PLANET LANDER"]];
	      sId["110400"] = [icn["SP.I.ORBITER SHUTTLE"]];
	      sId["110500"] = [icn["SP.I.CAPSULE"]];
	      sId["110600"] = [icn["SP.I.SATELLITE, GENERAL"]];
	      sId["110700"] = [icn["SP.I.SATELLITE"]];
	      sId["110800"] = [icn["SP.I.ANTISATELLITE WEAPON"]];
	      sId["110900"] = [icn["SP.I.ASTRONOMICAL SATELLITE"]];
	      sId["111000"] = [icn["SP.I.BIOSATELLITE"]];
	      sId["111100"] = [icn["SP.I.COMMUNICATIONS SATELLITE"]];
	      sId["111200"] = [icn["SP.I.EARTH OBSERVATION SATELLITE"]];
	      sId["111300"] = [icn["SP.I.MINIATURIZED SATELLITE"]];
	      sId["111400"] = [icn["SP.I.NAVIGATIONAL SATELLITE"]];
	      sId["111500"] = [icn["SP.I.RECONNAISSANCE SATELLITE"]];
	      sId["111600"] = [icn["SP.I.SPACE STATION"]];
	      sId["111700"] = [icn["SP.I.TETHERED SATELLITE"]];
	      sId["111800"] = [icn["SP.I.WEATHER SATELLITE"]];
	      sId["111900"] = [icn["SP.I.SPACE LAUNCH VEHICLE"]];

	      sId["120000"] = [icn["SP.I.CIVILIAN"]];
	      sId["120100"] = [icn["SP.I.CIVILIAN ORBITER SHUTTLE"]];
	      sId["120200"] = [icn["SP.I.CIVILIAN CAPSULE"]];
	      sId["120300"] = [icn["SP.I.CIVILIAN SATELLITE"]];
	      sId["120400"] = [icn["SP.I.CIVILIAN ASTRONOMICAL SATELLITE"]];
	      sId["120500"] = [icn["SP.I.CIVILIAN BIOSATELLITE"]];
	      sId["120600"] = [icn["SP.I.CIVILIAN COMMUNICATIONS SATELLITE"]];
	      sId["120700"] = [icn["SP.I.CIVILIAN EARTH OBSERVATION SATELLITE"]];
	      sId["120800"] = [icn["SP.I.CIVILIAN MINIATURIZED SATELLITE"]];
	      sId["120900"] = [icn["SP.I.CIVILIAN NAVIGATIONAL SATELLITE"]];
	      sId["121000"] = [icn["SP.I.CIVILIAN SPACE STATION"]];
	      sId["121100"] = [icn["SP.I.CIVILIAN TETHERED SATELLITE"]];
	      sId["121200"] = [icn["SP.I.CIVILIAN WEATHER SATELLITE"]];
	      sId["121300"] = [icn["SP.I.PLANETARY LANDER"]];
	      sId["121400"] = [icn["SP.I.CIVILIAN SPACE VEHICLE"]];
	      sId["130000"] = [icn["SP.I.MANUAL TRACK"]];

	      sIdm1["01"] = [icn["SP.M1.LOW EARTH ORBIT (LEO)"]];
	      sIdm1["02"] = [icn["SP.M1.MEDIUM EARTH ORBIT (MEO)"]];
	      sIdm1["03"] = [icn["SP.M1.HIGH EARTH ORBIT (HEO)"]];
	      sIdm1["04"] = [icn["SP.M1.GEOSYNCHRONOUS ORBIT (GSO)"]];
	      sIdm1["05"] = [icn["SP.M1.GEOSTATIONARY ORBIT (GO)"]];
	      sIdm1["06"] = [icn["SP.M1.MOLNIYA ORBIT (MO)"]];
	      sIdm1["07"] = [icn["SP.M1.CYBERSPACE"]];

	      sIdm2["01"] = [icn["SP.M2.OPTICAL"]];
	      sIdm2["02"] = [icn["SP.M2.INFRARED"]];
	      sIdm2["03"] = [icn["SP.M2.RADAR"]];
	      sIdm2["04"] = [icn["SP.M2.SIGNALS INTELLIGENCE (SIGINT)"]];
	      sIdm2["05"] = [icn["SP.M2.CYBERSPACE"]];
	      sIdm2["06"] = [icn["SP.M2.ELECTROMAGNETIC WARFARE (ASAT)"]];
	      sIdm2["07"] = [icn["SP.M2.HIGH POWER MICROWAVE"]];
	      sIdm2["08"] = [icn["SP.M2.LASER"]];
	      sIdm2["09"] = [icn["SP.M2.MAINTENANCE"]];
	      sIdm2["10"] = [icn["SP.M2.MINE"]];
	      sIdm2["11"] = [icn["SP.M2.REFUEL"]];
	      sIdm2["12"] = [icn["SP.M2.TUG"]];
	    }
	  },
	};

	var spacemissile = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$7,
	  icons: function spacemissile(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Space Missile
	    if (symbolSet == "06") {
	      sId["110000"] = [icn["SPACE.MISSILE.ICON"]];

	      sIdm1["01"] = [icn["SPACE.MISSILE.M1.BALLISTIC"]];
	      sIdm1["02"] = [icn["SPACE.MISSILE.M1.SPACE"]];
	      sIdm1["03"] = [icn["SPACE.MISSILE.M1.INTERCEPTOR"]];
	      sIdm1["04"] = [icn["SPACE.MISSILE.M1.HYPERSONIC"]];

	      sIdm2["01"] = [icn["SPACE.MISSILE.M2.SHORT RANGE"]];
	      sIdm2["02"] = [icn["SPACE.MISSILE.M2.MEDIUM RANGE"]];
	      sIdm2["03"] = [icn["SPACE.MISSILE.M2.INTERMEDIATE RANGE"]];
	      sIdm2["04"] = [icn["SPACE.MISSILE.M2.LONG RANGE"]];
	      sIdm2["05"] = [icn["SPACE.MISSILE.M2.INTERCONTINENTAL"]];
	      sIdm2["06"] = [icn["SPACE.MISSILE.M2.ARROW"]];
	      sIdm2["07"] = [icn["SPACE.MISSILE.M2.GROUND-BASED INTERCEPTOR (GBI)"]];
	      sIdm2["08"] = [icn["SPACE.MISSILE.M2.PATRIOT"]];
	      sIdm2["09"] = [
	        icn["SPACE.MISSILE.M2.STANDARD MISSILE - TERMINAL PHASE (SM-T)"],
	      ];
	      sIdm2["10"] = [icn["SPACE.MISSILE.M2.STANDARD MISSILE - 3 (SM-3)"]];
	      sIdm2["11"] = [
	        icn["SPACE.MISSILE.M2.TERMINAL HIGH-ALTITUDE AREA DEFENSE (THAAD)"],
	      ];
	      sIdm2["12"] = [icn["SPACE.MISSILE.M2.SPACE"]];
	      sIdm2["13"] = [icn["SPACE.MISSILE.M2.CLOSE RANGE"]];
	      sIdm2["14"] = [icn["SPACE.MISSILE.M2.DEBRIS"]];
	      sIdm2["15"] = [icn["SPACE.MISSILE.M2.UNKNOWN"]];
	    }
	  },
	};

	var landunit = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function landunit(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525,
	    edition
	  ) {
	    //Land Unit
	    if (symbolSet == "10") {
	      sId["110000"] = [icn["GR.IC.COMMAND AND CONTROL"]];
	      sId["110100"] = [icn["GR.IC.FF.BROADCAST TRANSMITTER ANTENNA"]];
	      sId["110200"] = [icn["GR.IC.CIVIL AFFAIRS"]];
	      sId["110300"] = [icn["GR.IC.CIVIL-MILITARY-COOPERATION"]];
	      sId["110400"] = [icn["GR.IC.INFORMATION OPERATIONS"]];
	      sId["110500"] = [icn["GR.IC.LIAISON"]];
	      sId["110501"] = [icn["GR.IC.LIAISON"], icn["GR.IC.FF.RECONNAISSANCE"]];
	      sId["110600"] = [
	        icn["GR.IC.MILITARY INFORMATION SUPPORT OPERATIONS (MISO)"]
	      ];
	      sId["110601"] = [
	        icn["GR.IC.MILITARY INFORMATION SUPPORT OPERATIONS (MISO)"],
	        icn["GR.IC.FF.BROADCAST TRANSMITTER ANTENNA"]
	      ];
	      sId["110700"] = [icn["GR.IC.RADIO"]];
	      sId["110800"] = [icn["GR.IC.RADIO RELAY"]];
	      sId["110900"] = [icn["GR.IC.RADIO TELETYPE CENTRE"]];
	      sId["111000"] = [icn["GR.IC.FF.SIGNAL"]];
	      sId["111001"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.RADIO"]];
	      sId["111002"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.RADIO RELAY"]];
	      sId["111003"] = [
	        icn["GR.IC.FF.SIGNAL"],
	        icn["GR.IC.RADIO TELETYPE CENTRE"]
	      ];
	      sId["111004"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.I.FF.SATELLITE"]];
	      sId["111005"] = [icn["GR.IC.FF.SIGNAL"], icn["GR.IC.VIDEO IMAGERY"]];
	      //sId['111095'] = [icn['GR.IC.FF.SIGNAL'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['111097'] = [icn['GR.IC.FF.SIGNAL'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['111098'] = [icn['GR.IC.FF.SIGNAL'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["111100"] = [icn["GR.I.FF.SATELLITE"]];
	      sId["111200"] = [icn["GR.IC.VIDEO IMAGERY"]];
	      sId["111300"] = [icn["GR.IC.SPACE"]];
	      sId["111400"] = [icn["GR.IC.SPECIAL TROOPS"]];
	      sId["111500"] = [icn["GR.IC.MULTI-DOMAIN"]];
	      sId["120000"] = [];
	      sId["120100"] = [icn["GR.IC.FF.AIR ASSAULT WITH ORGANIC LIFT"]];
	      sId["120200"] = [icn["GR.IC.AIR TRAFFIC SERVICES"]];
	      sId["120300"] = [icn["GR.IC.FF.AMPHIBIOUS"]];
	      sId["120400"] = [icn["GR.IC.FF.ANTITANK/ANTIARMOUR"]];
	      sId["120401"] = [
	        icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	        icn["GR.IC.ARMOUR"]
	      ];
	      sId["120402"] = [
	        icn["GR.IC.FF.ANTITANK/ANTIARMOUR"],
	        icn["GR.IC.FF.MOTORIZED"]
	      ];
	      sId["120500"] = [icn["GR.IC.ARMOUR"]];
	      sId["120501"] = [icn["GR.IC.ARMOUR"], icn["GR.IC.FF.RECONNAISSANCE"]];
	      sId["120502"] = [icn["GR.IC.ARMOUR"], icn["GR.IC.FF.AMPHIBIOUS"]];
	      //sId['120595'] = [icn['GR.IC.ARMOUR'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];;
	      sId["120600"] = [icn["GR.IC.AVIATION ROTARY WING"]];
	      sId["120601"] = [
	        icn["GR.IC.AVIATION ROTARY WING"],
	        icn["GR.IC.FF.RECONNAISSANCE"]
	      ];
	      //sId['120695'] = [icn['GR.IC.AVIATION ROTARY WING'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['120697'] = [icn['GR.IC.AVIATION ROTARY WING'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['120698'] = [icn['GR.IC.AVIATION ROTARY WING'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["120700"] = [icn["GR.IC.AVIATION COMPOSITE"]];
	      //sId['120795'] = [icn['GR.IC.AVIATION COMPOSITE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["120800"] = [icn["GR.IC.AVIATION FIXED WING"]];
	      sId["120801"] = [
	        icn["GR.IC.AVIATION FIXED WING"],
	        icn["GR.IC.FF.RECONNAISSANCE"]
	      ];
	      //sId['120895'] = [icn['GR.IC.AVIATION FIXED WING'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["120900"] = [icn["GR.IC.COMBAT"]];
	      sId["121000"] = [icn["GR.IC.COMBINED ARMS"]];
	      //sId['121095'] = [icn['GR.IC.COMBINED ARMS'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["121100"] = [icn["GR.IC.FF.INFANTRY"]];
	      sId["121101"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.FF.AMPHIBIOUS"]];
	      sId["121102"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.ARMOUR"]];
	      sId["121103"] = [
	        icn["GR.IC.FF.INFANTRY"],
	        icn["GR.IC.FF.MAIN GUN SYSTEM"]
	      ];
	      sId["121104"] = [icn["GR.IC.FF.INFANTRY"], icn["GR.IC.FF.MOTORIZED"]];
	      sId["121105"] = [
	        icn["GR.IC.FF.INFANTRY"],
	        icn["GR.IC.ARMOUR"],
	        icn["GR.IC.FF.MAIN GUN SYSTEM"]
	      ];
	      sId["121106"] = [icn["GR.IC.FF.MAIN GUN SYSTEM"]];
	      //sId['121195'] = [icn['GR.IC.FF.INFANTRY'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["121200"] = [icn["GR.IC.OBSERVER/OBSERVATION"]];
	      sId["121300"] = [icn["GR.IC.FF.RECONNAISSANCE"]];
	      sId["121301"] = [
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.SURVEILLANCE"]
	      ];
	      sId["121302"] = [
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.FF.AMPHIBIOUS"]
	      ];
	      sId["121303"] = [
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.FF.MOTORIZED"]
	      ];
	      //sId['121395'] = [icn['GR.IC.FF.RECONNAISSANCE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["121400"] = [icn["GR.IC.SEA-AIR-LAND"]];
	      sId["121500"] = [icn["GR.IC.SNIPER"]];
	      sId["121600"] = [icn["GR.IC.SURVEILLANCE"]];
	      sId["121700"] = [icn["GR.IC.SPECIAL FORCES"]];
	      //sId['121795'] = [icn['GR.IC.SPECIAL FORCES'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["121800"] = [icn["GR.IC.SPECIAL OPERATIONS FORCES"]];
	      sId["121801"] = [icn["GR.IC.FIXED WING MISO"]];
	      sId["121802"] = [
	        icn["GR.IC.SPECIAL OPERATIONS FORCES"],
	        icn["GR.IC.FF.INFANTRY"]
	      ];
	      sId["121803"] = [
	        icn["GR.IC.COMBATANT"],
	        icn["GR.M1.SPECIAL OPERATIONS FORCES (SOF)"]
	      ]; //SPECIAL BOAT
	      sId["121804"] = [
	        icn["GR.IC.SUBMARINE NUCLEAR PROPULSION"],
	        icn["GR.M1.SPECIAL OPERATIONS FORCES (SOF)"]
	      ]; //SPECIAL SSNR)
	      sId["121805"] = [icn["SOF.IC.UNDERWATER DEMOLITION TEAM"]];
	      sId["121900"] = [icn["GR.IC.UNMANNED SYSTEMS"]];
	      sId["122000"] = [icn["GR.IC.RANGER"]];
	      sId["130000"] = [];
	      sId["130100"] = [icn["GR.IC.FF.AIR DEFENCE"]];
	      sId["130101"] = [
	        icn["GR.IC.FF.AIR DEFENCE"],
	        icn["GR.IC.FF.MAIN GUN SYSTEM"]
	      ];
	      sId["130102"] = [
	        icn["GR.IC.FF.AIR DEFENCE"],
	        icn["GR.IC.MISSILE"]
	        //icn["GR.IC.AIR DEFENSE MISSILE"],
	      ];
	      sId["130103"] = [
	        icn["GR.IC.FF.AIR DEFENCE"],
	        icn["GR.IC.AIR AND MISSILE DEFENSE"]
	      ];
	      //sId['130195'] = [icn['GR.IC.FF.AIR DEFENCE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["130200"] = [
	        icn["GR.IC.FIELD ARTILLERY"],
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.AVIATION ROTARY WING"],
	        icn["GR.M1.NAVAL"]
	      ];
	      sId["130300"] = [icn["GR.IC.FIELD ARTILLERY"]];
	      sId["130301"] = [
	        ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	        icn["GR.IC.ARMOUR"]
	      ]; //ARTILLERY SELF-PROPELLED
	      sId["130302"] = [
	        ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	        icn["GR.IC.ARMOUR"],
	        icn["GR.IC.FF.RECONNAISSANCE"]
	      ]; //ARTILLERY TARGET ACQUISITION
	      sId["130303"] = [
	        ms._scale(0.8, icn["GR.IC.FIELD ARTILLERY"]),
	        icn["GR.IC.FF.RECONNAISSANCE"]
	      ]; //RECONNAISSANCE
	      //sId['130395'] = [icn['GR.IC.FIELD ARTILLERY'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["130400"] = [icn["GR.IC.FIELD ARTILLERY OBSERVER"]];
	      sId["130500"] = [icn["GR.IC.JOINT FIRE SUPPORT"]];
	      sId["130600"] = [icn["GR.IC.METEOROLOGICAL"]];
	      sId["130700"] = [icn["GR.IC.MISSILE"]];
	      sId["130800"] = [icn["GR.IC.MORTAR"]];
	      sId["130801"] = [icn["GR.IC.MORTAR"], icn["GR.M2.TRACKED"]];
	      sId["130802"] = [icn["GR.IC.MORTAR"], icn["GR.M2.TRUCK"]];
	      sId["130803"] = [icn["GR.IC.MORTAR"], icn["GR.M2.TOWED"]];
	      sId["130900"] = [icn["GR.IC.SURVEY"]];
	      sId["140000"] = [];
	      sId["140100"] = [icn["GR.IC.CBRN"]];
	      sId["140101"] = [icn["GR.IC.CBRN"], icn["GR.IC.ARMOUR"]];
	      sId["140102"] = [icn["GR.IC.CBRN"], icn["GR.IC.FF.MOTORIZED"]];
	      sId["140103"] = [icn["GR.IC.CBRN"], icn["GR.IC.FF.RECONNAISSANCE"]];
	      sId["140104"] = [
	        icn["GR.IC.CBRN"],
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.ARMOUR"]
	      ];
	      sId["140105"] = [
	        icn["GR.IC.CBRN"],
	        icn["GR.IC.FF.RECONNAISSANCE"],
	        icn["GR.IC.FF.MOTORIZED"]
	      ];
	      sId["140106"] = [
	        icn["GR.IC.CBRN"],
	        icn[
	          "GR.CHEMICAL, BIOLOGICAL, RADIOLOGICAL, NUCLEAR, AND HIGH-YIELD EXPLOSIVES"
	        ]
	      ];
	      //sId['140195'] = [icn['GR.IC.CBRN'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["140200"] = [icn["GR.IC.COMBAT SUPPORT (MANOEUVRE ENHANCEMENT)"]];
	      //sId['140295'] = [icn['GR.IC.COMBAT SUPPORT (MANOEUVRE ENHANCEMENT)'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["140300"] = [icn["GR.IC.CRIMINAL INVESTIGATION DIVISION"]];
	      sId["140400"] = [icn["GR.IC.DIVER, CIVILIAN"]];
	      sId["140500"] = [icn["GR.IC.DOG"]];
	      sId["140600"] = [icn["GR.IC.DRILLING"]];
	      sId["140700"] = [icn["GR.IC.ENGINEER"]];
	      sId["140701"] = [icn["GR.IC.ENGINEER MECHANIZED"]];
	      sId["140702"] = [icn["GR.IC.ENGINEER"], icn["GR.IC.FF.MOTORIZED"]];
	      sId["140703"] = [icn["GR.IC.ENGINEER"], icn["GR.IC.FF.RECONNAISSANCE"]];
	      //sId['140795'] = [icn['GR.IC.ENGINEER'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["140800"] = [icn["GR.IC.EXPLOSIVE ORDNANCE DISPOSAL"]];
	      sId["140900"] = [icn["GR.IC.FIELD CAMP CONSTRUCTION"]];
	      sId["141000"] = [icn["GR.IC.FIRE PROTECTION"]];
	      sId["141100"] = [icn["GR.IC.GEOSPATIAL SUPPORT"]];
	      sId["141200"] = [icn["GR.IC.MILITARY POLICE"]];
	      //sId['141295'] = [icn['GR.IC.MILITARY POLICE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["141300"] = [icn["GR.IC.MINE"]];
	      sId["141400"] = [icn["GR.IC.MINE CLEARING"]];
	      sId["141500"] = [icn["GR.IC.MINE LAUNCHING"]];
	      sId["141600"] = [icn["GR.IC.MINE LAYING"]];
	      sId["141700"] = [icn["GR.IC.SECURITY"]];
	      sId["141701"] = [icn["GR.IC.SECURITY"], icn["GR.IC.ARMOUR"]];
	      sId["141702"] = [icn["GR.IC.SECURITY"], icn["GR.IC.FF.MOTORIZED"]];
	      sId["141800"] = [icn["GR.IC.SEARCH AND RESCUE"]];
	      sId["141801"] = [icn["GR.IC.ISOLATED PERSONNEL"]];
	      sId["141900"] = [icn["GR.IC.SECURITY POLICE (AIR)"]];
	      sId["142000"] = [icn["GR.IC.SHORE PATROL"]];
	      sId["142100"] = [icn["GR.IC.TOPOGRAPHIC"]];
	      sId["142200"] = [icn["GR.IC.AIR AND MISSILE DEFENSE"]];
	      sId["150000"] = [];
	      sId["150100"] = [icn["GR.IC.FF.ANALYSIS"]];
	      sId["150200"] = [icn["GR.IC.COUNTER-INTELLIGENCE"]];
	      sId["150300"] = [icn["GR.IC.FF.DIRECTION FINDING"]];
	      sId["150400"] = [icn["GR.IC.ELECTRONIC RANGING"]];
	      sId["150500"] = [icn["GR.IC.ELECTRONIC WARFARE"]];
	      sId["150501"] = [
	        icn["GR.IC.ELECTRONIC WARFARE"],
	        icn["GR.IC.FF.ANALYSIS"]
	      ];
	      sId["150502"] = [
	        icn["GR.IC.ELECTRONIC WARFARE"],
	        icn["GR.IC.FF.DIRECTION FINDING"]
	      ];
	      sId["150503"] = [
	        icn["GR.IC.ELECTRONIC WARFARE"],
	        icn["GR.IC.FF.INTERCEPT"]
	      ];
	      sId["150504"] = [
	        icn["GR.IC.ELECTRONIC WARFARE"],
	        icn["GR.IC.FF.JAMMING"]
	      ];
	      sId["150505"] = [icn["GR.IC.ELECTRONIC WARFARE"], icn["GR.IC.FF.SEARCH"]];
	      sId["150600"] = [icn["GR.IC.FF.INTERCEPT"]];
	      sId["150700"] = [icn["GR.IC.INTERROGATION"]];
	      sId["150800"] = [icn["GR.IC.FF.JAMMING"]];
	      sId["150900"] = [icn["GR.IC.JOINT INTELLIGENCE CENTRE"]];
	      sId["151000"] = [icn["GR.IC.MILITARY INTELLIGENCE"]];
	      //sId['151095'] = [icn['GR.IC.MILITARY INTELLIGENCE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["151100"] = [icn["GR.IC.FF.SEARCH"]];
	      sId["151200"] = [icn["GR.IC.SENSOR"]];
	      sId["151300"] = [icn["GR.IC.MILITARY HISTORY"]];
	      sId["160000"] = [icn["GR.IC.SUSTAINMENT"]];
	      //sId['160095'] = [icn['GR.IC.SUSTAINMENT'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['160097'] = [icn['GR.IC.SUSTAINMENT'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['160098'] = [icn['GR.IC.SUSTAINMENT'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["160100"] = [icn["GR.IC.ADMINISTRATIVE"]];
	      //sId['160197'] = [icn['GR.IC.ADMINISTRATIVE'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['160198'] = [icn['GR.IC.ADMINISTRATIVE'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["160200"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS ALL"]];
	      sId["160300"] = [
	        icn["GR.IC.TRANSPORTATION"],
	        icn["GR.IC.AIRPORT OF DEBARKATION"]
	      ];
	      sId["160400"] = [icn["GR.IC.AMMUNITION"]];
	      sId["160500"] = [icn["GR.IC.BAND"]];
	      sId["160501"] = [icn["GR.IC.ARMY MUSIC"]];
	      sId["160600"] = [icn["GR.IC.COMBAT SERVICE SUPPORT"]];
	      sId["160700"] = [icn["GR.IC.FINANCE"]];
	      //sId['160797'] = [icn['GR.IC.FINANCE'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['160798'] = [icn['GR.IC.FINANCE'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["160800"] = [icn["GR.IC.JUDGE ADVOCATE GENERAL"]];
	      sId["160900"] = [icn["GR.IC.LABOUR"]];
	      sId["161000"] = [icn["GR.IC.LAUNDRY/BATH"]];
	      sId["161100"] = [icn["GR.IC.MAINTENANCE"]];
	      //sId['161195'] = [icn['GR.IC.MAINTENANCE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['161197'] = [icn['GR.IC.MAINTENANCE'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['161198'] = [icn['GR.IC.MAINTENANCE'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["161200"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.MATERIEL"]];
	      sId["161300"] = [icn["GR.IC.FF.MEDICAL"]];
	      //sId['161395'] = [icn['GR.IC.FF.MEDICAL'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['161397'] = [icn['GR.IC.FF.MEDICAL'],icn['GR.IC.FF.MEDICAL CORPS']
	      //sId['161398'] = [icn['GR.IC.FF.MEDICAL'],icn['GR.IC.FF.MEDICAL THEATER']
	      sId["161400"] = [icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"]];
	      sId["161500"] = [icn["GR.IC.MORALE, WELFARE, AND RECREATION"]];
	      sId["161600"] = [icn["GR.IC.MORTUARY AFFAIRS"]];
	      sId["161700"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS MULTIPLE"]];
	      sId["161800"] = [
	        icn["GR.IC.FF.SUPPLY"],
	        icn["GR.IC.FF.NATO SUPPLY CLASS I"]
	      ];
	      sId["161900"] = [
	        icn["GR.IC.FF.SUPPLY"],
	        icn["GR.IC.FF.NATO SUPPLY CLASS II"]
	      ];
	      sId["162000"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS III"]];
	      sId["162100"] = [
	        icn["GR.IC.FF.SUPPLY"],
	        icn["GR.IC.FF.NATO SUPPLY CLASS IV"]
	      ];
	      sId["162200"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS V"]];
	      sId["162300"] = [icn["GR.IC.ORDNANCE"]];
	      //sId['162395'] = [icn['GR.IC.ORDNANCE'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['162397'] = [icn['GR.IC.ORDNANCE'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['162398'] = [icn['GR.IC.ORDNANCE'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["162400"] = [icn["GR.IC.PERSONNEL SERVICES"]];
	      //sId['162495'] = [icn['GR.IC.PERSONNEL SERVICES'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      sId["162500"] = [icn["GR.IC.PETROLEUM OIL LUBRICANTS"]];
	      sId["162600"] = [icn["GR.IC.PIPELINE"]];
	      sId["162700"] = [icn["GR.IC.POSTAL"]];
	      sId["162800"] = [icn["GR.IC.PUBLIC AFFAIRS"]];
	      sId["162900"] = [icn["GR.IC.QUARTERMASTER"]];
	      //sId['162995'] = [icn['GR.IC.QUARTERMASTER'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['162997'] = [icn['GR.IC.QUARTERMASTER'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['162998'] = [icn['GR.IC.QUARTERMASTER'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["163000"] = [icn["GR.IC.RAILHEAD"]];
	      sId["163100"] = [icn["GR.IC.RELIGIOUS SUPPORT"]];
	      sId["163200"] = [icn["GR.IC.REPLACEMENT HOLDING UNIT"]];
	      sId["163300"] = [icn["GR.IC.SEAPORT OF DEBARKATION"]];
	      sId["163400"] = [icn["GR.IC.FF.SUPPLY"]];
	      sId["163500"] = [icn["GR.IC.JOINT INFORMATION BUREAU"]];
	      //sId['163597'] = [icn['GR.IC.JOINT INFORMATION BUREAU'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['163598'] = [icn['GR.IC.JOINT INFORMATION BUREAU'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["163600"] = [icn["GR.IC.TRANSPORTATION"]];
	      sId["163601"] = [
	        icn["GR.IC.TRANSPORTATION"],
	        icn["GR.IC.FLOATING CRAFT"]
	      ];
	      //sId['163695'] = [icn['GR.IC.TRANSPORTATION'],icn['GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT']];
	      //sId['163697'] = [icn['GR.IC.TRANSPORTATION'],icn['GR.IC.FF.CORPS SUPPORT']];
	      //sId['163698'] = [icn['GR.IC.TRANSPORTATION'],icn['GR.IC.FF.THEATRE SUPPORT']];
	      sId["163700"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS I"]];
	      sId["163800"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS II"]];
	      sId["163900"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS III"]];
	      sId["164000"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS IV"]];
	      sId["164100"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS V"]];
	      sId["164200"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VI"]];
	      sId["164300"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VII"]];
	      sId["164400"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS VIII"]];
	      sId["164500"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS IX"]];
	      sId["164600"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.FF.CLASS X"]];
	      sId["164700"] = [icn["GR.IC.WATER"]];
	      sId["164800"] = [icn["GR.IC.WATER PURIFICATION"]];
	      sId["164900"] = [icn["GR.IC.PUBLIC AFFAIRS BROADCAST"]];
	      sId["165000"] = [
	        icn["GR.IC.FF.SUPPLY"],
	        icn["GR.IC.FF.NATO SUPPLY CLASS ALL"]
	      ];
	      sId["165100"] = [icn["GR.IC.INTERPRETER/TRANSLATOR"]];
	      sId["165200"] = [icn["GR.IC.SUPPORT"]];
	      sId["165300"] = [icn["GR.IC.ARMY FIELD SUPPORT"]];
	      sId["165400"] = [icn["GR.IC.CONTRACTING SERVICES"]];
	      sId["165500"] = [icn["GR.IC.PARACHUTE RIGGER"]];
	      sId["165600"] = [icn["GR.IC.HUMAN RESOURCES"]];
	      sId["170000"] = [];
	      sId["170100"] = [icn["GR.IC.NAVAL"]];
	      sId["180000"] = [];
	      sId["180100"] = [
	        icn["GR.IC.ALLIED COMMAND EUROPE RAPID REACTION CORPS (ARRC)"]
	      ];
	      sId["180200"] = [icn["GR.IC.ALLIED COMMAND OPERATIONS"]];
	      sId["180300"] = [
	        icn["GR.IC.INTERNATIONAL SECURITY ASSISTANCE FORCE (ISAF)"]
	      ];
	      sId["180400"] = [icn["GR.IC.MULTINATIONAL (MN)"]];
	      sId["190000"] = [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	      sId["200000"] = [icn["GR.IC.FF.LAW ENFORCEMENT"]];
	      sId["200100"] = [
	        icn[
	          "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	        ]
	      ];
	      sId["200200"] = [icn["GR.IC.FF.BORDER PATROL"]];
	      sId["200300"] = [icn["GR.IC.FF.CUSTOMS SERVICE"]];
	      sId["200400"] = [icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"]];
	      sId["200500"] = [icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"]];
	      sId["200600"] = [icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"]];
	      sId["200700"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	      sId["200800"] = [icn["GR.IC.FF.PRISON"]];
	      sId["200900"] = [icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"]];
	      sId["201000"] = [icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"]];
	      sId["201100"] = [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	      sId["201200"] = [icn["GR.IC.FF.US MARSHALS SERVICE"]];
	      sId["201300"] = [icn["ST.IC.INTERNAL SECURITY FORCE"]];
	      sId["210000"] = [icn["GR.IC.CYBER"]];

	      sIdm1["01"] = [
	        _STD2525
	          ? icn["GR.M1.TACTICAL SATELLITE COMMUNICATIONS"]
	          : icn["GR.M1.AIRMOBILE/AIR ASSAULT"]
	      ];
	      sIdm1["02"] = [icn["GR.M1.AREA"]];
	      sIdm1["03"] = [icn["GR.M1.ATTACK"]];
	      sIdm1["04"] = [icn["GR.M1.BIOLOGICAL"]];
	      sIdm1["05"] = [icn["GR.M1.BORDER"]];
	      sIdm1["06"] = [icn["GR.M1.BRIDGING"]];
	      sIdm1["07"] = [icn["GR.M1.CHEMICAL"]];
	      sIdm1["08"] = [icn["GR.M1.CLOSE PROTECTION"]];
	      sIdm1["09"] = [icn["GR.M1.COMBAT"]];
	      sIdm1["10"] = [icn["GR.M1.COMMAND AND CONTROL"]];
	      sIdm1["11"] = [icn["GR.M1.COMMUNICATIONS CONTINGENCY PACKAGE"]];
	      sIdm1["12"] = [icn["GR.M1.CONSTRUCTION"]];
	      sIdm1["13"] = [icn["GR.M1.CROSS CULTURAL COMMUNICATION"]];
	      sIdm1["14"] = [icn["GR.M1.CROWD AND RIOT CONTROL"]];
	      sIdm1["15"] = [icn["GR.M1.DECONTAMINATION"]];
	      sIdm1["16"] = [icn["GR.M1.DETENTION"]];
	      sIdm1["17"] = [icn["GR.M1.DIRECT COMMUNICATIONS"]];
	      sIdm1["18"] = [icn["GR.M1.DIVING"]];
	      sIdm1["19"] = [icn["GR.M1.DIVISION"]];
	      sIdm1["20"] = [icn["GR.M1.DOG"]];
	      sIdm1["21"] = [icn["GR.M1.DRILLING"]];
	      sIdm1["22"] = [icn["GR.M1.ELECTRO-OPTICAL"]];
	      sIdm1["23"] = [icn["GR.M1.ENHANCED"]];
	      sIdm1["24"] = [icn["GR.M1.EXPLOSIVE ORDNANCE DISPOSAL"]];
	      sIdm1["25"] = [icn["GR.M1.FIRE DIRECTION CENTRE"]];
	      sIdm1["26"] = [icn["GR.M1.FORCE"]];
	      sIdm1["27"] = [icn["GR.M1.FORWARD"]];
	      sIdm1["28"] = [icn["GR.M1.GROUND STATION MODULE"]];
	      sIdm1["29"] = [icn["GR.M1.LANDING SUPPORT"]];
	      sIdm1["30"] = [icn["GR.M1.LARGE EXTENSION NODE"]];
	      sIdm1["31"] = [icn["GR.M1.MAINTENANCE"]];
	      sIdm1["32"] = [icn["GR.M1.METEOROLOGICAL"]];
	      sIdm1["33"] = [icn["GR.M1.MINE COUNTERMEASURE"]];
	      sIdm1["34"] = [icn["GR.M1.MISSILE"]];
	      sIdm1["35"] = [icn["GR.M1.(MOBILE) ADVISOR AND SUPPORT"]];
	      sIdm1["36"] = [icn["GR.M1.MOBILE SUBSCRIBER EQUIPMENT"]];
	      sIdm1["37"] = [icn["GR.M1.MOBILITY SUPPORT"]];
	      sIdm1["38"] = [icn["GR.M1.MOVEMENT CONTROL CENTRE"]];
	      sIdm1["39"] = [icn["GR.M1.MULTINATIONAL"]];
	      sIdm1["40"] = [icn["GR.M1.MULTINATIONAL SPECIALIZED UNIT"]];
	      sIdm1["41"] = [icn["GR.M1.MULTIPLE ROCKET LAUNCHER"]];
	      sIdm1["42"] = [icn["GR.M1.NATO MEDICAL ROLE 1"]];
	      sIdm1["43"] = [icn["GR.M1.NATO MEDICAL ROLE 2"]];
	      sIdm1["44"] = [icn["GR.M1.NATO MEDICAL ROLE 3"]];
	      sIdm1["45"] = [icn["GR.M1.NATO MEDICAL ROLE 4"]];
	      sIdm1["46"] = [icn["GR.M1.NAVAL"]];
	      sIdm1["47"] = [
	        _STD2525
	          ? icn["GR.M1.UNMANNED AERIAL VEHICLE"]
	          : icn["GR.M1.NODE CENTRE"]
	      ];
	      sIdm1["48"] = [icn["GR.M1.NUCLEAR"]];
	      sIdm1["49"] = [icn["GR.M1.OPERATIONS"]];
	      sIdm1["50"] = [icn["GR.M1.RADAR"]];
	      sIdm1["51"] = [
	        icn["GR.M1.RADIO FREQUENCY IDENTIFICATION (RFID) INTERROGATOR/ SENSOR"]
	      ];
	      sIdm1["52"] = [icn["GR.M1.RADIOLOGICAL"]];
	      sIdm1["53"] = [icn["GR.M1.SEARCH AND RESCUE"]];
	      sIdm1["54"] = [icn["GR.M1.SECURITY"]];
	      sIdm1["55"] = [icn["GR.M1.SENSOR"]];
	      sIdm1["56"] = [
	        _STD2525 ? icn["GR.M1.WEAPON"] : icn["GR.M1.SENSOR CONTROL MODULE"]
	      ];
	      sIdm1["57"] = [icn["GR.M1.SIGNALS INTELLIGENCE"]];
	      sIdm1["58"] = [
	        _STD2525 ? icn["GR.M1.ARMORED"] : icn["GR.M1.SINGLE SHELTER SWITCH"]
	      ];
	      sIdm1["59"] = [icn["GR.M1.SINGLE ROCKET LAUNCHER"]];
	      sIdm1["60"] = [icn["GR.M1.SMOKE"]];
	      sIdm1["61"] = [icn["GR.M1.SNIPER"]];
	      sIdm1["62"] = [icn["GR.M1.SOUND RANGING"]];
	      sIdm1["63"] = [icn["GR.M1.SPECIAL OPERATIONS FORCES (SOF)"]];
	      sIdm1["64"] = [icn["GR.M1.SPECIAL WEAPONS AND TACTICS"]];
	      sIdm1["65"] = [icn["GR.M1.SURVEY"]];
	      sIdm1["66"] = [icn["GR.M1.TACTICAL EXPLOITATION"]];
	      sIdm1["67"] = [icn["GR.M1.TARGET ACQUISITION"]];
	      sIdm1["68"] = [icn["GR.M1.TOPOGRAPHIC"]];
	      sIdm1["69"] = [icn["GR.M1.UTILITY"]];
	      sIdm1["70"] = [icn["GR.M1.VIDEO IMAGERY"]];
	      sIdm1["71"] = [
	        _STD2525 ? icn["GR.M1.MOBILITY ASSAULT"] : icn["GR.M1.ACCIDENT"]
	      ];
	      sIdm1["72"] = [
	        _STD2525 ? icn["GR.M1.AMPHIBIOUS WARFARE SHIP "] : icn["GR.M1.OTHER"]
	      ];
	      sIdm1["73"] = [
	        _STD2525 ? icn["GR.M1.LOAD HANDLING SYSTEM"] : icn["GR.M1.CIVILIAN"]
	      ];
	      sIdm1["74"] = [
	        _STD2525
	          ? icn["GR.M1.PALLETIZED LOAD SYSTEM"]
	          : icn["GR.M1.ANTISUBMARINE WARFARE"]
	      ];
	      sIdm1["75"] = [icn["GR.M1.MEDEVAC"]];
	      sIdm1["76"] = [icn["GR.M1.RANGER"]];
	      sIdm1["77"] = [icn["GR.M1.SUPPORT"]];
	      sIdm1["78"] = [icn["GR.M1.AVIATION"]];
	      sIdm1["79"] = [icn["GR.M1.ROUTE, RECONNAISSANCE, AND CLEARANCE"]];
	      sIdm1["80"] = [icn["GR.M1.TILT-ROTOR"]];
	      sIdm1["81"] =
	        edition == "D"
	          ? [icn["GR.M1.COMMAND POST NODE"]]
	          : [icn["GR.M1.NATO MEDICAL ROLE 2 BASIC"]];
	      sIdm1["82"] =
	        edition == "D"
	          ? [icn["GR.M1.JOINT NETWORK NODE"]]
	          : [icn["GR.M1.NATO MEDICAL ROLE 2 ENHANCED"]];
	      sIdm1["83"] =
	        edition == "D"
	          ? [icn["GR.M1.RETRANSMISSION SITE"]]
	          : [icn["GR.M1.NATO MEDICAL ROLE 2 FORWARD"]];
	      sIdm1["84"] = [icn["GR.M1.ASSAULT"]];

	      sIdm1["85"] = [icn["GR.M1.WEAPONS"]];
	      sIdm1["86"] = [icn["GR.M1.CRIMINAL INVESTIGATION DIVISION"]];
	      sIdm1["87"] = [icn["GR.M1.DIGITAL"]];
	      sIdm1["88"] = [icn["GR.M1.NETWORK OR NETWORK OPERATIONS"]];
	      sIdm1["89"] = [
	        icn[
	          "GR.M1.AIRFIELD, AERIAL PORT OF DEBARKATION, OR AERIAL PORT OF EMBARKATION"
	        ]
	      ];
	      sIdm1["90"] = [icn["GR.M1.PIPELINE"]];
	      sIdm1["91"] = [icn["GR.M1.POSTAL"]];
	      sIdm1["92"] = [icn["GR.M1.WATER"]];
	      sIdm1["93"] = [icn["GR.M1.INDEPENDENT COMMAND"]];

	      sIdm1["94"] = [icn["GR.M1.THEATRE"]];
	      sIdm1["95"] = [icn["GR.M1.ARMY"]];
	      sIdm1["96"] = [icn["GR.M1.CORPS"]];
	      sIdm1["97"] = [icn["GR.M1.BRIGADE"]];
	      sIdm1["98"] = [icn["GR.IC.FF.HEADQUARTERS OR HEADQUARTERS ELEMENT"]];
	      sIdm1["99"] = [icn["GR.M1.MULTI-DOMAIN"]];

	      sIdm2["01"] = [icn["GR.M2.AIRBORNE"]];
	      sIdm2["02"] = [icn["GR.M2.ARCTIC"]];
	      sIdm2["03"] = [icn["GR.M2.BATTLE DAMAGE REPAIR"]];
	      sIdm2["04"] = [icn["GR.M2.BICYCLE EQUIPPED"]];
	      sIdm2["05"] = [icn["GR.M2.CASUALTY STAGING"]];
	      sIdm2["06"] = [icn["GR.M2.CLEARING"]];
	      sIdm2["07"] = [icn["GR.M2.CLOSE RANGE"]];
	      sIdm2["08"] = [icn["GR.M2.CONTROL"]];
	      sIdm2["09"] = [icn["GR.M2.DECONTAMINATION"]];
	      sIdm2["10"] = [icn["GR.M2.DEMOLITION"]];
	      sIdm2["11"] = [icn["GR.M2.DENTAL"]];
	      sIdm2["12"] = [icn["GR.M2.DIGITAL"]];
	      sIdm2["13"] = [icn["GR.M2.ENHANCED POSITION LOCATION REPORTING SYSTEM"]];
	      sIdm2["14"] = [icn["GR.M2.EQUIPMENT"]];
	      sIdm2["15"] = [icn["GR.M2.HEAVY"]];
	      sIdm2["16"] = [icn["GR.M2.HIGH ALTITUDE"]];
	      sIdm2["17"] = [icn["GR.M2.INTERMODAL"]];
	      sIdm2["18"] = [icn["GR.M2.INTENSIVE CARE"]];
	      sIdm2["19"] = [icn["GR.M2.LIGHT"]];
	      sIdm2["20"] = [icn["GR.M2.LABORATORY"]];
	      sIdm2["21"] = [icn["GR.M2.LAUNCHER"]];
	      sIdm2["22"] = [icn["GR.M2.LONG RANGE"]];
	      sIdm2["23"] = [icn["GR.M2.LOW ALTITUDE"]];
	      sIdm2["24"] = [icn["GR.M2.MEDIUM"]];
	      sIdm2["25"] = [icn["GR.M2.MEDIUM ALTITUDE"]];
	      sIdm2["26"] = [icn["GR.M2.MEDIUM RANGE"]];
	      sIdm2["27"] = [icn["GR.M2.MOUNTAIN"]];
	      sIdm2["28"] = [icn["GR.M2.HIGH TO MEDIUM ALTITUDE"]];
	      sIdm2["29"] = [icn["GR.M2.MULTI-CHANNEL"]];
	      sIdm2["30"] = [icn["GR.M2.OPTICAL"]];
	      sIdm2["31"] = [icn["GR.M2.PACK ANIMAL"]];
	      sIdm2["32"] = [icn["GR.M2.PATIENT EVACUATION COORDINATION"]];
	      sIdm2["33"] = [icn["GR.M2.PREVENTIVE MAINTENANCE"]];
	      sIdm2["34"] = [icn["GR.M2.PSYCHOLOGICAL"]];
	      sIdm2["35"] = [icn["GR.M2.RADIO RELAY LINE OF SIGHT"]];
	      sIdm2["36"] = [icn["GR.M2.RAILROAD"]];
	      sIdm2["37"] = [icn["GR.M2.RECOVERY (UNMANNED SYSTEMS)"]];
	      sIdm2["38"] = [icn["GR.M2.RECOVERY (MAINTENANCE)"]];
	      sIdm2["39"] = [icn["GR.M2.RESCUE COORDINATION CENTRE"]];
	      sIdm2["40"] = [icn["GR.M2.RIVERINE"]];
	      sIdm2["41"] = [icn["GR.M2.SINGLE CHANNEL"]];
	      sIdm2["42"] = [icn["GR.M2.SKI"]];
	      sIdm2["43"] = [icn["GR.M2.SHORT RANGE"]];
	      sIdm2["44"] = [icn["GR.M2.STRATEGIC"]];
	      sIdm2["45"] = [icn["GR.M2.SUPPORT"]];
	      sIdm2["46"] = [icn["GR.M2.TACTICAL"]];
	      sIdm2["47"] = [icn["GR.M2.TOWED"]];
	      sIdm2["48"] = [icn["GR.M2.TROOP"]];
	      sIdm2["49"] = [icn["GR.M2.VERTICAL OR SHORT TAKE-OFF AND LANDING "]];
	      sIdm2["50"] = [icn["GR.M2.VETERINARY"]];
	      sIdm2["51"] = [icn["GR.M2.WHEELED"]];
	      sIdm2["52"] = [icn["GR.M2.HIGH TO LOW ALTITUDE"]];
	      sIdm2["53"] = [icn["GR.M2.MEDIUM TO LOW ALTITUDE"]];
	      sIdm2["54"] = [icn["GR.M2.ATTACK"]];
	      sIdm2["55"] = [icn["GR.M2.REFUEL"]];
	      sIdm2["56"] = [icn["GR.M2.UTILITY"]];
	      sIdm2["57"] = [icn["GR.M2.COMBAT SEARCH AND RESCUE"]];

	      sIdm2["58"] = [icn["GR.M2.GUERILLA"]];
	      sIdm2["59"] = [icn["GR.M2.AIR ASSAULT"]];
	      sIdm2["60"] = [icn["GR.M2.AMPHIBIOUS"]];
	      sIdm2["61"] = [icn["GR.M2.VERY HEAVY"]];
	      sIdm2["62"] = [icn["GR.IC.FF.SUPPLY"]];
	      sIdm2["63"] = [icn["GR.M2.CYBERSPACE"]];
	      sIdm2["64"] = [icn["GR.M2.NAVY BARGE, SELF-PROPELLED"]];
	      sIdm2["65"] = [icn["GR.M2.NAVY BARGE, NOT SELF-PROPELLED"]];
	      sIdm2["66"] = [icn["GR.M2.LAUNCH"]];
	      sIdm2["67"] = [icn["GR.M2.LANDING CRAFT"]];
	      sIdm2["68"] = [icn["GR.M2.LANDING SHIP"]];
	      sIdm2["69"] = [icn["GR.M2.SERVICE CRAFT/YARD"]];
	      sIdm2["70"] = [icn["GR.M2.TUG HARBOR"]];
	      sIdm2["71"] = [icn["GR.M2.OCEAN GOING TUG BOAT"]];
	      sIdm2["72"] = [icn["GR.M2.SURFACE DEPLOYMENT AND DISTRIBUTION COMMAND"]];
	      sIdm2["73"] = [icn["GR.M2.NONCOMBATANT GENERIC VESSEL"]];
	      sIdm2["74"] = [icn["GR.M2.COMPOSITE"]];
	      sIdm2["75"] = [icn["GR.M2.SHELTER"]];
	      sIdm2["76"] = [icn["GR.M2.LIGHT AND MEDIUM"]];
	      sIdm2["77"] = [icn["GR.M2.SELF-PROPELLED"]];
	      sIdm2["78"] = [icn["GR.M2.SECURITY FORCE ASSISTANCE"]];
	      sIdm2["81"] = [icn["GR.M2.SURGICAL"]];
	      sIdm2["82"] = [icn["GR.M2.BLOOD"]];
	      sIdm2["83"] = [icn["GR.M2.COMBAT AND OPERATIONAL STRESS CONTROL"]];
	      sIdm2["84"] = [icn["GR.M2.JAMMING"]];
	      sIdm2["86"] = [icn["GR.M2.OPTOMETRY"]];
	      sIdm2["87"] = [icn["GR.M2.PREVENTIVE MEDICIN"]];
	      sIdm2["89"] = [icn["GR.IC.FF.AIR DEFENCE"]];
	    }
	  }
	};

	var landcivilian = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function landcivilian(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Land civilian individuals/organization
	    if (symbolSet == "11") {
	      sId["110000"] = [icn["GR.I.CIVILIAN"]];
	      sId["110100"] = [icn["GR.IC.ENVIRONMENTAL PROTECTION"]];
	      sId["110200"] = [icn["GR.IC.GOVERNMENT ORGANIZATION"]];
	      sId["110300"] = [icn["ST.IC.INDIVIDUAL"]];
	      sId["110400"] = [icn["ST.IC.GROUP"]];
	      sId["110500"] = [icn["ST.IC.KILLING VICTIM"]];
	      sId["110600"] = [icn["ST.IC.KILLING VICTIMS"]];
	      sId["110700"] = [
	        icn["ST.IC.INDIVIDUAL"],
	        icn["ST.IC.ATTEMPTED CRIMINAL ACTIVITY"],
	      ]; //VICTIM OF AN ATTEMPTED CRIME
	      sId["110800"] = [icn["ST.IC.SPY"]];
	      sId["110900"] = [icn["ST.IC.COMPOSITE LOSS"]];
	      sId["111000"] = [icn["GR.IC.EMERGENCY MEDICAL OPERATION"]];

	      sIdm1["01"] = [icn["ST.M1.ASSASSINATION"]];
	      sIdm1["02"] = [icn["ST.M1.EXECUTION (WRONGFUL KILLING)"]];
	      sIdm1["03"] = [icn["ST.M1.MURDER"]];
	      sIdm1["04"] = [icn["ST.M1.HIJACKING/HIJACKED"]];
	      sIdm1["05"] = [icn["ST.M1.KIDNAPPING"]];
	      sIdm1["06"] = [icn["ST.M1.PIRACY"]];
	      sIdm1["07"] = [icn["ST.M1.RAPE"]];
	      sIdm1["08"] = [icn["ST.M1.CIVILIAN"]];
	      sIdm1["09"] = [icn["ST.M1.DISPLACED PERSONS, REFUGEES, AND EVACUEES"]];
	      sIdm1["10"] = [icn["ST.M1.FOREIGN FIGHTERS"]];
	      sIdm1["11"] = [icn["ST.M1.GANG"]];
	      sIdm1["12"] = [icn["ST.M1.GOVERNMENT ORGANIZATION"]];
	      sIdm1["13"] = [icn["ST.M1.LEADER"]];
	      sIdm1["14"] = [icn["ST.M1.NONGOVERNMENTAL ORGANIZATION (NGO)"]];
	      sIdm1["15"] = [icn["ST.M1.COERCED/IMPRESSED"]];
	      sIdm1["16"] = [icn["ST.M1.WILLING RECRUIT"]];
	      sIdm1["17"] = [icn["ST.M1.RELIGIOUS"]];
	      sIdm1["18"] = [icn["ST.M1.TARGETED"]];
	      sIdm1["19"] = [icn["ST.M1.TERRORIST"]];
	      sIdm1["20"] = [icn["ST.M1.SPEAKER"]];
	      sIdm1["21"] = [icn["ST.M1.ACCIDENT"]];
	      sIdm1["22"] = [icn["ST.M1.COMBAT"]];
	      sIdm1["23"] = [icn["ST.M1.OTHER"]];
	      sIdm1["24"] = [icn["ST.M1.LOOT"]];
	      sIdm1["25"] = [icn["GR.M1.HIJACKER"]];
	      sIdm1["26"] = [icn["GR.M1.CYBERSPACE"]];

	      sIdm2["01"] = [icn["ST.M2.LEADER OR LEADERSHIP"]];
	      sIdm2["02"] = [icn["GR.M2.CYBERSPACE"]];
	    }
	  },
	};

	var landequipment = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function landequipment(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Land Equipment
	    if (symbolSet == "15") {
	      sId["110000"] = [icn["GR.EQ.WEAPON"]];
	      sId["110100"] = [icn["GR.EQ.RIFLE"]];
	      sId["110101"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110102"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	      sId["110103"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.LONG RANGE"]];
	      sId["110200"] = [icn["GR.EQ.MACHINE GUN"]];
	      sId["110201"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110202"] = [
	        icn["GR.EQ.MACHINE GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110203"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110300"] = [icn["GR.EQ.GRENADE LAUNCHER"]];
	      sId["110301"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"]),
	      ];
	      sId["110302"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"]),
	      ];
	      sId["110303"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.LONG RANGE"]),
	      ];
	      sId["110400"] = [icn["GR.EQ.FLAME THROWER"]];
	      sId["110500"] = [icn["GR.EQ.AIR DEFENCE GUN"]];
	      sId["110501"] = [icn["GR.EQ.AIR DEFENCE GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110502"] = [
	        icn["GR.EQ.AIR DEFENCE GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110503"] = [icn["GR.EQ.AIR DEFENCE GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110600"] = [icn["GR.EQ.ANTITANK GUN"]];
	      sId["110601"] = [icn["GR.EQ.ANTITANK GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110602"] = [
	        icn["GR.EQ.ANTITANK GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110603"] = [icn["GR.EQ.ANTITANK GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110700"] = [icn["GR.EQ.DIRECT FIRE GUN"]];
	      sId["110701"] = [icn["GR.EQ.DIRECT FIRE GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110702"] = [
	        icn["GR.EQ.DIRECT FIRE GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110703"] = [icn["GR.EQ.DIRECT FIRE GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110800"] = [icn["GR.EQ.RECOILLESS GUN"]];
	      sId["110801"] = [icn["GR.EQ.RECOILLESS GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110802"] = [
	        icn["GR.EQ.RECOILLESS GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110803"] = [icn["GR.EQ.RECOILLESS GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110900"] = [icn["GR.EQ.HOWITZER"]];
	      sId["110901"] = [icn["GR.EQ.HOWITZER"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110902"] = [icn["GR.EQ.HOWITZER"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	      sId["110903"] = [icn["GR.EQ.HOWITZER"], icn["GR.EQ.LONG RANGE"]];
	      sId["111000"] = [icn["GR.EQ.MISSILE LAUNCHER"]];
	      sId["111001"] = [icn["GR.EQ.MISSILE LAUNCHER"], icn["GR.EQ.SHORT RANGE"]];
	      sId["111002"] = [
	        icn["GR.EQ.MISSILE LAUNCHER"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111003"] = [icn["GR.EQ.MISSILE LAUNCHER"], icn["GR.EQ.LONG RANGE"]];
	      sId["111100"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	      ];
	      sId["111101"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.SHORT RANGE"],
	      ];
	      sId["111102"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.SHORT RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	      ];
	      sId["111103"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.SHORT RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	      ];
	      sId["111104"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111105"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	      ];
	      sId["111106"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	      ];
	      sId["111107"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.LONG RANGE"],
	      ];
	      sId["111108"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.LONG RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TLAR"],
	      ];
	      sId["111109"] = [
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR"],
	        icn["GR.EQ.LONG RANGE"],
	        icn["GR.EQ.AIR DEFENCE MISSILE LAUNCHER SURFACE-TO-AIR TELAR"],
	      ];
	      sId["111200"] = [icn["GR.EQ.ANTITANK MISSILE LAUNCHER"]];
	      sId["111201"] = [
	        icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	        icn["GR.EQ.SHORT RANGE"],
	      ];
	      sId["111202"] = [
	        icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111203"] = [
	        icn["GR.EQ.ANTITANK MISSILE LAUNCHER"],
	        icn["GR.EQ.LONG RANGE"],
	      ];
	      sId["111300"] = [icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"]];
	      sId["111301"] = [
	        icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	        icn["GR.EQ.SHORT RANGE"],
	      ];
	      sId["111302"] = [
	        icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111303"] = [
	        icn["GR.EQ.SURFACE-TO-SURFACE MISSILE LAUNCHER"],
	        icn["GR.EQ.LONG RANGE"],
	      ];
	      sId["111400"] = [icn["GR.EQ.MORTAR"]];
	      sId["111401"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.SHORT RANGE"]];
	      sId["111402"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	      sId["111403"] = [icn["GR.EQ.MORTAR"], icn["GR.EQ.LONG RANGE"]];
	      sId["111500"] = [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]];
	      sId["111501"] = [
	        icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	        icn["GR.EQ.SHORT RANGE"],
	      ];
	      sId["111502"] = [
	        icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111503"] = [
	        icn["GR.EQ.SINGLE ROCKET LAUNCHER"],
	        icn["GR.EQ.LONG RANGE"],
	      ];
	      sId["111600"] = [icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"]];
	      sId["111601"] = [
	        icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	        ms._translate(0, 10, icn["GR.EQ.SHORT RANGE"]),
	      ];
	      sId["111602"] = [
	        icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	        ms._translate(0, 10, icn["GR.EQ.INTERMEDIATE RANGE"]),
	      ];
	      sId["111603"] = [
	        icn["GR.EQ.MULTIPLE ROCKET LAUNCHER"],
	        ms._translate(0, 10, icn["GR.EQ.LONG RANGE"]),
	      ];
	      sId["111700"] = [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]];
	      sId["111701"] = [
	        icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	        icn["GR.EQ.SHORT RANGE"],
	      ];
	      sId["111702"] = [
	        icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["111703"] = [
	        icn["GR.EQ.ANTITANK ROCKET LAUNCHER"],
	        icn["GR.EQ.LONG RANGE"],
	      ];
	      sId["111800"] = [icn["GR.EQ.NON-LETHAL WEAPON"]];
	      sId["111900"] = [icn["GR.EQ.TASER"]];
	      sId["112000"] = [icn["GR.EQ.WATER CANNON"]];
	      sId["120000"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	      ];
	      sId["120100"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.ARMOURED VEHICLE"],
	      ];
	      sId["120101"] = [icn["GR.EQ.ARMOURED FIGHTING VEHICLE"]];
	      sId["120102"] = [
	        icn["GR.EQ.ARMOURED FIGHTING VEHICLE (AFV) COMMAND AND CONTROL"],
	      ];
	      sId["120103"] = [icn["GR.EQ.ARMOURED PERSONNEL CARRIER"]];
	      sId["120104"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        icn["GR.EQ.MEDICAL EVACUATION"],
	      ];
	      sId["120105"] = [icn["GR.IC.ARMOUR"]];
	      sId["120106"] = [icn["GR.IC.ARMOUR"], icn["GR.EQ.TANK RECOVERY VEHICLE"]];
	      sId["120107"] = [icn["GR.IC.ARMOUR"], icn["GR.EQ.MEDICAL EVACUATION"]];
	      sId["120108"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        icn["GR.EQ.TANK RECOVERY VEHICLE"],
	      ];
	      sId["120109"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        icn["GR.EQ.COMBAT SERVICE SUPPORT VEHICLE"],
	      ];
	      sId["120110"] = [
	        icn["GR.EQ.ARMOURED FIGHTING VEHICLE"],
	        icn["GR.EQ.CROSS-COUNTRY"],
	      ];
	      sId["120111"] = [
	        icn["GR.EQ.ARMOURED FIGHTING VEHICLE"],
	        icn["GR.EQ.CROSS-COUNTRY"],
	        icn["GR.IC.FF.RECONNAISSANCE EQUPIMENT"],
	      ];
	      sId["120200"] = [icn["GR.EQ.TANK"]];
	      sId["120201"] = [icn["GR.EQ.TANK"], icn["GR.EQ.LIGHT TANK"]];
	      sId["120202"] = [icn["GR.EQ.TANK"], icn["GR.EQ.MEDIUM TANK"]];
	      sId["120203"] = [icn["GR.EQ.TANK"], icn["GR.EQ.HEAVY TANK"]];
	      sId["120300"] = [icn["GR.EQ.TANK"], icn["GR.EQ.TANK RECOVERY VEHICLE"]];
	      sId["120301"] = [
	        icn["GR.EQ.TANK"],
	        icn["GR.EQ.LIGHT TANK"],
	        icn["GR.EQ.TANK RECOVERY VEHICLE"],
	      ];
	      sId["120302"] = [
	        icn["GR.EQ.TANK"],
	        icn["GR.EQ.MEDIUM TANK"],
	        icn["GR.EQ.TANK RECOVERY VEHICLE"],
	      ];
	      sId["120303"] = [
	        icn["GR.EQ.TANK"],
	        icn["GR.EQ.HEAVY TANK"],
	        icn["GR.EQ.TANK RECOVERY VEHICLE"],
	      ];
	      sId["130000"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        ms._scale(0.7, icn["GR.IC.ENGINEER"], true),
	      ];
	      sId["130100"] = [icn["GR.IN.IC.BRIDGE"]];
	      sId["130200"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        ms._scale(0.8, icn["GR.IN.IC.BRIDGE"], true),
	      ];
	      sId["130300"] = [icn["GR.IN.IC.BRIDGE"], icn["GR.EQ.FIXED BRIDGE"]];
	      sId["130400"] = [icn["GR.IN.IC.BRIDGE"], icn["GR.M2.RIVERINE"]];
	      sId["130500"] = [
	        icn["GR.IN.IC.BRIDGE"],
	        icn["GR.EQ.FOLDING GIRDER BRIDGE"],
	      ];
	      sId["130600"] = [icn["GR.IN.IC.BRIDGE"], icn["GR.EQ.HOLLOW DECK BRIDGE"]];
	      sId["130700"] = [icn["GR.IC.DRILLING"]];
	      sId["130701"] = [
	        ms._scale(0.7, icn["GR.IC.DRILLING"], true),
	        icn["GR.EQ.UTILITY VEHICLE"],
	      ];
	      sId["130800"] = [icn["GR.EQ.EARTHMOVER"]];
	      sId["130801"] = [icn["GR.EQ.MULTIFUNCTIONAL EARTHMOVER/DIGGER"]];
	      sId["130900"] = [icn["GR.EQ.MINE CLEARING EQUIPMENT"]];
	      sId["130901"] = [
	        icn["GR.EQ.MINE CLEARING EQUIPMENT"],
	        ms._translate(0, -10, icn["GR.EQ.LIMITED CROSS-COUNTRY"]),
	      ];
	      sId["130902"] = [icn["GR.EQ.MINE CLEARING EQUIPMENT"], icn["GR.EQ.TANK"]];
	      sId["130903"] = [
	        icn["GR.EQ.ASSAULT BREACHER VEHICLE (ABV) WITH COMBAT DOZER BLADE"],
	      ];
	      sId["130904"] = [
	        icn["GR.M1.ROUTE, RECONNAISSANCE, AND CLEARANCE"],
	        icn["GR.IC.ENGINEER UTILITY VEHICLE"],
	        icn["GR.M2.MEDIUM"],
	      ];
	      sId["130905"] = [
	        icn["GR.M1.ROUTE, RECONNAISSANCE, AND CLEARANCE"],
	        icn["GR.IC.ENGINEER UTILITY VEHICLE"],
	        icn["GR.M2.HEAVY"],
	      ];
	      sId["131000"] = [icn["GR.IC.MINE LAYING"]];
	      sId["131001"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        ms._translate(0, 10, ms._scale(0.7, icn["GR.IC.MINE LAYING"], true)),
	      ];
	      sId["131002"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        icn["GR.EQ.ARMORED CARRIER WITH VOLCANO"],
	      ];
	      sId["131003"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	        icn["GR.EQ.ARMORED CARRIER WITH VOLCANO"],
	      ];
	      sId["131100"] = [icn["GR.EQ.DOZER"]];
	      sId["131101"] = [icn["GR.EQ.DOZER ARMORED"]];
	      sId["131200"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        ms._scale(0.6, icn["GR.IC.ENGINEER"], true),
	      ];
	      sId["131300"] = [
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER"],
	        ms._scale(0.6, icn["GR.IC.ENGINEER"], true),
	        icn["GR.EQ.ARMOURED PERSONNEL CARRIER ENGINEER RECON VEHICLE"],
	      ];
	      sId["131400"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	        icn["GR.EQ.UTILITY VEHICLE BACKHOE"],
	      ];
	      sId["131500"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	        ms._scale(0.6, icn["GR.IC.ENGINEER"], true),
	      ];
	      sId["131600"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.CROSS-COUNTRY"],
	        icn["GR.EQ.UTILITY VEHICLE FERRY TRANSPORTER"],
	      ];
	      sId["140000"] = [];
	      sId["140100"] = [icn["GR.EQ.UTILITY VEHICLE"]];
	      sId["140200"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.MEDICAL VEHICLE"],
	      ];
	      sId["140300"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.MEDICAL EVACUATION"],
	      ];
	      sId["140400"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.MOBILE EMERGENCY PHYSICIAN"],
	      ];
	      sId["140500"] = [icn["GR.EQ.BUS"]];
	      sId["140600"] = [icn["GR.EQ.SEMI-TRAILER TRUCK"]];
	      sId["140601"] = [
	        icn["GR.EQ.SEMI-TRAILER TRUCK"],
	        icn["GR.EQ.UTILITY VEHICLE LIGHT"],
	      ];
	      sId["140602"] = [
	        icn["GR.EQ.SEMI-TRAILER TRUCK"],
	        icn["GR.EQ.UTILITY VEHICLE MEDIUM"],
	      ];
	      sId["140603"] = [
	        icn["GR.EQ.SEMI-TRAILER TRUCK"],
	        icn["GR.EQ.UTILITY VEHICLE HEAVY"],
	      ];
	      sId["140700"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	      ];
	      sId["140800"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.CROSS-COUNTRY"],
	      ];
	      sId["140900"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        ms._scale(0.8, icn["GR.IC.FF.CLASS III"], true),
	      ];
	      sId["141000"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        ms._scale(0.7, icn["GR.IC.WATER"], true),
	      ];
	      sId["141100"] = [
	        icn["GR.EQ.WATER VEHICLE"],
	        icn["GR.EQ.LIMITED CROSS-COUNTRY"],
	      ];
	      sId["141200"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	      ];
	      sId["141201"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	        icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.LIGHT"],
	      ];
	      sId["141202"] = [
	        icn["GR.EQ.UTILITY VEHICLE"],
	        icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK"],
	        icn["GR.EQ.UTILITY VEHICLE.TOW TRUCK.HEAVY"],
	      ];
	      sId["150000"] = [];
	      sId["150100"] = [icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	      sId["150200"] = [icn["GR.EQ.RAILCAR"]];
	      sId["160000"] = [];
	      sId["160100"] = [icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"]];
	      sId["160101"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      ];
	      sId["160102"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      ];
	      sId["160103"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.AUTOMOBILE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      ];
	      sId["160200"] = [icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"]];
	      sId["160201"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      ];
	      sId["160202"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      ];
	      sId["160203"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      ];
	      sId["160300"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	      ];
	      sId["160301"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      ];
	      sId["160302"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      ];
	      sId["160303"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      ];
	      sId["160400"] = [icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"]];
	      sId["160401"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      ];
	      sId["160402"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      ];
	      sId["160403"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      ];
	      sId["160500"] = [icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"]];
	      sId["160501"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	      ];
	      sId["160502"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	      ];
	      sId["160503"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.JEEP TYPE VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	      ];
	      sId["160600"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160601"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160602"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160603"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160700"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160701"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.LIGHT"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160702"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.MEDIUM"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160703"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.OPEN-BED TRUCK"],
	        icn["GR.EQ.CIVILIAN VEHICLE.HEAVY"],
	        icn["GR.EQ.CIVILIAN VEHICLE.TRAILER"],
	      ];
	      sId["160800"] = [icn["ST.IC.KNOWN INSURGENT VEHICLE"]];
	      sId["160900"] = [icn["ST.IC.KNOWN INSURGENT VEHICLE"], icn["ST.M1.DRUG"]];
	      sId["170000"] = [icn["GR.IC.FF.LAW ENFORCEMENT"]];
	      sId["170100"] = [
	        icn[
	          "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	        ],
	      ];
	      sId["170200"] = [icn["GR.IC.FF.BORDER PATROL"]];
	      sId["170300"] = [icn["GR.IC.FF.CUSTOMS SERVICE"]];
	      sId["170400"] = [icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"]];
	      sId["170500"] = [icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"]];
	      sId["170600"] = [icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"]];
	      sId["170700"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	      sId["170800"] = [icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"]];
	      sId["170900"] = [icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"]];
	      sId["171000"] = [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	      sId["171100"] = [icn["GR.IC.FF.US MARSHALS SERVICE"]];
	      sId["180000"] = [icn["GR.EQ.PACK ANIMAL"]];
	      sId["190000"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE SUPPORT"],
	      ];
	      sId["190100"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE TRANSLOADER"],
	      ];
	      sId["190200"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE TRANSPORTER"],
	      ];
	      sId["190300"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE CRANE/LOADING DEVICE"],
	      ];
	      sId["190400"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE PROPELLANT TRANSPORTER"],
	      ];
	      sId["190500"] = [
	        icn[
	          "GR.EQ.ARMOURED PROTECTED VEHICLE WITH LIMITED CROSS COUNTRY MOBILITY"
	        ],
	        icn["GR.EQ.MISSILE WARHEAD TRANSPORTER"],
	      ];
	      sId["200000"] = [];
	      sId["200100"] = [icn["GR.IC.FF.BROADCAST TRANSMITTER ANTENNA"]];
	      sId["200200"] = [icn["ST.IC.BOMB"]];
	      sId["200300"] = [icn["ST.IC.BOOBY TRAP"]];
	      sId["200400"] = [icn["GR.EQ.CBRN EQUIPMENT"]];
	      sId["200500"] = [icn["GR.EQ.COMPUTER SYSTEM"]];
	      sId["200600"] = [icn["GR.EQ.COMMAND LAUNCH EQUIPMENT (CLE)"]];
	      sId["200700"] = [icn["GR.EQ.GENERATOR SET"]];
	      sId["200800"] = [
	        icn[
	          "GR.EQ.GROUND-BASED MIDCOURSE DEFENSE (GMD) FIRE CONTROL (GFC) CENTER"
	        ],
	      ];
	      sId["200900"] = [
	        icn[
	          "GR.EQ.IN-FLIGHT INTERCEPTOR COMMUNICATIONS SYSTEM (IFICS) DATA TERMINAL (IDT)"
	        ],
	      ];
	      sId["201000"] = [icn["GR.EQ.LASER"]];
	      sId["201100"] = [icn["GR.EQ.PSYCHOLOGICAL OPERATIONS EQUIPMENT"]];
	      sId["201200"] = [icn["GR.IC.SUSTAINMENT"]];
	      sId["201300"] = [icn["GR.EQ.TENT"]];
	      sId["201301"] = [icn["GR.EQ.TENT CIVILIAN"]];
	      sId["201302"] = [icn["GR.EQ.TENT MILITARY"]];
	      sId["201400"] = [icn["GR.EQ.UNIT DEPLOYMENT SHIPMENTS"]];
	      sId["201500"] = [icn["GR.IC.EMERGENCY MEDICAL OPERATION"]];
	      sId["201501"] = [icn["GR.IC.MEDICAL EVACUATION HELICOPTER"]];
	      sId["210000"] = [];
	      sId["210100"] = [icn["GR.EQ.LAND MINE"]];
	      sId["210200"] = [icn["GR.EQ.ANTIPERSONNEL LAND MINE"]];
	      sId["210300"] = [icn["GR.EQ.ANTITANK MINE"]];
	      sId["210400"] = [icn["GR.EQ.IMPROVISED EXPLOSIVE DEVICE"]];
	      sId["210500"] = [icn["GR.EQ.ANTIPERSONNEL LAND MINE LESS THAN LETHAL"]];
	      sId["220000"] = [];
	      sId["220100"] = [icn["GR.EQ.SENSOR"]];
	      sId["220200"] = [icn["GR.EQ.SENSOR EMPLACED"]];
	      sId["220300"] = [icn["GR.IC.RADAR"]];
	      sId["230000"] = [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	      sId["230100"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.UTILITY VEHICLE"],
	        icn["GR.M1.MEDEVAC"],
	      ];
	      sId["230200"] = [icn["GR.IC.FIRE PROTECTION"]];
	      sId["240000"] = [icn["GR.IC.MANUAL TRACK"]];
	      sId["250000"] = [icn["GR.IC.AVIATION ROTARY WING"]];

	      //sIdm1['00'] = 'Unspecified';
	      sIdm1["01"] = [icn["GR.M1.BIOLOGICAL"]];
	      sIdm1["02"] = [icn["GR.M1.CHEMICAL"]];
	      sIdm1["03"] = [icn["GR.M1.EARLY WARNING RADAR"]];
	      sIdm1["04"] = [icn["GR.M1.INTRUSION"]];
	      sIdm1["05"] = [icn["GR.M1.NUCLEAR"]];
	      sIdm1["06"] = [icn["GR.M1.RADIOLOGICAL"]];
	      sIdm1["07"] = [icn["GR.M1.UPGRADED EARLY WARNING RADAR"]];
	      sIdm1["08"] = [icn["GR.M1.HIJACKING"]];
	      sIdm1["09"] = [icn["GR.M1.CIVILIAN"]];
	      sIdm1["10"] = [icn["GR.M1.TILT-ROTOR"]];
	      sIdm1["11"] = [];
	      sIdm1["12"] = [icn["GR.M1.MULTI-PURPOSE BLADE"]];
	      sIdm1["13"] = [icn["GR.M1.TANK-WIDTH MINE PLOW"]];
	      sIdm1["14"] = [icn["GR.M1.BRIDGING"]];
	      sIdm1["15"] = [icn["GR.M1.CYBERSPACE"]];
	      sIdm1["16"] = [icn["GR.M1.ARMORED"]];
	      sIdm1["17"] = [icn["GR.M1.ATTACK"]];
	      sIdm1["18"] = [icn["GR.M1.CARGO"]];
	      sIdm1["19"] = [icn["GR.M1.MAINTENANCE"]];
	      sIdm1["20"] = [icn["GR.M1.MEDEVAC"]];
	      sIdm1["21"] = [icn["GR.IN.M1.PETROLEUM"]];
	      sIdm1["22"] = [icn["GR.M1.UTILITY"]];
	      sIdm1["23"] = [icn["GR.M1.WATER"]];
	      sIdm1["24"] = [icn["GR.M1.ROBOTIC"]];

	      sIdm2["01"] = [icn["GR.M2.CYBERSPACE"]];
	      sIdm2["02"] = [icn["GR.M2.LIGHT"]];
	      sIdm2["03"] = [icn["GR.M2.MEDIUM"]];
	      sIdm2["04"] = [icn["GR.M2.RAILROAD"]];
	      sIdm2["05"] = [icn["GR.M2.TRACKED"]];
	      sIdm2["06"] = [icn["GR.M2.TRACTOR TRAILER"]];
	      sIdm2["07"] = [icn["GR.M2.WHEELED LIMITED"]];
	      sIdm2["08"] = [icn["GR.M2.WHEELED"]];
	      sIdm2["09"] = [icn["GR.M2.ROBOTIC"]];

	      //This sets up the bounding boxes for equipment to have the bottom at the right place. (this will be used for mobility when unframed)
	      const equipmentBottom = {
	        110000: 140,
	        110100: 140,
	        110101: 140,
	        110102: 140,
	        110103: 140,
	        110200: 140,
	        110201: 140,
	        110202: 140,
	        110203: 140,
	        110300: 140,
	        110301: 140,
	        110302: 140,
	        110303: 140,
	        110400: 135,
	        110500: 140,
	        110501: 140,
	        110502: 140,
	        110503: 140,
	        110600: 140,
	        110601: 140,
	        110602: 140,
	        110603: 140,
	        110700: 140,
	        110701: 140,
	        110702: 140,
	        110703: 140,
	        110800: 140,
	        110801: 140,
	        110802: 140,
	        110803: 140,
	        110900: 140,
	        110901: 140,
	        110902: 140,
	        110903: 140,
	        111000: 140,
	        111001: 140,
	        111002: 140,
	        111003: 140,
	        111100: 140,
	        111101: 140,
	        111102: 140,
	        111103: 140,
	        111104: 140,
	        111105: 140,
	        111106: 140,
	        111107: 140,
	        111108: 140,
	        111109: 140,
	        111200: 140,
	        111201: 140,
	        111202: 140,
	        111203: 140,
	        111300: 140,
	        111301: 140,
	        111302: 140,
	        111303: 140,
	        111400: 140,
	        111401: 140,
	        111402: 140,
	        111403: 140,
	        111500: 140,
	        111501: 140,
	        111502: 140,
	        111503: 140,
	        111600: 140,
	        111601: 140,
	        111602: 140,
	        111603: 140,
	        111701: 140,
	        111702: 140,
	        111703: 140,
	        111800: 140,
	        111900: 140,
	        112000: 140,
	        120000: 129,
	        120100: 129,
	        120101: 130,
	        120102: 130,
	        120103: 130,
	        120104: 130,
	        120105: 120,
	        120106: 120,
	        120107: 120,
	        120108: 130,
	        120109: 130,
	        120110: 140,
	        120200: 130,
	        120201: 130,
	        120202: 130,
	        120203: 130,
	        120300: 130,
	        120301: 130,
	        120302: 130,
	        120303: 130,
	        130000: 129,
	        130100: 115,
	        130200: 130,
	        130300: 130,
	        130400: 135,
	        130500: 120,
	        130600: 120,
	        130700: 120,
	        130701: 130,
	        130800: 130,
	        130801: 130,
	        130900: 120,
	        130901: 130,
	        130902: 130,
	        131000: 115,
	        131001: 130,
	        131002: 130,
	        131003: 140,
	        131100: 130,
	        131101: 130,
	        131200: 130,
	        131300: 130,
	        131400: 140,
	        131500: 140,
	        131600: 140,
	        140100: 130,
	        140200: 130,
	        140300: 130,
	        140400: 130,
	        140500: 130,
	        140600: 140,
	        140601: 140,
	        140602: 140,
	        140603: 140,
	        140700: 140,
	        140800: 140,
	        140900: 130,
	        141000: 130,
	        141100: 140,
	        141200: 130,
	        141201: 130,
	        141202: 130,
	        150100: 130,
	        150200: 140,
	        160100: 132.5,
	        160101: 132.5,
	        160102: 132.5,
	        160103: 132.5,
	        160200: 132.5,
	        160201: 132.5,
	        160202: 132.5,
	        160203: 132.5,
	        160300: 132.5,
	        160301: 132.5,
	        160302: 132.5,
	        160303: 132.5,
	        160400: 132.5,
	        160401: 132.5,
	        160402: 132.5,
	        160403: 132.5,
	        160500: 132.5,
	        160501: 132.5,
	        160502: 132.5,
	        160503: 132.5,
	        160600: 132.5,
	        160601: 132.5,
	        160602: 132.5,
	        160603: 132.5,
	        160700: 132.5,
	        160701: 132.5,
	        160702: 132.5,
	        160703: 132.5,
	        160800: 115,
	        160900: 115,
	        170000: 149.03125,
	        170100: 118.75,
	        170200: 133.21875,
	        170300: 135.21875,
	        170400: 118.75,
	        170500: 138.1875,
	        170600: 118.75,
	        170700: 118.75,
	        170800: 118,
	        170900: 118,
	        171000: 135,
	        171100: 135,
	        180000: 125,
	        190000: 129,
	        190100: 129,
	        190200: 129,
	        190300: 129,
	        190400: 129,
	        190500: 129,
	        200100: 140,
	        200200: 118.75,
	        200300: 120,
	        200400: 140,
	        200500: 132,
	        200600: 118.75,
	        200700: 118.75,
	        200800: 118.75,
	        200900: 119.36222839355469,
	        201000: 145,
	        201100: 120,
	        201200: 118,
	        201300: 124.36222076416016,
	        201301: 120,
	        201302: 120,
	        201400: 118.75,
	        201500: 140,
	        201501: 115,
	        210100: 122,
	        210200: 122,
	        210300: 122,
	        210400: 118.75,
	        210500: 122,
	        220100: 140,
	        220200: 136,
	        220300: 120,
	        230000: 135,
	        230100: 132.5,
	        230200: 120,
	        240000: 118.75,
	      };
	      for (const key in equipmentBottom) {
	        if (!equipmentBottom.hasOwnProperty(key)) continue;
	        bbox[key] = {
	          x1: 50,
	          x2: 150,
	          y1: 50,
	          y2: equipmentBottom[key],
	        };
	      }
	    }
	  },
	};

	var landinstallation = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function landinstallation(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Land Installation
	    if (symbolSet == "20") {
	      sId["110000"] = [icn["GR.IC.MILITARY"]];
	      sId["110100"] = [icn["GR.IN.IC.AIRCRAFT PRODUCTION & ASSEMBLY"]];
	      sId["110200"] = [ms._scale(1.4, icn["GR.IC.FF.CLASS V"])];
	      sId["110300"] = [icn["GR.IC.FF.CLASS V"], icn["GR.IC.FF.SUPPLY"]];
	      sId["110400"] = [icn["GR.EQ.TANK"]];
	      sId["110500"] = [icn["ST.IC.BLACK LIST LOCATION"]];
	      sId["110600"] = [icn["GR.IC.CBRN"]];
	      sId["110700"] = [icn["GR.EQ.DOZER"]];
	      sId["110701"] = [icn["GR.IN.IC.BRIDGE"]];
	      sId["110800"] = [icn["GR.IC.EQUIPMENT MANUFACTURE"]];
	      sId["110900"] = [icn["GR.I.GOVERNMENT"]];
	      sId["111000"] = [icn["ST.IC.GRAY LIST LOCATION"]];
	      sId["111100"] = [icn["ST.IC.MASS GRAVE LOCATION"]];
	      sId["111200"] = [
	        icn["GR.IN.IC.MILITARY/CIVILIAN.MATERIEL"],
	        icn["GR.IC.FF.SUPPLY"],
	      ];
	      sId["111300"] = [icn["GR.IN.IC.MINE"]];
	      sId["111400"] = [icn["GR.EQ.MISSILE LAUNCHER"]];
	      sId["111500"] = [ms._scale(0.8, icn["AC.IC.RADIOACTIVE MATERIAL"])];
	      sId["111600"] = [icn["GR.IN.IC.MILITARY/CIVILIAN.PRINTED MEDIA"]];
	      sId["111700"] = [icn["ST.IC.SAFE HOUSE"]];
	      sId["111800"] = [icn["ST.IC.WHITE LIST LOCATION"]];
	      sId["111900"] = [icn["GR.EQ.TENT"]];
	      sId["111901"] = [
	        icn["GR.EQ.TENT"],
	        icn["ST.M1.DISPLACED PERSONS, REFUGEES, AND EVACUEES"],
	      ];
	      sId["111902"] = [icn["GR.EQ.TENT"], icn["GR.M1.TRAINING CAMP"]];
	      sId["112000"] = [
	        icn["GR.IN.IC.INDUSTRIAL SITE"],
	        icn["GR.IN.IC.WAREHOUSE/STORAGE FACILITY"],
	      ];
	      sId["112001"] = [icn["GR.IC.GRENADE"]];
	      sId["112100"] = [icn["GR.IC.FF.LAW ENFORCEMENT"]];
	      sId["112101"] = [
	        icn[
	          "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	        ],
	      ];
	      sId["112102"] = [icn["GR.IC.FF.BORDER PATROL"]];
	      sId["112103"] = [icn["GR.IC.FF.CUSTOMS SERVICE"]];
	      sId["112104"] = [icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"]];
	      sId["112105"] = [icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"]];
	      sId["112106"] = [icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"]];
	      sId["112107"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	      sId["112108"] = [icn["GR.IC.FF.PRISON"]];
	      sId["112109"] = [icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"]];
	      sId["112110"] = [icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"]];
	      sId["112111"] = [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	      sId["112112"] = [icn["GR.IC.FF.US MARSHALS SERVICE"]];
	      sId["112200"] = [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	      sId["112201"] = [icn["GR.IC.FIRE PROTECTION"]];
	      sId["112202"] = [icn["GR.IC.EMERGENCY MEDICAL OPERATION"]];
	      sId["112300"] = [icn["GR.IN.MC.HOME"]];
	      sId["120000"] = [];
	      sId["120100"] = [icn["GR.IN.IC.AGRICULTURE AND FOOD INFRASTRUCTURE"]];
	      sId["120101"] = [icn["GR.IN.IC.AGRICULTURAL LABORATORY"]];
	      sId["120102"] = [icn["GR.IN.IC.ANIMAL FEEDLOT"]];
	      sId["120103"] = [icn["ST.IC.FOOD DISTRIBUTION"], icn["AC.M1.COMMERCIAL"]];
	      sId["120104"] = [icn["GR.IN.IC.FARM/RANCH"]];
	      sId["120105"] = [icn["ST.IC.FOOD DISTRIBUTION"]];
	      sId["120106"] = [icn["ST.IC.FOOD DISTRIBUTION"], icn["AC.M1.PRODUCTION"]];
	      sId["120107"] = [icn["ST.IC.FOOD DISTRIBUTION"], icn["AC.M1.RETAIL"]];
	      sId["120108"] = [icn["GR.IN.IC.GRAIN STORAGE"]];
	      sId["120200"] = [
	        icn["AC.IC.BANKING FINANCE AND INSURANCE INFRASTRUCTURE"],
	      ];
	      sId["120201"] = [icn["GR.IN.IC.ATM"]];
	      sId["120202"] = [icn["GR.IN.IC.BANK"]];
	      sId["120203"] = [icn["GR.IN.IC.BULLION STORAGE"]];
	      sId["120204"] = [
	        icn[
	          "GR.IN.IC.INFRASTRUCTURE.BANKING FINANCE AND INSURANCE  INFRASTRUCTURE.ECONOMIC INFRASTRUCTURE ASSET"
	        ],
	      ];
	      sId["120205"] = [icn["GR.IN.IC.FEDERAL RESERVE BANK"]];
	      sId["120206"] = [icn["GR.IN.IC.FINANCIAL EXCHANGE"]];
	      sId["120207"] = [icn["GR.IN.IC.FINANCIAL SERVICES, OTHER"]];
	      sId["120300"] = [icn["GR.IN.IC.COMMERCIAL INFRASTRUCTURE"]];
	      sId["120301"] = [icn["GR.IN.IC.CHEMICAL PLANT"]];
	      sId["120302"] = [icn["GR.IN.IC.FIREARMS MANUFACTURER"]];
	      sId["120303"] = [icn["GR.IN.IC.FIREARMS RETAILER"]];
	      sId["120304"] = [icn["GR.IN.IC.HAZARDOUS MATERIAL PRODUCTION"]];
	      sId["120305"] = [icn["GR.IN.IC.HAZARDOUS MATERIAL STORAGE"]];
	      sId["120306"] = [icn["GR.IN.IC.INDUSTRIAL SITE"]];
	      sId["120307"] = [icn["GR.IN.IC.LANDFILL"]];
	      sId["120308"] = [icn["GR.IN.IC.PHARMACEUTICAL MANUFACTURER"]];
	      sId["120309"] = [icn["GR.IN.IC.CONTAMINATED HAZARDOUS WASTE SITE"]];
	      sId["120310"] = [icn["GR.IN.IC.TOXIC RELEASE INVENTORY"]];
	      sId["120400"] = [icn["GR.IN.IC.EDUCATIONAL FACILITIES INFRASTRUCTURE"]];
	      sId["120401"] = [icn["GR.IN.IC.COLLEGE/UNIVERSITY"]];
	      sId["120402"] = [icn["GR.IN.IC.SCHOOL"]];
	      sId["120500"] = [icn["GR.IN.IC.ELECTRIC POWER"]];
	      sId["120501"] = [ms._scale(0.6, icn["GR.IN.IC.ELECTRIC POWER"], true)];
	      sId["120502"] = [
	        ms._translate(
	          0,
	          15,
	          ms._scale(0.75, icn["GR.IN.IC.ELECTRIC POWER"], true)
	        ),
	        icn["AC.M1.GENERATION STATION"],
	      ];
	      sId["120503"] = [icn["GR.IN.IC.NATURAL GAS FACILITY"]];
	      sId["120504"] = [ms._scale(1.5, icn["GR.IC.FF.CLASS III"])];
	      sId["120505"] = [icn["GR.IC.FF.CLASS III"]];
	      sId["120506"] = [icn["GR.IN.IC.PROPANE FACILITY"]];
	      sId["120600"] = [icn["GR.IN.IC.GOVERNMENT SITE INFRASTRUCTURE"]];
	      sId["120700"] = []; //'Infrastructure.Medical Infrastructure';
	      sId["120701"] = [icn["GR.IC.FF.MEDICAL"]];
	      sId["120702"] = [
	        icn["GR.IC.FF.MEDICAL"],
	        icn["GR.IC.FF.MEDICAL TREATMENT FACILITY"],
	      ];
	      sId["120800"] = [icn["GR.IN.IC.MILITARY INFRASTRUCTURE"]];
	      sId["120801"] = [icn["GR.IN.IC.BASE"], icn["AC.M1.MILITARY ARMORY"]];
	      sId["120802"] = [icn["GR.IN.IC.BASE"]];
	      sId["120803"] = [icn["GR.IN.IC.AIRPORT"]];
	      sId["120900"] = [icn["GR.IN.IC.POSTAL SERVICE INFRASTRUCTURE"]];
	      sId["120901"] = [icn["GR.IN.IC.POSTAL DISTRIBUTION CENTER"]];
	      sId["120902"] = [icn["GR.IN.IC.POST OFFICE"]];
	      sId["121000"] = [icn["GR.IN.IC.PUBLIC VENUES INFRASTRUCTURE"]];
	      sId["121001"] = [icn["GR.IN.IC.ENCLOSED FACITLITY (PUBLIC VENUE)"]];
	      sId["121002"] = [icn["GR.IN.IC.OPEN FACILITY (OPEN VENUE)"]];
	      sId["121003"] = [icn["GR.IN.IC.RECREATIONAL AREA"]];
	      sId["121004"] = [icn["GR.IN.IC.RELIGIOUS INSTITUTION"]];
	      sId["121100"] = [icn["GR.IN.IC.SPECIAL NEEDS INFRASTRUCTURE"]];
	      sId["121101"] = [icn["GR.IN.IC.ADULT DAY CARE"]];
	      sId["121102"] = [icn["GR.IN.IC.CHILD DAY CARE"]];
	      sId["121103"] = [icn["GR.IN.IC.ELDER CARE"]];
	      sId["121200"] = [icn["GR.IN.IC.TELECOMMUNICATIONS INFRASTRUCTURE"]];
	      sId["121201"] = [icn["GR.IC.FF.BROADCAST TRANSMITTER ANTENNA"]];
	      sId["121202"] = [
	        icn[
	          "GR.IN.IC.INFRASTRUCTURE.TELECOMMUNICATIONS INFRASTRUCTURE.TELECOMMUNICATIONS"
	        ],
	      ];
	      sId["121203"] = [icn["GR.IN.IC.TELECOMMUNICATIONS TOWER"]];
	      sId["121300"] = [ms._scale(1.5, icn["GR.IC.TRANSPORTATION"])];
	      sId["121301"] = [
	        icn["GR.IC.TRANSPORTATION"],
	        icn["GR.IC.AIRPORT OF DEBARKATION"],
	      ];
	      sId["121302"] = [icn["GR.IN.IC.AIR TRAFFIC CONTROL FACILITY"]];
	      sId["121303"] = [
	        icn["GR.EQ.CIVILIAN VEHICLE.MULTIPLE PASSENGER VEHICLE"],
	      ];
	      sId["121304"] = [icn["GR.IC.FERRY"]];
	      sId["121305"] = [icn["GR.IN.IC.HELICOPTER LANDING SITE"]];
	      sId["121306"] = [icn["GR.IC.MAINTENANCE"]];
	      sId["121307"] = [icn["GR.IC.RAILHEAD"]];
	      sId["121308"] = [icn["GR.IN.IC.REST STOP"]];
	      sId["121309"] = [icn["GR.IC.TRANSPORTATION"], icn["GR.M1.NAVAL"]];
	      sId["121310"] = [icn["GR.IC.NAVAL"], icn["GR.M1.YARD"]];
	      sId["121311"] = [icn["GR.IN.IC.TOLL FACILITY"]];
	      sId["121312"] = [icn["GR.IN.IC.TRAFFIC INSPECTION FACILITY"]];
	      sId["121313"] = [icn["GR.IN.IC.TUNNEL"]];
	      sId["121400"] = [icn["GR.IC.WATER"]];
	      sId["121401"] = [icn["GR.IN.IC.CONTROL VALVE"]];
	      sId["121402"] = [icn["GR.IN.IC.DAM"]];
	      sId["121403"] = [icn["GR.IN.IC.DISCHARGE OUTFALL"]];
	      sId["121404"] = [icn["GR.IN.IC.GROUND WATER WELL"]];
	      sId["121405"] = [icn["GR.IN.IC.PUMPING STATION"]];
	      sId["121406"] = [icn["GR.IN.IC.RESERVOIR"]];
	      sId["121407"] = [icn["GR.IN.IC.STORAGE TOWER"]];
	      sId["121408"] = [icn["GR.IN.IC.SURFACE WATER INTAKE"]];
	      sId["121409"] = [icn["GR.IN.IC.WASTEWATER TREATMENT FACILITY"]];
	      sId["121410"] = [icn["GR.IC.WATER"]];
	      sId["121411"] = [icn["GR.IC.WATER PURIFICATION"]];

	      //sIdm1['00'] = 'Unspecified';
	      sIdm1["01"] = [icn["GR.M1.BIOLOGICAL"]];
	      sIdm1["02"] = [icn["GR.M1.CHEMICAL"]];
	      sIdm1["03"] = [icn["GR.M1.NUCLEAR"]];
	      sIdm1["04"] = [icn["GR.IN.M1.RADIOLOGICAL"]];
	      sIdm1["05"] = [icn["GR.M1.DECONTAMINATION"]];
	      sIdm1["06"] = [icn["GR.IN.M1.COAL"]];
	      sIdm1["07"] = [icn["GR.IN.M1.GEOTHERMAL"]];
	      sIdm1["08"] = [icn["GR.IN.M1.HYDROELECTRIC"]];
	      sIdm1["09"] = [icn["GR.IN.M1.NATURAL GAS"]];
	      sIdm1["10"] = [icn["GR.IN.M1.PETROLEUM"]];
	      sIdm1["11"] = [icn["GR.IN.M1.CIVILIAN"]];
	      sIdm1["12"] = [icn["GR.IN.M1.CIVILIAN TELEPHONE"]];
	      sIdm1["13"] = [icn["GR.IN.M1.CIVILIAN TELEVISION"]];
	      sIdm1["14"] = [icn["GR.M1.CYBERSPACE"]];
	      sIdm1["15"] = [icn["GR.M1.JOINT NETWORK NODE"]];
	      sIdm1["16"] = [icn["GR.M1.COMMAND POST NODE"]];

	      //sIdm2['00'] = 'Unspecified';
	      sIdm2["01"] = [icn["GR.IN.M2.CHEMICAL & BIOLOGICAL WARFARE"]];
	      sIdm2["02"] = [icn["GR.IN.M2.CHEMICAL WARFARE PRODUCTION"]];
	      sIdm2["03"] = [icn["GR.IN.M2.NUCLEAR WARFARE PRODUCTION"]];
	      sIdm2["04"] = [icn["GR.IN.M2.RADIOLOGICAL WARFARE PRODUCTION"]];
	      sIdm2["05"] = [icn["GR.IN.M2.ATOMIC ENERGY REACTOR"]];
	      sIdm2["06"] = [icn["GR.IN.M2.NUCLEAR MATERIAL PRODUCTION"]];
	      sIdm2["07"] = [icn["GR.IN.M2.NUCLEAR MATERIAL STORAGE"]];
	      sIdm2["08"] = [icn["GR.IN.M2.WEAPONS GRADE PRODUCTION"]];
	      sIdm2["09"] = [icn["GR.M2.CYBERSPACE"]];
	      sIdm2["10"] = [icn["GR.IN.M2.TRANSPORTATION"]];
	    }
	  },
	};

	var sea = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$4,
	  icons: function sea(sId, sIdm1, sIdm2, bbox, symbolSet, icn, _STD2525) {
	    //Sea
	    if (symbolSet == "30") {
	      sId["110000"] = [icn["SE.IC.MILITARY"]];
	      sId["120000"] = [icn["SE.IC.COMBATANT"]];
	      sId["120100"] = [icn["SE.IC.CARRIER"]];
	      sId["120200"] = [icn["SE.IC.SURFACE COMBATANT, LINE"]];
	      sId["120201"] = [icn["SE.IC.BATTLESHIP"]];
	      sId["120202"] = [icn["SE.IC.CRUISER, GUIDED MISSILE"]];
	      sId["120203"] = [icn["SE.IC.DESTROYER"]];
	      sId["120204"] = [icn["SE.IC.FRIGATE"]];
	      sId["120205"] = [icn["SE.IC.CORVETTE"]];
	      sId["120206"] = [icn["SE.IC.LITTORAL COMBATANT SHIP"]];
	      sId["120300"] = [icn["SE.IC.AMPHIBIOUS WARFARE SHIP"]];
	      sId["120301"] = [icn["SE.IC.AMPHIBIOUS FORCE FLAGSHIP"]];
	      sId["120302"] = [icn["SE.IC.AMPHIBIOUS ASSAULT"]];
	      sId["120303"] = [icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, GENERAL"]];
	      sId["120304"] = [icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, MULTI-PURPOSE"]];
	      sId["120305"] = [icn["SE.IC.AMPHIBIOUS ASSAULT SHIP, HELICOPTER"]];
	      sId["120306"] = [icn["SE.IC.AMPHIBIOUS TRANSPORT, DOCK"]];
	      sId["120307"] = [icn["SE.IC.LANDING SHIP"]];
	      sId["120308"] = [icn["SE.IC.LANDING CRAFT"]];
	      sId["120400"] = [icn["SE.IC.MINE WARFARE VESSEL"]];
	      sId["120401"] = [icn["SE.IC.MINELAYER"]];
	      sId["120402"] = [icn["SE.IC.MINESWEEPER"]];
	      sId["120403"] = [icn["SE.IC.MINESWEEPER, DRONE"]];
	      sId["120404"] = [icn["SE.IC.MINEHUNTER"]];
	      sId["120405"] = [icn["SE.IC.MINE COUNTERMEASURES"]];
	      sId["120406"] = [icn["SE.IC.MINE COUNTER MEASURE SUPPORT SHIP"]];
	      sId["120500"] = [icn["SE.IC.PATROL"]];
	      sId["120501"] = [icn["SE.IC.PATROL CRAFT"]];
	      sId["120502"] = [icn["SE.IC.PATROL GUN"]];
	      sId["120600"] = [icn["SE.IC.SEA SURFACE DECOY"]];
	      sId["120700"] = [icn["SE.IC.UNMANNED SURFACE WATER VEHICLE"]];
	      sId["120800"] = [icn["SE.IC.MILITARY SPEEDBOAT"]];
	      sId["120801"] = [
	        icn["SE.IC.MILITARY SPEEDBOAT, RIGID-HULL INFLATABLE BOAT"],
	      ];
	      sId["120900"] = [icn["SE.IC.MILITARY JETSKI"]];
	      sId["121000"] = [icn["SE.IC.NAVY TASK ORGANIZATION UNIT"]];
	      sId["121001"] = [icn["SE.IC.NAVY TASK ELEMENT"]];
	      sId["121002"] = [icn["SE.IC.NAVY TASK FORCE"]];
	      sId["121003"] = [icn["SE.IC.NAVY TASK GROUP"]];
	      sId["121004"] = [icn["SE.IC.NAVY TASK UNIT"]];
	      sId["121005"] = [icn["SE.IC.CONVOY"]];
	      sId["121100"] = [icn["SE.IC.RADAR"]];
	      sId["130000"] = [icn["SE.IC.NONCOMBATANT"]];
	      sId["130100"] = [icn["SE.IC.AUXILIARY SHIP"]];
	      sId["130101"] = [icn["SE.IC.AMMUNITION SHIP"]];
	      sId["130102"] = [icn["SE.IC.STORES SHIP"]];
	      sId["130103"] = [icn["SE.IC.AUXILIARY FLAG OR COMMAND SHIP"]];
	      sId["130104"] = [icn["SE.IC.INTELLIGENCE COLLECTOR"]];
	      sId["130105"] = [icn["SE.IC.OCEAN RESEARCH SHIP"]];
	      sId["130106"] = [icn["SE.IC.SURVEY SHIP"]];
	      sId["130107"] = [icn["SE.IC.HOSPITAL SHIP"]];
	      sId["130108"] = [icn["SE.IC.CARGO SHIP"]];
	      sId["130109"] = [icn["SE.IC.COMBAT SUPPORT SHIP, FAST"]];
	      sId["130110"] = [icn["SE.IC.OILER, REPLENISHMENT"]];
	      sId["130111"] = [icn["SE.IC.REPAIR SHIP"]];
	      sId["130112"] = [icn["SE.IC.SUBMARINE TENDER"]];
	      sId["130113"] = [icn["SE.IC.TUG, OCEAN GOING"]];
	      sId["130200"] = [icn["SE.IC.SERVICE CRAFT, YARD, GENERAL"]];
	      sId["130201"] = [icn["SE.IC.BARGE, NOT SELF-PROPELLED"]];
	      sId["130202"] = [icn["SE.IC.BARGE, SELF-PROPELLED"]];
	      sId["130203"] = [icn["SE.IC.TUG, HARBOUR"]];
	      sId["130204"] = [icn["SE.IC.LAUNCH"]];
	      sId["140000"] = [icn["SE.IC.CIVILIAN"]];
	      sId["140100"] = [icn["SE.IC.MERCHANT SHIP, GENERAL"]];
	      sId["140101"] = [icn["SE.IC.CARGO, GENERAL"]];
	      sId["140102"] = [icn["SE.IC.CONTAINER SHIP"]];
	      sId["140103"] = [icn["SE.IC.DREDGE"]];
	      sId["140104"] = [icn["SE.IC.ROLL ON-ROLL OFF"]];
	      sId["140105"] = [icn["SE.IC.FERRY"]];
	      sId["140106"] = [icn["SE.IC.HEAVY LIFT"]];
	      sId["140107"] = [icn["SE.IC.HOVERCRAFT 2525D"]];
	      sId["140108"] = [icn["SE.IC.MERCHANT SHIP, LASH CARRIER (WITH BARGES)"]];
	      sId["140109"] = [icn["SE.IC.OILER/TANKER"]];
	      sId["140110"] = [icn["SE.IC.PASSENGER SHIP"]];
	      sId["140111"] = [icn["SE.IC.TUG, OCEAN GOING CIVILIAN"]];
	      sId["140112"] = [icn["SE.IC.TOW"]];
	      sId["140113"] = [icn["SE.IC.TRANSPORT SHIP, HAZARDOUS MATERIAL"]];
	      sId["140114"] = [icn["SE.IC.JUNK/DHOW"]];
	      sId["140115"] = [icn["SE.IC.BARGE, NOT SELF-PROPELLED CIV"]];
	      sId["140116"] = [icn["SE.IC.HOSPITAL SHIP CIV"]];
	      sId["140200"] = [icn["SE.IC.FISHING VESSEL"]];
	      sId["140201"] = [icn["SE.IC.DRIFTER"]];
	      sId["140202"] = [icn["SE.IC.TRAWLER"]];
	      sId["140203"] = [icn["SE.IC.FISHING VESSEL DREDGE"]];
	      sId["140300"] = [icn["SE.IC.LAW ENFORCEMENT VESSEL"]];
	      sId["140400"] = [icn["SE.IC.LEISURE CRAFT, SAILING BOAT"]];
	      sId["140500"] = [icn["SE.IC.LEISURE CRAFT, MOTORIZED"]];
	      sId["140501"] = [
	        icn["SE.IC.LEISURE CRAFT, MOTORIZED, RIGID-HULL INFLATABLE BOAT"],
	      ];
	      sId["140502"] = [icn["SE.IC.LEISURE CRAFT, MOTORIZED, SPEEDBOAT"]];
	      sId["140600"] = [icn["SE.IC.LEISURE CRAFT, JETSKI"]];
	      sId["140700"] = [icn["SE.IC.UNMANNED SURFACE WATER VEHICLE (USV)"]];
	      sId["150000"] = [icn["SE.IC.OWN SHIP"]];
	      sId["160000"] = [icn["SE.IC.FUSED TRACK"]];
	      sId["170000"] = [icn["SE.IC.MANUAL TRACK"]];

	      sIdm1["01"] = [icn["SE.M1.OWN SHIP"]];
	      sIdm1["02"] = [icn["SE.M1.ANTIAIR WARFARE"]];
	      sIdm1["03"] = [icn["SE.M1.ANTISUBMARINE WARFARE"]];
	      sIdm1["04"] = [icn["SE.M1.ESCORT"]];
	      sIdm1["05"] = [icn["SE.M1.ELECTRONIC WARFARE"]];
	      sIdm1["06"] = [icn["SE.M1.INTELLIGENCE, SURVEILLANCE, RECONNAISSANCE"]];
	      sIdm1["07"] = [icn["SE.M1.MINE COUNTER MEASURES"]];
	      sIdm1["08"] = [icn["SE.M1.MISSILE DEFENSE"]];
	      sIdm1["09"] = [icn["SE.M1.MEDICAL"]];
	      sIdm1["10"] = [icn["SE.M1.MINE WARFARE"]];
	      sIdm1["11"] = [icn["SE.M1.REMOTE MULTI-MISSION VEHIHLE"]];
	      sIdm1["12"] = [icn["SE.M1.SPECIAL OPERATIONS FORCE"]];
	      sIdm1["13"] = [icn["SE.M1.SURFACE WARFARE"]];
	      sIdm1["14"] = [icn["SE.M1.BALLISTIC MISSILE"]];
	      sIdm1["15"] = [icn["SE.M1.GUIDED MISSILE"]];
	      sIdm1["16"] = [icn["SE.M1.OTHER GUIDED MISSILE"]];
	      sIdm1["17"] = [icn["SE.M1.TORPEDO"]];
	      sIdm1["18"] = [icn["SE.M1.DRONE-EQUIPPED"]];
	      sIdm1["19"] = [icn["SE.M1.HELICOPTER-EQUIPPED"]];
	      sIdm1["20"] = [icn["SE.M1.BALLISTIC MISSILE DEFENSE, SHOOTER"]];
	      sIdm1["21"] = [
	        icn[
	          "SE.M1.BALLISTIC MISSILE DEFENSE, LONG- RANGE SURVEILLANCE AND TRACK (LRS&T)"
	        ],
	      ];
	      sIdm1["22"] = [icn["SE.M1.SEA-BASE X-BAND"]];
	      sIdm1["23"] = [icn["SE.M1.HIJACKING/HIJACKED"]];
	      sIdm1["24"] = [icn["SE.M1.HIJACKER"]];
	      sIdm1["25"] = [icn["SE.M1.CYBERSPACE"]];

	      sIdm2["01"] = [icn["SE.M2.NUCLEAR POWERED"]];
	      sIdm2["02"] = [icn["SE.M2.HEAVY"]];
	      sIdm2["03"] = [icn["SE.M2.LIGHT"]];
	      sIdm2["04"] = [icn["SE.M2.MEDIUM"]];
	      sIdm2["05"] = [icn["SE.M2.DOCK"]];
	      sIdm2["06"] = [icn["SE.M2.LOGISTICS"]];
	      sIdm2["07"] = [icn["SE.M2.TANK"]];
	      sIdm2["08"] = [icn["SE.M2.VEHICLE"]];
	      sIdm2["09"] = [icn["SE.M2.FAST"]];
	      sIdm2["10"] = [icn["SE.M2.AIR-CUSHIONED (USA ONLY)"]];
	      sIdm2["11"] = [icn["SE.M2.AIR-CUSHIONED"]];
	      sIdm2["12"] = [icn["SE.M2.HYDROFOIL"]];
	      sIdm2["13"] = [icn["SE.M2.AUTONOMOUS CONTROL"]];
	      sIdm2["14"] = [icn["SE.M2.REMOTELY PILOTED"]];
	      sIdm2["15"] = [icn["SE.M2.EXPENDABLE"]];
	      sIdm2["16"] = [icn["SE.M2.CYBERSPACE"]];
	    }
	  },
	};

	var subsurface = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$3,
	  icons: function subsurface(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Subsurface
	    if (symbolSet == "35") {
	      sId["110000"] = [icn["SU.IC.MILITARY"]];
	      sId["110100"] = [icn["SU.IC.SUBMARINE"]];
	      sId["110101"] = [icn["SU.IC.SUBMARINE, SURFACED"]];
	      sId["110102"] = [icn["SU.IC.SUBMARINE, SNORKELING"]];
	      sId["110103"] = [icn["SU.IC.SUBMARINE, BOTTOMED"]];
	      sId["110200"] = [icn["SU.IC.OTHER SUBMERSIBLE"]];
	      sId["110300"] = [icn["SU.IC.NON-SUBMARINE"]];
	      sId["110400"] = [
	        icn[
	          "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV)"
	        ],
	      ];
	      sId["110500"] = [icn["SU.IC.DIVER, MILITARY"]];
	      sId["120000"] = [icn["SU.IC.CIVILIAN"]];
	      sId["120100"] = [icn["SU.IC.SUBMERSIBLE, CIVILIAN"]];
	      sId["120200"] = [
	        icn[
	          "SU.IC.AUTONOMOUS UNDERWATER VEHICLE/ UNMANNED UNDERWATER VEHICLE (AUV/UUV), CIVILIAN"
	        ],
	      ];
	      sId["120300"] = [icn["SU.IC.DIVER, CIVILIAN"]];
	      sId["130000"] = [icn["SU.IC.UNDERWATER WEAPON"]];
	      sId["130100"] = [icn["SU.IC.TORPEDO"]];
	      sId["130200"] = [icn["SU.IC.IMPROVISED EXPLOSIVE DEVICE (IED)"]];
	      sId["130300"] = [icn["SU.IC.UNDERWATER DECOY DSymbol"]];
	      sId["140000"] = [
	        icn["SU.IC.ECHO TRACKER CLASSIFIER (ETC)/POSSIBLE CONTACT (POSCON)"],
	      ];
	      sId["150000"] = [icn["SU.IC.FUSED TRACK"]];
	      sId["160000"] = [icn["SU.IC.MANUAL TRACK"]];

	      sId["200000"] = [icn["SU.IC.SEABED INSTALLATION, MAN-MADE, MILITARY"]];
	      sId["210000"] = [
	        icn["SU.IC.SEABED INSTALLATION, MAN-MADE, NON-MILITARY"],
	      ];

	      sIdm1["01"] = [icn["SU.M1.ANTISUBMARINE WARFARE"]];
	      sIdm1["02"] = [icn["SU.M1.AUXILIARY"]];
	      sIdm1["03"] = [icn["SU.M1.COMMAND AND CONTROL"]];
	      sIdm1["04"] = [icn["SU.M1.INTELLIGENCE, SURVEILLANCE, RECONNAISSANCE"]];
	      sIdm1["05"] = [icn["SU.M1.MINE COUNTERMEASURES"]];
	      sIdm1["06"] = [icn["SU.M1.MINE WARFARE"]];
	      sIdm1["07"] = [icn["SU.M1.SURFACE WARFARE"]];
	      sIdm1["08"] = [icn["SU.M1.ATTACK"]];
	      sIdm1["09"] = [icn["SU.M1.BALLISTIC MISSILE"]];
	      sIdm1["10"] = [icn["SU.M1.GUIDED MISSILE"]];
	      sIdm1["11"] = [icn["SU.M1.OTHER GUIDED MISSILES (POINT DEFENCE)"]];
	      sIdm1["12"] = [icn["SU.M1.SPECIAL OPERATIONS FORCE"]];
	      sIdm1["13"] = [icn["SU.M1.POSSIBLE SUBMARINE - LOW 1"]];
	      sIdm1["14"] = [icn["SU.M1.POSSIBLE SUBMARINE - LOW 2"]];
	      sIdm1["15"] = [icn["SU.M1.POSSIBLE SUBMARINE - HIGH 3"]];
	      sIdm1["16"] = [icn["SU.M1.POSSIBLE SUBMARINE - HIGH 4"]];
	      sIdm1["17"] = [icn["SU.M1.PROBABLE SUBMARINE"]];
	      sIdm1["18"] = [icn["SU.M1.CERTAIN SUBMARINE"]];
	      sIdm1["19"] = [icn["SU.M1.ANTI-TORPEDO TORPEDO"]];
	      sIdm1["20"] = [icn["SU.M1.HIJACKING/HIJACKED"]];
	      sIdm1["21"] = [icn["SU.M1.HIJACKER"]];
	      sIdm1["22"] = [icn["SU.M1.CYBERSPACE"]];

	      sIdm2["01"] = [icn["SU.M2.AIR INDEPENDENT PROPULSION"]];
	      sIdm2["02"] = [icn["SU.M2.DIESEL PROPULSION"]];
	      sIdm2["03"] = [icn["SU.M2.DIESEL - TYPE 1"]];
	      sIdm2["04"] = [icn["SU.M2.DIESEL - TYPE 2"]];
	      sIdm2["05"] = [icn["SU.M2.DIESEL - TYPE 3"]];
	      sIdm2["06"] = [icn["SU.M2.NUCLEAR POWERED"]];
	      sIdm2["07"] = [icn["SU.M2.NUCLEAR - TYPE 1"]];
	      sIdm2["08"] = [icn["SU.M2.NUCLEAR - TYPE 2"]];
	      sIdm2["09"] = [icn["SU.M2.NUCLEAR - TYPE 3"]];
	      sIdm2["10"] = [icn["SU.M2.NUCLEAR - TYPE 4"]];
	      sIdm2["11"] = [icn["SU.M2.NUCLEAR - TYPE 5"]];
	      sIdm2["12"] = [icn["SU.M2.NUCLEAR - TYPE 6"]];
	      sIdm2["13"] = [icn["SU.M2.NUCLEAR - TYPE 7"]];
	      sIdm2["14"] = [icn["SU.M2.AUTONOMOUS CONTROL"]];
	      sIdm2["15"] = [icn["SU.M2.REMOTELY PILOTED"]];
	      sIdm2["16"] = [icn["SU.M2.EXPENDABLE"]];
	      sIdm2["17"] = [icn["SU.M2.CYBERSPACE"]];
	    }
	  },
	};

	var minewarfare = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$3,
	  icons: function minewarfare(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Mine Warfare
	    if (symbolSet == "36") {
	      sId["110000"] = [icn["SU.IC.SEA MINE"]];
	      sId["110100"] = [icn["SU.IC.SEA MINE - BOTTOM"]];
	      sId["110200"] = [icn["SU.IC.SEA MINE - MOORED"]];
	      sId["110300"] = [icn["SU.IC.SEA MINE - FLOATING"]];
	      sId["110400"] = [icn["SU.IC.SEA MINE - RISING"]];
	      sId["110500"] = [icn["SU.IC.SEA MINE (IN OTHER POSITION)"]];
	      sId["110600"] = [icn["SU.IC.SEA MINE - KINGFISHER"]];
	      sId["110700"] = [icn["SU.IC.SEA MINE - SMALL OBJECT"]];
	      sId["110800"] = [icn["SU.IC.SEA MINE EXERCISE MINE"]];
	      sId["110801"] = [icn["SU.IC.SEA MINE EXERCISE MINE - BOTTOM"]];
	      sId["110802"] = [icn["SU.IC.SEA MINE EXERCISE MINE - MOORED"]];
	      sId["110803"] = [icn["SU.IC.SEA MINE EXERCISE MINE - FLOATING"]];
	      sId["110804"] = [icn["SU.IC.SEA MINE EXERCISE MINE - RISING"]];
	      sId["110900"] = [icn["SU.IC.SEA MINE NEUTRALIZED"]];
	      sId["110901"] = [icn["SU.IC.SEA MINE NEUTRALIZED - BOTTOM"]];
	      sId["110902"] = [icn["SU.IC.SEA MINE NEUTRALIZED - MOORED"]];
	      sId["110903"] = [icn["SU.IC.SEA MINE NEUTRALIZED - FLOATING"]];
	      sId["110904"] = [icn["SU.IC.SEA MINE NEUTRALIZED - RISING"]];
	      sId["110905"] = [icn["SU.IC.SEA MINE (IN OTHER POSITION) NEUTRALIZED"]];
	      sId["120000"] = [icn["SU.IC.UNEXPLODED EXPLOSIVE ORDNANCE"]];
	      sId["130000"] = [icn["SU.IC.SEA MINE DECOY"]];
	      sId["130100"] = [icn["SU.IC.SEA MINE DECOY, BOTTOM/GROUND"]];
	      sId["130200"] = [icn["SU.IC.SEA MINE DECOY, MOORED"]];
	      sId["140000"] = []; //'Mine-Like Contact (MILCO)';
	      sId["140100"] = [ms._scale(1.3, icn["SU.IC.SEA MINE MILCO"])];
	      sId["140101"] = [
	        ms._scale(1.3, [
	          icn["SU.IC.SEA MINE MILCO"],
	          icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 1"],
	        ]),
	      ];
	      sId["140102"] = [
	        ms._scale(1.3, [
	          icn["SU.IC.SEA MINE MILCO"],
	          icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 2"],
	        ]),
	      ];
	      sId["140103"] = [
	        ms._scale(1.3, [
	          icn["SU.IC.SEA MINE MILCO"],
	          icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 3"],
	        ]),
	      ];
	      sId["140104"] = [
	        ms._scale(1.3, [
	          icn["SU.IC.SEA MINE MILCO"],
	          icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 4"],
	        ]),
	      ];
	      sId["140105"] = [
	        ms._scale(1.3, [
	          icn["SU.IC.SEA MINE MILCO"],
	          icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 5"],
	        ]),
	      ];
	      sId["140200"] = [icn["SU.IC.SEA MINE MILCO - BOTTOM"]];
	      sId["140201"] = [
	        icn["SU.IC.SEA MINE MILCO - BOTTOM"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 1"],
	      ];
	      sId["140202"] = [
	        icn["SU.IC.SEA MINE MILCO - BOTTOM"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 2"],
	      ];
	      sId["140203"] = [
	        icn["SU.IC.SEA MINE MILCO - BOTTOM"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 3"],
	      ];
	      sId["140204"] = [
	        icn["SU.IC.SEA MINE MILCO - BOTTOM"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 4"],
	      ];
	      sId["140205"] = [
	        icn["SU.IC.SEA MINE MILCO - BOTTOM"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 5"],
	      ];
	      sId["140300"] = [icn["SU.IC.SEA MINE MILCO - MOORED"]];
	      sId["140301"] = [
	        icn["SU.IC.SEA MINE MILCO - MOORED"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 1"],
	      ];
	      sId["140302"] = [
	        icn["SU.IC.SEA MINE MILCO - MOORED"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 2"],
	      ];
	      sId["140303"] = [
	        icn["SU.IC.SEA MINE MILCO - MOORED"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 3"],
	      ];
	      sId["140304"] = [
	        icn["SU.IC.SEA MINE MILCO - MOORED"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 4"],
	      ];
	      sId["140305"] = [
	        icn["SU.IC.SEA MINE MILCO - MOORED"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 5"],
	      ];
	      sId["140400"] = [icn["SU.IC.SEA MINE MILCO - FLOATING"]];
	      sId["140401"] = [
	        icn["SU.IC.SEA MINE MILCO - FLOATING"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 1"],
	      ];
	      sId["140402"] = [
	        icn["SU.IC.SEA MINE MILCO - FLOATING"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 2"],
	      ];
	      sId["140403"] = [
	        icn["SU.IC.SEA MINE MILCO - FLOATING"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 3"],
	      ];
	      sId["140404"] = [
	        icn["SU.IC.SEA MINE MILCO - FLOATING"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 4"],
	      ];
	      sId["140405"] = [
	        icn["SU.IC.SEA MINE MILCO - FLOATING"],
	        icn["SU.IC.SEA MINE MILCO - GENERAL, CONFIDENCE LEVEL 5"],
	      ];
	      sId["150000"] = [ms._scale(1.3, icn["SU.IC.SEA MINE MILEC"])];
	      sId["150100"] = [icn["SU.IC.SEA MINE MILEC - BOTTOM"]];
	      sId["150200"] = [icn["SU.IC.SEA MINE MILEC - MOORED"]];
	      sId["150300"] = [icn["SU.IC.SEA MINE MILEC - FLOATING"]];
	      sId["160000"] = [
	        ms._scale(1.3, icn["SU.IC.SEA MINE NEGATIVE REACQUISITION"]),
	      ];
	      sId["160100"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - BOTTOM"]];
	      sId["160200"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - MOORED"]];
	      sId["160300"] = [icn["SU.IC.SEA MINE NEGATIVE REACQUISITION - FLOATING"]];
	      sId["170000"] = [
	        ms._scale(1.3, icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR"]),
	      ];
	      sId["170100"] = [icn["SU.IC.SEA MINE GENERAL OBSTRUCTOR NEUTRALIZED"]];
	      sId["180000"] = [ms._scale(1.3, icn["SU.IC.SEA MINE MINE ANCHOR"])];
	      sId["190000"] = [
	        ms._scale(1.3, icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT"]),
	      ];
	      sId["190100"] = [
	        icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - BOTTOM"],
	      ];
	      sId["190200"] = [
	        icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - MOORED"],
	      ];
	      sId["190300"] = [
	        icn["SU.IC.SEA MINE NON-MINE MINE-LIKE CONTACT - FLOATING"],
	      ];
	      sId["200000"] = [icn["SU.IC.ENVIRONMENTAL REPORT LOCATION"]];
	      sId["210000"] = [icn["SU.IC.DIVE REPORT LOCATION"]];
	    }
	  },
	};

	var activites = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function activites(sId, sIdm1, sIdm2, bbox, symbolSet, icn, _STD2525) {
	    //Adds support for Activities
	    if (symbolSet == "40") {
	      sId["110000"] = [];
	      sId["110100"] = [icn["AC.IC.CRIMINAL.ACTIVITY.INCIDENT"]];
	      sId["110101"] = [ms._scale(1.5, icn["ST.IC.ARREST"])];
	      sId["110102"] = [icn["ST.IC.ARSON/FIRE"]];
	      sId["110103"] = [
	        icn["ST.IC.INDIVIDUAL"],
	        icn["ST.IC.ATTEMPTED CRIMINAL ACTIVITY"],
	      ];
	      sId["110104"] = [icn["ST.IC.DRIVE-BY SHOOTING"]];
	      sId["110105"] = [icn["ST.IC.DRUG RELATED ACTIVITIES"]];
	      sId["110106"] = [icn["ST.IC.EXTORTION"]];
	      sId["110107"] = [icn["ST.IC.GRAFFITI"]];
	      sId["110108"] = [icn["ST.IC.KILLING VICTIM"]];
	      sId["110109"] = [icn["ST.IC.POISONING"]];
	      sId["110110"] = [icn["ST.IC.RIOT"]];
	      sId["110111"] = [ms._scale(1.5, icn["ST.IC.BOOBY TRAP"])];
	      sId["110112"] = [icn["ST.IC.HOUSE"], icn["ST.M1.EVICTION"]];
	      sId["110113"] = [icn["ST.IC.BLACK MARKETING"]];
	      sId["110114"] = [icn["ST.IC.VANDALISM/LOOT/RANSACK/PLUNDER/SACK"]];
	      sId["110115"] = [icn["GR.IC.FF.JAIL BREAK"]];
	      sId["110116"] = [icn["ST.IC.ROBBERY"]];
	      sId["110117"] = [icn["ST.IC.THEFT"]];
	      sId["110118"] = [icn["ST.IC.BURGLARY"]];
	      sId["110119"] = [icn["ST.IC.SMUGGLING"]];
	      sId["110120"] = [icn["ST.IC.ROCK THROWING"]];
	      sId["110121"] = [icn["ST.IC.COMPOSITE LOSS"], icn["ST.M1.DEAD BODY"]];
	      sId["110122"] = [icn["ST.IC.SABOTAGE"]];
	      sId["110123"] = [
	        ms._translate(
	          0,
	          10,
	          ms._scale(0.8, icn["AC.IC.CRIMINAL.ACTIVITY.INCIDENT"])
	        ),
	        icn["AC.M1.THREAT"],
	      ];
	      sId["110200"] = [icn["ST.IC.BOMB"]];
	      sId["110201"] = [icn["ST.IC.BOMB"], icn["AC.M1.THREAT"]];
	      sId["110300"] = [icn["ST.IC.IED"]];
	      sId["110301"] = [icn["ST.IC.EXPLOSION"], icn["ST.IC.IED"]];
	      sId["110302"] = [
	        ms._translate(
	          0,
	          15,
	          ms._scale(0.7, [icn["ST.IC.EXPLOSION"], icn["ST.IC.IED"]])
	        ),
	        icn["ST.M1.PREMATURE"],
	      ];
	      sId["110303"] = [icn["ST.IC.IED"], icn["GR.IC.FF.SUPPLY"]];
	      sId["110304"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.IED"]];
	      sId["110400"] = [icn["AC.IC.SHOOTING"]];
	      sId["110401"] = [icn["ST.IC.SNIPING"]];
	      sId["110500"] = [icn["ST.IC.ILLEGAL DRUG OPERATION"]];
	      sId["110501"] = [
	        icn["ST.IC.ILLEGAL DRUG OPERATION"],
	        icn["ST.M1.TRAFFICKING"],
	      ];
	      sId["110502"] = [
	        icn["ST.IC.ILLEGAL DRUG OPERATION"],
	        icn["ST.M1.LABRATORY"],
	      ];
	      sId["110600"] = [icn["ST.IC.EXPLOSION"]];
	      sId["110601"] = [icn["ST.IC.EXPLOSION"], icn["ST.IC.GRENADE"]];
	      sId["110602"] = [icn["ST.IC.EXPLOSION"], icn["ST.IC.INCENDIARY"]];
	      sId["110603"] = [icn["ST.IC.EXPLOSION"], icn["ST.IC.MINE"]];
	      sId["110604"] = [
	        icn["ST.IC.EXPLOSION"],
	        ms._scale(0.6, icn["GR.EQ.MORTAR"], true),
	      ];
	      sId["110605"] = [
	        icn["ST.IC.EXPLOSION"],
	        ms._scale(0.6, icn["GR.EQ.SINGLE ROCKET LAUNCHER"], true),
	      ];
	      sId["110606"] = [
	        ms._scale(0.7, icn["ST.IC.BOMB"]),
	        icn["ST.IC.EXPLOSION"],
	      ];
	      sId["110700"] = [icn["GR.IN.MC.HOME"]];
	      sId["120000"] = [icn["AC.IC.CRIMINAL.CIVIL DISTURBANCE"]];
	      sId["120100"] = [icn["ST.IC.DEMONSTRATION"]];
	      sId["130000"] = [];
	      sId["130100"] = [icn["ST.IC.PATROLLING"]];
	      sId["130200"] = [icn["ST.IC.PSYCHOLOGICAL OPERATIONS"]];
	      sId["130201"] = [
	        icn["ST.IC.RADIO AND TELEVISION PSYCHOLOGICAL OPERATIONS"],
	      ];
	      sId["130300"] = [icn["ST.IC.SEARCHING"]];
	      sId["130400"] = [];
	      sId["130401"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.WILLING"]];
	      sId["130402"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.COERCED/IMPRESSED"]];
	      sId["130500"] = [icn["ST.IC.MINE LAYING"]];
	      sId["130600"] = [icn["ST.IC.SPY"]];
	      sId["130700"] = [icn["ST.IC.WARRANT SERVED"]];
	      sId["130800"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.EXFILTRATION"]];
	      sId["130900"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.INFILTRATION"]];
	      sId["131000"] = [icn["ST.IC.GROUP"], icn["ST.M1.MEETING"]];
	      sId["131001"] = [icn["ST.IC.POLLING PLACE/ELECTION"]];
	      sId["131100"] = [icn["ST.IC.HOUSE"], icn["ST.M1.RAID"]];
	      sId["131200"] = [icn["GR.IC.FF.EMERGENCY OPERATION"]];
	      sId["131201"] = [
	        ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	        icn["AC.M1.EMERGENCY COLLECTION EVACUATION POINT"],
	      ];
	      sId["131202"] = [icn["ST.IC.FOOD DISTRIBUTION"]];
	      sId["131203"] = [
	        ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	        icn["AC.M1.EMERGENCY INCIDENT COMMAND CENTER"],
	      ];
	      sId["131204"] = [
	        ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	        icn["AC.M1.EMERGENCY OPERATIONS CENTER"],
	      ];
	      sId["131205"] = [icn["AC.IC.EMERGENCY PUBLIC INFORMATION CENTER"]];
	      sId["131206"] = [
	        ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	        icn["AC.M1.EMERGENCY SHELTER"],
	      ];
	      sId["131207"] = [
	        ms._scale(0.7, icn["GR.IC.FF.EMERGENCY OPERATION"]),
	        icn["AC.M1.EMERGENCY STAGING AREA"],
	      ];
	      sId["131208"] = [icn["GR.IC.FF.SUPPLY"], icn["GR.IC.WATER"]];
	      sId["131300"] = [icn["GR.IC.EMERGENCY MEDICAL OPERATION"]];
	      sId["131301"] = [icn["AC.IC.EMT STATION LOCATION"]];
	      sId["131302"] = [icn["AC.IC.HEALTH DEPARTMENT FACILITY"]];
	      sId["131303"] = [icn["AC.IC.MEDICAL FACILITIES OUTPATIENT"]];
	      sId["131304"] = [icn["AC.IC.OPERATION/EMERGENCY MEDICAL OPERATION"]];
	      sId["131305"] = [icn["AC.IC.PHARMACY"]];
	      sId["131306"] = [icn["AC.IC.TRIAGE"]];
	      sId["131400"] = [icn["GR.IC.FIRE PROTECTION"]];
	      sId["131401"] = [icn["AC.IC.FIRE HYDRANT"]];
	      sId["131402"] = [ms._scale(1.5, icn["GR.IC.FIRE PROTECTION"])];
	      sId["131403"] = [icn["AC.IC.OTHER WATER SUPPLY LOCATION"]];
	      sId["131500"] = [icn["GR.IC.FF.LAW ENFORCEMENT"]];
	      sId["131501"] = [
	        icn[
	          "GR.IC.BUREAU OF ALCOHOL, TOBACCO, FIREARMS AND EXPLOSIVES (ATF) (DEPARTMENT OF JUSTICE)"
	        ],
	      ];
	      sId["131502"] = [icn["GR.IC.FF.BORDER PATROL"]];
	      sId["131503"] = [icn["GR.IC.FF.CUSTOMS SERVICE"]];
	      sId["131504"] = [icn["GR.IC.DRUG ENFORCEMENT AGENCY (DEA)"]];
	      sId["131505"] = [icn["GR.IC.FF.DEPARTMENT OF JUSTICE (DOJ)"]];
	      sId["131506"] = [icn["GR.IC.FEDERAL BUREAU OF INVESTIGATION (FBI)"]];
	      sId["131507"] = [icn["GR.IC.LAW ENFORCEMENT"]];
	      sId["131508"] = [icn["GR.IC.FF.PRISON"]];
	      sId["131509"] = [icn["GR.IC.UNITED STATES SECRET SERVICE(TREAS) (USSS)"]];
	      sId["131510"] = [icn["GR.IC.TRANSPORTATION SECURITY AGENCY (TSA)"]];
	      sId["131511"] = [icn["GR.IC.LAW ENFORCEMENT VESSEL"]];
	      sId["131512"] = [icn["GR.IC.FF.US MARSHALS SERVICE"]];
	      sId["131513"] = [icn["ST.IC.INTERNAL SECURITY FORCE"]];
	      sId["140000"] = [icn["AC.IC.FIRE EVENT"]];
	      sId["140100"] = [icn["AC.IC.FIRE ORIGIN"]];
	      sId["140200"] = [icn["AC.IC.SMOKE"]];
	      sId["140300"] = [icn["AC.IC.HOT SPOT"]];
	      sId["140400"] = [icn["AC.IC.NON-REsIdENTIAL FIRE"]];
	      sId["140500"] = [icn["AC.IC.REsIdENTIAL FIRE"]];
	      sId["140600"] = [icn["AC.IC.SCHOOL FIRE"]];
	      sId["140700"] = [icn["AC.IC.SPECIAL NEEDS FIRE"]];
	      sId["140800"] = [icn["AC.IC.WILD FIRE"]];
	      sId["150000"] = [];
	      sId["150100"] = [icn["AC.IC.HAZARDOUS MATERIALS INCIDENT"]];
	      sId["150101"] = [icn["AC.IC.CHEMICAL AGENT"]];
	      sId["150102"] = [icn["AC.IC.CORROSIVE MATERIAL"]];
	      sId["150103"] = [icn["AC.IC.HAZARDOUS WHEN WET"]];
	      sId["150104"] = [icn["AC.IC.EXPLOSIVE MATERIAL"]];
	      sId["150105"] = [icn["AC.IC.FLAMMABLE GAS"]];
	      sId["150106"] = [icn["AC.IC.FLAMMABLE LIQUID"]];
	      sId["150107"] = [icn["AC.IC.FLAMMABLE SOLID"]];
	      sId["150108"] = [icn["AC.IC.NON-FLAMMABLE GAS"]];
	      sId["150109"] = [icn["AC.IC.ORGANIC PEROXIDE"]];
	      sId["150110"] = [icn["AC.IC.OXIDIZER"]];
	      sId["150111"] = [icn["AC.IC.RADIOACTIVE MATERIAL"]];
	      sId["150112"] = [icn["AC.IC.SPONTANEOUSLY COMBUSTIBLE MATERIAL"]];
	      sId["150113"] = [icn["AC.IC.TOXIC GAS"]];
	      sId["150114"] = [icn["AC.IC.TOXIC INFECTIOUS MATERIAL"]];
	      sId["150115"] = [icn["AC.IC.UNEXPLODED ORDNANCE"]];
	      sId["160000"] = [icn["GR.IC.TRANSPORTATION"]];
	      sId["160100"] = [icn["ST.IC.HIJACKING (AIRPLANE)"]];
	      sId["160200"] = [icn["ST.IC.HIJACKING (BOAT)"]];
	      sId["160300"] = [icn["GR.EQ.TRAIN LOCOMOTIVE"]];
	      sId["160400"] = [icn["ST.IC.KNOWN INSURGENT VEHICLE"]];
	      sId["160500"] = [
	        icn["ST.IC.EXPLOSION"],
	        ms._scale(0.7, icn["ST.IC.KNOWN INSURGENT VEHICLE"]),
	      ];
	      sId["170000"] = [icn["ST.IC.NATURAL EVENT"]];
	      sId["170100"] = [icn["ST.IC.GEOLOGIC"]];
	      sId["170101"] = [icn["AC.IC.AFTERSHOCK"]];
	      sId["170102"] = [icn["AC.IC.AVALANCHE"]];
	      sId["170103"] = [icn["AC.IC.EARTHQUAKE EPICENTER"]];
	      sId["170104"] = [icn["AC.IC.LANDSLIDE"]];
	      sId["170105"] = [icn["AC.IC.SUBSIDENCE"]];
	      sId["170106"] = [icn["AC.IC.VOLCANIC ERUPTION"]];
	      sId["170107"] = [icn["AC.IC.VOLCANIC THREAT"]];
	      sId["170108"] = [icn["AC.IC.CAVE ENTRANCE"]];
	      sId["170200"] = [icn["ST.IC.HYDRO-METEOROLOGICAL"]];
	      sId["170201"] = [icn["AC.IC.DROUGHT"]];
	      sId["170202"] = [icn["AC.IC.FLOOD"]];
	      sId["170203"] = [icn["AC.IC.TSUNAMI"]];
	      sId["170300"] = [icn["ST.IC.INFESTATION"]];
	      sId["170301"] = [icn["AC.IC.BIRD"]];
	      sId["170302"] = [icn["AC.IC.INSECT"]];
	      sId["170303"] = [icn["AC.IC.MICROBIAL"]];
	      sId["170304"] = [icn["AC.IC.REPTILE"]];
	      sId["170305"] = [icn["AC.IC.RODENT"]];
	      sId["180000"] = [];
	      sId["180100"] = [
	        icn["ST.IC.INDIVIDUAL"],
	        icn["ST.M1.LEADER"],
	        icn["ST.M2.RELIGIOUS"],
	      ];
	      sId["180200"] = [icn["ST.IC.INDIVIDUAL"], icn["ST.M1.SPEAKER"]];
	      sId["180300"] = [icn["GR.IC.ISOLATED PERSONNEL"]];

	      //sIdm1['00'] = 'Unspecified';
	      sIdm1["01"] = [icn["ST.M1.ASSASSINATION"]];
	      sIdm1["02"] = [icn["ST.M1.EXECUTION (WRONGFUL KILLING)"]];
	      sIdm1["03"] = [icn["ST.M1.HIJACKING/HIJACKED"]];
	      sIdm1["04"] = [icn["ST.M1.HOUSE-TO-HOUSE"]];
	      sIdm1["05"] = [icn["ST.M1.KIDNAPPING"]];
	      sIdm1["06"] = [icn["ST.M1.MURDER"]];
	      sIdm1["07"] = [icn["ST.M1.PIRACY"]];
	      sIdm1["08"] = [icn["ST.M1.RAPE"]];
	      sIdm1["09"] = [icn["ST.M1.WRITTEN PSYCHOLOGICAL OPERATIONS"]];
	      sIdm1["10"] = [icn["ST.M1.PIRATE"]];
	      sIdm1["11"] = [icn["ST.M1.FALSE"]];
	      sIdm1["12"] = [icn["ST.M1.FIND"]];
	      sIdm1["13"] = [icn["ST.M1.FOUND AND CLEARED"]];
	      sIdm1["14"] = [icn["ST.M1.HOAX (DECOY)"]];
	      sIdm1["15"] = [icn["ST.M1.ATTEMPTED"]];
	      sIdm1["16"] = [icn["ST.M1.ACCIDENT"]];
	      sIdm1["17"] = [icn["ST.M1.INCIDENT"]];
	      sIdm1["18"] = [icn["ST.M1.THEFT"]];
	      sIdm1["19"] = [icn["GR.M1.HIJACKER"]];
	      sIdm1["20"] = [icn["GR.M1.CYBERSPACE"]];
	      sIdm1["21"] = [icn["AC.M1.EVICTION"]];
	      sIdm1["22"] = [icn["AC.M1.RAID"]];

	      sIdm2["01"] = [icn["GR.M2.CYBERSPACE"]];
	      sIdm2["02"] = [icn["GR.M2.SECURITY FORCE ASSISTANCE"]];
	    }
	  },
	};

	var signalsintelligence = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$2,
	  icons: function signalsIntelligence(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Adds support for Signals Intelligence
	    if (
	      symbolSet == "50" ||
	      symbolSet == "51" ||
	      symbolSet == "52" ||
	      symbolSet == "53" ||
	      symbolSet == "54"
	    ) {
	      sId["110000"] = [];
	      sId["110100"] = [icn["SI.IC.COMMUNICATIONS"]];
	      sId["110200"] = [icn["SI.I.JAMMER / ELECTRONIC COUNTER-MEASURES"]];
	      sId["110300"] = [icn["SI.IC.RADAR"]];

	      //sIdm1['00'] = 'Unspecified';
	      sIdm1["01"] = [icn["SI.M1.ANTI-AIRCRAFT FIRE CONTROL"]];
	      sIdm1["02"] = [icn["SI.M1.AIRBORNE SEARCH AND BOMBING"]];
	      sIdm1["03"] = [icn["SI.M1.AIRBORNE INTERCEPT"]];
	      sIdm1["04"] = [icn["SI.M1.ALTIMETER"]];
	      sIdm1["05"] = [icn["SI.M1.AIRBORNE RECONNAISSANCE AND MAPPING"]];
	      sIdm1["06"] = [icn["SI.M1.AIR TRAFFIC CONTROL"]];
	      sIdm1["07"] = [icn["SI.M1.BEACON TRANSPONDER (NOT IFF)"]];
	      sIdm1["08"] = [icn["SI.M1.BATTLEFIELD SURVEILLANCE"]];
	      sIdm1["09"] = [icn["SI.M1.CONTROLLED APPROACH"]];
	      sIdm1["10"] = [icn["SI.M1.CONTROLLED INTERCEPT"]];
	      sIdm1["11"] = [icn["SI.M1.CELLULAR/MOBILE"]];
	      sIdm1["12"] = [icn["SI.M1.COASTAL SURVEILLANCE"]];
	      sIdm1["13"] = [icn["SI.M1.DECOY/MIMIC"]];
	      sIdm1["14"] = [icn["SI.M1.DATA TRANSMISSION"]];
	      sIdm1["15"] = [icn["SI.M1.EARTH SURVEILLANCE"]];
	      sIdm1["16"] = [icn["SI.M1.EARLY WARNING"]];
	      sIdm1["17"] = [icn["SI.M1.FIRE CONTROL"]];
	      sIdm1["18"] = [icn["SI.M1.GROUND MAPPING"]];
	      sIdm1["19"] = [icn["SI.M1.HEIGHT FINDING"]];
	      sIdm1["20"] = [icn["SI.M1.HARBOR SURVEILLANCE"]];
	      sIdm1["21"] = [icn["SI.M1.IDENTIFICATION, FRIEND OR FOE (INTERROGATOR)"]];
	      sIdm1["22"] = [icn["SI.M1.INSTRUMENT LANDING SYSTEM"]];
	      sIdm1["23"] = [icn["SI.M1.IONOSPHERIC SOUNDING"]];
	      sIdm1["24"] = [icn["SI.M1.IDENTIFICATION, FRIEND OR FOE (TRANSPONDER)"]];
	      sIdm1["25"] = [icn["SI.M1.BARRAGE JAMMER"]];
	      sIdm1["26"] = [icn["SI.M1.CLICK JAMMER"]];
	      sIdm1["27"] = [icn["SI.M1.DECEPTIVE JAMMER"]];
	      sIdm1["28"] = [icn["SI.M1.FREQUENCY SWEPT JAMMER"]];
	      sIdm1["29"] = [icn["SI.M1.JAMMER (GENERAL)"]];
	      sIdm1["30"] = [icn["SI.M1.NOISE JAMMER"]];
	      sIdm1["31"] = [icn["SI.M1.PULSED JAMMER"]];
	      sIdm1["32"] = [icn["SI.M1.REPEATER JAMMER"]];
	      sIdm1["33"] = [icn["SI.M1.SPOT NOISE JAMMER"]];
	      sIdm1["34"] = [icn["SI.M1.TRANSPONDER JAMMER"]];
	      sIdm1["35"] = [icn["SI.M1.MISSILE ACQUISITION"]];
	      sIdm1["36"] = [icn["SI.M1.MISSILE CONTROL"]];
	      sIdm1["37"] = [icn["SI.M1.MISSILE DOWNLINK"]];
	      sIdm1["38"] = [icn["SI.M1.METEOROLOGICAL"]];
	      sIdm1["39"] = [icn["SI.M1.MULTI-FUNCTION"]];
	      sIdm1["40"] = [icn["SI.M1.MISSILE GUIDANCE"]];
	      sIdm1["41"] = [icn["SI.M1.MISSILE HOMING"]];
	      sIdm1["42"] = [icn["SI.M1.MISSILE TRACKING"]];
	      sIdm1["43"] = [icn["SI.M1.NAVIGATIONAL/GENERAL"]];
	      sIdm1["44"] = [icn["SI.M1.NAVIGATIONAL/DISTANCE MEASURING EQUIPMENT"]];
	      sIdm1["45"] = [icn["SI.M1.NAVIGATION/TERRAIN FOLLOWING"]];
	      sIdm1["46"] = [icn["SI.M1.NAVIGATIONAL/WEATHER AVOIDANCE"]];
	      sIdm1["47"] = [icn["SI.M1.OMNI-LINE OF SIGHT (LOS)"]];
	      sIdm1["48"] = [icn["SI.M1.PROXIMITY USE"]];
	      sIdm1["49"] = [icn["SI.M1.POINT-TO-POINT LINE OF SIGHT (LOS)"]];
	      sIdm1["50"] = [icn["SI.M1.INSTRUMENTATION"]];
	      sIdm1["51"] = [icn["SI.M1.RANGE ONLY"]];
	      sIdm1["52"] = [icn["SI.M1.SONOBUOY"]];
	      sIdm1["53"] = [icn["SI.M1.SATELLITE DOWNLINK"]];
	      sIdm1["54"] = [icn["SI.M1.SPACE"]];
	      sIdm1["55"] = [icn["SI.M1.SURFACE SEARCH"]];
	      sIdm1["56"] = [icn["SI.M1.SHELL TRACKING"]];
	      sIdm1["57"] = [icn["SI.M1.SATELLITE UPLINK"]];
	      sIdm1["58"] = [icn["SI.M1.TARGET ACQUISITION"]];
	      sIdm1["59"] = [icn["SI.M1.TARGET ILLUMINATION"]];
	      sIdm1["60"] = [icn["SI.M1.TROPOSPHERIC SCATTER"]];
	      sIdm1["61"] = [icn["SI.M1.TARGET TRACKING"]];
	      sIdm1["62"] = [icn["SI.M1.UNKNOWN"]];
	      sIdm1["63"] = [icn["SI.M1.VIDEO REMOTING"]];
	      sIdm1["64"] = [icn["SI.M1.EXPERIMENTAL"]];
	      sIdm1["65"] = [icn["SI.M1.CYBER"]];

	      sIdm2["01"] = [icn["SI.M2.CYBER"]];
	    }
	  },
	};

	var cyberspace = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function cyberspace(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525,
	    edition
	  ) {
	    //Adds support for Cyberspace
	    if (symbolSet == "60") {
	      sId["110000"] = [];
	      sId["110100"] =
	        edition == "D"
	          ? [icn["CY.IC.COMMAND AND CONTROL (C2)"]]
	          : [icn["CY.IC.COMBAT MISSION TEAM"]];
	      sId["110200"] =
	        edition == "D"
	          ? [icn["CY.IC.HERDER"]]
	          : [icn["CY.IC.NATIONAL MISSION TEAM"]];
	      sId["110300"] =
	        edition == "D"
	          ? [icn["CY.IC.CALLBACK DOMAIN"]]
	          : [icn["CY.IC.CYBER PROTECTION TEAM"]];
	      sId["110400"] = edition == "D" ? [icn["CY.IC.ZOMBIE"]] : []; // Disused
	      sId["110500"] = []; // Disused
	      sId["110600"] = [icn["CY.IC.DEFENSIVE CYBERSPACE OPERATION"]];
	      sId["110700"] = [icn["CY.IC.OFFENSIVE CYBERSPACE OPERATION"]];
	      sId["110800"] = [icn["CY.IC.INTERNET SERVICE PROVIDER"]];
	      sId["110900"] = [icn["CY.IC.SECURITY"]];
	      sId["111000"] = [icn["CY.IC.OPERATIONS"]];

	      sId["120000"] = edition == "D" ? [] : [icn["CY.IC.THREAT ACTOR"]];
	      sId["120100"] = [icn["CY.IC.ADVANCED PERSISTENT THREAT (APT)"]];
	      sId["120101"] = [icn["CY.IC.APT WITH C2"]];
	      sId["120102"] = [icn["CY.IC.APT WITH SELF PROPAGATION"]];
	      sId["120103"] = [icn["CY.IC.APT WITH C2 AND SELF PROPAGATION"]];
	      sId["120104"] = [icn["CY.IC.APT OTHER"]];
	      sId["120200"] =
	        edition == "D"
	          ? [icn["CY.IC.NON-ADVANCED PERSISTENT THREAT (NAPT)"]]
	          : [icn["CY.IC.INSIDER"]];
	      sId["120201"] = [icn["CY.IC.NAPT WITH C2"]];
	      sId["120202"] = [icn["CY.IC.NAPT WITH SELF PROPAGATION"]];
	      sId["120203"] = [icn["CY.IC.NAPT WITH C2 AND SELF PROPAGATION"]];
	      sId["120204"] = [icn["CY.IC.NAPT OTHER"]];
	      sId["130000"] = [];
	      sId["130100"] =
	        edition == "D" ? [icn["CY.IC.NORMAL"]] : [icn["CY.IC.FIREWALL"]];
	      sId["130200"] =
	        edition == "D"
	          ? [icn["CY.IC.NETWORK OUTAGE"]]
	          : [icn["CY.IC.FIRMWARE"]];
	      sId["130300"] = [icn["CY.IC.UNKNOWN"]];
	      sId["130400"] = [icn["CY.IC.IMPAIRED"]];

	      sId["140000"] = edition == "D" ? [] : [icn["CY.IC.APPLICATION"]];
	      sId["140100"] = [icn["CY.IC.CORE ROUTER"]];
	      sId["140200"] = [icn["CY.IC.ROUTER TEXT"]];
	      sId["140300"] =
	        edition == "D"
	          ? [icn["CY.IC.CROSS DOMAIN SOLUTION"]]
	          : [icn["CY.IC.SEARCH ENGINE"]];
	      sId["140400"] =
	        edition == "D"
	          ? [icn["CY.IC.MAIL SERVER"]]
	          : [icn["CY.IC.SOCIAL MEDIA"]];
	      sId["140500"] = [icn["CY.IC.WEB SERVER"]];
	      sId["140600"] = [icn["CY.IC.DOMAIN SERVER"]];
	      sId["140700"] = [icn["CY.IC.FILE SERVER"]];
	      sId["140800"] = [icn["CY.IC.PEER-TO-PEER NODE"]];
	      sId["140900"] = [icn["CY.IC.FIREWALL TEXT"]];
	      sId["141000"] = [icn["CY.IC.SWITCH TEXT"]];
	      sId["141100"] = [icn["CY.IC.HOST"]];
	      sId["141200"] = [icn["CY.IC.VIRTUAL PRIVATE NETWORK (VPN)"]];
	      sId["150000"] = [];
	      sId["150100"] =
	        edition == "D"
	          ? [icn["CY.IC.DEPARTMENT OF DEFENSE (DOD)"]]
	          : [icn["CY.IC.MALWARE"]];
	      sId["150200"] =
	        edition == "D" ? [icn["CY.IC.GOVERNMENT"]] : [icn["CY.IC.PHISIHNG"]];
	      sId["150300"] =
	        edition == "D"
	          ? [icn["CY.IC.CONTRACTOR"]]
	          : [icn["CY.IC.SPEAR PHISIHNG"]];
	      sId["150400"] =
	        edition == "D"
	          ? [icn["CY.IC.SUPERVISORY CONTROL AND DATA ACQUISITION (SCADA)"]]
	          : [icn["CY.IC.WHALE PHISHING"]];
	      sId["150500"] = [icn["CY.IC.NON-GOVERNMENT"]];

	      sId["160000"] = edition == "D" ? [] : [icn["CY.IC.DOCUMENT"]];
	      sId["160100"] =
	        edition == "D" ? [icn["CY.IC.INFECTION"]] : [icn["CY.IC.CRYPTO"]];
	      sId["160200"] =
	        edition == "D" ? [icn["CY.IC.DEGRADATION"]] : [icn["CY.IC.PERSONA"]];
	      sId["160300"] = [icn["CY.IC.DATA SPOOFING"]];
	      sId["160400"] = [icn["CY.IC.DATA MANIPULATION"]];
	      sId["160500"] = [icn["CY.IC.EXFILTRATION"]];
	      sId["160600"] = [icn["CY.IC.POWER OUTAGE"]];
	      sId["160700"] = [icn["CY.IC.NETWORK OUTAGE"]];
	      sId["160800"] = [icn["CY.IC.SERVICE OUTAGE"]];
	      sId["160900"] = [icn["CY.IC.DEVICE OUTAGE"]];

	      sId["170000"] = [];
	      sId["170100"] = [icn["CY.IC.SERVER"]];
	      sId["170200"] = [icn["CY.IC.WORKSTATION"]];
	      sId["170300"] = [];
	      sId["170301"] = [icn["CY.IC.MOBILE"]];
	      sId["170302"] = [icn["CY.IC.TABLET"]];
	      sId["170303"] = [icn["CY.IC.LAPTOP"]];
	      sId["170304"] = [icn["CY.IC.HEALTH MONITOR"]];
	      sId["170305"] = [icn["CY.IC.SMARTVEST"]];
	      sId["170306"] = [icn["CY.IC.SMARTWATCH"]];
	      sId["170307"] = [icn["CY.IC.WEARABLE"]];
	      sId["170400"] = [icn["CY.IC.IOT"]];
	      sId["170500"] = [icn["CY.IC.PRINTER"]];
	      sId["170600"] = [icn["CY.IC.ROUTER"]];
	      sId["170700"] = [icn["CY.IC.SWITCH"]];
	      sId["180000"] = [icn["CY.IC.NETWORK"]];

	      sIdm1["01"] = [icn["CY.M1.DEFENSIVE CYBERSPACE"]];
	      sIdm1["02"] = [icn["CY.M1.OFFENSIVE CYBERSPACE"]];
	      sIdm1["03"] = [icn["CY.M1.SOCIAL"]];
	      sIdm1["04"] = [icn["CY.M1.WIRED"]];
	      sIdm1["05"] = [icn["CY.M1.WIRELESS"]];
	      sIdm1["06"] = [icn["CY.M1.RADIO FREQUENCY"]];
	      sIdm1["07"] = [icn["CY.M1.OPERATING SYSTEM"]];
	      sIdm1["08"] = [icn["CY.M1.CONTINUITY OF OPERATIONS"]];
	      sIdm1["09"] = [icn["CY.M1.INTERNET SERVICE PROVIDER"]];
	      sIdm1["10"] = [icn["CY.M1.FINANCE"]];
	      sIdm1["11"] = [icn["CY.M1.OUT OF BAND"]];
	      sIdm1["12"] = [icn["CY.M1.CLOUD"]];
	      sIdm1["13"] = [icn["CY.M1.DATA"]];

	      sIdm2["01"] = [icn["CY.M2.SECURED"]];
	      sIdm2["02"] = [icn["CY.M2.OPEN"]];
	      sIdm2["03"] = [icn["CY.M2.RESPONSE ACTIONS"]];
	      sIdm2["04"] = []; // Icon not avialable
	      sIdm2["05"] = [icn["CY.M2.INTERNAL DEFENSE MEASURES"]];
	      sIdm2["06"] = [icn["CY.M2.ADVANCED PERSISTENT THREAT"]];
	      sIdm2["07"] = [icn["CY.M2.NATION STATE"]];
	      sIdm2["08"] = [icn["CY.M2.NATION STATE SPONSORED"]];
	    }
	  }
	};

	var dismountedindividual = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$5,
	  icons: function dismounted(
	    sId,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Adds support for Dismounted Individual
	    if (symbolSet == "27") {
	      sId["110000"] = [];
	      sId["110100"] = [];
	      sId["110101"] = [icn["GR.IC.FF.INFANTRY DISMOUNTED"]];
	      sId["110102"] = [icn["GR.IC.FF.MEDICAL"]];
	      sId["110103"] = [icn["GR.IC.FF.RECONNAISSANCE DISMOUNTED"]];
	      sId["110104"] = [icn["GR.IC.FF.SIGNAL DISMOUNTED"]];
	      sId["110200"] = [];
	      sId["110201"] = [icn["GR.IC.EXPLOSIVE ORDNANCE DISPOSAL"]];
	      sId["110202"] = [icn["GR.IC.FIELD ARTILLERY OBSERVER"]];
	      sId["110203"] = [icn["GR.IC.JOINT FIRE SUPPORT"]];
	      sId["110204"] = [icn["GR.IC.LIAISON"]];
	      sId["110205"] = [icn["GR.IC.MESSENGER"]];
	      sId["110206"] = [icn["GR.IC.MILITARY POLICE"]];
	      sId["110207"] = [icn["GR.IC.OBSERVER/OBSERVATION"]];
	      sId["110208"] = [icn["GR.IC.SECURITY"]];
	      sId["110209"] = [icn["GR.IC.SNIPER"]];
	      sId["110210"] = [icn["GR.IC.SPECIAL OPERATIONS FORCES"]];
	      sId["110211"] = [icn["GR.EQ.DESIGNATED MARKSMAN"]];
	      sId["110212"] = [icn["GR.EQ.MEDIC"]];
	      sId["110213"] = [icn["GR.IC.FF.SIGNAL DISMOUNTED"]];
	      sId["110214"] = [icn["GR.IC.FF.RECONNAISSANCE DISMOUNTED"]];
	      sId["110215"] = [icn["GR.IC.FF.INFANTRY DISMOUNTED"]];
	      sId["110216"] = [icn["GR.EQ.CLOSE PROTECTION"]];
	      sId["110217"] = [icn["GR.EQ.CROWD AND RIOT CONTROL"]];
	      sId["110218"] = [icn["GR.EQ.SPECIAL WEAPONS AND TACTICS (SWAT)"]];
	      sId["110219"] = [icn["GR.EQ.DEMOLITION"]];
	      sId["110220"] = [icn["GR.EQ.COMMANDER (CDR)"]];
	      sId["110221"] = [icn["GR.EQ.SECOND IN COMMAND (SIC)"]];

	      sId["110300"] = [];
	      sId["110301"] = [icn["GR.EQ.RIFLE"]];
	      sId["110302"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110303"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	      sId["110304"] = [icn["GR.EQ.RIFLE"], icn["GR.EQ.LONG RANGE"]];
	      sId["110305"] = [icn["GR.EQ.MACHINE GUN"]];
	      sId["110306"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]];
	      sId["110307"] = [
	        icn["GR.EQ.MACHINE GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"],
	      ];
	      sId["110308"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]];
	      sId["110309"] = [icn["GR.EQ.GRENADE LAUNCHER"]];
	      sId["110310"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"]),
	      ];
	      sId["110311"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"]),
	      ];
	      sId["110312"] = [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.LONG RANGE"]),
	      ];
	      sId["110313"] = [icn["GR.EQ.FLAME THROWER"]];
	      sId["110314"] = [icn["GR.EQ.MORTAR"]];
	      sId["110315"] = [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]];
	      sId["110316"] = [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]];
	      /*
	    sId["110317"] = [];
	    sId["110318"] = [ms._scale(0.5, [icn["GR.EQ.MACHINE GUN"]])];
	    sId["110319"] = [
	      ms._translate(0, -10, ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"]]))
	    ];
	    sId["110320"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"]]))
	    ];
	    sId["110321"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]];
	    sId["110322"] = [
	      ms._scale(0.5, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]])
	    ];
	    sId["110323"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]])
	      )
	    ];
	    sId["110324"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.SHORT RANGE"]])
	      )
	    ];
	    sId["110325"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.INTERMEDIATE RANGE"]];
	    sId["110326"] = [
	      ms._scale(0.5, [
	        icn["GR.EQ.MACHINE GUN"],
	        icn["GR.EQ.INTERMEDIATE RANGE"]
	      ])
	    ];
	    sId["110327"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [
	          icn["GR.EQ.MACHINE GUN"],
	          icn["GR.EQ.INTERMEDIATE RANGE"]
	        ])
	      )
	    ];
	    sId["110328"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [
	          icn["GR.EQ.MACHINE GUN"],
	          icn["GR.EQ.INTERMEDIATE RANGE"]
	        ])
	      )
	    ];
	    sId["110329"] = [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]];
	    sId["110330"] = [
	      ms._scale(0.5, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]])
	    ];
	    sId["110331"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]])
	      )
	    ];
	    sId["110332"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [icn["GR.EQ.MACHINE GUN"], icn["GR.EQ.LONG RANGE"]])
	      )
	    ];
	    sId["110333"] = [icn["GR.EQ.GRENADE LAUNCHER"]];
	    sId["110334"] = [ms._scale(0.5, [icn["GR.EQ.GRENADE LAUNCHER"]])];
	    sId["110335"] = [
	      ms._translate(0, -10, ms._scale(0.7, [icn["GR.EQ.GRENADE LAUNCHER"]]))
	    ];
	    sId["110336"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.GRENADE LAUNCHER"]]))
	    ];
	    sId["110337"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"])
	    ];
	    sId["110338"] = [
	      ms._scale(0.5, [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"])
	      ])
	    ];
	    sId["110339"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"])
	        ])
	      )
	    ];
	    sId["110340"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.SHORT RANGE"])
	        ])
	      )
	    ];
	    sId["110341"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"])
	    ];
	    sId["110342"] = [
	      ms._scale(0.5, [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"])
	      ])
	    ];
	    sId["110343"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"])
	        ])
	      )
	    ];
	    sId["110344"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.INTERMEDIATE RANGE"])
	        ])
	      )
	    ];
	    sId["110345"] = [
	      icn["GR.EQ.GRENADE LAUNCHER"],
	      ms._translate(0, 20, icn["GR.EQ.LONG RANGE"])
	    ];
	    sId["110346"] = [
	      ms._scale(0.5, [
	        icn["GR.EQ.GRENADE LAUNCHER"],
	        ms._translate(0, 20, icn["GR.EQ.LONG RANGE"])
	      ])
	    ];
	    sId["110347"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.LONG RANGE"])
	        ])
	      )
	    ];
	    sId["110348"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [
	          icn["GR.EQ.GRENADE LAUNCHER"],
	          ms._translate(0, 20, icn["GR.EQ.LONG RANGE"])
	        ])
	      )
	    ];
	    sId["110349"] = [icn["GR.EQ.FLAME THROWER"]];
	    sId["110350"] = [ms._scale(0.5, [icn["GR.EQ.FLAME THROWER"]])];
	    sId["110351"] = [
	      ms._translate(0, -10, ms._scale(0.7, [icn["GR.EQ.FLAME THROWER"]]))
	    ];
	    sId["110352"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.FLAME THROWER"]]))
	    ];
	    sId["110353"] = [icn["GR.EQ.MORTAR"]];
	    sId["110354"] = [ms._scale(0.5, [icn["GR.EQ.MORTAR"]])];
	    sId["110355"] = [
	      ms._translate(0, -10, ms._scale(0.7, [icn["GR.EQ.MORTAR"]]))
	    ];
	    sId["110356"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.MORTAR"]]))
	    ];
	    sId["110357"] = [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]];
	    sId["110358"] = [ms._scale(0.5, [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]])];
	    sId["110359"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]])
	      )
	    ];
	    sId["110360"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [icn["GR.EQ.SINGLE ROCKET LAUNCHER"]])
	      )
	    ];
	    sId["110361"] = [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]];
	    sId["110362"] = [ms._scale(0.5, [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]])];
	    sId["110363"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]])
	      )
	    ];
	    sId["110364"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [icn["GR.EQ.ANTITANK ROCKET LAUNCHER"]])
	      )
	    ];
	    //*/
	      sId["110400"] = [];
	      sId["110401"] = [icn["GR.EQ.NON-LETHAL WEAPON"]];
	      sId["110402"] = icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"];
	      sId["110403"] = [icn["GR.EQ.TASER"]];
	      /*
	    sId["110404"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.NON-LETHAL WEAPON"]]))
	    ];
	    sId["110405"] = [icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"]];
	    sId["110406"] = [
	      ms._scale(0.5, [icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"]])
	    ];
	    sId["110407"] = [
	      ms._translate(
	        0,
	        -10,
	        ms._scale(0.7, [icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"]])
	      )
	    ];
	    sId["110408"] = [
	      ms._translate(
	        0,
	        10,
	        ms._scale(0.7, [icn["GR.EQ.NON-LETHAL GRENADE LAUNCHER"]])
	      )
	    ];
	    sId["110409"] = [icn["GR.EQ.TASER"]];
	    sId["110410"] = [ms._scale(0.5, [icn["GR.EQ.TASER"]])];
	    sId["110411"] = [
	      ms._translate(0, -10, ms._scale(0.7, [icn["GR.EQ.TASER"]]))
	    ];
	    sId["110412"] = [
	      ms._translate(0, 10, ms._scale(0.7, [icn["GR.EQ.TASER"]]))
	    ];
	    //*/
	      sId["120000"] = [];
	      sId["120100"] = [];
	      sId["120101"] = [icn["GR.IC.LAW ENFORCEMENT"]];

	      //sIdm1['00'] = [icn['']];
	      sIdm1["01"] = [icn["GR.M1.CLOSE PROTECTION"]];
	      sIdm1["02"] = [icn["GR.M1.CROWD AND RIOT CONTROL"]];
	      sIdm1["03"] = [icn["GR.M1.EXPLOSIVE ORDNANCE DISPOSAL"]];
	      sIdm1["04"] = [icn["GR.M1.SECURITY"]];
	      sIdm1["05"] = [icn["GR.M1.SNIPER"]];
	      sIdm1["06"] = [icn["GR.M1.SPECIAL WEAPONS AND TACTICS"]];
	      sIdm1["07"] = [icn["ST.M1.NONGOVERNMENTAL ORGANIZATION (NGO)"]];
	      sIdm1["08"] = [icn["GR.M1.MULTINATIONAL"]];
	      sIdm1["09"] = [icn["GR.M1.MULTINATIONAL SPECIALIZED UNIT"]];
	      sIdm1["10"] = [icn["ST.M1.GOVERNMENT ORGANIZATION"]];
	      sIdm1["11"] = [icn["GR.M1.FIELD ARTILLERY OBSERVER"]];
	      sIdm1["12"] = [icn["GR.M1.JOINT FIRE SUPPORT"]];
	      sIdm1["13"] = [icn["GR.M1.LIAISON"]];
	      sIdm1["14"] = [icn["GR.M1.MESSENGER"]];
	      sIdm1["15"] = [icn["GR.M1.MILITARY POLICE"]];
	      sIdm1["16"] = [icn["GR.M1.OBSERVER"]];
	      sIdm1["17"] = [icn["GR.M1.DESIGNATED MARKSMAN"]];
	      sIdm1["18"] = [icn["GR.M1.J7"]];
	      sIdm1["19"] = [icn["GR.M1.J8"]];
	      sIdm1["20"] = [icn["GR.M1.SIGNALER"]];
	      sIdm1["21"] = [icn["GR.M1.RECONNAISSANCE"]];
	      sIdm1["22"] = [icn["GR.M1.INFANTRY"]];
	      sIdm1["23"] = [icn["GR.M1.COMMANDER"]];
	      sIdm1["24"] = [icn["GR.M1.SECOND IN COMMAND"]];
	      sIdm1["25"] = [icn["GR.M1.DEMOLITION"]];
	      sIdm1["26"] = [icn["GR.M1.POLICE"]];
	      sIdm1["27"] = [icn["GR.M1.OF-7"]];
	      sIdm1["28"] = [icn["GR.M1.OF-8"]];
	      sIdm1["29"] = [icn["GR.M1.OF-9"]];
	      sIdm1["30"] = [icn["GR.M1.OF-10"]];
	      sIdm1["31"] = [icn["GR.M1.OF-D"]];
	      sIdm1["32"] = [icn["GR.M1.OR-1"]];
	      sIdm1["33"] = [icn["GR.M1.OR-2"]];
	      sIdm1["34"] = [icn["GR.M1.OR-3"]];
	      sIdm1["35"] = [icn["GR.M1.OR-4"]];
	      sIdm1["36"] = [icn["GR.M1.OR-5"]];
	      sIdm1["37"] = [icn["GR.M1.OR-6"]];
	      sIdm1["38"] = [icn["GR.M1.OR-7"]];
	      sIdm1["39"] = [icn["GR.M1.OR-8"]];
	      sIdm1["40"] = [icn["GR.M1.OR-9"]];
	      sIdm1["41"] = [icn["GR.M1.WO-1"]];
	      sIdm1["42"] = [icn["GR.M1.WO-2"]];
	      sIdm1["43"] = [icn["GR.M1.WO-3"]];
	      sIdm1["44"] = [icn["GR.M1.WO-4"]];
	      sIdm1["45"] = [icn["GR.M1.WO-5"]];
	      sIdm1["46"] = [icn["GR.M1.INDIVIDUAL"]];
	      sIdm1["47"] = [icn["GR.M1.TEAM"]];
	      sIdm1["48"] = [icn["GR.M1.SQUAD"]];
	      sIdm1["49"] = [icn["GR.M1.SECTION"]];
	      sIdm1["50"] = [icn["GR.M1.PLATOON"]];
	      sIdm1["51"] = [icn["GR.M1.COMPANY"]];
	      sIdm1["52"] = [icn["GR.M1.BATTALION"]];
	      sIdm1["53"] = [icn["GR.M1.REGIMENT"]];
	      sIdm1["54"] = [icn["GR.M1.BRIGADE"]];
	      sIdm1["55"] = [icn["GR.M1.DIVISION"]];
	      //sIdm1["56"] = [icn["GR.M1.VIDEO IMAGERY"]];

	      //sIdm2['00'] = [icn['']];
	      sIdm2["01"] = [icn["GR.M2.AIRBORNE"]];
	      sIdm2["02"] = [icn["GR.M2.BICYCLE EQUIPPED"]];
	      sIdm2["03"] = [icn["GR.M2.VIDEO IMAGERY"]];
	      sIdm2["04"] = [icn["GR.M2.J1"]];
	      sIdm2["05"] = [icn["GR.M2.J2"]];
	      sIdm2["06"] = [icn["GR.M2.J3"]];
	      sIdm2["07"] = [icn["GR.M2.J4"]];
	      sIdm2["08"] = [icn["GR.M2.J5"]];
	      sIdm2["09"] = [icn["GR.M2.J6"]];
	      sIdm2["10"] = [icn["GR.M2.J7"]];
	      sIdm2["11"] = [icn["GR.M2.J8"]];
	      sIdm2["12"] = [icn["GR.M2.J9"]];
	      sIdm2["13"] = [icn["GR.M2.MOUNTAIN"]];
	      sIdm2["14"] = [icn["GR.M2.OF-1"]];
	      sIdm2["15"] = [icn["GR.M2.OF-2"]];
	      sIdm2["16"] = [icn["GR.M2.OF-3"]];
	      sIdm2["17"] = [icn["GR.M2.OF-4"]];
	      sIdm2["18"] = [icn["GR.M2.OF-5"]];
	      sIdm2["19"] = [icn["GR.M2.OF-6"]];
	      sIdm2["20"] = [icn["GR.M2.OF-7"]];
	      sIdm2["21"] = [icn["GR.M2.OF-8"]];
	      sIdm2["22"] = [icn["GR.M2.OF-9"]];
	      sIdm2["23"] = [icn["GR.M2.OF-10"]];
	      sIdm2["24"] = [icn["GR.M2.OF-D"]];
	      sIdm2["25"] = [icn["GR.M2.OR-1"]];
	      sIdm2["26"] = [icn["GR.M2.OR-2"]];
	      sIdm2["27"] = [icn["GR.M2.OR-3"]];
	      sIdm2["28"] = [icn["GR.M2.OR-4"]];
	      sIdm2["29"] = [icn["GR.M2.OR-5"]];
	      sIdm2["30"] = [icn["GR.M2.OR-6"]];
	      sIdm2["31"] = [icn["GR.M2.OR-7"]];
	      sIdm2["32"] = [icn["GR.M2.OR-8"]];
	      sIdm2["33"] = [icn["GR.M2.OR-9"]];
	      sIdm2["34"] = [icn["GR.M2.WO-1"]];
	      sIdm2["35"] = [icn["GR.M2.WO-2"]];
	      sIdm2["36"] = [icn["GR.M2.WO-3"]];
	      sIdm2["37"] = [icn["GR.M2.WO-4"]];
	      sIdm2["38"] = [icn["GR.M2.WO-5"]];
	      sIdm2["39"] = [icn["GR.M2.SKI"]];
	    }
	  },
	};

	// Label overrides for tactical points
	function tacticalPoints(sidc) {
	  // Tactical Point Symbols =========================================================================
	  // TODO Maybe add some way to define additions for different symbol sets
	  const actionPoint = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 30,
	      fontsize: 30,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  const actionPoint1 = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  const actionPoint2 = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    uniqueDesignation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 20,
	      fontsize: 30,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  };
	  sidc["130100"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -70,
	      fontsize: 40,
	    },
	    additionalInformation1: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -25,
	      fontsize: 30,
	    },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 45,
	      fontsize: 40,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: -30,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: -30, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 10, fontsize: 40 },
	  }; //Command and Control Points / Unspecified Control Point
	  sidc["130200"] = actionPoint; //Command and Control Points / Amnesty Point
	  sidc["130300"] = actionPoint; //Command and Control Points / Checkpoint
	  sidc["130400"] = {}; //Command and Control Points / Center of Main Effort
	  sidc["130500"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 115,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //Command and Control Points / Contact Point
	  sidc["130600"] = {}; //Command and Control Points / Coordinating Point
	  sidc["130700"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 115,
	      fontsize: 45,
	      fontweight: "bold",
	    },
	  }; //Command and Control Points / Decision Point
	  sidc["130800"] = actionPoint; //Command and Control Points / Distress Call
	  sidc["130900"] = actionPoint; //Command and Control Points / Entry Control Point
	  sidc["131001"] = actionPoint1; //Command and Control Points / Fly-To-Point / Sonobuoy
	  sidc["131002"] = actionPoint1; //Command and Control Points / Fly-To-Point / Weapon
	  sidc["131003"] = actionPoint1; //Command and Control Points / Fly-To-Point / Normal
	  sidc["131100"] = actionPoint; //Command and Control Points / Linkup Point
	  sidc["131200"] = actionPoint; //Command and Control Points / Passage Point
	  sidc["131300"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 20,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //Command and Control Points / Point of Interest
	  sidc["131301"] = {}; //Command and Control Points / Point of Interest / Launch Event
	  sidc["131400"] = actionPoint; //Command and Control Points / Rally Point
	  sidc["131500"] = actionPoint; //Command and Control Points / Release Point
	  sidc["131600"] = actionPoint; //Command and Control Points / Start Point
	  sidc["131700"] = {}; //Command and Control Points / Special Point
	  sidc["131800"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 107,
	      fontsize: 50,
	    },
	  }; //Command and Control Points / Waypoint
	  sidc["131900"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 105,
	      fontsize: 40,
	    },
	  }; //Command and Control Points / Airfield
	  sidc["132000"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	    },
	  }; //Command and Control Points / Target Handover
	  sidc["132100"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 100,
	      y: 100,
	      fontsize: 35,
	      fill: "#800080",
	      fontweight: "bold",
	    },
	  }; //Command and Control Points / Key Terrain

	  sidc["132200"] = actionPoint;
	  sidc["132300"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 150,
	      fontsize: 40,
	    },
	  };
	  sidc["160100"] = {}; //Maneuver Points / Observation Post/Outpost (unspecified)
	  sidc["160200"] = {}; //Maneuver Points / Observation Post/Outpost (specified)
	  sidc["160201"] = {}; //Maneuver Points / Observation Post/Outpost (specified) / Reconnaissance Outpost
	  sidc["160202"] = {}; //Maneuver Points / Observation Post/Outpost (specified) / Forward Observer/Spotter Outpost/Position
	  sidc["160203"] = {}; //Maneuver Points / Observation Post/Outpost (specified) / CBRN Observation Outpost
	  sidc["160204"] = {}; //Maneuver Points / Observation Post/Outpost (specified) / Sensor Outpost /Listening Post
	  sidc["160205"] = {}; //Maneuver Points / Observation Post/Outpost (specified) / Combat Outpost
	  sidc["160300"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 110,
	      y: 90,
	      fontsize: 40,
	    },
	  }; //Maneuver Points / Target Reference Point
	  sidc["160400"] = actionPoint1; //Maneuver Points / Point of Departure
	  sidc["180000"] = {};
	  sidc["180100"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 120,
	      fontsize: 35,
	    },
	  }; //Airspace Control Points / Air Control Point
	  sidc["180200"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 120,
	      fontsize: 35,
	    },
	  }; //Airspace Control Points / Communications Checkpoint
	  sidc["180300"] = {}; //Airspace Control Points / Downed Aircraft Pick–up Point
	  sidc["180400"] = {}; //Airspace Control Points / Pop–up Point
	  sidc["180500"] = {}; //Airspace Control Points / Air Control Rendezvous
	  sidc["180600"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 70,
	      fontsize: 35,
	    },
	  }; //Airspace Control Points / Tactical Air Navigation (TACAN)
	  sidc["180700"] = {}; //Airspace Control Points / Combat Air Patrol (CAP)Station
	  sidc["180800"] = {}; //Airspace Control Points / Airborne Early Warning (AEW) Station
	  sidc["180900"] = {}; //Airspace Control Points / ASW (Helo and F/W) Station
	  sidc["181000"] = {}; //Airspace Control Points / Strike Initial Point
	  sidc["181100"] = {}; //Airspace Control Points / Replenishment Station
	  sidc["181200"] = {}; //Airspace Control Points / Tanking
	  sidc["181300"] = {}; //Airspace Control Points / Antisubmarine Warfare, Rotary Wing
	  sidc["181400"] = {}; //Airspace Control Points / Surface Combat Air Patrol (SUCAP) – Fixed Wing
	  sidc["181500"] = {}; //Airspace Control Points / SUCAP – Rotary Wing
	  sidc["181600"] = {}; //Airspace Control Points / MIW – Fixed Wing
	  sidc["181700"] = {}; //Airspace Control Points / MIW – Rotary Wing
	  sidc["181800"] = {}; //Airspace Control Points / Tomcat
	  sidc["181900"] = {}; //Airspace Control Points / Rescue
	  sidc["182000"] = {}; //Airspace Control Points / Unmanned Aerial System (UAS/UA)
	  sidc["182100"] = {};
	  sidc["182200"] = {}; //Aircraft (VTUA)" / Orbit
	  sidc["182300"] = {}; //Aircraft (VTUA)" / Orbit – Figure Eight
	  sidc["182400"] = {}; //Aircraft (VTUA)" / Orbit – Race Track
	  sidc["182500"] = {}; //Aircraft (VTUA)" / Orbit – Random Closed
	  sidc["182600"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 10,
	      fontsize: 40,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 50, y: 50, fontsize: 40 },
	    dtg1: { stroke: false, textanchor: "end", x: 50, y: 90, fontsize: 40 },
	  };
	  sidc["200400"] = {}; //Maritime Control Areas / Ship Area of Interest
	  sidc["200500"] = {}; //Maritime Control Areas / Active Maneuver Area
	  sidc["200600"] = {}; //Maritime Control Areas / Cued Acquisition Doctrine
	  sidc["200700"] = {}; //Maritime Control Areas / Radar Search Doctrine
	  sidc["210100"] = {}; //Maritime Control Points / Plan Ship
	  sidc["210200"] = {}; //Maritime Control Points / Aim Point
	  sidc["210300"] = {}; //Maritime Control Points / Defended Asset
	  sidc["210400"] = {}; //Maritime Control Points / Drop Point
	  sidc["210500"] = {}; //Maritime Control Points / Entry Point
	  sidc["210600"] = {
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 70,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Air Detonation
	  sidc["210700"] = {}; //Maritime Control Points / Ground Zero
	  sidc["210800"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Impact Point
	  sidc["210900"] = {}; //Maritime Control Points / Predicted Impact Point
	  sidc["211000"] = {
	    additionalInformation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 70,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Launched Torpedo
	  sidc["211100"] = {}; //Maritime Control Points / Missile Detection Point
	  sidc["211200"] = {}; //Maritime Control Points / Acoustic Countermeasure (Decoy)
	  sidc["211300"] = {}; //Maritime Control Points / Electronic Countermeasures (ECM) Decoy
	  sidc["211400"] = {}; //Maritime Control Points / Brief Contact
	  sidc["211500"] = {}; //Maritime Control Points / Datum Lost Contact
	  sidc["211600"] = {}; //Maritime Control Points / BT Buoy Drop
	  sidc["211700"] = {}; //Maritime Control Points / Reported Bottomed Sub
	  sidc["211800"] = {}; //Maritime Control Points / Moving Haven
	  sidc["211900"] = {}; //Maritime Control Points / Screen Center
	  sidc["212000"] = {}; //Maritime Control Points / Lost Contact
	  sidc["212100"] = {}; //Maritime Control Points / Sinker
	  sidc["212200"] = {}; //Maritime Control Points / Trial Track
	  sidc["212300"] = {}; //Maritime Control Points / Acoustic Fix
	  sidc["212400"] = {}; //Maritime Control Points / Electromagnetic Fix
	  sidc["212500"] = {}; //Maritime Control Points / Electromagnetic – Magnetic Anomaly Detection (MAD)
	  sidc["212600"] = {}; //Maritime Control Points / Optical Fix
	  sidc["212700"] = {}; //Maritime Control Points / Formation
	  sidc["212800"] = {
	    additionalInformation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 105,
	      fontsize: 45,
	    },
	  }; //Maritime Control Points / Harbor
	  sidc["212900"] = {}; //Maritime Control Points / Harbor Entrance Point
	  sidc["212901"] = {}; //Maritime Control Points / Harbor Entrance Point / A
	  sidc["212902"] = {}; //Maritime Control Points / Harbor Entrance Point / Q
	  sidc["212903"] = {}; //Maritime Control Points / Harbor Entrance Point / X
	  sidc["212904"] = {}; //Maritime Control Points / Harbor Entrance Point / Y
	  sidc["213000"] = {}; //Maritime Control Points / Dip Position
	  sidc["213100"] = {}; //Maritime Control Points / Search
	  sidc["213200"] = {}; //Maritime Control Points / Search Area
	  sidc["213300"] = {}; //Maritime Control Points / Search Center
	  sidc["213400"] = {}; //Maritime Control Points / Navigational Reference Point
	  sidc["213500"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy
	  sidc["213501"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Ambient Noise
	  sidc["213502"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Air Transportable Communication
	  sidc["213503"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Barra
	  sidc["213504"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Bathythermograph Transmitting
	  sidc["213505"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Command Active Multi-Beam (CAMBS)
	  sidc["213506"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Command Active Sonobuoy Directional Command Active Sonobuoy System (CASS)
	  sidc["213507"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Directional Frequency Analysis and Recording (DIFAR)
	  sidc["213508"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Directional Command Active Sonobuoy System (DICASS)
	  sidc["213509"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Expendable Reliable Acoustic Path Sonobuoy (ERAPS)
	  sidc["213510"] = {}; //Maritime Control Points / Sonobuoy / Expired
	  sidc["213511"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Kingpin
	  sidc["213512"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Low Frequency Analysis and Recording (LOFAR)
	  sidc["213513"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Pattern Center
	  sidc["213514"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Range Only
	  sidc["213515"] = {
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 140,
	      y: 70,
	      fontsize: 35,
	    },
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 150,
	      y: 105,
	      fontsize: 35,
	    },
	  }; //Maritime Control Points / Sonobuoy / Vertical Line Array Directional Frequency Analysis and Recording (DIFAR)
	  sidc["213600"] = {}; //Maritime Control Points / Reference Point
	  sidc["213700"] = {}; //Maritime Control Points / Special Point
	  sidc["213800"] = {}; //Maritime Control Points / Navigational Reference Point(Points)
	  sidc["213900"] = {}; //Maritime Control Points / Data Link Reference Point
	  sidc["214000"] = {};
	  sidc["214100"] = {}; //Maritime Control Points / Vital Area Center
	  sidc["214200"] = {}; //Maritime Control Points / Corridor Tab Point
	  sidc["214300"] = {}; //Maritime Control Points / Enemy Point
	  sidc["214400"] = {}; //Maritime Control Points / Marshall Point
	  sidc["214500"] = {}; //Maritime Control Points / Position and Intended Movement (PIM)
	  sidc["214600"] = {}; //Maritime Control Points / Pre-Landfall Waypoint
	  sidc["214700"] = {}; //Maritime Control Points / Estimated Position (EP)
	  sidc["214800"] = {}; //Maritime Control Points / Waypoint
	  sidc["214900"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 75,
	      fontsize: 30,
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 100,
	      fontsize: 30,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 125,
	      fontsize: 30,
	    },
	  }; //Maritime Control Points / General Sea Subsurface Station
	  sidc["215000"] = {}; //Maritime Control Points / Submarine Sea Subsurface Station
	  sidc["215100"] = {}; //Maritime Control Points / Submarine Antisubmarine Warfare Sea Subsurface Station
	  sidc["215200"] = {}; //Maritime Control Points / Unmanned Underwater Vehicle Sea Subsurface Station
	  sidc["215300"] = {}; //Maritime Control Points / Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Sea Subsurface Station
	  sidc["215400"] = {}; //Maritime Control Points / Mine Warfare Unmanned Underwater Vehicle Sea Subsurface Station
	  sidc["215500"] = {}; //Maritime Control Points / Sea Surface Warfare Unmanned Underwater Vehicle Subsurface Station
	  sidc["215600"] = {
	    dtg: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 75,
	      fontsize: 30,
	    },
	    dtg1: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 100,
	      fontsize: 30,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 125,
	      fontsize: 30,
	    },
	  }; //Maritime Control Points / General Sea Surface Station
	  sidc["215700"] = {}; //Maritime Control Points / Antisubmarine Warfare (ASW) Sea Surface Station
	  sidc["215800"] = {}; //Maritime Control Points / Mine Warfare Sea Surface Station
	  sidc["215900"] = {}; //Maritime Control Points / Non-Combatant Sea Surface Station
	  sidc["216000"] = {}; //Maritime Control Points / Picket Sea Surface Station
	  sidc["216100"] = {}; //Maritime Control Points / Rendezvous Sea Surface Station
	  sidc["216200"] = {}; //Maritime Control Points / Replenishment at Sea Surface Station
	  sidc["216300"] = {}; //Maritime Control Points / Rescue Sea Surface Station
	  sidc["216400"] = {}; //Maritime Control Points / Surface Warfare Sea Surface Station
	  sidc["216500"] = {}; //Maritime Control Points / Unmanned Underwater Vehicle Sea Surface Station
	  sidc["216600"] = {}; //Maritime Control Points / Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Sea Surface Station
	  sidc["216700"] = {}; //Maritime Control Points / Mine Warfare Unmanned Underwater Vehicle Sea Surface Station
	  sidc["216800"] = {}; //Maritime Control Points / Remote Multi-Mission Vehicle Mine Warfare Unmanned Underwater Sea Surface Station
	  sidc["216900"] = {}; //Maritime Control Points / Surface Warfare Mine Warfare Unmanned Underwater Vehicle Sea Surface Station
	  sidc["217000"] = {}; //Maritime Control Points / Shore Control Station
	  sidc["217100"] = {}; //Maritime Control Points / General Route
	  sidc["217200"] = {}; //Maritime Control Points / Diversion Route
	  sidc["217300"] = {}; //Maritime Control Points / "Position and Intended-Movement (PIM) Route"
	  sidc["217400"] = {}; //Maritime Control Points / Picket Route
	  sidc["217500"] = {}; //Maritime Control Points / Point R Route
	  sidc["217600"] = {}; //Maritime Control Points / Rendezvous Route
	  sidc["217700"] = {}; //Maritime Control Points / Waypoint Route
	  sidc["217800"] = {}; //Maritime Control Points / Clutter, Stationary or Cease Reporting
	  sidc["217900"] = {}; //Maritime Control Points / Tentative or Provisional Track
	  sidc["218000"] = {}; //Maritime Control Points / Distressed Vessel
	  sidc["218100"] = {}; //Maritime Control Points / Ditched Aircraft/Downed Aircraft
	  sidc["218200"] = {}; //Maritime Control Points / Person in Water/Bailout
	  sidc["218300"] = {}; //Maritime Control Points / Iceberg
	  sidc["218500"] = {}; //Maritime Control Points / Oil Rig
	  sidc["218600"] = {}; //Maritime Control Points / Sea Mine–Like
	  sidc["218700"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)
	  sidc["218800"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade
	  sidc["218900"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Marine Life
	  sidc["219000"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / "Sea Anomaly-(Wake, Current, Knuckle)"
	  sidc["219100"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Bottom Return/Non-MILCO, Wreck, Dangerous
	  sidc["219200"] = {}; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Bottom Return/Non-MILCO, Wreck, Non Dangerous
	  sidc["240601"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 145,
	      fontsize: 40,
	    },
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "end",
	      x: 80,
	      y: 145,
	      fontsize: 40,
	    },
	    targetNumber: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	    },
	  }; //Fires Areas / Point Targets / Point or Single Target
	  sidc["240602"] = {
	    targetNumber: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 80,
	      fontsize: 40,
	    },
	  }; //Fires Areas / Point Targets / Nuclear Target
	  sidc["240603"] = {}; //Fires Areas / Point Targets / Target-Recorded
	  sidc["240900"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 195,
	      y: 100,
	      fontsize: 35,
	      fontweight: "bold",
	    },
	  }; //Fires Areas / Fire Support Station
	  sidc["250100"] = actionPoint1; //Fires Points / Firing Point
	  sidc["250200"] = actionPoint1; //Fires Points / Hide Point
	  sidc["250300"] = actionPoint1; //Fires Points / Launch Point
	  sidc["250400"] = actionPoint1; //Fires Points / Reload Point
	  sidc["250500"] = actionPoint1; //Fires Points / Survey Control Point
	  sidc["250600"] = {
	    uniqueDesignation: {
	      alignmentBaseline: "middle",
	      stroke: false,
	      textanchor: "start",
	      x: 180,
	      y: 70,
	      fontsize: 35,
	    },
	  };
	  sidc["270601"] = {}; //Protection Areas / Obstacle Bypass / Easy
	  sidc["270602"] = {}; //Protection Areas / Obstacle Bypass / Difficult
	  sidc["270603"] = {}; //Protection Areas / Obstacle Bypass / Impossible
	  sidc["270701"] = {}; //Protection Areas / Minefields / Minefield, Static Depiction
	  sidc["280100"] = {}; //Protection Points / Abatis
	  sidc["280200"] = {}; //Protection Points / Antipersonnel Mine
	  sidc["280201"] = {}; //Protection Points / Antipersonnel Mine / Antipersonnel Mine with Directional Effects
	  sidc["280300"] = {}; //Protection Points / Antitank Mine
	  sidc["280400"] = {}; //Protection Points / Antitank Mine with Anti-handling Device
	  sidc["280500"] = {}; //Protection Points / Wide Area Antitank Mine
	  sidc["280600"] = {}; //Protection Points / Unspecified Mine
	  sidc["280700"] = {}; //Protection Points / Booby Trap
	  sidc["280800"] = actionPoint; //Protection Points / Engineer Regulating Point
	  sidc["280900"] = {}; //Protection Points / Shelter
	  sidc["281000"] = {}; //Protection Points / Shelter Above Ground
	  sidc["281100"] = {}; //Protection Points / Below Ground Shelter
	  sidc["281200"] = {}; //Protection Points / Fort
	  sidc["281300"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  }; //Protection Points / Chemical Event
	  sidc["281301"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  };
	  sidc["281400"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  }; //Protection Points / Biological Event
	  sidc["281500"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  }; //Protection Points / Nuclear Event
	  sidc["281600"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  }; //Protection Points / Nuclear Fallout Producing Event
	  sidc["281700"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  };
	  sidc["281701"] = {
	    additionalInformation: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 30,
	      fontsize: 35,
	    },
	    dtg: { stroke: false, textanchor: "end", x: 40, y: 30, fontsize: 35 },
	    hostile: {
	      stroke: false,
	      textanchor: "start",
	      x: 160,
	      y: 90,
	      fontsize: 35,
	    },
	    location: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: 135,
	      fontsize: 35,
	    },
	    quantity: {
	      stroke: false,
	      textanchor: "middle",
	      x: 100,
	      y: -20,
	      fontsize: 35,
	    },
	    uniqueDesignation: {
	      stroke: false,
	      textanchor: "end",
	      x: 40,
	      y: 90,
	      fontsize: 35,
	    },
	  };
	  //Protection Points / Radiological
	  sidc["281800"] = actionPoint; //Protection Points / General Decontamination Point/Site
	  sidc["281801"] = actionPoint; //Protection Points / General Decontamination Point/Site / Alternate
	  sidc["281802"] = actionPoint; //Protection Points / General Decontamination Point/Site / Equipment
	  sidc["281803"] = actionPoint; //Protection Points / General Decontamination Point/Site / Troop
	  sidc["281804"] = actionPoint; //Protection Points / General Decontamination Point/Site / Equipment/Troop
	  sidc["281805"] = actionPoint; //Protection Points / General Decontamination Point/Site / Operational
	  sidc["281806"] = actionPoint; //Protection Points / General Decontamination Point/Site / Thorough
	  sidc["281807"] = actionPoint; //Protection Points / General Decontamination Point/Site / Main Equipment
	  sidc["281808"] = actionPoint; //Protection Points / General Decontamination Point/Site / Forward Troop
	  sidc["281809"] = actionPoint; //Protection Points / General Decontamination Point/Site / Wounded Personnel
	  sidc["281901"] = {}; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Fixed and Prefabricated
	  sidc["281902"] = {}; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Movable
	  sidc["281903"] = {}; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Movable and Prefabricated
	  sidc["282001"] = {
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "start",
	      x: 120,
	      y: 60,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //Protection Points / Vertical Obstructions / Tower, Low
	  sidc["282002"] = {
	    altitudeDepth: {
	      stroke: false,
	      textanchor: "start",
	      x: 115,
	      y: 60,
	      fontsize: 40,
	      fontweight: "bold",
	    },
	  }; //Protection Points / Vertical Obstructions / Tower, High
	  sidc["320100"] = {}; //Sustainment Points / Ambulance Points
	  sidc["320101"] = actionPoint; //Sustainment Points / Ambulance Points / Ambulance Exchange Point
	  sidc["320102"] = actionPoint; //Sustainment Points / Ambulance Points / Ambulance Control Point
	  sidc["320103"] = actionPoint; //Sustainment Points / Ambulance Points / Ambulance Load Point
	  sidc["320104"] = actionPoint; //Sustainment Points / Ambulance Points / Ambulance Relay Point
	  sidc["320200"] = actionPoint; //Sustainment Points / Ammunition Supply Point
	  sidc["320300"] = actionPoint; //Sustainment Points / Ammunition Transfer and Holding Point
	  sidc["320400"] = actionPoint; //Sustainment Points / Cannibalization Point
	  sidc["320500"] = actionPoint; //Sustainment Points / Casualty Collection Point
	  sidc["320600"] = actionPoint; //Sustainment Points / Civilian Collection Point
	  sidc["320700"] = actionPoint; //Sustainment Points / Detainee Collection Point
	  sidc["320800"] = actionPoint; //Sustainment Points / Enemy Prisoner of War Collection Point
	  sidc["320900"] = actionPoint; //Sustainment Points / Logistics Release Point
	  sidc["321000"] = actionPoint; //Sustainment Points / Maintenance Collection Point (MCP)
	  sidc["321100"] = actionPoint; //Sustainment Points / Medical Evacuation Point (MEDEVAC) Pick-Up Point
	  sidc["321200"] = actionPoint; //Sustainment Points / Rearm, Refuel and Resupply Point (R3P)
	  sidc["321300"] = actionPoint; //Sustainment Points / Refuel on the Move (ROM) Point
	  sidc["321400"] = actionPoint; //Sustainment Points / Traffic Control Post (TCP)
	  sidc["321500"] = actionPoint; //Sustainment Points / Trailer Transfer Point (TTP)
	  sidc["321600"] = actionPoint; //Sustainment Points / Unit Maintenance Collection Point (UNCP)
	  sidc["321700"] = actionPoint2; //Sustainment Points / General Supply Point
	  sidc["321701"] = actionPoint2; //Sustainment Points / General Supply Point / NATO Class I Supply Point
	  sidc["321702"] = actionPoint2; //Sustainment Points / General Supply Point / NATO Class II Supply Point
	  sidc["321703"] = actionPoint2; //Sustainment Points / General Supply Point / NATO Class III Supply Point
	  sidc["321704"] = actionPoint2; //Sustainment Points / General Supply Point / NATO Class IV Supply Point
	  sidc["321705"] = actionPoint2; //Sustainment Points / General Supply Point / NATO Class V Supply Point
	  sidc["321706"] = {}; //Sustainment Points / General Supply Point / NATO Multiple Class Supply Point
	  sidc["321707"] = actionPoint1; //Sustainment Points / General Supply Point / US Class I Supply Point
	  sidc["321708"] = actionPoint1; //Sustainment Points / General Supply Point / US Class II Supply Point
	  sidc["321709"] = actionPoint1; //Sustainment Points / General Supply Point / US Class III Supply Point
	  sidc["321710"] = actionPoint1; //Sustainment Points / General Supply Point / US Class IV Supply Point
	  sidc["321711"] = actionPoint1; //Sustainment Points / General Supply Point / US Class V Supply Point
	  sidc["321712"] = actionPoint1; //Sustainment Points / General Supply Point / US Class VI Supply Point
	  sidc["321713"] = actionPoint1; //Sustainment Points / General Supply Point / US Class VII Supply Point
	  sidc["321714"] = actionPoint1; //Sustainment Points / General Supply Point / US Class VIII Supply Point
	  sidc["321715"] = actionPoint1; //Sustainment Points / General Supply Point / US Class IX Supply Point
	  sidc["321716"] = actionPoint1; //Sustainment Points / General Supply Point / US Class X Supply Point
	  sidc["321800"] = actionPoint2; //Sustainment Points / Medical Supply Point
	  sidc["321900"] = actionPoint2;
	  sidc["340300"] = {}; //Mission Tasks / Bypass
	  sidc["340400"] = {}; //Mission Tasks / Canalize
	  sidc["340900"] = {}; //Mission Tasks / Destroy
	  sidc["341400"] = {}; //Mission Tasks / Interdict
	  sidc["341600"] = {}; //Mission Tasks / Neutralize
	  sidc["342800"] = {};
	  sidc["350101"] = {};
	  sidc["350102"] = {};
	  sidc["350103"] = {};
	  sidc["350201"] = {};
	  sidc["350202"] = {};
	  sidc["350203"] = {};
	}

	var tacticalpoints = {
	  type: "number",
	  getMetadata: metadata,
	  getIcons: geticons,
	  iconParts: icons$1,
	  labels: tacticalPoints,
	  icons: function controlmeasure(
	    sidc,
	    sIdm1,
	    sIdm2,
	    bbox,
	    symbolSet,
	    icn,
	    _STD2525
	  ) {
	    //Control Measure
	    if (symbolSet == "25") {
	      sidc["130100"] = icn["TP.ACTION POINT"]; //Command and Control Points / Unspecified Control Point
	      bbox["130100"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["130200"] = icn["TP.ACTION AMNESTY POINT"]; //Command and Control Points / Amnesty Point
	      bbox["130200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["130300"] = icn["TP.ACTION CHECK POINT"]; //Command and Control Points / Checkpoint
	      bbox["130300"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["130400"] = icn["TP.CENTRE OF MAIN EFFORT"]; //Command and Control Points / Center of Main Effort
	      bbox["130400"] = { x1: 25, x2: 175, y1: 65, y2: 135 };
	      sidc["130500"] = icn["TP.CONTACT POINT"]; //Command and Control Points / Contact Point
	      bbox["130500"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["130600"] = icn["TP.COORDINATION POINT"]; //Command and Control Points / Coordinating Point
	      bbox["130600"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["130700"] = icn["TP.DECISION POINT"]; //Command and Control Points / Decision Point
	      bbox["130700"] = { x1: 30, x2: 170, y1: 25, y2: 160 };
	      sidc["130800"] = icn["TP.DISTRESS CALL"]; //Command and Control Points / Distress Call
	      bbox["130800"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["130900"] = icn["TP.ENTRY CONTROL POINT"]; //Command and Control Points / Entry Control Point
	      bbox["130900"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131000"] = []; // Just hirarcy
	      sidc["131001"] = icn["TP.FLY-TO-POINT (SONOBUOY)"]; //Command and Control Points / Fly-To-Point / Sonobuoy
	      bbox["131001"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131002"] = icn["TP.FLY-TO-POINT (WEAPON)"]; //Command and Control Points / Fly-To-Point / Weapon
	      bbox["131002"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131003"] = icn["TP.FLY-TO-POINT (NORMAL)"]; //Command and Control Points / Fly-To-Point / Normal
	      bbox["131003"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131100"] = icn["TP.ACTION LINKUP POINT"]; //Command and Control Points / Linkup Point
	      bbox["131100"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131200"] = icn["TP.ACTION PASSAGE POINT"]; //Command and Control Points / Passage Point
	      bbox["131200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131300"] = icn["TP.POINT OF INTEREST"]; //Command and Control Points / Point of Interest
	      bbox["131300"] = { x1: 50, x2: 150, y1: -25 };
	      sidc["131301"] = icn["POINT OF INTEREST – LAUNCH EVENT"]; //Command and Control Points / Point of Interest / Launch Event
	      bbox["131301"] = { x1: 50, x2: 150, y1: -25 };
	      sidc["131400"] = icn["TP.ACTION RALLY POINT"]; //Command and Control Points / Rally Point
	      bbox["131400"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131500"] = icn["TP.ACTION RELEASE POINT"]; //Command and Control Points / Release Point
	      bbox["131500"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131600"] = icn["TP.ACTION START POINT"]; //Command and Control Points / Start Point
	      bbox["131600"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["131700"] = icn["TP.SPECIAL POINT"]; //Command and Control Points / Special Point
	      bbox["131700"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["131800"] = icn["TP.WAYPOINT"]; //Command and Control Points / Waypoint
	      bbox["131800"] = { x1: 60, x2: 140, y1: 60, y2: 140 };
	      sidc["131900"] = icn["TP.AIRFIELD"]; //Command and Control Points / Airfield
	      bbox["131900"] = { x1: 35, x2: 165, y1: 60, y2: 125 };
	      sidc["132000"] = icn["TP.TARGET HANDOVER"]; //Command and Control Points / Target Handover
	      bbox["132000"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["132100"] = icn["TP.KEY TERRAIN"]; //Command and Control Points / Key Terrain
	      sidc["132200"] = icn["TP.CONTROL POINT"];
	      bbox["132200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["132300"] = icn["TP.VITAL GROUND"];
	      sidc["160100"] = icn["TP.OBSERVATION POST/OUTPOST"]; //Maneuver Points / Observation Post/Outpost (unspecified)
	      bbox["160100"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160200"] = icn["TP.OBSERVATION POST/OUTPOST"]; // N/A //Maneuver Points / Observation Post/Outpost (specified)
	      bbox["160200"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160201"] = icn["TP.OBSERVATION POST/RECONNAISSANCE"]; //Maneuver Points / Observation Post/Outpost (specified) / Reconnaissance Outpost
	      bbox["160201"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160202"] = icn["TP.FORWARD OBSERVER POSITION"]; //Maneuver Points / Observation Post/Outpost (specified) / Forward Observer/Spotter Outpost/Position
	      bbox["160202"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160203"] = icn["TP.CBRN OBSERVATION POST"]; //Maneuver Points / Observation Post/Outpost (specified) / CBRN Observation Outpost
	      bbox["160203"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160204"] = icn["TP.SENSOR OUTPOST"]; //Maneuver Points / Observation Post/Outpost (specified) / Sensor Outpost /Listening Post
	      bbox["160204"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160205"] = icn["TP.COMBAT OUTPOST"]; //Maneuver Points / Observation Post/Outpost (specified) / Combat Outpost
	      bbox["160205"] = { x1: 50, x2: 150, y1: 40, y2: 150 };
	      sidc["160300"] = icn["TP.TARGET REFERENCE"]; //Maneuver Points / Target Reference Point
	      sidc["160400"] = icn["TP.POINT OF DEPARTURE"]; //Maneuver Points / Point of Departure
	      bbox["160400"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["180000"] = icn["TP.AIR CONTROL POINT"]; //Airspace Control Points
	      bbox["180000"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["180100"] = icn["TP.AIR CONTROL POINT (ACP)"]; //Airspace Control Points / Air Control Point
	      bbox["180100"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["180200"] = icn["TP.COMMUNICATIONS CHECKPOINT"]; //Airspace Control Points / Communications Checkpoint
	      bbox["180200"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["180300"] = icn["TP.DOWNED AIRCREW PICKUP POINT"]; //Airspace Control Points / Downed Aircraft Pick–up Point
	      bbox["180300"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["180400"] = icn["TP.PULL-UP POINT"]; //Airspace Control Points / Pop–up Point
	      bbox["180400"] = { x1: 50, x2: 240, y1: 50, y2: 150 };
	      sidc["180500"] = icn["TP.AIR CONTROL RENDEZVOUS"]; //Airspace Control Points / Air Control Rendezvous
	      bbox["180500"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["180600"] = icn["TP.TACAN"]; //Airspace Control Points / Tactical Air Navigation (TACAN)
	      bbox["180600"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["180700"] = icn["TP.CAP STATION"]; //Airspace Control Points / Combat Air Patrol (CAP)Station
	      bbox["180700"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["180800"] = icn["TP.AEW STATION"]; //Airspace Control Points / Airborne Early Warning (AEW) Station
	      bbox["180800"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["180900"] = icn["TP.ASW FIXED WING"]; //Airspace Control Points / ASW (Helo and F/W) Station
	      sidc["181000"] = icn["TP.STRIKE IP"]; //Airspace Control Points / Strike Initial Point
	      bbox["181000"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["181100"] = icn["TP.REPLENISHMENT STATION"]; //Airspace Control Points / Replenishment Station
	      bbox["181100"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["181200"] = icn["TP.TANKING"]; //Airspace Control Points / Tanking
	      bbox["181200"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["181300"] = icn["TP.ASW ROTARY WING"]; //Airspace Control Points / Antisubmarine Warfare, Rotary Wing
	      bbox["181300"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["181400"] = icn["TP.SUCAP - FIXED WING"]; //Airspace Control Points / Surface Combat Air Patrol (SUCAP) – Fixed Wing
	      bbox["181400"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["181500"] = icn["TP.SUCAP - ROTARY WING"]; //Airspace Control Points / SUCAP – Rotary Wing
	      bbox["181500"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["181600"] = icn["TP.MIW - FIXED WING"]; //Airspace Control Points / MIW – Fixed Wing
	      bbox["181600"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["181700"] = icn["TP.MIW - ROTARY WING"]; //Airspace Control Points / MIW – Rotary Wing
	      bbox["181700"] = { x1: 60, x2: 140, y1: 40, y2: 160 };
	      sidc["181800"] = icn["TP.TOMCAT"]; //Airspace Control Points / Tomcat
	      bbox["181800"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["181900"] = icn["TP.RESCUE"]; //Airspace Control Points / Rescue
	      bbox["181900"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182000"] = icn["TP.UNMANNED AERIAL SYSTEM"]; //Airspace Control Points / Unmanned Aerial System (UAS/UA)
	      bbox["182000"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182100"] = icn["TP.VTUA"]; //Aircraft (VTUA)
	      bbox["182100"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182200"] = icn["TP.ORBIT"]; //Aircraft (VTUA) / Orbit
	      bbox["182200"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182300"] = icn["TP.ORBIT - FIGURE EIGHT"]; //Aircraft (VTUA) / Orbit – Figure Eight
	      bbox["182300"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182400"] = icn["TP.ORBIT - RACE TRACK"]; //Aircraft (VTUA) / Orbit – Race Track
	      bbox["182400"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182500"] = icn["TP.ORBIT - RANDOM, CLOSED"]; //Aircraft (VTUA) / Orbit – Random Closed
	      bbox["182500"] = { x1: 60, x2: 140, y1: 30, y2: 170 };
	      sidc["182600"] = icn["TP.ISOLATED PERSONNEL LOCATION"];
	      bbox["182600"] = { x1: 60, x2: 140, y1: 20, y2: 105 };
	      sidc["200400"] = icn["TP.SHIP AREA OF INTEREST (AEGIS ONLY)"]; //Maritime Control Areas / Ship Area of Interest
	      sidc["200500"] = icn["TP.ACTIVE MANOEUVRE AREA (AEGIS ONLY)"]; //Maritime Control Areas / Active Maneuver Area
	      bbox["200500"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["200600"] = icn["TODO"]; //Maritime Control Areas / Cued Acquisition Doctrine
	      sidc["200700"] = icn["TODO"]; //Maritime Control Areas / Radar Search Doctrine
	      sidc["210100"] = icn["TP.PLAN SHIP"]; //Maritime Control Points / Plan Ship
	      bbox["210100"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["210200"] = icn["TP.AIM POINT"]; //Maritime Control Points / Aim Point
	      bbox["210200"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["210300"] = icn["TP.DEFENDED ASSET"]; //Maritime Control Points / Defended Asset
	      sidc["210400"] = icn["TP.DROP POINT"]; //Maritime Control Points / Drop Point
	      bbox["210400"] = { x1: 50, x2: 150, y1: 50, y2: 120 };
	      sidc["210500"] = icn["TP.ENTRY POINT"]; //Maritime Control Points / Entry Point
	      bbox["210500"] = { x1: 50, x2: 150, y1: 50 };
	      sidc["210600"] = icn["TP.AIR DETONATION"]; //Maritime Control Points / Air Detonation
	      sidc["210700"] = icn["TP.GROUND ZERO"]; //Maritime Control Points / Ground Zero
	      bbox["210700"] = { x1: 50, x2: 150, y1: 30 };
	      sidc["210800"] = icn["TP.IMPACT POINT"]; //Maritime Control Points / Impact Point
	      bbox["210800"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["210900"] = icn["TP.PREDICTED IMPACT POINT"]; //Maritime Control Points / Predicted Impact Point
	      bbox["210900"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["211000"] = icn["TP.LAUNCHED TORPEDO (AEGIS ONLY)"]; //Maritime Control Points / Launched Torpedo
	      bbox["211000"] = { x1: 50, x2: 150, y1: 90, y2: 110 };
	      sidc["211100"] = icn["TP.MSL DETECT POINT"]; //Maritime Control Points / Missile Detection Point
	      bbox["211100"] = { x1: 50, x2: 150, y1: 30 };
	      sidc["211200"] = icn["TP.ACOUSTIC COUNTER MEASURE (DECOY)"]; //Maritime Control Points / Acoustic Countermeasure (Decoy)
	      bbox["211200"] = { x1: 50, x2: 150, y1: 30 };
	      sidc["211300"] = icn["TP.ELECTRONIC COUNTER MEASURES (ECM) DECOY"]; //Maritime Control Points / Electronic Countermeasures (ECM) Decoy
	      bbox["211300"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["211400"] = icn["TP.BRIEF CONTACT"]; //Maritime Control Points / Brief Contact
	      bbox["211400"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	      sidc["211500"] = icn["TP.DATUM"]; //Maritime Control Points / Datum Lost Contact
	      bbox["211500"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["211600"] = icn["TP.BT BOUY DROP"]; //Maritime Control Points / BT Buoy Drop
	      bbox["211600"] = { x1: 50, x2: 150, y1: 40, y2: 160 };
	      sidc["211700"] = icn["TP.REPORTED BOTTOMED SUB"]; //Maritime Control Points / Reported Bottomed Sub
	      sidc["211800"] = icn["TP.MOVING HAVEN"]; //Maritime Control Points / Moving Haven
	      bbox["211800"] = { x1: 40, x2: 160, y1: 50, y2: 150 };
	      sidc["211900"] = icn["TP.SCREEN CENTRE"]; //Maritime Control Points / Screen Center
	      sidc["212000"] = icn["TP.LOST CONTACT"]; //Maritime Control Points / Lost Contact
	      bbox["212000"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	      sidc["212100"] = icn["TP.SINKER"]; //Maritime Control Points / Sinker
	      bbox["212100"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	      sidc["212200"] = icn["TP.TRIAL TRACK"]; //Maritime Control Points / Trial Track
	      bbox["212200"] = { x1: 50, x2: 150, y1: 0, y2: 100 };
	      sidc["212300"] = icn["TP.FIX ACOUSTIC"]; //Maritime Control Points / Acoustic Fix
	      sidc["212400"] = icn["TP.FIX ELECTRO-MAGNETIC"]; //Maritime Control Points / Electromagnetic Fix
	      sidc["212500"] =
	        icn["TP.ELECTRO MAGNETIC - MAGNETIC ANOMALY DETECTION (MAD)"]; //Maritime Control Points / Electromagnetic – Magnetic Anomaly Detection (MAD)
	      bbox["212500"] = { x1: 50, x2: 150, y1: 50, y2: 180 };
	      sidc["212600"] = icn["TP.FIX ELECTRO-OPTICAL"]; //Maritime Control Points / Optical Fix
	      sidc["212700"] = icn["TP.TARGET REFERENCE"]; //Maritime Control Points / Formation
	      sidc["212800"] = icn["TP.HARBOR"]; //Maritime Control Points / Harbor
	      bbox["212800"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["212900"] = icn["TP.HARBOR"]; //Maritime Control Points / Harbor Entrance Point
	      bbox["212900"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["212901"] = icn["TP.HARBOR POINT A"]; //Maritime Control Points / Harbor Entrance Point / A
	      bbox["212901"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["212902"] = icn["TP.HARBOR POINT Q"]; //Maritime Control Points / Harbor Entrance Point / Q
	      bbox["212902"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["212903"] = icn["TP.HARBOR POINT X"]; //Maritime Control Points / Harbor Entrance Point / X
	      bbox["212903"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["212904"] = icn["TP.HARBOR POINT Y"]; //Maritime Control Points / Harbor Entrance Point / Y
	      bbox["212904"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["213000"] = icn["TP.DIP POSITION"]; //Maritime Control Points / Dip Position
	      bbox["213000"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["213100"] = icn["TP.SEARCH"]; //Maritime Control Points / Search
	      bbox["213100"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["213200"] = icn["TP.SEARCH AREA"]; //Maritime Control Points / Search Area
	      bbox["213200"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["213300"] = icn["TP.SEARCH CENTER"]; //Maritime Control Points / Search Center
	      bbox["213300"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["213400"] = icn["TP.NAVIGATIONAL REFERENCE"]; //Maritime Control Points / Navigational Reference Point
	      sidc["213500"] = icn["TP.SONOBUOY"]; //Maritime Control Points / Sonobuoy
	      bbox["213500"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213501"] = icn["TP.SONOBUOY ANM"]; //Maritime Control Points / Sonobuoy / Ambient Noise
	      bbox["213501"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213502"] = icn["TP.SONOBUOY ATAC"]; //Maritime Control Points / Sonobuoy / Air Transportable Communication
	      bbox["213502"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213503"] = icn["TP.SONOBUOY BARRA"]; //Maritime Control Points / Sonobuoy / Barra
	      bbox["213503"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213504"] =
	        icn["TP.SONOBUOY BATHYTHERMOGRAPH TRANSMITTING SONOBUOY (BT)"]; //Maritime Control Points / Sonobuoy / Bathythermograph Transmitting
	      bbox["213504"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213505"] =
	        icn["TP.SONOBUOY COMMAND ACTIVE MULTIBEAM SONOBUOY (CAMBS)"]; //Maritime Control Points / Sonobuoy / Command Active Multi-Beam (CAMBS)
	      bbox["213505"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213506"] = icn["TP.SONOBUOY CASS"]; //Maritime Control Points / Sonobuoy / Command Active Sonobuoy Directional Command Active Sonobuoy System (CASS)
	      bbox["213506"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213507"] = icn["TP.SONOBUOY DIFAR"]; //Maritime Control Points / Sonobuoy / Directional Frequency Analysis and Recording (DIFAR)
	      bbox["213507"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213508"] = icn["TP.SONOBUOY DICASS"]; //Maritime Control Points / Sonobuoy / Directional Command Active Sonobuoy System (DICASS)
	      bbox["213508"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213509"] =
	        icn["TP.SONOBUOY EXPENDABLE RELIABLE ACOUSTIC PATH SONOBUOY (ERAPS)"]; //Maritime Control Points / Sonobuoy / Expendable Reliable Acoustic Path Sonobuoy (ERAPS)
	      bbox["213509"] = { x1: 60, x2: 140, y1: -10, y2: 160 };
	      sidc["213510"] = icn["TP.SONOBUOY EXPIRED"]; //Maritime Control Points / Sonobuoy / Expired
	      bbox["213510"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213511"] = icn["TP.SONOBUOY KINGPIN"]; //Maritime Control Points / Sonobuoy / Kingpin
	      bbox["213511"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213512"] = icn["TP.SONOBUOY LOFAR"]; //Maritime Control Points / Sonobuoy / Low Frequency Analysis and Recording (LOFAR)
	      bbox["213512"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213513"] = icn["TP.SONOBUOY PATTERN CENTER"]; //Maritime Control Points / Sonobuoy / Pattern Center
	      bbox["213513"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213514"] = icn["TP.SONOBUOY RO"]; //Maritime Control Points / Sonobuoy / Range Only
	      bbox["213514"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213515"] = icn["TP.SONOBUOY VLAD"]; //Maritime Control Points / Sonobuoy / Vertical Line Array Directional Frequency Analysis and Recording (DIFAR)
	      bbox["213515"] = { x1: 40, x2: 160, y1: -10, y2: 160 };
	      sidc["213600"] = icn["TP.REFERENCE POINT"]; //Maritime Control Points / Reference Point
	      bbox["213600"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["213700"] = icn["TP.SPECIAL POINT"]; //Maritime Control Points / Special Point
	      bbox["213700"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["213800"] = icn["TP.NAVIGATIONAL REFERENCE"]; //Maritime Control Points / Navigational Reference Point(Points)
	      bbox["213800"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["213900"] = icn["TP.DLRP"]; //Maritime Control Points / Data Link Reference Point
	      bbox["213900"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214000"] = icn["FORWARD OBSERVER / SPOTTER POSITION"];
	      bbox["214000"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	      sidc["214100"] = icn["TP.VITAL AREA CENTRE"]; //Maritime Control Points / Vital Area Center
	      bbox["214100"] = { x1: 40, x2: 160, y1: 60, y2: 140 };
	      sidc["214200"] = icn["TP.CORRIDOR TAB"]; //Maritime Control Points / Corridor Tab Point
	      bbox["214200"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214300"] = icn["TP.ENEMY POINT"]; //Maritime Control Points / Enemy Point
	      bbox["214300"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214400"] = icn["TP.MARSHALL POINT"]; //Maritime Control Points / Marshall Point
	      bbox["214400"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214500"] = icn["TP.POINT OF INTENDED MOVEMENT"]; //Maritime Control Points / Position and Intended Movement (PIM)
	      bbox["214500"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214600"] = icn["TP.PRE-LANDFALL WAYPOINT"]; //Maritime Control Points / Pre-Landfall Waypoint
	      bbox["214600"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214700"] = icn["TP.ESTIMATED POSITION (EP)"]; //Maritime Control Points / Estimated Position (EP)
	      bbox["214700"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214800"] = icn["TP.REFERENCE POINT WAYPOINT"]; //Maritime Control Points / Waypoint
	      bbox["214800"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["214900"] = icn["TP.SUB SURFACE CONTROL STATION"]; //Maritime Control Points / General Sea Subsurface Station
	      bbox["214900"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215000"] = icn["TP.SUBMARINE CONTROL STATION"]; //Maritime Control Points / Submarine Sea Subsurface Station
	      bbox["215000"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215100"] = icn["TP.ASW SUBMARINE CONTROL STATION"]; //Maritime Control Points / Submarine Antisubmarine Warfare Sea Subsurface Station
	      bbox["215100"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215200"] = icn["TP.(UUV) CONTROL STATION"]; //Maritime Control Points / Unmanned Underwater Vehicle Sea Subsurface Station
	      bbox["215200"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215300"] = icn["TP.UUV - ASW CONTROL STATION"]; //Maritime Control Points / Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Sea Subsurface Station
	      bbox["215300"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215400"] =
	        icn["TP.MINE WARFARE UNMANNED UNDERWATER VEHICLE SUBSURFACE STATION"]; //Maritime Control Points / Mine Warfare Unmanned Underwater Vehicle Sea Subsurface Station
	      bbox["215400"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215500"] = icn["TP.UUV - SUW CONTROL STATION"]; //Maritime Control Points / Sea Surface Warfare Unmanned Underwater Vehicle Subsurface Station
	      bbox["215500"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215600"] = icn["TP.SEA SURFACE CONTROL STATION"]; //Maritime Control Points / General Sea Surface Station
	      bbox["215600"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215700"] = icn["TP.ASW CONTROL STATION"]; //Maritime Control Points / Antisubmarine Warfare (ASW) Sea Surface Station
	      bbox["215700"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215800"] = icn["TP.MINE WARFARE SURFACE STATION"]; //Maritime Control Points / Mine Warfare Sea Surface Station
	      bbox["215800"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["215900"] = icn["TP.NON-COMBATANT SURFACE STATION"]; //Maritime Control Points / Non-Combatant Sea Surface Station
	      bbox["215900"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216000"] = icn["TP.PICKET CONTROL STATION"]; //Maritime Control Points / Picket Sea Surface Station
	      bbox["216000"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216100"] = icn["TP.RENDEZVOUS CONTROL POINT"]; //Maritime Control Points / Rendezvous Sea Surface Station
	      bbox["216100"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216200"] = icn["TP.REPLENISHMENT AT SEA SURFACE STATION"]; //Maritime Control Points / Replenishment at Sea Surface Station
	      bbox["216200"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216300"] = icn["TP.RESCUE CONTROL POINT"]; //Maritime Control Points / Rescue Sea Surface Station
	      bbox["216300"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216400"] = icn["TP.SUW CONTROL STATION"]; //Maritime Control Points / Surface Warfare Sea Surface Station
	      bbox["216400"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216500"] = icn["TP.(USV) CONTROL STATION"]; //Maritime Control Points / Unmanned Underwater Vehicle Sea Surface Station
	      bbox["216500"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216600"] = icn["TP.USV - ASW CONTROL STATION"]; //Maritime Control Points / Antisubmarine Warfare (ASW) Unmanned Underwater Vehicle Sea Surface Station
	      bbox["216600"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216700"] =
	        icn["TP.MINE WARFARE UNMANNED UNDERWATER VEHICLE SURFACE STATION"]; //Maritime Control Points / Mine Warfare Unmanned Underwater Vehicle Sea Surface Station
	      bbox["216700"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216800"] = icn["TP.(RMV) USV CONTROL STATION"]; //Maritime Control Points / Remote Multi-Mission Vehicle Mine Warfare Unmanned Underwater Sea Surface Station
	      bbox["216800"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["216900"] = icn["TP.USV - SUW CONTROL STATION"]; //Maritime Control Points / Surface Warfare Mine Warfare Unmanned Underwater Vehicle Sea Surface Station
	      bbox["216900"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["217000"] = icn["TP.SHORE CONTROL STATION"]; //Maritime Control Points / Shore Control Station
	      bbox["217000"] = { x1: 40, x2: 160, y1: 40, y2: 160 };
	      sidc["217100"] = icn["TP.ROUTE"]; //Maritime Control Points / General Route
	      bbox["217100"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["217200"] = icn["TP.ROUTE DIVERSIONS"]; //Maritime Control Points / Diversion Route
	      bbox["217200"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217300"] = icn["TP.ROUTE POINT R"]; // ##### FIX TODO ####### //Maritime Control Points / "Position and Intended-Movement (PIM) Route"
	      bbox["217300"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217400"] = icn["TP.PICKET ROUTE"]; //Maritime Control Points / Picket Route
	      bbox["217400"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217500"] = icn["TP.POINT R ROUTE"]; //Maritime Control Points / Point R Route
	      bbox["217500"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217600"] = icn["TP.RENDEZVOUS ROUTE"]; //Maritime Control Points / Rendezvous Route
	      bbox["217600"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217700"] = icn["TP.ROUTE WAYPOINT"]; //Maritime Control Points / Waypoint Route
	      bbox["217700"] = { x1: 30, x2: 170, y1: 60, y2: 170 };
	      sidc["217800"] = icn["TP.CLUTTER, STATIONARY OR CEASE REPORTING"]; //Maritime Control Points / Clutter, Stationary or Cease Reporting
	      sidc["217900"] = icn["TP.TENTATIVE OR PROVISIONAL TRACK"]; //Maritime Control Points / Tentative or Provisional Track
	      sidc["218000"] = icn["TP.DISTRESSED VESSEL"]; //Maritime Control Points / Distressed Vessel
	      sidc["218100"] = icn["TP.DITCHED AIRCRAFT"]; //Maritime Control Points / Ditched Aircraft/Downed Aircraft
	      sidc["218200"] = icn["TP.PERSON IN WATER"]; //Maritime Control Points / Person in Water/Bailout
	      sidc["218300"] = icn["TP.ICEBERG"]; //Maritime Control Points / Iceberg
	      bbox["218300"] = { x1: 50, x2: 150, y1: 50, y2: 150 };
	      sidc["218500"] = icn["TP.OIL RIG/PLATFORM"]; //Maritime Control Points / Oil Rig
	      bbox["218500"] = { x1: 30, x2: 170, y1: 60, y2: 140 };
	      sidc["218600"] = icn["TP.SEA MINELIKE"]; //Maritime Control Points / Sea Mine–Like
	      bbox["218600"] = { x1: 40, x2: 160, y1: 40, y2: 150 };
	      sidc["218700"] = icn["TP.BOTTOM RETURN"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)
	      bbox["218700"] = { x1: 40, x2: 160, y1: 40, y2: 100 };
	      sidc["218800"] = icn["TP.INSTALLATION/MANMADE"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade
	      bbox["218800"] = { x1: 40, x2: 160, y1: 40, y2: 100 };
	      sidc["218900"] = icn["TP.MARINE LIFE"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Marine Life
	      bbox["218900"] = { x1: 100, x2: 220, y1: 70, y2: 130 };
	      sidc["219000"] = icn["TP.SEA ANOMALY"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / "Sea Anomaly-(Wake, Current, Knuckle)"
	      bbox["219000"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	      sidc["219100"] = icn["TP.WRECK, DANGEROUS"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Bottom Return/Non-MILCO, Wreck, Dangerous
	      bbox["219100"] = { x1: 40, x2: 160, y1: 70, y2: 130 };
	      sidc["219200"] = icn["TP.WRECK, NON DANGEROUS"]; //Maritime Control Points / Bottom Return/Non-Mine, Mine-Like Bottom Object (NOMBO)/Installation Manmade / Bottom Return/Non-MILCO, Wreck, Non Dangerous
	      bbox["219200"] = { x1: 40, x2: 160, y1: 70, y2: 130 };
	      sidc["240601"] = icn["TP.POINT/SINGLE TARGET"]; //Fires Areas / Point Targets / Point or Single Target
	      sidc["240602"] = icn["TP.NUCLEAR TARGET"]; //Fires Areas / Point Targets / Nuclear Target
	      sidc["240603"] = icn["TP.TARGETRECORDED (AEGIS ONLY)"]; //Fires Areas / Point Targets / Target-Recorded
	      bbox["240603"] = { x1: 0, x2: 200, y1: 50, y2: 150 };
	      sidc["240900"] = icn["TP.FIRE SUPPORT STATION"]; //Fires Areas / Fire Support Station
	      bbox["240900"] = { x1: 50, x2: 200, y1: 50, y2: 150 };
	      sidc["250100"] = icn["TP.FIRING POINT"]; //Fires Points / Firing Point
	      bbox["250100"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["250200"] = icn["TP.HIDE POINT"]; //Fires Points / Hide Point
	      bbox["250200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["250300"] = icn["TP.LAUNCH POINT"]; //Fires Points / Launch Point
	      bbox["250300"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["250400"] = icn["TP.RELOAD POINT"]; //Fires Points / Reload Point
	      bbox["250400"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["250500"] = icn["TP.SURVEY CONTROL POINT"]; //Fires Points / Survey Control Point
	      bbox["250500"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["250600"] = icn["TP.KNOWN POINT"];
	      sidc["270701"] = icn["TP.MINEFIELD, STATIC"]; //Protection Areas / Minefields / Minefield, Static Depiction
	      bbox["270701"] = { x1: 25, x2: 175, y1: 65, y2: 145 };
	      sidc["280100"] = icn["TODO"]; //Protection Points / Abatis
	      sidc["280200"] = icn["TP.ANTIPERSONNEL (AP) MINES"]; //Protection Points / Antipersonnel Mine
	      sidc["280201"] = icn["TP.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS"]; //Protection Points / Antipersonnel Mine / Antipersonnel Mine with Directional Effects
	      bbox["280201"] = { x1: 40, x2: 180, y1: 40, y2: 150 };
	      sidc["280300"] = icn["TP.ANTITANK MINE (AT)"]; //Protection Points / Antitank Mine
	      sidc["280400"] = icn["TP.(AT) ANTIHANDLING DEVICE"]; //Protection Points / Antitank Mine with Anti-handling Device
	      bbox["280400"] = { x1: 60, x2: 140, y1: 40, y2: 195 };
	      sidc["280500"] = icn["TP.WIDE AREA MINES"]; //Protection Points / Wide Area Antitank Mine
	      sidc["280600"] = icn["TP.UNSPECIFIED MINE"]; //Protection Points / Unspecified Mine
	      sidc["280700"] = icn["TP.BOOBY TRAP"]; //Protection Points / Booby Trap
	      sidc["280800"] = icn["TP.ENGINEER REGULATING POINT"]; //Protection Points / Engineer Regulating Point
	      bbox["280800"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["280900"] = icn["TP.EARTHWORK/FORTIFICATION"]; //Protection Points / Shelter
	      sidc["281000"] = icn["TP.SURFACE SHELTER"]; //Protection Points / Shelter Above Ground
	      sidc["281100"] = icn["TP.UNDERGROUND SHELTER"]; //Protection Points / Below Ground Shelter
	      sidc["281200"] = icn["TP.FORT"]; //Protection Points / Fort
	      sidc["281300"] = icn["TP.CHEMICAL EVENT"]; //Protection Points / Chemical Event
	      bbox["281300"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281301"] = icn["TP.CHEMICAL – TOXIC INDUSTRIAL MATERIAL"]; //Protection Points / Chemical Event
	      bbox["281301"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281400"] = icn["TP.BIOLOGICAL EVENT"]; //Protection Points / Biological Event
	      bbox["281400"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281401"] = icn["TP.BIOLOGICAL – TOXIC INDUSTRIAL MATERIAL"]; //Protection Points / Biological Event
	      bbox["281401"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281500"] = icn["TP.NUCLEAR EVENT"]; //Protection Points / Nuclear Event
	      bbox["281500"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281600"] = icn["TP.NUCLEAR EVENT"]; //Protection Points / Nuclear Fallout Producing Event
	      bbox["281600"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281700"] = icn["TP.RADIOLOGICAL EVENT"]; //Protection Points / Radiological
	      bbox["281700"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281701"] = icn["TP.RADIOLOGICAL – TOXIC INDUSTRIAL MATERIAL"]; //Protection Points / Radiological
	      bbox["281701"] = { x1: 25, x2: 175, y1: -10 };
	      sidc["281800"] = icn["TP.DECON SITE/POINT"]; //Protection Points / General Decontamination Point/Site
	      bbox["281800"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281801"] = icn["TP.ALTERNATE DECON SITE/POINT"]; //Protection Points / General Decontamination Point/Site / Alternate
	      bbox["281801"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281802"] = icn["TP.DECON SITE/POINT (EQUIPMENT)"]; //Protection Points / General Decontamination Point/Site / Equipment
	      bbox["281802"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281803"] = icn["TP.DECON SITE/POINT (TROOPS)"]; //Protection Points / General Decontamination Point/Site / Troop
	      bbox["281803"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281804"] = icn["TP.DECON SITE/POINT (EQUIPMENT AND TROOPS)"]; //Protection Points / General Decontamination Point/Site / Equipment/Troop
	      bbox["281804"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281805"] = icn["TP.DECON SITE/POINT (OPERATIONAL DECONTAMINATION)"]; //Protection Points / General Decontamination Point/Site / Operational
	      bbox["281805"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281806"] = icn["TP.DECON SITE/POINT (THOROUGH DECONTAMINATION)"]; //Protection Points / General Decontamination Point/Site / Thorough
	      bbox["281806"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281807"] = icn["TP.MAIN EQUIPMENT DECONTAMINATION POINT/SITE"]; //Protection Points / General Decontamination Point/Site / Main Equipment
	      bbox["281807"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281808"] = icn["TP.FORWARD TROOP DECONTAMINATION POINT/SITE"]; //Protection Points / General Decontamination Point/Site / Forward Troop
	      bbox["281808"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281809"] = icn["TP.WOUNDED PERSONNEL DECONTAMINATION SITE"]; //Protection Points / General Decontamination Point/Site / Wounded Personnel
	      bbox["281809"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["281901"] = icn["TP.FIXED AND PREFABRICATED"]; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Fixed and Prefabricated
	      bbox["281901"] = { x1: 60, x2: 140, y1: 30 };
	      sidc["281902"] = icn["TP.TETRAHEDRONS"]; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Movable
	      bbox["281902"] = { x1: 60, x2: 140, y1: 30 };
	      sidc["281903"] = icn["TP.TETRAHEDRONS MOVABLE"]; //Protection Points / Tetrahedrons, Dragons Teeth, and Other Similar Obstacles / Movable and Prefabricated
	      bbox["281903"] = { x1: 60, x2: 140, y1: 30 };
	      sidc["282001"] = icn["TP.TOWER LOW"]; //Protection Points / Vertical Obstructions / Tower, Low
	      bbox["282001"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	      sidc["282002"] = icn["TP.TOWER HIGH"]; //Protection Points / Vertical Obstructions / Tower, High
	      bbox["282002"] = { x1: 50, x2: 150, y1: 30, y2: 120 };
	      sidc["320100"] = icn["TP.AMBULANCE EXCHANGE POINT"]; //Sustainment Points / Ambulance Points / Ambulance Exchange Point
	      bbox["320100"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320101"] = icn["TP.AMBULANCE EXCHANGE POINT"]; //Sustainment Points / Ambulance Points / Ambulance Exchange Point
	      bbox["320101"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320102"] = icn["TP.AMBULANCE CONTROL POINT"]; //Sustainment Points / Ambulance Points / Ambulance Control Point
	      bbox["320102"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320103"] = icn["TP.AMBULANCE LOAD POINT"]; //Sustainment Points / Ambulance Points / Ambulance Load Point
	      bbox["320103"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320104"] = icn["TP.AMBULANCE RELAY POINT"]; //Sustainment Points / Ambulance Points / Ambulance Relay Point
	      bbox["320104"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320200"] = icn["TP.AMMUNITION SUPPLY POINT (ASP)"]; //Sustainment Points / Ammunition Supply Point
	      bbox["320200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320300"] = icn["TP.AMMUNITION TRANSFER POINT (ATP)"]; //Sustainment Points / Ammunition Transfer and Holding Point
	      bbox["320300"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320400"] = icn["TP.CANNIBALIZATION POINT"]; //Sustainment Points / Cannibalization Point
	      bbox["320400"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320500"] = icn["TP.CASUALTY COLLECTION POINT"]; //Sustainment Points / Casualty Collection Point
	      bbox["320500"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320600"] = icn["TP.CIVILIAN COLLECTION POINT"]; //Sustainment Points / Civilian Collection Point
	      bbox["320600"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320700"] = icn["TP.DETAINEE COLLECTION POINT"]; //Sustainment Points / Detainee Collection Point
	      bbox["320700"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320800"] = icn["TP.EPW COLLECTION POINT"]; //Sustainment Points / Enemy Prisoner of War Collection Point
	      bbox["320800"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["320900"] = icn["TP.LOGISTICS RELEASE POINT"]; //Sustainment Points / Logistics Release Point
	      bbox["320900"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321000"] = icn["TP.MAINTENANCE COLLECTION POINT"]; //Sustainment Points / Maintenance Collection Point (MCP)
	      bbox["321000"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321100"] = icn["TP.MEDICAL EVACUATION (MEDEVAC) PICKUP POINT"]; //Sustainment Points / Medical Evacuation Point (MEDEVAC) Pick-Up Point
	      bbox["321100"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321200"] = icn["TP.REARM, REFUEL AND RESUPPLY POINT"]; //Sustainment Points / Rearm, Refuel and Resupply Point (R3P)
	      bbox["321200"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321300"] = icn["TP.REFUEL ON THE MOVE POINT"]; //Sustainment Points / Refuel on the Move (ROM) Point
	      bbox["321300"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321400"] = icn["TP.TRAFFIC CONTROL POST"]; //Sustainment Points / Traffic Control Post (TCP)
	      bbox["321400"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321500"] = icn["TP.TRAILER TRANSFER POINT"]; //Sustainment Points / Trailer Transfer Point (TTP)
	      bbox["321500"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321600"] = icn["TP.UNIT MAINTENANCE COLLECTION POINT"]; //Sustainment Points / Unit Maintenance Collection Point (UNCP)
	      bbox["321600"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321700"] = icn["TP.SUPPLY POINT"]; //Sustainment Points / General Supply Point
	      bbox["321700"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321701"] = icn["TP.NATO CLASS I"]; //Sustainment Points / General Supply Point / NATO Class I Supply Point
	      bbox["321701"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321702"] = icn["TP.NATO CLASS II"]; //Sustainment Points / General Supply Point / NATO Class II Supply Point
	      bbox["321702"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321703"] = icn["TP.NATO CLASS III"]; //Sustainment Points / General Supply Point / NATO Class III Supply Point
	      bbox["321703"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321704"] = icn["TP.NATO CLASS IV"]; //Sustainment Points / General Supply Point / NATO Class IV Supply Point
	      bbox["321704"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321705"] = icn["TP.NATO CLASS V"]; //Sustainment Points / General Supply Point / NATO Class V Supply Point
	      bbox["321705"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321706"] = icn["TP.SUPPLY POINT"]; //Sustainment Points / General Supply Point / NATO Multiple Class Supply Point
	      bbox["321706"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321707"] = icn["TP.SP CLASS I"]; //Sustainment Points / General Supply Point / US Class I Supply Point
	      bbox["321707"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321708"] = icn["TP.SP CLASS II"]; //Sustainment Points / General Supply Point / US Class II Supply Point
	      bbox["321708"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321709"] = icn["TP.SP CLASS III"]; //Sustainment Points / General Supply Point / US Class III Supply Point
	      bbox["321709"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321710"] = icn["TP.SP CLASS IV"]; //Sustainment Points / General Supply Point / US Class IV Supply Point
	      bbox["321710"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321711"] = icn["TP.SP CLASS V"]; //Sustainment Points / General Supply Point / US Class V Supply Point
	      bbox["321711"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321712"] = icn["TP.SP CLASS VI"]; //Sustainment Points / General Supply Point / US Class VI Supply Point
	      bbox["321712"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321713"] = icn["TP.SP CLASS VII"]; //Sustainment Points / General Supply Point / US Class VII Supply Point
	      bbox["321713"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321714"] = icn["TP.SP CLASS VIII"]; //Sustainment Points / General Supply Point / US Class VIII Supply Point
	      bbox["321714"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321715"] = icn["TP.SP CLASS IX"]; //Sustainment Points / General Supply Point / US Class IX Supply Point
	      bbox["321715"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321716"] = icn["TP.SP CLASS X"]; //Sustainment Points / General Supply Point / US Class X Supply Point
	      bbox["321716"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321800"] = icn["TP.MEDICAL SUPPLY POINT"]; //Sustainment Points / Medical Supply Point
	      bbox["321800"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["321900"] = icn["TP.MORTUARY AFFAIRS COLLECTION POINT"];
	      bbox["321900"] = { x1: 60, x2: 140, y1: -60 };
	      sidc["340900"] = icn["TP.DESTROY"]; //Mission Tasks / Destroy
	      bbox["340900"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	      sidc["341400"] = icn["TP.INTERDICT"]; //Mission Tasks / Interdict
	      bbox["341400"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	      sidc["341600"] = icn["TP.NEUTRALIZE"]; //Mission Tasks / Neutralize
	      bbox["341600"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	      sidc["342800"] = icn["TP.SUPPRESS"];
	      bbox["342800"] = { x1: 0, x2: 200, y1: 40, y2: 160 };
	      //sidc["350000"] = []; // N/A
	      //sidc["350100"] = []; // N/A
	      sidc["350101"] = icn["MAN MADE SPACE DEBRIS SMALL"];
	      sidc["350102"] = icn["MAN MADE SPACE DEBRIS MEDIUM"];
	      sidc["350103"] = icn["MAN MADE SPACE DEBRIS BIG"];
	      //sidc["350200"] = []; // N/A
	      sidc["350201"] = icn["NATURAL SPACE DEBRIS SMALL"];
	      sidc["350202"] = icn["NATURAL SPACE DEBRIS MEDIUM"];
	      sidc["350203"] = icn["NATURAL SPACE DEBRIS BIG"];

	      sIdm1["13"] = [icn["TP.M1.UNSPECIFIED"]];
	      sIdm1["14"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE 3"],
	      ];
	      sIdm1["15"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"],
	      ];
	      sIdm1["16"] = [
	        icn["TP.M1.ANTITANK MINE 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["17"] = [
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["18"] = [
	        icn["TP.M1.WIDE AREA ANTITANK MINE 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["19"] = [
	        icn["TP.M1.MINE CLUSTER 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["20"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE 3"],
	      ];
	      sIdm1["21"] = [
	        icn["TP.M1.ANTITANK MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["22"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE 3"],
	      ];
	      sIdm1["23"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE 3"],
	      ];
	      sIdm1["24"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE 3"],
	      ];
	      sIdm1["25"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"],
	      ];
	      sIdm1["26"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"],
	      ];
	      sIdm1["27"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"],
	      ];
	      sIdm1["28"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 3"],
	      ];
	      sIdm1["29"] = [
	        icn["TP.M1.ANTITANK MINE 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["30"] = [
	        icn["TP.M1.ANTITANK MINE 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["31"] = [
	        icn["TP.M1.ANTITANK MINE 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["32"] = [
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["33"] = [
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["34"] = [
	        icn["TP.M1.WIDE AREA ANTITANK MINE 1"],
	        icn["TP.M1.MINE CLUSTER 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["35"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.ANTITANK MINE 3"],
	      ];
	      sIdm1["36"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["37"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["38"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["39"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["40"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["41"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["42"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["43"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["44"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["45"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 3"],
	      ];
	      sIdm1["46"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["47"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["48"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 3"],
	      ];
	      sIdm1["49"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.ANTITANK MINE WITH ANTIHANDLING DEVICE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["50"] = [
	        icn["TP.M1.ANTIPERSONNEL MINE WITH DIRECTIONAL EFFECTS 1"],
	        icn["TP.M1.WIDE AREA ANTITANK MINE 2"],
	        icn["TP.M1.MINE CLUSTER 3"],
	      ];
	      sIdm1["51"] = icn["TP.M1.DISMOUNTED"];

	      sIdm2["01"] = icn["TP.M2.URBAN"];
	      sIdm2["02"] = icn["TP.M2.WATER"];
	      sIdm2["03"] = icn["TP.M2.GROUND"];
	      sIdm2["04"] = icn["TP.M2.VEGETATION"];
	      sIdm2["05"] = icn["TP.M2.OBSTACLES"];
	    }
	  },
	};

	/* ***************************************************************************************
	Number based SIDC
	*************************************************************************************** */

	const app6d = [
	  air,
	  airmissile,
	  space,
	  spacemissile,
	  landunit,
	  landcivilian,
	  landequipment,
	  landinstallation,
	  sea,
	  subsurface,
	  minewarfare,
	  activites,
	  signalsintelligence,
	  dismountedindividual,
	  tacticalpoints,
	];
	const std2525d = [
	  air,
	  airmissile,
	  space,
	  spacemissile,
	  landunit,
	  landcivilian,
	  landequipment,
	  landinstallation,
	  sea,
	  subsurface,
	  minewarfare,
	  activites,
	  signalsintelligence,
	  cyberspace,
	  tacticalpoints,
	];

	const std2525e = [
	  common,
	  air,
	  airmissile,
	  space,
	  spacemissile,
	  landunit,
	  landcivilian,
	  landequipment,
	  landinstallation,
	  sea,
	  subsurface,
	  minewarfare,
	  activites,
	  signalsintelligence,
	  dismountedindividual,
	  cyberspace,
	  tacticalpoints,
	];

	//import { ms } from "../ms.js";

	//########################################################################################
	// Support for Path2D in IE 11, if you only use other browsers, you can remove the following
	//########################################################################################
	function path2d(ctx, d) {
	  // This function converts a svg path to canvas instructions, it does not support everything
	  // but most of the commands in paths.
	  ctx.beginPath();
	  let x, y, x1, y1, x2, y2, i, j;
	  let x0, y0;
	  let c;
	  const parts = d.match(/([MCLHV][^MCLHV]*)/gi);
	  for (i = 0; i < parts.length; i++) {
	    if (parts[i].charAt(0) == "M") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      x = parseFloat(c[0]);
	      y = parseFloat(c[1]);
	      x0 = x;
	      y0 = y;
	      ctx.moveTo(x, y);
	      for (j = 2; j < c.length; j += 2) {
	        x = parseFloat(c[j]);
	        y = parseFloat(c[j + 1]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	        x = x0;
	        y = y0;
	      }
	    }
	    if (parts[i].charAt(0) == "m") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      x = x ? x + parseFloat(c[0]) : parseFloat(c[0]);
	      y = y ? y + parseFloat(c[1]) : parseFloat(c[1]);
	      x0 = x;
	      y0 = y;
	      ctx.moveTo(x, y);
	      for (j = 2; j < c.length; j += 2) {
	        x += parseFloat(c[j]);
	        y += parseFloat(c[j + 1]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	        x = x0;
	        y = y0;
	      }
	    }
	    if (parts[i].charAt(0) == "L") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j += 2) {
	        x = parseFloat(c[j]);
	        y = parseFloat(c[j + 1]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	        x = x0;
	        y = y0;
	      }
	    }
	    if (parts[i].charAt(0) == "l") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j += 2) {
	        x += parseFloat(c[j]);
	        y += parseFloat(c[j + 1]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "C") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j += 6) {
	        x1 = parseFloat(c[j]);
	        y1 = parseFloat(c[j + 1]);
	        x2 = parseFloat(c[j + 2]);
	        y2 = parseFloat(c[j + 3]);
	        x = parseFloat(c[j + 4]);
	        y = parseFloat(c[j + 5]);
	        ctx.bezierCurveTo(x1, y1, x2, y2, x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "c") {
	      c = parts[i].match(/[-\d].*[\d]/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j += 6) {
	        x1 = x + parseFloat(c[j]);
	        y1 = y + parseFloat(c[j + 1]);
	        x2 = x + parseFloat(c[j + 2]);
	        y2 = y + parseFloat(c[j + 3]);
	        x = x + parseFloat(c[j + 4]);
	        y = y + parseFloat(c[j + 5]);
	        ctx.bezierCurveTo(x1, y1, x2, y2, x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "H") {
	      c = parts[i].match(/[-\d](.*[\d])?/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j++) {
	        x = parseFloat(c[j]);
	        //y = parseFloat(c[j+5]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "h") {
	      c = parts[i].match(/[-\d](.*[\d])?/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j++) {
	        x += parseFloat(c[j]);
	        //y = parseFloat(c[j+5]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "V") {
	      c = parts[i].match(/[-\d](.*[\d])?/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j++) {
	        //x = parseFloat(c[j]);
	        y = parseFloat(c[j]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	    if (parts[i].charAt(0) == "v") {
	      c = parts[i].match(/[-\d](.*[\d])?/)[0].split(/[\s,]/g);
	      for (j = 0; j < c.length; j++) {
	        //x = parseFloat(c[j]);
	        y += parseFloat(c[j]);
	        ctx.lineTo(x, y);
	      }
	      if (
	        parts[i]
	          .replace(/\s/g, "")
	          .substr(-1, 1)
	          .toUpperCase() == "Z"
	      ) {
	        ctx.closePath();
	      }
	    }
	  }
	}

	/* ***************************************************************************************
	Creating the base of milsymbol
	******************************************************************************************
	To import all and have the same functionality as ordinary milsymbol, do the following:
	(Or just import the things that you need)
	*/


	ms.addIcons(app6b);
	ms.addIcons(std2525b);
	ms.addIcons(std2525c);
	ms.addIcons(app6d);
	ms.addIcons(std2525d);
	ms.addIcons(std2525e);
	ms.Path2D = path2d;

	function downloadLink(link) {
	  console.log("download");
	  link.click();
	}

	async function milsymbolBatch(e) {
	  let format = document.getElementById("format").value;

	  let files = e.target.files;
	  let file_i = files.length - 1;
	  const file = files[file_i];
	  const data = await file.arrayBuffer();
	  const workbook = readSync(data);

	  let result = {};
	  workbook.SheetNames.forEach(function (sheetName) {
	    let roa = utils.sheet_to_json(workbook.Sheets[sheetName]);
	    if (roa.length) result[sheetName] = roa;
	  });
	  let i = 0;
	  for (let key in result) {
	    let sheet = result[key];
	    for (let row in sheet) {
	      let sym = new ms.Symbol(sheet[row]);
	      if (!sym.isValid()) continue;
	      let link = document.createElement("a");
	      link.href =
	        format == "png" ? sym.asCanvas().toDataURL() : sym.toDataURL();
	      link.download =
	        sym.options.sidc +
	        "_" +
	        sheet[row].__rowNum__ +
	        "_" +
	        (sheet[row].uniqueDesignation || "") +
	        "." +
	        format;
	      i++;
	      window.setTimeout(downloadLink, 150 * i, link);
	    }
	  }
	}

	return milsymbolBatch;

})();
